
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000228c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a4  08022a88  08022a88  00032a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023b2c  08023b2c  0004048c  2**0
                  CONTENTS
  4 .ARM          00000000  08023b2c  08023b2c  0004048c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08023b2c  08023b2c  0004048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023b2c  08023b2c  00033b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023b30  08023b30  00033b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000048c  20000000  08023b34  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0004048c  2**0
                  CONTENTS
 10 .bss          0001cfe8  20000490  20000490  00040490  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001d478  2001d478  00040490  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004048c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007a8a9  00000000  00000000  000404bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000af6b  00000000  00000000  000bad65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e58  00000000  00000000  000c5cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a58  00000000  00000000  000c9b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000489ca  00000000  00000000  000cd580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00056803  00000000  00000000  00115f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1e0  00000000  00000000  0016c74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002da92d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011a2c  00000000  00000000  002da980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000490 	.word	0x20000490
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08022a6c 	.word	0x08022a6c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000494 	.word	0x20000494
 80001fc:	08022a6c 	.word	0x08022a6c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f01e fc63 	bl	801f61c <json_set_allocation_functions>
  JSON_free_function = free_function;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HSD_JSON_set_allocation_functions+0x24>)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6013      	str	r3, [r2, #0]
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200004ac 	.word	0x200004ac

08000d6c <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HSD_JSON_free+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200004ac 	.word	0x200004ac

08000d8c <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f875 	bl	8000e90 <get_JSON_from_Device>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HSD_JSON_serialize_DeviceInfo>:

int32_t HSD_JSON_serialize_DeviceInfo(COM_DeviceDescriptor_t *DeviceInfo, char **SerializedJSON)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  return get_JSON_from_DeviceInfo(DeviceInfo, SerializedJSON);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f8e1 	bl	8000f84 <get_JSON_from_DeviceInfo>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HSD_JSON_serialize_SensorDescriptor>:
{
  return get_JSON_from_Sensor(Sensor, SerializedJSON);
}

int32_t HSD_JSON_serialize_SensorDescriptor(COM_SensorDescriptor_t *SensorDescriptor, char **SerializedJSON)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorDescriptor(SensorDescriptor, SerializedJSON);
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f8f4 	bl	8000fc6 <get_JSON_from_SensorDescriptor>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HSD_JSON_serialize_SensorStatus>:

int32_t HSD_JSON_serialize_SensorStatus(COM_SensorStatus_t *SensorStatus, char **SerializedJSON)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorStatus(SensorStatus, SerializedJSON);
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f907 	bl	8001008 <get_JSON_from_SensorStatus>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HSD_JSON_serialize_SubSensorDescriptor>:

int32_t HSD_JSON_serialize_SubSensorDescriptor(COM_SubSensorDescriptor_t *SubSensorDescriptor, char **SerializedJSON)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorDescriptor(SubSensorDescriptor, SerializedJSON);
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f91a 	bl	800104a <get_JSON_from_SubSensorDescriptor>
 8000e16:	4603      	mov	r3, r0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HSD_JSON_serialize_SubSensorStatus>:

int32_t HSD_JSON_serialize_SubSensorStatus(COM_SubSensorStatus_t *SubSensorStatus, char **SerializedJSON)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f92d 	bl	800108c <get_JSON_from_SubSensorStatus>
 8000e32:	4603      	mov	r3, r0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HSD_JSON_parse_Device>:

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f941 	bl	80010d0 <parse_Device_from_JSON>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HSD_JSON_parse_Command>:

int32_t HSD_JSON_parse_Command(char *SerializedJSON, COM_Command_t *Command)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  return parse_Command_from_JSON(SerializedJSON, Command);
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f987 	bl	8001178 <parse_Command_from_JSON>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HSD_JSON_parse_Status>:

int32_t HSD_JSON_parse_Status(char *SerializedJSON, COM_SensorStatus_t *SensorStatus)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  return parse_Status_from_JSON(SerializedJSON, SensorStatus);
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fa75 	bl	8001370 <parse_Status_from_JSON>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <get_JSON_from_Device>:


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 8000e9e:	f01e f815 	bl	801eecc <json_value_init_object>
 8000ea2:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 8000ea4:	69f8      	ldr	r0, [r7, #28]
 8000ea6:	f01d ff7e 	bl	801eda6 <json_value_get_object>
 8000eaa:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4930      	ldr	r1, [pc, #192]	; (8000f74 <get_JSON_from_Device+0xe4>)
 8000eb2:	69b8      	ldr	r0, [r7, #24]
 8000eb4:	f01e fb44 	bl	801f540 <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3315      	adds	r3, #21
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	492e      	ldr	r1, [pc, #184]	; (8000f78 <get_JSON_from_Device+0xe8>)
 8000ec0:	69b8      	ldr	r0, [r7, #24]
 8000ec2:	f01e fb3d 	bl	801f540 <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb42 	bl	8000554 <__aeabi_ui2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	ec43 2b10 	vmov	d0, r2, r3
 8000ed8:	4928      	ldr	r1, [pc, #160]	; (8000f7c <get_JSON_from_Device+0xec>)
 8000eda:	69b8      	ldr	r0, [r7, #24]
 8000edc:	f01e fb54 	bl	801f588 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8000ee0:	f01e f820 	bl	801ef24 <json_value_init_array>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4925      	ldr	r1, [pc, #148]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000eea:	69b8      	ldr	r0, [r7, #24]
 8000eec:	f01e fa9b 	bl	801f426 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8000ef0:	4923      	ldr	r1, [pc, #140]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000ef2:	69b8      	ldr	r0, [r7, #24]
 8000ef4:	f01d fe8c 	bl	801ec10 <json_object_dotget_array>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	e013      	b.n	8000f28 <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8000f00:	f01d ffe4 	bl	801eecc <json_value_init_object>
 8000f04:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	330a      	adds	r3, #10
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fb9d 	bl	8001654 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f01e f9ed 	bl	801f2fc <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	3301      	adds	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3e6      	bcc.n	8000f00 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10a      	bne.n	8000f4e <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8000f38:	69f8      	ldr	r0, [r7, #28]
 8000f3a:	f01e f99f 	bl	801f27c <json_serialize_to_string_pretty>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8000f44:	69f8      	ldr	r0, [r7, #28]
 8000f46:	f01e f955 	bl	801f1f4 <json_serialization_size_pretty>
 8000f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8000f4c:	e009      	b.n	8000f62 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8000f4e:	69f8      	ldr	r0, [r7, #28]
 8000f50:	f01e f91e 	bl	801f190 <json_serialize_to_string>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 8000f5a:	69f8      	ldr	r0, [r7, #28]
 8000f5c:	f01e f8d4 	bl	801f108 <json_serialization_size>
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8000f62:	69f8      	ldr	r0, [r7, #28]
 8000f64:	f01d ff84 	bl	801ee70 <json_value_free>
  
  return size;    
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08022a88 	.word	0x08022a88
 8000f78:	08022aa8 	.word	0x08022aa8
 8000f7c:	08022ac0 	.word	0x08022ac0
 8000f80:	08022adc 	.word	0x08022adc

08000f84 <get_JSON_from_DeviceInfo>:


static int32_t get_JSON_from_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, char **serialized_string)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000f92:	f01d ff9b 	bl	801eecc <json_value_init_object>
 8000f96:	60b8      	str	r0, [r7, #8]
  create_JSON_DeviceInfo(device_descriptor, tempJSON);
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fb2c 	bl	80015f8 <create_JSON_DeviceInfo>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f01e f8f5 	bl	801f190 <json_serialize_to_string>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f01e f8ab 	bl	801f108 <json_serialization_size>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f01d ff5a 	bl	801ee70 <json_value_free>
  
  return size;    
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <get_JSON_from_SensorDescriptor>:
  return size;     
}


static int32_t get_JSON_from_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, char **serialized_string)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000fd4:	f01d ff7a 	bl	801eecc <json_value_init_object>
 8000fd8:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorDescriptor(sensor_descriptor, tempJSON);
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fbdd 	bl	800179c <create_JSON_SensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f01e f8d4 	bl	801f190 <json_serialize_to_string>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f01e f88a 	bl	801f108 <json_serialization_size>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f01d ff39 	bl	801ee70 <json_value_free>
  
  return size;    
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <get_JSON_from_SensorStatus>:


static int32_t get_JSON_from_SensorStatus(COM_SensorStatus_t *sensor_status, char **serialized_string)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001016:	f01d ff59 	bl	801eecc <json_value_init_object>
 800101a:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorStatus(sensor_status, tempJSON);
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fcb4 	bl	800198c <create_JSON_SensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f01e f8b3 	bl	801f190 <json_serialize_to_string>
 800102a:	4602      	mov	r2, r0
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f01e f869 	bl	801f108 <json_serialization_size>
 8001036:	4603      	mov	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f01d ff18 	bl	801ee70 <json_value_free>
  
  return size;  
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <get_JSON_from_SubSensorDescriptor>:


static int32_t get_JSON_from_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, char **serialized_string)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001058:	f01d ff38 	bl	801eecc <json_value_init_object>
 800105c:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorDescriptor(sub_sensor_descriptor, tempJSON);
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fd13 	bl	8001a8c <create_JSON_SubSensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f01e f892 	bl	801f190 <json_serialize_to_string>
 800106c:	4602      	mov	r2, r0
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f01e f848 	bl	801f108 <json_serialization_size>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f01d fef7 	bl	801ee70 <json_value_free>
  
  return size;  
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <get_JSON_from_SubSensorStatus>:


static int32_t get_JSON_from_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, char **serialized_string)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 800109a:	f01d ff17 	bl	801eecc <json_value_init_object>
 800109e:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorStatus(sub_sensor_status, tempJSON);
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fdbc 	bl	8001c20 <create_JSON_SubSensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f01e f871 	bl	801f190 <json_serialize_to_string>
 80010ae:	4602      	mov	r2, r0
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f01e f827 	bl	801f108 <json_serialization_size>
 80010ba:	4603      	mov	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f01d fed6 	bl	801ee70 <json_value_free>
  
  return size;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <parse_Device_from_JSON>:


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f01d fd04 	bl	801eae8 <json_parse_string>
 80010e0:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80010e2:	6a38      	ldr	r0, [r7, #32]
 80010e4:	f01d fe5f 	bl	801eda6 <json_value_get_object>
 80010e8:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f01d fdeb 	bl	801ecc8 <json_object_dothas_value>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d033      	beq.n	8001160 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80010f8:	491d      	ldr	r1, [pc, #116]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f01d fd88 	bl	801ec10 <json_object_dotget_array>
 8001100:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f01d fe20 	bl	801ed48 <json_array_get_count>
 8001108:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	e023      	b.n	8001158 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001112:	69b8      	ldr	r0, [r7, #24]
 8001114:	f01d fe06 	bl	801ed24 <json_array_get_object>
 8001118:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f01d fdd3 	bl	801ecc8 <json_object_dothas_value>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d014      	beq.n	8001152 <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001128:	4912      	ldr	r1, [pc, #72]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f01d fd00 	bl	801eb30 <json_object_get_value>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f01e f82c 	bl	801f190 <json_serialize_to_string>
 8001138:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f90f 	bl	8001370 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3d7      	bcc.n	8001110 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001160:	6a38      	ldr	r0, [r7, #32]
 8001162:	f01d fe85 	bl	801ee70 <json_value_free>
  
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08022adc 	.word	0x08022adc
 8001174:	08022aec 	.word	0x08022aec

08001178 <parse_Command_from_JSON>:

static int32_t parse_Command_from_JSON(char *SerializedJSON, COM_Command_t * outCommand)
{  
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f01d fcb0 	bl	801eae8 <json_parse_string>
 8001188:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f01d fe0b 	bl	801eda6 <json_value_get_object>
 8001190:	60b8      	str	r0, [r7, #8]
  
  if (json_object_dothas_value(JSON_ParseHandler,"command"))
 8001192:	496b      	ldr	r1, [pc, #428]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f01d fd97 	bl	801ecc8 <json_object_dothas_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d043      	beq.n	8001228 <parse_Command_from_JSON+0xb0>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"GET") == 0)
 80011a0:	4967      	ldr	r1, [pc, #412]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f01d fd0a 	bl	801ebbc <json_object_dotget_string>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4966      	ldr	r1, [pc, #408]	; (8001344 <parse_Command_from_JSON+0x1cc>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f827 	bl	8000200 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <parse_Command_from_JSON+0x48>
    {
      outCommand->command = COM_COMMAND_GET;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e036      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SET") == 0)
 80011c0:	495f      	ldr	r1, [pc, #380]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f01d fcfa 	bl	801ebbc <json_object_dotget_string>
 80011c8:	4603      	mov	r3, r0
 80011ca:	495f      	ldr	r1, [pc, #380]	; (8001348 <parse_Command_from_JSON+0x1d0>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f817 	bl	8000200 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <parse_Command_from_JSON+0x68>
    {
      outCommand->command = COM_COMMAND_SET;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e026      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"START") == 0)
 80011e0:	4957      	ldr	r1, [pc, #348]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f01d fcea 	bl	801ebbc <json_object_dotget_string>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4958      	ldr	r1, [pc, #352]	; (800134c <parse_Command_from_JSON+0x1d4>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f807 	bl	8000200 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <parse_Command_from_JSON+0x88>
    {
      outCommand->command = COM_COMMAND_START;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e016      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"STOP") == 0)
 8001200:	494f      	ldr	r1, [pc, #316]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f01d fcda 	bl	801ebbc <json_object_dotget_string>
 8001208:	4603      	mov	r3, r0
 800120a:	4951      	ldr	r1, [pc, #324]	; (8001350 <parse_Command_from_JSON+0x1d8>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe fff7 	bl	8000200 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <parse_Command_from_JSON+0xa8>
    {
      outCommand->command = COM_COMMAND_STOP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e006      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else
    {
      outCommand->command = COM_COMMAND_ERROR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e002      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
  }
  else
  {
    return COM_COMMAND_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e083      	b.n	8001336 <parse_Command_from_JSON+0x1be>
  }
  
  if (json_object_dothas_value(JSON_ParseHandler,"request"))
 800122e:	4949      	ldr	r1, [pc, #292]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f01d fd49 	bl	801ecc8 <json_object_dothas_value>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <parse_Command_from_JSON+0x14c>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"device") == 0)
 800123c:	4945      	ldr	r1, [pc, #276]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f01d fcbc 	bl	801ebbc <json_object_dotget_string>
 8001244:	4603      	mov	r3, r0
 8001246:	4944      	ldr	r1, [pc, #272]	; (8001358 <parse_Command_from_JSON+0x1e0>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffd9 	bl	8000200 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <parse_Command_from_JSON+0xe4>
    {
      outCommand->request = COM_REQUEST_DEVICE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e036      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"deviceInfo") == 0)
 800125c:	493d      	ldr	r1, [pc, #244]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f01d fcac 	bl	801ebbc <json_object_dotget_string>
 8001264:	4603      	mov	r3, r0
 8001266:	493d      	ldr	r1, [pc, #244]	; (800135c <parse_Command_from_JSON+0x1e4>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffc9 	bl	8000200 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <parse_Command_from_JSON+0x104>
    {
      outCommand->request = COM_REQUEST_DEVICE_INFO;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
 800127a:	e026      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"descriptor") == 0)
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f01d fc9c 	bl	801ebbc <json_object_dotget_string>
 8001284:	4603      	mov	r3, r0
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <parse_Command_from_JSON+0x1e8>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffb9 	bl	8000200 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <parse_Command_from_JSON+0x124>
    {
      outCommand->request = COM_REQUEST_DESCRIPTOR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	705a      	strb	r2, [r3, #1]
 800129a:	e016      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"status") == 0)
 800129c:	492d      	ldr	r1, [pc, #180]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f01d fc8c 	bl	801ebbc <json_object_dotget_string>
 80012a4:	4603      	mov	r3, r0
 80012a6:	492f      	ldr	r1, [pc, #188]	; (8001364 <parse_Command_from_JSON+0x1ec>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffa9 	bl	8000200 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <parse_Command_from_JSON+0x144>
    {
      outCommand->request = COM_REQUEST_STATUS;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2203      	movs	r2, #3
 80012b8:	705a      	strb	r2, [r3, #1]
 80012ba:	e006      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else
    {
      outCommand->request = COM_COMMAND_ERROR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	705a      	strb	r2, [r3, #1]
 80012c2:	e002      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
  }
  else
  {
    outCommand->request = COM_COMMAND_ERROR;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	705a      	strb	r2, [r3, #1]
  }  
  
  if (json_object_dothas_value(JSON_ParseHandler,"sensorId"))
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f01d fcfb 	bl	801ecc8 <json_object_dothas_value>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <parse_Command_from_JSON+0x17e>
  {
    outCommand->sensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "sensorId");
 80012d8:	4923      	ldr	r1, [pc, #140]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012da:	68b8      	ldr	r0, [r7, #8]
 80012dc:	f01d fc80 	bl	801ebe0 <json_object_dotget_number>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc5e 	bl	8000ba8 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	709a      	strb	r2, [r3, #2]
 80012f4:	e002      	b.n	80012fc <parse_Command_from_JSON+0x184>
  }
  else
  {
    outCommand->sensorId = COM_COMMAND_ERROR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	709a      	strb	r2, [r3, #2]
  }    
  
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 80012fc:	491b      	ldr	r1, [pc, #108]	; (800136c <parse_Command_from_JSON+0x1f4>)
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f01d fce2 	bl	801ecc8 <json_object_dothas_value>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <parse_Command_from_JSON+0x1b0>
  {
    outCommand->subSensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "subSensorId");
 800130a:	4918      	ldr	r1, [pc, #96]	; (800136c <parse_Command_from_JSON+0x1f4>)
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f01d fc67 	bl	801ebe0 <json_object_dotget_number>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc45 	bl	8000ba8 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	b25a      	sxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	70da      	strb	r2, [r3, #3]
 8001326:	e002      	b.n	800132e <parse_Command_from_JSON+0x1b6>
  }
  else
  {
    outCommand->subSensorId = COM_COMMAND_ERROR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	22ff      	movs	r2, #255	; 0xff
 800132c:	70da      	strb	r2, [r3, #3]
  }   
  
  json_value_free(tempJSON);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f01d fd9e 	bl	801ee70 <json_value_free>
  
  return 0;  
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08022afc 	.word	0x08022afc
 8001344:	08022b04 	.word	0x08022b04
 8001348:	08022b08 	.word	0x08022b08
 800134c:	08022b0c 	.word	0x08022b0c
 8001350:	08022b14 	.word	0x08022b14
 8001354:	08022b1c 	.word	0x08022b1c
 8001358:	08022b24 	.word	0x08022b24
 800135c:	08022b2c 	.word	0x08022b2c
 8001360:	08022b38 	.word	0x08022b38
 8001364:	08022b44 	.word	0x08022b44
 8001368:	08022b4c 	.word	0x08022b4c
 800136c:	08022b58 	.word	0x08022b58

08001370 <parse_Status_from_JSON>:
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f01d fbb4 	bl	801eae8 <json_parse_string>
 8001380:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001382:	69b8      	ldr	r0, [r7, #24]
 8001384:	f01d fd0f 	bl	801eda6 <json_value_get_object>
 8001388:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800138a:	4990      	ldr	r1, [pc, #576]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f01d fc9b 	bl	801ecc8 <json_object_dothas_value>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001398:	498c      	ldr	r1, [pc, #560]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f01d fc20 	bl	801ebe0 <json_object_dotget_number>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc46 	bl	8000c38 <__aeabi_d2f>
 80013ac:	4602      	mov	r2, r0
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80013b2:	4987      	ldr	r1, [pc, #540]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f01d fc87 	bl	801ecc8 <json_object_dothas_value>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00d      	beq.n	80013dc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80013c0:	4983      	ldr	r1, [pc, #524]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f01d fc0c 	bl	801ebe0 <json_object_dotget_number>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc12 	bl	8000bf8 <__aeabi_d2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80013dc:	497d      	ldr	r1, [pc, #500]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f01d fc72 	bl	801ecc8 <json_object_dothas_value>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80013ea:	497a      	ldr	r1, [pc, #488]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f01d fbf7 	bl	801ebe0 <json_object_dotget_number>
 80013f2:	ec53 2b10 	vmov	r2, r3, d0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbfd 	bl	8000bf8 <__aeabi_d2uiz>
 80013fe:	4602      	mov	r2, r0
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001404:	4974      	ldr	r1, [pc, #464]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f01d fc5e 	bl	801ecc8 <json_object_dothas_value>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001412:	4971      	ldr	r1, [pc, #452]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f01d fbe3 	bl	801ebe0 <json_object_dotget_number>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbc1 	bl	8000ba8 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	b21a      	sxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800142e:	496b      	ldr	r1, [pc, #428]	; (80015dc <parse_Status_from_JSON+0x26c>)
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f01d fc49 	bl	801ecc8 <json_object_dothas_value>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800143c:	4967      	ldr	r1, [pc, #412]	; (80015dc <parse_Status_from_JSON+0x26c>)
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f01d fbce 	bl	801ebe0 <json_object_dotget_number>
 8001444:	ec53 2b10 	vmov	r2, r3, d0
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbd4 	bl	8000bf8 <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001458:	4961      	ldr	r1, [pc, #388]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f01d fc34 	bl	801ecc8 <json_object_dothas_value>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001466:	495e      	ldr	r1, [pc, #376]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f01d fbe3 	bl	801ec34 <json_object_dotget_boolean>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d103      	bne.n	800147c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	739a      	strb	r2, [r3, #14]
 800147a:	e002      	b.n	8001482 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001482:	4958      	ldr	r1, [pc, #352]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f01d fc1f 	bl	801ecc8 <json_object_dothas_value>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8094 	beq.w	80015ba <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001492:	4954      	ldr	r1, [pc, #336]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f01d fbbb 	bl	801ec10 <json_object_dotget_array>
 800149a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800149c:	6938      	ldr	r0, [r7, #16]
 800149e:	f01d fc53 	bl	801ed48 <json_array_get_count>
 80014a2:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e082      	b.n	80015b0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	6938      	ldr	r0, [r7, #16]
 80014ae:	f01d fc39 	bl	801ed24 <json_array_get_object>
 80014b2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80014b4:	494c      	ldr	r1, [pc, #304]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f01d fc06 	bl	801ecc8 <json_object_dothas_value>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80014c2:	4949      	ldr	r1, [pc, #292]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f01d fb8b 	bl	801ebe0 <json_object_dotget_number>
 80014ca:	ec53 2b10 	vmov	r2, r3, d0
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb69 	bl	8000ba8 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e003      	b.n	80014e8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014e6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80014e8:	4941      	ldr	r1, [pc, #260]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f01d fbec 	bl	801ecc8 <json_object_dothas_value>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d014      	beq.n	8001520 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80014f6:	493e      	ldr	r1, [pc, #248]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f01d fb71 	bl	801ebe0 <json_object_dotget_number>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	461c      	mov	r4, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4601      	mov	r1, r0
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4423      	add	r3, r4
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	331c      	adds	r3, #28
 800151e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001520:	4934      	ldr	r1, [pc, #208]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f01d fbd0 	bl	801ecc8 <json_object_dothas_value>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d014      	beq.n	8001558 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f01d fb55 	bl	801ebe0 <json_object_dotget_number>
 8001536:	ec51 0b10 	vmov	r0, r1, d0
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <parse_Status_from_JSON+0x27c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	461c      	mov	r4, r3
 8001542:	f7ff fb79 	bl	8000c38 <__aeabi_d2f>
 8001546:	4601      	mov	r1, r0
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4423      	add	r3, r4
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3320      	adds	r3, #32
 8001556:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f01d fbb4 	bl	801ecc8 <json_object_dothas_value>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d021      	beq.n	80015aa <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001566:	491e      	ldr	r1, [pc, #120]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f01d fb63 	bl	801ec34 <json_object_dotget_boolean>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10d      	bne.n	8001590 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3324      	adds	r3, #36	; 0x24
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e00c      	b.n	80015aa <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3324      	adds	r3, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f4ff af78 	bcc.w	80014aa <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f01d fc58 	bl	801ee70 <json_value_free>
  
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08022b64 	.word	0x08022b64
 80015d0:	08022b68 	.word	0x08022b68
 80015d4:	08022b7c 	.word	0x08022b7c
 80015d8:	08022b90 	.word	0x08022b90
 80015dc:	08022ba4 	.word	0x08022ba4
 80015e0:	08022bb4 	.word	0x08022bb4
 80015e4:	08022bc0 	.word	0x08022bc0
 80015e8:	08022bd0 	.word	0x08022bd0
 80015ec:	20000000 	.word	0x20000000
 80015f0:	08022bd4 	.word	0x08022bd4
 80015f4:	08022bd8 	.word	0x08022bd8

080015f8 <create_JSON_DeviceInfo>:

static void create_JSON_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, JSON_Value *tempJSON)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_DeviceHandler = json_value_get_object(tempJSON);
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f01d fbcf 	bl	801eda6 <json_value_get_object>
 8001608:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_string(JSON_DeviceHandler, "serialNumber", device_descriptor->serialNumber);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	461a      	mov	r2, r3
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <create_JSON_DeviceInfo+0x50>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f01d ff95 	bl	801f540 <json_object_dotset_string>
  json_object_dotset_string(JSON_DeviceHandler, "alias", device_descriptor->alias);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3315      	adds	r3, #21
 800161a:	461a      	mov	r2, r3
 800161c:	490b      	ldr	r1, [pc, #44]	; (800164c <create_JSON_DeviceInfo+0x54>)
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f01d ff8e 	bl	801f540 <json_object_dotset_string>
  json_object_dotset_number(JSON_DeviceHandler, "nSensor", device_descriptor->nSensor);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff93 	bl	8000554 <__aeabi_ui2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b10 	vmov	d0, r2, r3
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <create_JSON_DeviceInfo+0x58>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f01d ffa5 	bl	801f588 <json_object_dotset_number>
  
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08022be4 	.word	0x08022be4
 800164c:	08022bf4 	.word	0x08022bf4
 8001650:	08022bfc 	.word	0x08022bfc

08001654 <create_JSON_Sensor>:


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f01d fb96 	bl	801eda6 <json_value_get_object>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 800167c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff67 	bl	8000554 <__aeabi_ui2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	ec43 2b10 	vmov	d0, r2, r3
 800168e:	493e      	ldr	r1, [pc, #248]	; (8001788 <create_JSON_Sensor+0x134>)
 8001690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001692:	f01d ff79 	bl	801f588 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 8001696:	f01d fc19 	bl	801eecc <json_value_init_object>
 800169a:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	493b      	ldr	r1, [pc, #236]	; (800178c <create_JSON_Sensor+0x138>)
 80016a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a2:	f01d fe6a 	bl	801f37a <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f876 	bl	800179c <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 80016b0:	f01d fc38 	bl	801ef24 <json_value_init_array>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4935      	ldr	r1, [pc, #212]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016bc:	f01d feb3 	bl	801f426 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f01d faa4 	bl	801ec10 <json_object_dotget_array>
 80016c8:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	e015      	b.n	80016fc <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 80016d0:	f01d fbfc 	bl	801eecc <json_value_init_object>
 80016d4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	2254      	movs	r2, #84	; 0x54
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	3358      	adds	r3, #88	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f9cf 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	69f8      	ldr	r0, [r7, #28]
 80016f2:	f01d fe03 	bl	801f2fc <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	3301      	adds	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e4      	bcc.n	80016d0 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 8001706:	f01d fbe1 	bl	801eecc <json_value_init_object>
 800170a:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <create_JSON_Sensor+0x140>)
 8001710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001712:	f01d fe32 	bl	801f37a <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f934 	bl	800198c <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 8001724:	f01d fbfe 	bl	801ef24 <json_value_init_array>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	491a      	ldr	r1, [pc, #104]	; (8001798 <create_JSON_Sensor+0x144>)
 800172e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001730:	f01d fe79 	bl	801f426 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 8001734:	4918      	ldr	r1, [pc, #96]	; (8001798 <create_JSON_Sensor+0x144>)
 8001736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001738:	f01d fa6a 	bl	801ec10 <json_object_dotget_array>
 800173c:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001742:	e017      	b.n	8001774 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 8001744:	f01d fbc2 	bl	801eecc <json_value_init_object>
 8001748:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	3308      	adds	r3, #8
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fa5d 	bl	8001c20 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f01d fdc7 	bl	801f2fc <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	3301      	adds	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d3e2      	bcc.n	8001744 <create_JSON_Sensor+0xf0>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	08022bd0 	.word	0x08022bd0
 800178c:	08022c04 	.word	0x08022c04
 8001790:	08022c18 	.word	0x08022c18
 8001794:	08022aec 	.word	0x08022aec
 8001798:	08022c40 	.word	0x08022c40

0800179c <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f01d fafb 	bl	801eda6 <json_value_get_object>
 80017b0:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	4965      	ldr	r1, [pc, #404]	; (8001950 <create_JSON_SensorDescriptor+0x1b4>)
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f01d fec0 	bl	801f540 <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7c5b      	ldrb	r3, [r3, #17]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d83b      	bhi.n	8001840 <create_JSON_SensorDescriptor+0xa4>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <create_JSON_SensorDescriptor+0x34>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	08001805 	.word	0x08001805
 80017dc:	08001811 	.word	0x08001811
 80017e0:	0800181d 	.word	0x0800181d
 80017e4:	08001829 	.word	0x08001829
 80017e8:	08001835 	.word	0x08001835
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 80017ec:	4a59      	ldr	r2, [pc, #356]	; (8001954 <create_JSON_SensorDescriptor+0x1b8>)
 80017ee:	495a      	ldr	r1, [pc, #360]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017f0:	69b8      	ldr	r0, [r7, #24]
 80017f2:	f01d fea5 	bl	801f540 <json_object_dotset_string>
    break;
 80017f6:	e029      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <create_JSON_SensorDescriptor+0x1c0>)
 80017fa:	4957      	ldr	r1, [pc, #348]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017fc:	69b8      	ldr	r0, [r7, #24]
 80017fe:	f01d fe9f 	bl	801f540 <json_object_dotset_string>
    break;
 8001802:	e023      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001804:	4a56      	ldr	r2, [pc, #344]	; (8001960 <create_JSON_SensorDescriptor+0x1c4>)
 8001806:	4954      	ldr	r1, [pc, #336]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f01d fe99 	bl	801f540 <json_object_dotset_string>
    break;
 800180e:	e01d      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001812:	4951      	ldr	r1, [pc, #324]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001814:	69b8      	ldr	r0, [r7, #24]
 8001816:	f01d fe93 	bl	801f540 <json_object_dotset_string>
    break;
 800181a:	e017      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <create_JSON_SensorDescriptor+0x1cc>)
 800181e:	494e      	ldr	r1, [pc, #312]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001820:	69b8      	ldr	r0, [r7, #24]
 8001822:	f01d fe8d 	bl	801f540 <json_object_dotset_string>
    break;
 8001826:	e011      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 8001828:	4a50      	ldr	r2, [pc, #320]	; (800196c <create_JSON_SensorDescriptor+0x1d0>)
 800182a:	494b      	ldr	r1, [pc, #300]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 800182c:	69b8      	ldr	r0, [r7, #24]
 800182e:	f01d fe87 	bl	801f540 <json_object_dotset_string>
    break;
 8001832:	e00b      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <create_JSON_SensorDescriptor+0x1d4>)
 8001836:	4948      	ldr	r1, [pc, #288]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001838:	69b8      	ldr	r0, [r7, #24]
 800183a:	f01d fe81 	bl	801f540 <json_object_dotset_string>
    break;
 800183e:	e005      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <create_JSON_SensorDescriptor+0x1d8>)
 8001842:	4945      	ldr	r1, [pc, #276]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001844:	69b8      	ldr	r0, [r7, #24]
 8001846:	f01d fe7b 	bl	801f540 <json_object_dotset_string>
    break;
 800184a:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe7e 	bl	8000554 <__aeabi_ui2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	ec43 2b10 	vmov	d0, r2, r3
 8001860:	4945      	ldr	r1, [pc, #276]	; (8001978 <create_JSON_SensorDescriptor+0x1dc>)
 8001862:	69b8      	ldr	r0, [r7, #24]
 8001864:	f01d fe90 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe70 	bl	8000554 <__aeabi_ui2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	ec43 2b10 	vmov	d0, r2, r3
 800187c:	493f      	ldr	r1, [pc, #252]	; (800197c <create_JSON_SensorDescriptor+0x1e0>)
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f01d fe82 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001884:	4a37      	ldr	r2, [pc, #220]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <create_JSON_SensorDescriptor+0x1e4>)
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f01d fe59 	bl	801f540 <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 800188e:	f01d fb49 	bl	801ef24 <json_value_init_array>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f01d fdc4 	bl	801f426 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 800189e:	4939      	ldr	r1, [pc, #228]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 80018a0:	69b8      	ldr	r0, [r7, #24]
 80018a2:	f01d f9b5 	bl	801ec10 <json_object_dotget_array>
 80018a6:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 80018a8:	e013      	b.n	80018d2 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3304      	adds	r3, #4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3304      	adds	r3, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b10 	vmov	d0, r2, r3
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f01d fd33 	bl	801f332 <json_array_append_number>
    ii++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3304      	adds	r3, #4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	dcde      	bgt.n	80018aa <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 80018ec:	f01d fb1a 	bl	801ef24 <json_value_init_array>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4924      	ldr	r1, [pc, #144]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	f01d fd95 	bl	801f426 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 80018fc:	4922      	ldr	r1, [pc, #136]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018fe:	69b8      	ldr	r0, [r7, #24]
 8001900:	f01d f986 	bl	801ec10 <json_object_dotget_array>
 8001904:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e015      	b.n	8001938 <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 800190c:	f01d fade 	bl	801eecc <json_value_init_object>
 8001910:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2254      	movs	r2, #84	; 0x54
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	3358      	adds	r3, #88	; 0x58
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8b1 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	6938      	ldr	r0, [r7, #16]
 800192e:	f01d fce5 	bl	801f2fc <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193e:	461a      	mov	r2, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4293      	cmp	r3, r2
 8001944:	d3e2      	bcc.n	800190c <create_JSON_SensorDescriptor+0x170>
  }  
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08022c60 	.word	0x08022c60
 8001954:	08022c68 	.word	0x08022c68
 8001958:	08022c70 	.word	0x08022c70
 800195c:	08022c7c 	.word	0x08022c7c
 8001960:	08022c84 	.word	0x08022c84
 8001964:	08022c90 	.word	0x08022c90
 8001968:	08022c98 	.word	0x08022c98
 800196c:	08022ca4 	.word	0x08022ca4
 8001970:	08022cac 	.word	0x08022cac
 8001974:	08022cb4 	.word	0x08022cb4
 8001978:	08022cb8 	.word	0x08022cb8
 800197c:	08022ccc 	.word	0x08022ccc
 8001980:	08022ce0 	.word	0x08022ce0
 8001984:	08022cf8 	.word	0x08022cf8
 8001988:	08022d04 	.word	0x08022d04

0800198c <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f01d fa05 	bl	801eda6 <json_value_get_object>
 800199c:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf8 	bl	8000598 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b10 	vmov	d0, r2, r3
 80019b0:	492e      	ldr	r1, [pc, #184]	; (8001a6c <create_JSON_SensorStatus+0xe0>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f01d fde8 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	4929      	ldr	r1, [pc, #164]	; (8001a70 <create_JSON_SensorStatus+0xe4>)
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f01d fddb 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	ec43 2b10 	vmov	d0, r2, r3
 80019e4:	4923      	ldr	r1, [pc, #140]	; (8001a74 <create_JSON_SensorStatus+0xe8>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f01d fdce 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b9b      	ldrb	r3, [r3, #14]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4921      	ldr	r1, [pc, #132]	; (8001a78 <create_JSON_SensorStatus+0xec>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f01d fded 	bl	801f5d4 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	899b      	ldrh	r3, [r3, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda8 	bl	8000554 <__aeabi_ui2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	491b      	ldr	r1, [pc, #108]	; (8001a7c <create_JSON_SensorStatus+0xf0>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f01d fdba 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8a1b      	ldrh	r3, [r3, #16]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9b 	bl	8000554 <__aeabi_ui2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b10 	vmov	d0, r2, r3
 8001a26:	4916      	ldr	r1, [pc, #88]	; (8001a80 <create_JSON_SensorStatus+0xf4>)
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f01d fdad 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd8e 	bl	8000554 <__aeabi_ui2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	ec43 2b10 	vmov	d0, r2, r3
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <create_JSON_SensorStatus+0xf8>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f01d fda0 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd90 	bl	8000574 <__aeabi_i2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	490a      	ldr	r1, [pc, #40]	; (8001a88 <create_JSON_SensorStatus+0xfc>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f01d fd92 	bl	801f588 <json_object_dotset_number>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08022b64 	.word	0x08022b64
 8001a70:	08022d18 	.word	0x08022d18
 8001a74:	08022d24 	.word	0x08022d24
 8001a78:	08022bb4 	.word	0x08022bb4
 8001a7c:	08022ba4 	.word	0x08022ba4
 8001a80:	08022b68 	.word	0x08022b68
 8001a84:	08022b7c 	.word	0x08022b7c
 8001a88:	08022b90 	.word	0x08022b90

08001a8c <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 8001a9a:	f01d fa17 	bl	801eecc <json_value_init_object>
 8001a9e:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001aa0:	6938      	ldr	r0, [r7, #16]
 8001aa2:	f01d f992 	bl	801edca <json_value_get_array>
 8001aa6:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f01d f97c 	bl	801eda6 <json_value_get_object>
 8001aae:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd4d 	bl	8000554 <__aeabi_ui2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b10 	vmov	d0, r2, r3
 8001ac2:	494a      	ldr	r1, [pc, #296]	; (8001bec <create_JSON_SubSensorDescriptor+0x160>)
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	f01d fd5f 	bl	801f588 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d83b      	bhi.n	8001b4c <create_JSON_SubSensorDescriptor+0xc0>
 8001ad4:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <create_JSON_SubSensorDescriptor+0x50>)
 8001ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ada:	bf00      	nop
 8001adc:	08001af9 	.word	0x08001af9
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b11 	.word	0x08001b11
 8001ae8:	08001b1d 	.word	0x08001b1d
 8001aec:	08001b29 	.word	0x08001b29
 8001af0:	08001b35 	.word	0x08001b35
 8001af4:	08001b41 	.word	0x08001b41
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <create_JSON_SubSensorDescriptor+0x164>)
 8001afa:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f01d fd1f 	bl	801f540 <json_object_dotset_string>
    break;
 8001b02:	e029      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <create_JSON_SubSensorDescriptor+0x16c>)
 8001b06:	493b      	ldr	r1, [pc, #236]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f01d fd19 	bl	801f540 <json_object_dotset_string>
    break;
 8001b0e:	e023      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 8001b10:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <create_JSON_SubSensorDescriptor+0x170>)
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f01d fd13 	bl	801f540 <json_object_dotset_string>
    break;
 8001b1a:	e01d      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 8001b1c:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <create_JSON_SubSensorDescriptor+0x174>)
 8001b1e:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f01d fd0d 	bl	801f540 <json_object_dotset_string>
    break;
 8001b26:	e017      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 8001b28:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <create_JSON_SubSensorDescriptor+0x178>)
 8001b2a:	4932      	ldr	r1, [pc, #200]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f01d fd07 	bl	801f540 <json_object_dotset_string>
    break;
 8001b32:	e011      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <create_JSON_SubSensorDescriptor+0x17c>)
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f01d fd01 	bl	801f540 <json_object_dotset_string>
    break;
 8001b3e:	e00b      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 8001b40:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <create_JSON_SubSensorDescriptor+0x180>)
 8001b42:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f01d fcfb 	bl	801f540 <json_object_dotset_string>
    break;
 8001b4a:	e005      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 8001b4c:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <create_JSON_SubSensorDescriptor+0x184>)
 8001b4e:	4929      	ldr	r1, [pc, #164]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f01d fcf5 	bl	801f540 <json_object_dotset_string>
    break;      
 8001b56:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf9 	bl	8000554 <__aeabi_ui2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	492a      	ldr	r1, [pc, #168]	; (8001c14 <create_JSON_SubSensorDescriptor+0x188>)
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f01d fd0b 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	461a      	mov	r2, r3
 8001b78:	4927      	ldr	r1, [pc, #156]	; (8001c18 <create_JSON_SubSensorDescriptor+0x18c>)
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f01d fce0 	bl	801f540 <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001b80:	f01d f9d0 	bl	801ef24 <json_value_init_array>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f01d fc4b 	bl	801f426 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001b90:	4922      	ldr	r1, [pc, #136]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f01d f83c 	bl	801ec10 <json_object_dotget_array>
 8001b98:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001b9a:	e013      	b.n	8001bc4 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcf4 	bl	8000598 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ec43 2b10 	vmov	d0, r2, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f01d fbba 	bl	801f332 <json_array_append_number>
    ii++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	dcde      	bgt.n	8001b9c <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001bde:	6938      	ldr	r0, [r7, #16]
 8001be0:	f01d f946 	bl	801ee70 <json_value_free>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08022bd0 	.word	0x08022bd0
 8001bf0:	08022d34 	.word	0x08022d34
 8001bf4:	08022d38 	.word	0x08022d38
 8001bf8:	08022d44 	.word	0x08022d44
 8001bfc:	08022d48 	.word	0x08022d48
 8001c00:	08022d50 	.word	0x08022d50
 8001c04:	08022d58 	.word	0x08022d58
 8001c08:	08022d60 	.word	0x08022d60
 8001c0c:	08022d64 	.word	0x08022d64
 8001c10:	08022cb4 	.word	0x08022cb4
 8001c14:	08022d68 	.word	0x08022d68
 8001c18:	08022d78 	.word	0x08022d78
 8001c1c:	08022d80 	.word	0x08022d80

08001c20 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f01d f8bb 	bl	801eda6 <json_value_get_object>
 8001c30:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fcae 	bl	8000598 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <create_JSON_SubSensorStatus+0x5c>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f01d fc9e 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fca1 	bl	8000598 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <create_JSON_SubSensorStatus+0x60>)
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f01d fc91 	bl	801f588 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4905      	ldr	r1, [pc, #20]	; (8001c84 <create_JSON_SubSensorStatus+0x64>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f01d fcb0 	bl	801f5d4 <json_object_dotset_boolean>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	08022bd4 	.word	0x08022bd4
 8001c80:	08022bd8 	.word	0x08022bd8
 8001c84:	08022bb4 	.word	0x08022bb4

08001c88 <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <COM_AddSensor+0x68>)
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001c94:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f01d fdb9 	bl	801f810 <calloc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	330a      	adds	r3, #10
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <COM_AddSensor+0x3c>
    return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e010      	b.n	8001ce6 <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	330a      	adds	r3, #10
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cde:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200004b0 	.word	0x200004b0

08001cf4 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <COM_GetDevice+0x10>)
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	200004b0 	.word	0x200004b0

08001d08 <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <COM_GetDeviceDescriptor+0x10>)
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	200004b0 	.word	0x200004b0

08001d1c <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <COM_GetSensor+0x24>)
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	685b      	ldr	r3, [r3, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004b0 	.word	0x200004b0

08001d44 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <COM_GetSensorDescriptor+0x24>)
 8001d52:	330a      	adds	r3, #10
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	685b      	ldr	r3, [r3, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200004b0 	.word	0x200004b0

08001d6c <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <COM_GetSensorStatus+0x28>)
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200004b0 	.word	0x200004b0

08001d98 <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <COM_GetSubSensorDescriptor+0x38>)
 8001dac:	330a      	adds	r3, #10
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	2154      	movs	r1, #84	; 0x54
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	3358      	adds	r3, #88	; 0x58
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200004b0 	.word	0x200004b0

08001dd4 <COM_GetSubSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorStatus_t * COM_GetSubSensorStatus(uint8_t sID, uint8_t ssID)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorStatus.subSensorStatus[ssID]);  
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <COM_GetSubSensorStatus+0x3c>)
 8001de8:	330a      	adds	r3, #10
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200004b0 	.word	0x200004b0

08001e14 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <COM_GetSubSensorNumber+0x28>)
 8001e22:	330a      	adds	r3, #10
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200004b0 	.word	0x200004b0

08001e40 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <COM_IsOdrLegal+0x74>)
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	3314      	adds	r3, #20
 8001e64:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e66:	e011      	b.n	8001e8c <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	d101      	bne.n	8001e86 <COM_IsOdrLegal+0x46>
      ret = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	737b      	strb	r3, [r7, #13]
    i++;
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e9c:	eef4 7a47 	vcmp.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d1e0      	bne.n	8001e68 <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	200004b0 	.word	0x200004b0

08001eb8 <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <get_unique_id+0xd4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <get_unique_id+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <get_unique_id+0xdc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	0c1a      	lsrs	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	0e1a      	lsrs	r2, r3, #24
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a1a      	lsrs	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0c1a      	lsrs	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3305      	adds	r3, #5
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	0e1a      	lsrs	r2, r3, #24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3307      	adds	r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4916      	ldr	r1, [pc, #88]	; (8001f98 <get_unique_id+0xe0>)
 8001f40:	69f8      	ldr	r0, [r7, #28]
 8001f42:	f01d ffc1 	bl	801fec8 <siprintf>
 8001f46:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f52:	461a      	mov	r2, r3
 8001f54:	4911      	ldr	r1, [pc, #68]	; (8001f9c <get_unique_id+0xe4>)
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f01d ffb6 	bl	801fec8 <siprintf>
 8001f5c:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f68:	461a      	mov	r2, r3
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <get_unique_id+0xe4>)
 8001f6c:	69f8      	ldr	r0, [r7, #28]
 8001f6e:	f01d ffab 	bl	801fec8 <siprintf>
 8001f72:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	1fff7590 	.word	0x1fff7590
 8001f90:	1fff7594 	.word	0x1fff7594
 8001f94:	1fff7598 	.word	0x1fff7598
 8001f98:	08022d8c 	.word	0x08022d8c
 8001f9c:	08022d94 	.word	0x08022d94

08001fa0 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001fa6:	f7ff feaf 	bl	8001d08 <COM_GetDeviceDescriptor>
 8001faa:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff82 	bl	8001eb8 <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3315      	adds	r3, #21
 8001fb8:	49ba      	ldr	r1, [pc, #744]	; (80022a4 <set_default_description+0x304>)
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	cb03      	ldmia	r3!, {r0, r1}
 8001fc0:	6010      	str	r0, [r2, #0]
 8001fc2:	6051      	str	r1, [r2, #4]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001fc8:	f7ff fe5e 	bl	8001c88 <COM_AddSensor>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4bb5      	ldr	r3, [pc, #724]	; (80022a8 <set_default_description+0x308>)
 8001fd2:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001fd4:	4bb4      	ldr	r3, [pc, #720]	; (80022a8 <set_default_description+0x308>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe9f 	bl	8001d1c <COM_GetSensor>
 8001fde:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	49b1      	ldr	r1, [pc, #708]	; (80022ac <set_default_description+0x30c>)
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	cb03      	ldmia	r3!, {r0, r1}
 8001fec:	6010      	str	r0, [r2, #0]
 8001fee:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4aad      	ldr	r2, [pc, #692]	; (80022b0 <set_default_description+0x310>)
 8001ffa:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4aad      	ldr	r2, [pc, #692]	; (80022b4 <set_default_description+0x314>)
 8002000:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4aa4      	ldr	r2, [pc, #656]	; (80022b0 <set_default_description+0x310>)
 8002020:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800203e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002050:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800205a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002064:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2203      	movs	r2, #3
 800207c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	335f      	adds	r3, #95	; 0x5f
 8002084:	4a8c      	ldr	r2, [pc, #560]	; (80022b8 <set_default_description+0x318>)
 8002086:	8811      	ldrh	r1, [r2, #0]
 8002088:	7892      	ldrb	r2, [r2, #2]
 800208a:	8019      	strh	r1, [r3, #0]
 800208c:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002094:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800209c:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80020a4:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020ac:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4a80      	ldr	r2, [pc, #512]	; (80022b4 <set_default_description+0x314>)
 80020b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020bc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80020ce:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80022bc <set_default_description+0x31c>
 80020d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <set_default_description+0x320>)
 80020ec:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020f4:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <set_default_description+0x320>)
 80020f6:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <set_default_description+0x320>)
 8002100:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <set_default_description+0x320>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800210c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <set_default_description+0x308>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <set_default_description+0x324>)
 8002120:	fbb3 f3f2 	udiv	r3, r3, r2
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <set_default_description+0x328>)
 8002126:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                 *****/ 
  
  /***** HTS221 *****/
  hts221_com_id = COM_AddSensor();
 800212a:	f7ff fdad 	bl	8001c88 <COM_AddSensor>
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b66      	ldr	r3, [pc, #408]	; (80022cc <set_default_description+0x32c>)
 8002134:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(hts221_com_id);
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <set_default_description+0x32c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fdee 	bl	8001d1c <COM_GetSensor>
 8002140:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <set_default_description+0x330>)
 8002148:	6810      	ldr	r0, [r2, #0]
 800214a:	6018      	str	r0, [r3, #0]
 800214c:	8891      	ldrh	r1, [r2, #4]
 800214e:	7992      	ldrb	r2, [r2, #6]
 8002150:	8099      	strh	r1, [r3, #4]
 8002152:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2206      	movs	r2, #6
 8002158:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002160:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <set_default_description+0x334>)
 8002166:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <set_default_description+0x338>)
 800216c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <set_default_description+0x314>)
 8002172:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 12.5f;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <set_default_description+0x338>)
 8002192:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2232      	movs	r2, #50	; 0x32
 80021ae:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	335f      	adds	r3, #95	; 0x5f
 80021f2:	493a      	ldr	r1, [pc, #232]	; (80022dc <set_default_description+0x33c>)
 80021f4:	461a      	mov	r2, r3
 80021f6:	460b      	mov	r3, r1
 80021f8:	cb03      	ldmia	r3!, {r0, r1}
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <set_default_description+0x340>)
 8002202:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <set_default_description+0x314>)
 8002208:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 120.0f;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <set_default_description+0x340>)
 800220e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002220:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_HUM; 
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2206      	movs	r2, #6
 8002230:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	33b3      	adds	r3, #179	; 0xb3
 8002240:	4928      	ldr	r1, [pc, #160]	; (80022e4 <set_default_description+0x344>)
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	8013      	strh	r3, [r2, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <set_default_description+0x348>)
 800224e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <set_default_description+0x314>)
 8002256:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 100.0f;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <set_default_description+0x348>)
 800225e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002270:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <set_default_description+0x34c>)
 800227c:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <set_default_description+0x34c>)
 8002286:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <set_default_description+0x34c>)
 8002290:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <set_default_description+0x34c>)
 800229a:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022a2:	e025      	b.n	80022f0 <set_default_description+0x350>
 80022a4:	08022d9c 	.word	0x08022d9c
 80022a8:	200163ac 	.word	0x200163ac
 80022ac:	08022da8 	.word	0x08022da8
 80022b0:	46d05600 	.word	0x46d05600
 80022b4:	bf800000 	.word	0xbf800000
 80022b8:	08022db0 	.word	0x08022db0
 80022bc:	3d79db23 	.word	0x3d79db23
 80022c0:	200102f4 	.word	0x200102f4
 80022c4:	01e84800 	.word	0x01e84800
 80022c8:	2001668c 	.word	0x2001668c
 80022cc:	200166c0 	.word	0x200166c0
 80022d0:	08022db4 	.word	0x08022db4
 80022d4:	40e00000 	.word	0x40e00000
 80022d8:	41480000 	.word	0x41480000
 80022dc:	08022dbc 	.word	0x08022dbc
 80022e0:	42f00000 	.word	0x42f00000
 80022e4:	08022dc4 	.word	0x08022dc4
 80022e8:	42c80000 	.word	0x42c80000
 80022ec:	20010264 	.word	0x20010264
 80022f0:	4b5e      	ldr	r3, [pc, #376]	; (800246c <set_default_description+0x4cc>)
 80022f2:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <set_default_description+0x4cc>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002306:	ee17 2a90 	vmov	r2, s15
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <set_default_description+0x4d0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4b58      	ldr	r3, [pc, #352]	; (8002474 <set_default_description+0x4d4>)
 8002312:	fbb3 f3f2 	udiv	r3, r3, r2
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <set_default_description+0x4d8>)
 8002318:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                  *****/ 
    
  /***** IIS2DH *****/
  iis2dh_com_id = COM_AddSensor();
 800231c:	f7ff fcb4 	bl	8001c88 <COM_AddSensor>
 8002320:	4603      	mov	r3, r0
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b55      	ldr	r3, [pc, #340]	; (800247c <set_default_description+0x4dc>)
 8002326:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002328:	4b54      	ldr	r3, [pc, #336]	; (800247c <set_default_description+0x4dc>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fcf5 	bl	8001d1c <COM_GetSensor>
 8002332:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <set_default_description+0x4e0>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6018      	str	r0, [r3, #0]
 800233e:	8891      	ldrh	r1, [r2, #4]
 8002340:	7992      	ldrb	r2, [r2, #6]
 8002342:	8099      	strh	r1, [r3, #4]
 8002344:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2203      	movs	r2, #3
 800234a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002352:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <set_default_description+0x4e4>)
 8002358:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <set_default_description+0x4e8>)
 800235e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <set_default_description+0x4ec>)
 8002364:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4a49      	ldr	r2, [pc, #292]	; (8002490 <set_default_description+0x4f0>)
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <set_default_description+0x4f4>)
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <set_default_description+0x4f8>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4a48      	ldr	r2, [pc, #288]	; (800249c <set_default_description+0x4fc>)
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = COM_END_OF_LIST_FLOAT;  
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <set_default_description+0x500>)
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 1344.0f;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4a3e      	ldr	r2, [pc, #248]	; (800249c <set_default_description+0x4fc>)
 80023a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80023d2:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023dc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	335f      	adds	r3, #95	; 0x5f
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <set_default_description+0x504>)
 8002408:	8811      	ldrh	r1, [r2, #0]
 800240a:	7892      	ldrb	r2, [r2, #2]
 800240c:	8019      	strh	r1, [r3, #0]
 800240e:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002416:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800241e:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002426:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800242e:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <set_default_description+0x500>)
 8002434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800243e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  if (tempSensor->sensorStatus.subSensorStatus[0].FS == 16.0f)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002450:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002454:	eef4 7a47 	vcmp.f32	s15, s14
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d126      	bne.n	80024ac <set_default_description+0x50c>
  {
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002464:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8002468:	e02e      	b.n	80024c8 <set_default_description+0x528>
 800246a:	bf00      	nop
 800246c:	20010264 	.word	0x20010264
 8002470:	200166c0 	.word	0x200166c0
 8002474:	0007a120 	.word	0x0007a120
 8002478:	2001668c 	.word	0x2001668c
 800247c:	200166d0 	.word	0x200166d0
 8002480:	08022dc8 	.word	0x08022dc8
 8002484:	41200000 	.word	0x41200000
 8002488:	41c80000 	.word	0x41c80000
 800248c:	42480000 	.word	0x42480000
 8002490:	42c80000 	.word	0x42c80000
 8002494:	43480000 	.word	0x43480000
 8002498:	43c80000 	.word	0x43c80000
 800249c:	44a80000 	.word	0x44a80000
 80024a0:	bf800000 	.word	0xbf800000
 80024a4:	08022db0 	.word	0x08022db0
 80024a8:	3d800000 	.word	0x3d800000
  }
  else
  {
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.0625f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80024b2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80024a8 <set_default_description+0x508>
 80024b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  }
  
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80024ce:	4ab8      	ldr	r2, [pc, #736]	; (80027b0 <set_default_description+0x810>)
 80024d0:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80024d8:	4ab5      	ldr	r2, [pc, #724]	; (80027b0 <set_default_description+0x810>)
 80024da:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80024e2:	4bb3      	ldr	r3, [pc, #716]	; (80027b0 <set_default_description+0x810>)
 80024e4:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 80024e6:	4bb2      	ldr	r3, [pc, #712]	; (80027b0 <set_default_description+0x810>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f8:	ee17 2a90 	vmov	r2, s15
 80024fc:	4bad      	ldr	r3, [pc, #692]	; (80027b4 <set_default_description+0x814>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4bad      	ldr	r3, [pc, #692]	; (80027b8 <set_default_description+0x818>)
 8002504:	fbb3 f3f2 	udiv	r3, r3, r2
 8002508:	4aac      	ldr	r2, [pc, #688]	; (80027bc <set_default_description+0x81c>)
 800250a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IIS2MDC */
  iis2mdc_com_id = COM_AddSensor();  
 800250e:	f7ff fbbb 	bl	8001c88 <COM_AddSensor>
 8002512:	4603      	mov	r3, r0
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4baa      	ldr	r3, [pc, #680]	; (80027c0 <set_default_description+0x820>)
 8002518:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800251a:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <set_default_description+0x820>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fbfc 	bl	8001d1c <COM_GetSensor>
 8002524:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	49a6      	ldr	r1, [pc, #664]	; (80027c4 <set_default_description+0x824>)
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	cb03      	ldmia	r3!, {r0, r1}
 8002532:	6010      	str	r0, [r2, #0]
 8002534:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2203      	movs	r2, #3
 800253a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 10.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4aa2      	ldr	r2, [pc, #648]	; (80027c8 <set_default_description+0x828>)
 8002540:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 20.0f;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4aa1      	ldr	r2, [pc, #644]	; (80027cc <set_default_description+0x82c>)
 8002546:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 50.0f;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4aa1      	ldr	r2, [pc, #644]	; (80027d0 <set_default_description+0x830>)
 800254c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 100.0f;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4aa0      	ldr	r2, [pc, #640]	; (80027d4 <set_default_description+0x834>)
 8002552:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = COM_END_OF_LIST_FLOAT;  
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4aa0      	ldr	r2, [pc, #640]	; (80027d8 <set_default_description+0x838>)
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 100.0f;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4a97      	ldr	r2, [pc, #604]	; (80027d4 <set_default_description+0x834>)
 8002578:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2264      	movs	r2, #100	; 0x64
 8002594:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 600;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025a6:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025b0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MAG; 
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	335f      	adds	r3, #95	; 0x5f
 80025da:	4a80      	ldr	r2, [pc, #512]	; (80027dc <set_default_description+0x83c>)
 80025dc:	6810      	ldr	r0, [r2, #0]
 80025de:	6018      	str	r0, [r3, #0]
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	809a      	strh	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 50.0f; 
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <set_default_description+0x830>)
 80025e8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <set_default_description+0x838>)
 80025ee:	675a      	str	r2, [r3, #116]	; 0x74

  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <set_default_description+0x830>)
 80025f4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002606:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002610:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <set_default_description+0x840>)
 8002612:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <set_default_description+0x840>)
 800261c:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002624:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <set_default_description+0x840>)
 8002626:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <set_default_description+0x840>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <set_default_description+0x820>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <set_default_description+0x844>)
 8002646:	fbb3 f3f2 	udiv	r3, r3, r2
 800264a:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <set_default_description+0x81c>)
 800264c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IMP34DT05 */
  imp34dt05_com_id = COM_AddSensor();
 8002650:	f7ff fb1a 	bl	8001c88 <COM_AddSensor>
 8002654:	4603      	mov	r3, r0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <set_default_description+0x848>)
 800265a:	701a      	strb	r2, [r3, #0]
   
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800265c:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <set_default_description+0x848>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb5b 	bl	8001d1c <COM_GetSensor>
 8002666:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	495f      	ldr	r1, [pc, #380]	; (80027ec <set_default_description+0x84c>)
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	cb03      	ldmia	r3!, {r0, r1}
 8002674:	6010      	str	r0, [r2, #0]
 8002676:	6051      	str	r1, [r2, #4]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	8113      	strh	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2203      	movs	r2, #3
 8002680:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <set_default_description+0x850>)
 8002686:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <set_default_description+0x838>)
 800268c:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 48000.0f;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <set_default_description+0x850>)
 80026ac:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ca:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026dc:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IMP34DT05;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80026e6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2207      	movs	r2, #7
 8002700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	335f      	adds	r3, #95	; 0x5f
 8002710:	4938      	ldr	r1, [pc, #224]	; (80027f4 <set_default_description+0x854>)
 8002712:	461a      	mov	r2, r3
 8002714:	460b      	mov	r3, r1
 8002716:	cb03      	ldmia	r3!, {r0, r1}
 8002718:	6010      	str	r0, [r2, #0]
 800271a:	6051      	str	r1, [r2, #4]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <set_default_description+0x858>)
 8002724:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <set_default_description+0x838>)
 800272a:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <set_default_description+0x858>)
 8002730:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002742:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800274c:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <set_default_description+0x85c>)
 800274e:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <set_default_description+0x85c>)
 8002758:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <set_default_description+0x85c>)
 8002762:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <set_default_description+0x85c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	ee17 2a90 	vmov	r2, s15
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <set_default_description+0x848>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <set_default_description+0x860>)
 800277e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <set_default_description+0x81c>)
 8002784:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
/**********/ 
  
  /* ISM330DHCX */
  ism330dhcx_com_id = COM_AddSensor();
 8002788:	f7ff fa7e 	bl	8001c88 <COM_AddSensor>
 800278c:	4603      	mov	r3, r0
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <set_default_description+0x864>)
 8002792:	701a      	strb	r2, [r3, #0]
  
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <set_default_description+0x864>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fabf 	bl	8001d1c <COM_GetSensor>
 800279e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4918      	ldr	r1, [pc, #96]	; (8002808 <set_default_description+0x868>)
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	cb03      	ldmia	r3!, {r0, r1}
 80027ac:	e02e      	b.n	800280c <set_default_description+0x86c>
 80027ae:	bf00      	nop
 80027b0:	20010290 	.word	0x20010290
 80027b4:	200166d0 	.word	0x200166d0
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	2001668c 	.word	0x2001668c
 80027c0:	20016681 	.word	0x20016681
 80027c4:	08022dd0 	.word	0x08022dd0
 80027c8:	41200000 	.word	0x41200000
 80027cc:	41a00000 	.word	0x41a00000
 80027d0:	42480000 	.word	0x42480000
 80027d4:	42c80000 	.word	0x42c80000
 80027d8:	bf800000 	.word	0xbf800000
 80027dc:	08022dd8 	.word	0x08022dd8
 80027e0:	200102c8 	.word	0x200102c8
 80027e4:	001e8480 	.word	0x001e8480
 80027e8:	200166c8 	.word	0x200166c8
 80027ec:	08022de0 	.word	0x08022de0
 80027f0:	473b8000 	.word	0x473b8000
 80027f4:	08022dec 	.word	0x08022dec
 80027f8:	42f50000 	.word	0x42f50000
 80027fc:	20015244 	.word	0x20015244
 8002800:	01e84800 	.word	0x01e84800
 8002804:	200166c1 	.word	0x200166c1
 8002808:	08022df8 	.word	0x08022df8
 800280c:	6010      	str	r0, [r2, #0]
 800280e:	6051      	str	r1, [r2, #4]
 8002810:	8819      	ldrh	r1, [r3, #0]
 8002812:	789b      	ldrb	r3, [r3, #2]
 8002814:	8111      	strh	r1, [r2, #8]
 8002816:	7293      	strb	r3, [r2, #10]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2203      	movs	r2, #3
 800281c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4ab3      	ldr	r2, [pc, #716]	; (8002af0 <set_default_description+0xb50>)
 8002822:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4ab3      	ldr	r2, [pc, #716]	; (8002af4 <set_default_description+0xb54>)
 8002828:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4ab2      	ldr	r2, [pc, #712]	; (8002af8 <set_default_description+0xb58>)
 800282e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4ab2      	ldr	r2, [pc, #712]	; (8002afc <set_default_description+0xb5c>)
 8002834:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4ab1      	ldr	r2, [pc, #708]	; (8002b00 <set_default_description+0xb60>)
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4ab1      	ldr	r2, [pc, #708]	; (8002b04 <set_default_description+0xb64>)
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	4ab0      	ldr	r2, [pc, #704]	; (8002b08 <set_default_description+0xb68>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4ab0      	ldr	r2, [pc, #704]	; (8002b0c <set_default_description+0xb6c>)
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4aaf      	ldr	r2, [pc, #700]	; (8002b10 <set_default_description+0xb70>)
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4aaf      	ldr	r2, [pc, #700]	; (8002b14 <set_default_description+0xb74>)
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4aae      	ldr	r2, [pc, #696]	; (8002b18 <set_default_description+0xb78>)
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800286e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 6667.0f;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <set_default_description+0xb74>)
 800287e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ae:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80028b8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	335f      	adds	r3, #95	; 0x5f
 80028e2:	4a8e      	ldr	r2, [pc, #568]	; (8002b1c <set_default_description+0xb7c>)
 80028e4:	8811      	ldrh	r1, [r2, #0]
 80028e6:	7892      	ldrb	r2, [r2, #2]
 80028e8:	8019      	strh	r1, [r3, #0]
 80028ea:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f2:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80028fa:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002902:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800290a:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800291c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f * tempSensor->sensorStatus.subSensorStatus[0].FS/2.0f;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 800292e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002b20 <set_default_description+0xb80>
 8002932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002936:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_GYRO; 
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2203      	movs	r2, #3
 8002950:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	33b3      	adds	r3, #179	; 0xb3
 8002960:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <set_default_description+0xb84>)
 8002962:	6810      	ldr	r0, [r2, #0]
 8002964:	6018      	str	r0, [r3, #0]
 8002966:	7912      	ldrb	r2, [r2, #4]
 8002968:	711a      	strb	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <set_default_description+0xb88>)
 800296e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4a6d      	ldr	r2, [pc, #436]	; (8002b2c <set_default_description+0xb8c>)
 8002976:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <set_default_description+0xb90>)
 800297e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <set_default_description+0xb94>)
 8002986:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <set_default_description+0xb98>)
 800298e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <set_default_description+0xb9c>)
 8002996:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[6] = COM_END_OF_LIST_FLOAT; 
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <set_default_description+0xb78>)
 800299e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 4000.0f;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <set_default_description+0xb9c>)
 80029a6:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80029b8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002b40 <set_default_description+0xba0>
 80029bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002b44 <set_default_description+0xba4>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
  
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80029d4:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <set_default_description+0xba8>)
 80029d6:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80029de:	4a5a      	ldr	r2, [pc, #360]	; (8002b48 <set_default_description+0xba8>)
 80029e0:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <set_default_description+0xba8>)
 80029ea:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80029f2:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <set_default_description+0xba8>)
 80029f4:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <set_default_description+0xba8>)
 80029fe:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <set_default_description+0xba8>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a12:	ee17 2a90 	vmov	r2, s15
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <set_default_description+0xbac>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <set_default_description+0xbb0>)
 8002a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a22:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <set_default_description+0xbb4>)
 8002a24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* LPS22HH */
  lps22hh_com_id = COM_AddSensor();
 8002a28:	f7ff f92e 	bl	8001c88 <COM_AddSensor>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <set_default_description+0xbb8>)
 8002a32:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <set_default_description+0xbb8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f96f 	bl	8001d1c <COM_GetSensor>
 8002a3e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4945      	ldr	r1, [pc, #276]	; (8002b5c <set_default_description+0xbbc>)
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	cb03      	ldmia	r3!, {r0, r1}
 8002a4c:	6010      	str	r0, [r2, #0]
 8002a4e:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2206      	movs	r2, #6
 8002a54:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a5c:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <set_default_description+0xbc0>)
 8002a62:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <set_default_description+0xbc4>)
 8002a68:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4a3e      	ldr	r2, [pc, #248]	; (8002b68 <set_default_description+0xbc8>)
 8002a6e:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <set_default_description+0xbcc>)
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 100.0f;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <set_default_description+0xbd0>)
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 200.0f;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <set_default_description+0xbd4>)
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = COM_END_OF_LIST_FLOAT; 
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <set_default_description+0xb78>)
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 200.0f;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <set_default_description+0xbd4>)
 8002aa6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	22c8      	movs	r2, #200	; 0xc8
 8002ac2:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ad4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ade:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002aec:	e044      	b.n	8002b78 <set_default_description+0xbd8>
 8002aee:	bf00      	nop
 8002af0:	41480000 	.word	0x41480000
 8002af4:	41d00000 	.word	0x41d00000
 8002af8:	42500000 	.word	0x42500000
 8002afc:	42d00000 	.word	0x42d00000
 8002b00:	43500000 	.word	0x43500000
 8002b04:	43d08000 	.word	0x43d08000
 8002b08:	44504000 	.word	0x44504000
 8002b0c:	44d06000 	.word	0x44d06000
 8002b10:	45505000 	.word	0x45505000
 8002b14:	45d05800 	.word	0x45d05800
 8002b18:	bf800000 	.word	0xbf800000
 8002b1c:	08022db0 	.word	0x08022db0
 8002b20:	3d79db23 	.word	0x3d79db23
 8002b24:	08022e04 	.word	0x08022e04
 8002b28:	42fa0000 	.word	0x42fa0000
 8002b2c:	437a0000 	.word	0x437a0000
 8002b30:	43fa0000 	.word	0x43fa0000
 8002b34:	447a0000 	.word	0x447a0000
 8002b38:	44fa0000 	.word	0x44fa0000
 8002b3c:	457a0000 	.word	0x457a0000
 8002b40:	408c0000 	.word	0x408c0000
 8002b44:	42fa0000 	.word	0x42fa0000
 8002b48:	20016378 	.word	0x20016378
 8002b4c:	200166c1 	.word	0x200166c1
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	2001668c 	.word	0x2001668c
 8002b58:	200166d9 	.word	0x200166d9
 8002b5c:	08022e0c 	.word	0x08022e0c
 8002b60:	41200000 	.word	0x41200000
 8002b64:	41c80000 	.word	0x41c80000
 8002b68:	42480000 	.word	0x42480000
 8002b6c:	42960000 	.word	0x42960000
 8002b70:	42c80000 	.word	0x42c80000
 8002b74:	43480000 	.word	0x43480000
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_PRESS; 
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	335f      	adds	r3, #95	; 0x5f
 8002b94:	4aba      	ldr	r2, [pc, #744]	; (8002e80 <set_default_description+0xee0>)
 8002b96:	6810      	ldr	r0, [r2, #0]
 8002b98:	6018      	str	r0, [r3, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4ab9      	ldr	r2, [pc, #740]	; (8002e84 <set_default_description+0xee4>)
 8002b9e:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4ab9      	ldr	r2, [pc, #740]	; (8002e88 <set_default_description+0xee8>)
 8002ba4:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 1260.0f;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4ab6      	ldr	r2, [pc, #728]	; (8002e84 <set_default_description+0xee4>)
 8002baa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bbc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_TEMP; 
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	33b3      	adds	r3, #179	; 0xb3
 8002bdc:	49ab      	ldr	r1, [pc, #684]	; (8002e8c <set_default_description+0xeec>)
 8002bde:	461a      	mov	r2, r3
 8002be0:	460b      	mov	r3, r1
 8002be2:	cb03      	ldmia	r3!, {r0, r1}
 8002be4:	6010      	str	r0, [r2, #0]
 8002be6:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4aa9      	ldr	r2, [pc, #676]	; (8002e90 <set_default_description+0xef0>)
 8002bec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4aa5      	ldr	r2, [pc, #660]	; (8002e88 <set_default_description+0xee8>)
 8002bf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4aa5      	ldr	r2, [pc, #660]	; (8002e90 <set_default_description+0xef0>)
 8002bfc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c0e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002c18:	4a9e      	ldr	r2, [pc, #632]	; (8002e94 <set_default_description+0xef4>)
 8002c1a:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <set_default_description+0xef4>)
 8002c24:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002c2c:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <set_default_description+0xef4>)
 8002c2e:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002c36:	4b97      	ldr	r3, [pc, #604]	; (8002e94 <set_default_description+0xef4>)
 8002c38:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;  
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002c40:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <set_default_description+0xef4>)
 8002c42:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 8002c44:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <set_default_description+0xef4>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c56:	ee17 2a90 	vmov	r2, s15
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <set_default_description+0xef8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <set_default_description+0xefc>)
 8002c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c66:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <set_default_description+0xf00>)
 8002c68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* MP23ABS1 */
  mp23abs1_com_id = COM_AddSensor();
 8002c6c:	f7ff f80c 	bl	8001c88 <COM_AddSensor>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b8b      	ldr	r3, [pc, #556]	; (8002ea4 <set_default_description+0xf04>)
 8002c76:	701a      	strb	r2, [r3, #0]
  
   tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002c78:	4b8a      	ldr	r3, [pc, #552]	; (8002ea4 <set_default_description+0xf04>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f84d 	bl	8001d1c <COM_GetSensor>
 8002c82:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4987      	ldr	r1, [pc, #540]	; (8002ea8 <set_default_description+0xf08>)
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	cb03      	ldmia	r3!, {r0, r1}
 8002c90:	6010      	str	r0, [r2, #0]
 8002c92:	6051      	str	r1, [r2, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4a82      	ldr	r2, [pc, #520]	; (8002eac <set_default_description+0xf0c>)
 8002ca2:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <set_default_description+0xee8>)
 8002ca8:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 192000.0f;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	; (8002eac <set_default_description+0xf0c>)
 8002cc8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002d02:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	335f      	adds	r3, #95	; 0x5f
 8002d2c:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <set_default_description+0xf10>)
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	cb03      	ldmia	r3!, {r0, r1}
 8002d34:	6010      	str	r0, [r2, #0]
 8002d36:	6051      	str	r1, [r2, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <set_default_description+0xf14>)
 8002d40:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <set_default_description+0xee8>)
 8002d46:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <set_default_description+0xf14>)
 8002d4c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d5e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002d68:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <set_default_description+0xf18>)
 8002d6a:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d72:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <set_default_description+0xf18>)
 8002d74:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002d7c:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <set_default_description+0xf18>)
 8002d7e:	751a      	strb	r2, [r3, #20]
    
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <set_default_description+0xf18>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8e:	ee17 2a90 	vmov	r2, s15
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <set_default_description+0xf04>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <set_default_description+0xf1c>)
 8002d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <set_default_description+0xf00>)
 8002da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* STTS751 */
  stts751_com_id = COM_AddSensor();
 8002da4:	f7fe ff70 	bl	8001c88 <COM_AddSensor>
 8002da8:	4603      	mov	r3, r0
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <set_default_description+0xf20>)
 8002dae:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <set_default_description+0xf20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ffb1 	bl	8001d1c <COM_GetSensor>
 8002dba:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <set_default_description+0xf24>)
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	cb03      	ldmia	r3!, {r0, r1}
 8002dc8:	6010      	str	r0, [r2, #0]
 8002dca:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2206      	movs	r2, #6
 8002dd0:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd8:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 2.0f; 
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de0:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 4.0f; 
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002de8:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;  
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <set_default_description+0xee8>)
 8002dee:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 4.0f;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002e10:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2214      	movs	r2, #20
 8002e2c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2264      	movs	r2, #100	; 0x64
 8002e44:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	335f      	adds	r3, #95	; 0x5f
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <set_default_description+0xeec>)
 8002e70:	461a      	mov	r2, r3
 8002e72:	460b      	mov	r3, r1
 8002e74:	cb03      	ldmia	r3!, {r0, r1}
 8002e76:	6010      	str	r0, [r2, #0]
 8002e78:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 100.0f; 
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	e024      	b.n	8002ec8 <set_default_description+0xf28>
 8002e7e:	bf00      	nop
 8002e80:	08022e14 	.word	0x08022e14
 8002e84:	449d8000 	.word	0x449d8000
 8002e88:	bf800000 	.word	0xbf800000
 8002e8c:	08022dbc 	.word	0x08022dbc
 8002e90:	42aa0000 	.word	0x42aa0000
 8002e94:	20016394 	.word	0x20016394
 8002e98:	200166d9 	.word	0x200166d9
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	2001668c 	.word	0x2001668c
 8002ea4:	20016680 	.word	0x20016680
 8002ea8:	08022e18 	.word	0x08022e18
 8002eac:	483b8000 	.word	0x483b8000
 8002eb0:	08022dec 	.word	0x08022dec
 8002eb4:	43020000 	.word	0x43020000
 8002eb8:	20016824 	.word	0x20016824
 8002ebc:	03dfd240 	.word	0x03dfd240
 8002ec0:	200166d8 	.word	0x200166d8
 8002ec4:	08022e24 	.word	0x08022e24
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <set_default_description+0xf9c>)
 8002eca:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <set_default_description+0xfa0>)
 8002ed0:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <set_default_description+0xf9c>)
 8002ed6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ee8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <set_default_description+0xfa4>)
 8002ef4:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <set_default_description+0xfa4>)
 8002efe:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <set_default_description+0xfa4>)
 8002f08:	751a      	strb	r2, [r3, #20]

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <set_default_description+0xfa4>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <set_default_description+0xfa8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <set_default_description+0xfac>)
 8002f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <set_default_description+0xfb0>)
 8002f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	42c80000 	.word	0x42c80000
 8002f40:	bf800000 	.word	0xbf800000
 8002f44:	20018b20 	.word	0x20018b20
 8002f48:	200166d8 	.word	0x200166d8
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	2001668c 	.word	0x2001668c

08002f54 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d00f      	beq.n	8002f98 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	f7fe ff5b 	bl	8001e40 <COM_IsOdrLegal>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	7b9a      	ldrb	r2, [r3, #14]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	7b9b      	ldrb	r3, [r3, #14]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d003      	beq.n	8002fac <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7b9a      	ldrb	r2, [r3, #14]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e054      	b.n	800305c <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	331c      	adds	r3, #28
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	d011      	beq.n	8003008 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	331c      	adds	r3, #28
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	331c      	adds	r3, #28
 8003006:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	7819      	ldrb	r1, [r3, #0]
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4299      	cmp	r1, r3
 800302e:	d012      	beq.n	8003056 <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	7818      	ldrb	r0, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fed8 	bl	8001e14 <COM_GetSubSensorNumber>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4293      	cmp	r3, r2
 800306c:	dba1      	blt.n	8002fb2 <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <update_sensorStatus+0x200>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d10e      	bne.n	8003096 <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	edd3 7a07 	vldr	s15, [r3, #28]
 800307e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003158 <update_sensorStatus+0x204>
 8003082:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003086:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800308a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	edc3 7a08 	vstr	s15, [r3, #32]
 8003094:	e043      	b.n	800311e <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <update_sensorStatus+0x208>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	79fa      	ldrb	r2, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d11d      	bne.n	80030dc <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80030a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030aa:	eef4 7a47 	vcmp.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d104      	bne.n	80030be <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80030ba:	621a      	str	r2, [r3, #32]
 80030bc:	e02f      	b.n	800311e <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80030c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003160 <update_sensorStatus+0x20c>
 80030c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	edc3 7a08 	vstr	s15, [r3, #32]
 80030da:	e020      	b.n	800311e <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <update_sensorStatus+0x210>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11b      	bne.n	800311e <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003158 <update_sensorStatus+0x204>
 80030f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003108:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003168 <update_sensorStatus+0x214>
 800310c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003110:	eddf 6a16 	vldr	s13, [pc, #88]	; 800316c <update_sensorStatus+0x218>
 8003114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800312a:	429a      	cmp	r2, r3
 800312c:	d004      	beq.n	8003138 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	899a      	ldrh	r2, [r3, #12]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	899b      	ldrh	r3, [r3, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d003      	beq.n	800314c <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	899a      	ldrh	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	819a      	strh	r2, [r3, #12]
  }  
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200163ac 	.word	0x200163ac
 8003158:	3d79db23 	.word	0x3d79db23
 800315c:	200166d0 	.word	0x200166d0
 8003160:	3d800000 	.word	0x3d800000
 8003164:	200166c1 	.word	0x200166c1
 8003168:	408c0000 	.word	0x408c0000
 800316c:	42fa0000 	.word	0x42fa0000

08003170 <update_sensors_config>:

void update_sensors_config(void)
{  
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <update_sensors_config+0x1c4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fdce 	bl	8001d1c <COM_GetSensor>
 8003180:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003188:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <update_sensors_config+0x1c8>)
 800318a:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003192:	4a69      	ldr	r2, [pc, #420]	; (8003338 <update_sensors_config+0x1c8>)
 8003194:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800319c:	4b66      	ldr	r3, [pc, #408]	; (8003338 <update_sensors_config+0x1c8>)
 800319e:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <update_sensors_config+0x1cc>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fdb9 	bl	8001d1c <COM_GetSensor>
 80031aa:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <update_sensors_config+0x1d0>)
 80031b4:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031bc:	4a60      	ldr	r2, [pc, #384]	; (8003340 <update_sensors_config+0x1d0>)
 80031be:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <update_sensors_config+0x1d0>)
 80031c8:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80031d0:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <update_sensors_config+0x1d0>)
 80031d2:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80031da:	4b59      	ldr	r3, [pc, #356]	; (8003340 <update_sensors_config+0x1d0>)
 80031dc:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 80031de:	4b59      	ldr	r3, [pc, #356]	; (8003344 <update_sensors_config+0x1d4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd9a 	bl	8001d1c <COM_GetSensor>
 80031e8:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031f0:	4a55      	ldr	r2, [pc, #340]	; (8003348 <update_sensors_config+0x1d8>)
 80031f2:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <update_sensors_config+0x1d8>)
 80031fc:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <update_sensors_config+0x1d8>)
 8003206:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <update_sensors_config+0x1dc>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fd85 	bl	8001d1c <COM_GetSensor>
 8003212:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <update_sensors_config+0x1e0>)
 800321c:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <update_sensors_config+0x1e0>)
 8003226:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <update_sensors_config+0x1e0>)
 8003230:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <update_sensors_config+0x1e4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd70 	bl	8001d1c <COM_GetSensor>
 800323c:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003244:	4a44      	ldr	r2, [pc, #272]	; (8003358 <update_sensors_config+0x1e8>)
 8003246:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <update_sensors_config+0x1e8>)
 8003250:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <update_sensors_config+0x1e8>)
 800325a:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <update_sensors_config+0x1ec>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fd5b 	bl	8001d1c <COM_GetSensor>
 8003266:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <update_sensors_config+0x1f0>)
 8003270:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <update_sensors_config+0x1f0>)
 800327a:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <update_sensors_config+0x1f0>)
 8003284:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <update_sensors_config+0x1f0>)
 800328e:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <update_sensors_config+0x1f0>)
 8003298:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <update_sensors_config+0x1f4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fd3c 	bl	8001d1c <COM_GetSensor>
 80032a4:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <update_sensors_config+0x1f8>)
 80032ae:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <update_sensors_config+0x1f8>)
 80032b8:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <update_sensors_config+0x1f8>)
 80032c2:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <update_sensors_config+0x1f8>)
 80032cc:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <update_sensors_config+0x1f8>)
 80032d6:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <update_sensors_config+0x1fc>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd1d 	bl	8001d1c <COM_GetSensor>
 80032e2:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <update_sensors_config+0x200>)
 80032ec:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <update_sensors_config+0x200>)
 80032f6:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <update_sensors_config+0x200>)
 8003300:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <update_sensors_config+0x204>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fd08 	bl	8001d1c <COM_GetSensor>
 800330c:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <update_sensors_config+0x208>)
 8003316:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <update_sensors_config+0x208>)
 8003320:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <update_sensors_config+0x208>)
 800332a:	751a      	strb	r2, [r3, #20]
  
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200163ac 	.word	0x200163ac
 8003338:	200102f4 	.word	0x200102f4
 800333c:	200166c0 	.word	0x200166c0
 8003340:	20010264 	.word	0x20010264
 8003344:	200166d0 	.word	0x200166d0
 8003348:	20010290 	.word	0x20010290
 800334c:	20016681 	.word	0x20016681
 8003350:	200102c8 	.word	0x200102c8
 8003354:	200166c8 	.word	0x200166c8
 8003358:	20015244 	.word	0x20015244
 800335c:	200166c1 	.word	0x200166c1
 8003360:	20016378 	.word	0x20016378
 8003364:	200166d9 	.word	0x200166d9
 8003368:	20016394 	.word	0x20016394
 800336c:	20016680 	.word	0x20016680
 8003370:	20016824 	.word	0x20016824
 8003374:	200166d8 	.word	0x200166d8
 8003378:	20018b20 	.word	0x20018b20

0800337c <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HTS221_Set_State+0x1c>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	7013      	strb	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000001 	.word	0x20000001

0800339c <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f7ff ffeb 	bl	800337c <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 80033a6:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HTS221_Start+0x18>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f016 f8ae 	bl	801950c <osThreadResume>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20010284 	.word	0x20010284

080033b8 <HTS221_Stop>:

void HTS221_Stop(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7ff ffdd 	bl	800337c <HTS221_Set_State>
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <IIS2DH_Set_State+0x1c>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7013      	strb	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000002 	.word	0x20000002

080033e8 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033ec:	2003      	movs	r0, #3
 80033ee:	f7ff ffeb 	bl	80033c8 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <IIS2DH_Start+0x18>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f016 f888 	bl	801950c <osThreadResume>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200102ac 	.word	0x200102ac

08003404 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003408:	2001      	movs	r0, #1
 800340a:	f7ff ffdd 	bl	80033c8 <IIS2DH_Set_State>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <IIS2MDC_Set_State+0x1c>)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	7013      	strb	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000003 	.word	0x20000003

08003434 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003438:	2003      	movs	r0, #3
 800343a:	f7ff ffeb 	bl	8003414 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 800343e:	4b03      	ldr	r3, [pc, #12]	; (800344c <IIS2MDC_Start+0x18>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f016 f862 	bl	801950c <osThreadResume>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200102e0 	.word	0x200102e0

08003450 <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ffdd 	bl	8003414 <IIS2MDC_Set_State>
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 8003494:	f043 0320 	orr.w	r3, r3, #32
 8003498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <IIS3DWB_Peripheral_Init+0xb4>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 80034a6:	2201      	movs	r2, #1
 80034a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ac:	481a      	ldr	r0, [pc, #104]	; (8003518 <IIS3DWB_Peripheral_Init+0xb8>)
 80034ae:	f006 fd49 	bl	8009f44 <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c0:	2302      	movs	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	4813      	ldr	r0, [pc, #76]	; (8003518 <IIS3DWB_Peripheral_Init+0xb8>)
 80034cc:	f006 fb90 	bl	8009bf0 <HAL_GPIO_Init>
  
  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 80034d0:	2320      	movs	r3, #32
 80034d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <IIS3DWB_Peripheral_Init+0xbc>)
 80034d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4619      	mov	r1, r3
 80034e2:	480f      	ldr	r0, [pc, #60]	; (8003520 <IIS3DWB_Peripheral_Init+0xc0>)
 80034e4:	f006 fb84 	bl	8009bf0 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2105      	movs	r1, #5
 80034ec:	2028      	movs	r0, #40	; 0x28
 80034ee:	f006 f8c8 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034f2:	2028      	movs	r0, #40	; 0x28
 80034f4:	f006 f8e1 	bl	80096ba <HAL_NVIC_EnableIRQ>
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_14);  
 80034f8:	490a      	ldr	r1, [pc, #40]	; (8003524 <IIS3DWB_Peripheral_Init+0xc4>)
 80034fa:	480b      	ldr	r0, [pc, #44]	; (8003528 <IIS3DWB_Peripheral_Init+0xc8>)
 80034fc:	f006 fb34 	bl	8009b68 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <IIS3DWB_Peripheral_Init+0xcc>)
 8003502:	2100      	movs	r1, #0
 8003504:	4808      	ldr	r0, [pc, #32]	; (8003528 <IIS3DWB_Peripheral_Init+0xc8>)
 8003506:	f006 fb15 	bl	8009b34 <HAL_EXTI_RegisterCallback>
  
}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	48000400 	.word	0x48000400
 800351c:	10110000 	.word	0x10110000
 8003520:	48001000 	.word	0x48001000
 8003524:	1600000e 	.word	0x1600000e
 8003528:	2001030c 	.word	0x2001030c
 800352c:	080038d5 	.word	0x080038d5

08003530 <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 8003536:	2101      	movs	r1, #1
 8003538:	481f      	ldr	r0, [pc, #124]	; (80035b8 <IIS3DWB_OS_Init+0x88>)
 800353a:	f015 fd61 	bl	8019000 <osSemaphoreCreate>
 800353e:	4603      	mov	r3, r0
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <IIS3DWB_OS_Init+0x8c>)
 8003542:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <IIS3DWB_OS_Init+0x8c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	491d      	ldr	r1, [pc, #116]	; (80035c0 <IIS3DWB_OS_Init+0x90>)
 800354a:	4618      	mov	r0, r3
 800354c:	f016 ff66 	bl	801a41c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <IIS3DWB_OS_Init+0x8c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	4618      	mov	r0, r3
 800355a:	f015 fd75 	bl	8019048 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 800355e:	2101      	movs	r1, #1
 8003560:	4818      	ldr	r0, [pc, #96]	; (80035c4 <IIS3DWB_OS_Init+0x94>)
 8003562:	f015 fd4d 	bl	8019000 <osSemaphoreCreate>
 8003566:	4603      	mov	r3, r0
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <IIS3DWB_OS_Init+0x98>)
 800356a:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <IIS3DWB_OS_Init+0x98>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <IIS3DWB_OS_Init+0x9c>)
 8003572:	4618      	mov	r0, r3
 8003574:	f016 ff52 	bl	801a41c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <IIS3DWB_OS_Init+0x98>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	4618      	mov	r0, r3
 8003582:	f015 fd61 	bl	8019048 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <IIS3DWB_OS_Init+0xa0>)
 8003588:	1d3c      	adds	r4, r7, #4
 800358a:	461d      	mov	r5, r3
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f015 fd0a 	bl	8018fb2 <osThreadCreate>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <IIS3DWB_OS_Init+0xa4>)
 80035a2:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <IIS3DWB_OS_Init+0xa4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f015 ffa2 	bl	80194f2 <osThreadSuspend>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdb0      	pop	{r4, r5, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	080231fc 	.word	0x080231fc
 80035bc:	2000050c 	.word	0x2000050c
 80035c0:	08022e48 	.word	0x08022e48
 80035c4:	080231f8 	.word	0x080231f8
 80035c8:	20000508 	.word	0x20000508
 80035cc:	08022e68 	.word	0x08022e68
 80035d0:	08022e84 	.word	0x08022e84
 80035d4:	200102f0 	.word	0x200102f0

080035d8 <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 80035d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035dc:	b088      	sub	sp, #32
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 80035e2:	2101      	movs	r1, #1
 80035e4:	2000      	movs	r0, #0
 80035e6:	f017 fc15 	bl	801ae14 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 80035ee:	4bae      	ldr	r3, [pc, #696]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	f040 8094 	bne.w	8003720 <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 80035f8:	49ac      	ldr	r1, [pc, #688]	; (80038ac <IIS3DWB_Thread+0x2d4>)
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 8003606:	4baa      	ldr	r3, [pc, #680]	; (80038b0 <IIS3DWB_Thread+0x2d8>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 800360c:	f107 0313 	add.w	r3, r7, #19
 8003610:	4619      	mov	r1, r3
 8003612:	48a8      	ldr	r0, [pc, #672]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003614:	f003 fb95 	bl	8006d42 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 8003618:	2101      	movs	r1, #1
 800361a:	48a6      	ldr	r0, [pc, #664]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800361c:	f003 fba2 	bl	8006d64 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8003620:	f107 0213 	add.w	r2, r7, #19
 8003624:	2301      	movs	r3, #1
 8003626:	2110      	movs	r1, #16
 8003628:	48a2      	ldr	r0, [pc, #648]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800362a:	f003 fb0e 	bl	8006c4a <iis3dwb_read_reg>
      reg0 |= 0xA0;
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8003634:	b2db      	uxtb	r3, r3
 8003636:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8003638:	f107 0213 	add.w	r2, r7, #19
 800363c:	2301      	movs	r3, #1
 800363e:	2110      	movs	r1, #16
 8003640:	489c      	ldr	r0, [pc, #624]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003642:	f003 fb1a 	bl	8006c7a <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 8003646:	2101      	movs	r1, #1
 8003648:	489a      	ldr	r0, [pc, #616]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800364a:	f003 fc09 	bl	8006e60 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 800364e:	2106      	movs	r1, #6
 8003650:	4898      	ldr	r0, [pc, #608]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003652:	f003 fca3 	bl	8006f9c <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	4896      	ldr	r0, [pc, #600]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800365a:	f003 fc43 	bl	8006ee4 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 800365e:	2101      	movs	r1, #1
 8003660:	4894      	ldr	r0, [pc, #592]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003662:	f003 fb48 	bl	8006cf6 <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 8003666:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <IIS3DWB_Thread+0x2e0>)
 8003668:	edd3 7a01 	vldr	s15, [r3, #4]
 800366c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d504      	bpl.n	8003684 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 800367a:	2100      	movs	r1, #0
 800367c:	488d      	ldr	r0, [pc, #564]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800367e:	f003 fb14 	bl	8006caa <iis3dwb_xl_full_scale_set>
 8003682:	e02b      	b.n	80036dc <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8003684:	4b8c      	ldr	r3, [pc, #560]	; (80038b8 <IIS3DWB_Thread+0x2e0>)
 8003686:	edd3 7a01 	vldr	s15, [r3, #4]
 800368a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d504      	bpl.n	80036a2 <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 8003698:	2102      	movs	r1, #2
 800369a:	4886      	ldr	r0, [pc, #536]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800369c:	f003 fb05 	bl	8006caa <iis3dwb_xl_full_scale_set>
 80036a0:	e01c      	b.n	80036dc <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 80036a2:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <IIS3DWB_Thread+0x2e0>)
 80036a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80036a8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	d504      	bpl.n	80036c0 <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 80036b6:	2103      	movs	r1, #3
 80036b8:	487e      	ldr	r0, [pc, #504]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 80036ba:	f003 faf6 	bl	8006caa <iis3dwb_xl_full_scale_set>
 80036be:	e00d      	b.n	80036dc <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 80036c0:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <IIS3DWB_Thread+0x2e0>)
 80036c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80036c6:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80036ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d2:	d503      	bpl.n	80036dc <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 80036d4:	2101      	movs	r1, #1
 80036d6:	4877      	ldr	r0, [pc, #476]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 80036d8:	f003 fae7 	bl	8006caa <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 80036dc:	2100      	movs	r1, #0
 80036de:	4875      	ldr	r0, [pc, #468]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 80036e0:	f003 fb66 	bl	8006db0 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	3301      	adds	r3, #1
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 80036f6:	7b3b      	ldrb	r3, [r7, #12]
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	4619      	mov	r1, r3
 8003704:	486b      	ldr	r0, [pc, #428]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003706:	f003 fbd1 	bl	8006eac <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 800370a:	210a      	movs	r1, #10
 800370c:	4869      	ldr	r0, [pc, #420]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800370e:	f003 fc1f 	bl	8006f50 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 8003712:	2017      	movs	r0, #23
 8003714:	f005 ffd1 	bl	80096ba <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 8003718:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e766      	b.n	80035ee <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 80ad 	bne.w	8003884 <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 800372a:	4b64      	ldr	r3, [pc, #400]	; (80038bc <IIS3DWB_Thread+0x2e4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f04f 31ff 	mov.w	r1, #4294967295
 8003732:	4618      	mov	r0, r3
 8003734:	f015 fc88 	bl	8019048 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 8003738:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af56 	bne.w	80035ee <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 8003742:	f107 0213 	add.w	r2, r7, #19
 8003746:	2301      	movs	r3, #1
 8003748:	213a      	movs	r1, #58	; 0x3a
 800374a:	485a      	ldr	r0, [pc, #360]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800374c:	f003 fa7d 	bl	8006c4a <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 8003750:	f107 0212 	add.w	r2, r7, #18
 8003754:	2301      	movs	r3, #1
 8003756:	213b      	movs	r1, #59	; 0x3b
 8003758:	4856      	ldr	r0, [pc, #344]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 800375a:	f003 fa76 	bl	8006c4a <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 800375e:	7cbb      	ldrb	r3, [r7, #18]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	b29b      	uxth	r3, r3
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	b29a      	uxth	r2, r3
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	b29b      	uxth	r3, r3
 800376e:	4413      	add	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8003774:	7cbb      	ldrb	r3, [r7, #18]
 8003776:	b25b      	sxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f6bf af38 	bge.w	80035ee <IIS3DWB_Thread+0x16>
 800377e:	8a3b      	ldrh	r3, [r7, #16]
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b7f      	cmp	r3, #127	; 0x7f
 8003784:	f67f af33 	bls.w	80035ee <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <IIS3DWB_Thread+0x2e8>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <IIS3DWB_Thread+0x2d8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d307      	bcc.n	80037a4 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 8003794:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <IIS3DWB_Thread+0x2e8>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <IIS3DWB_Thread+0x2d8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <IIS3DWB_Thread+0x2ec>)
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e007      	b.n	80037b4 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <IIS3DWB_Thread+0x2e8>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <IIS3DWB_Thread+0x2d8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <IIS3DWB_Thread+0x2ec>)
 80037b2:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <IIS3DWB_Thread+0x2e8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <IIS3DWB_Thread+0x2d8>)
 80037ba:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <IIS3DWB_Thread+0x2ec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <IIS3DWB_Thread+0x2d4>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	1884      	adds	r4, r0, r2
 80037ce:	eb41 0503 	adc.w	r5, r1, r3
 80037d2:	4b36      	ldr	r3, [pc, #216]	; (80038ac <IIS3DWB_Thread+0x2d4>)
 80037d4:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 80037dc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80037e0:	4a39      	ldr	r2, [pc, #228]	; (80038c8 <IIS3DWB_Thread+0x2f0>)
 80037e2:	2178      	movs	r1, #120	; 0x78
 80037e4:	4833      	ldr	r0, [pc, #204]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 80037e6:	f003 fa30 	bl	8006c4a <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <IIS3DWB_Thread+0x2f0>)
 80037ec:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <IIS3DWB_Thread+0x2f0>)
 80037f0:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80037f2:	2300      	movs	r3, #0
 80037f4:	83fb      	strh	r3, [r7, #30]
 80037f6:	e020      	b.n	800383a <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	1c93      	adds	r3, r2, #2
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1c99      	adds	r1, r3, #2
 8003808:	6179      	str	r1, [r7, #20]
 800380a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800380e:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	1c93      	adds	r3, r2, #2
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1c99      	adds	r1, r3, #2
 800381a:	6179      	str	r1, [r7, #20]
 800381c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003820:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	1c93      	adds	r3, r2, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1c99      	adds	r1, r3, #2
 800382c:	6179      	str	r1, [r7, #20]
 800382e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003832:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8003834:	8bfb      	ldrh	r3, [r7, #30]
 8003836:	3301      	adds	r3, #1
 8003838:	83fb      	strh	r3, [r7, #30]
 800383a:	8bfb      	ldrh	r3, [r7, #30]
 800383c:	2b7f      	cmp	r3, #127	; 0x7f
 800383e:	d9db      	bls.n	80037f8 <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <IIS3DWB_Thread+0x2d4>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fc fec7 	bl	80005dc <__aeabi_ul2d>
 800384e:	4680      	mov	r8, r0
 8003850:	4689      	mov	r9, r1
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <IIS3DWB_Thread+0x2f4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe7c 	bl	8000554 <__aeabi_ui2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4640      	mov	r0, r8
 8003862:	4649      	mov	r1, r9
 8003864:	f7fd f81a 	bl	800089c <__aeabi_ddiv>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	ec43 2b17 	vmov	d7, r2, r3
 8003870:	eeb0 0a47 	vmov.f32	s0, s14
 8003874:	eef0 0a67 	vmov.f32	s1, s15
 8003878:	f44f 7140 	mov.w	r1, #768	; 0x300
 800387c:	4812      	ldr	r0, [pc, #72]	; (80038c8 <IIS3DWB_Thread+0x2f0>)
 800387e:	f000 fc7d 	bl	800417c <IIS3DWB_Data_Ready>
 8003882:	e6b4      	b.n	80035ee <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	f47f aeb0 	bne.w	80035ee <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 800388e:	2100      	movs	r1, #0
 8003890:	4808      	ldr	r0, [pc, #32]	; (80038b4 <IIS3DWB_Thread+0x2dc>)
 8003892:	f003 fb5d 	bl	8006f50 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <IIS3DWB_Thread+0x2d0>)
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <IIS3DWB_Thread+0x2f8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f015 fe26 	bl	80194f2 <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 80038a6:	e6a2      	b.n	80035ee <IIS3DWB_Thread+0x16>
 80038a8:	20000004 	.word	0x20000004
 80038ac:	200008a0 	.word	0x200008a0
 80038b0:	20000894 	.word	0x20000894
 80038b4:	20000018 	.word	0x20000018
 80038b8:	200102f4 	.word	0x200102f4
 80038bc:	20000508 	.word	0x20000508
 80038c0:	20000890 	.word	0x20000890
 80038c4:	20000898 	.word	0x20000898
 80038c8:	20000510 	.word	0x20000510
 80038cc:	20000038 	.word	0x20000038
 80038d0:	200102f0 	.word	0x200102f0

080038d4 <IIS3DWB_Int_Callback>:
}



static void IIS3DWB_Int_Callback(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  tim_value = hsm_tim.Instance->CNT;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <IIS3DWB_Int_Callback+0x1c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <IIS3DWB_Int_Callback+0x20>)
 80038e0:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <IIS3DWB_Int_Callback+0x24>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f015 fbfc 	bl	80190e4 <osSemaphoreRelease>
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20018908 	.word	0x20018908
 80038f4:	20000890 	.word	0x20000890
 80038f8:	20000508 	.word	0x20000508

080038fc <IIS3DWB_Set_State>:


void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <IIS3DWB_Set_State+0x1c>)
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	7013      	strb	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	20000004 	.word	0x20000004

0800391c <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003920:	2003      	movs	r0, #3
 8003922:	f7ff ffeb 	bl	80038fc <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <IIS3DWB_Start+0x18>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f015 fdee 	bl	801950c <osThreadResume>
}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200102f0 	.word	0x200102f0

08003938 <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 800393c:	2001      	movs	r0, #1
 800393e:	f7ff ffdd 	bl	80038fc <IIS3DWB_Set_State>
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 8003952:	4a04      	ldr	r2, [pc, #16]	; (8003964 <IMP34DT05_Set_State+0x1c>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	7013      	strb	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	20000024 	.word	0x20000024

08003968 <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 800396c:	2003      	movs	r0, #3
 800396e:	f7ff ffeb 	bl	8003948 <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 8003972:	4b03      	ldr	r3, [pc, #12]	; (8003980 <IMP34DT05_Start+0x18>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f015 fdc8 	bl	801950c <osThreadResume>
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20010314 	.word	0x20010314

08003984 <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff ffdd 	bl	8003948 <IMP34DT05_Set_State>
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <ISM330DHCX_Set_State+0x1c>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	7013      	strb	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000025 	.word	0x20000025

080039b4 <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80039b8:	2003      	movs	r0, #3
 80039ba:	f7ff ffeb 	bl	8003994 <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 80039be:	4b03      	ldr	r3, [pc, #12]	; (80039cc <ISM330DHCX_Start+0x18>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f015 fda2 	bl	801950c <osThreadResume>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2001626c 	.word	0x2001626c

080039d0 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f7ff ffdd 	bl	8003994 <ISM330DHCX_Set_State>
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <LPS22HH_Set_State+0x1c>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	7013      	strb	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20000026 	.word	0x20000026

08003a00 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f7ff ffeb 	bl	80039e0 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8003a0a:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <LPS22HH_Start+0x18>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f015 fd7c 	bl	801950c <osThreadResume>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20016390 	.word	0x20016390

08003a1c <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003a20:	2001      	movs	r0, #1
 8003a22:	f7ff ffdd 	bl	80039e0 <LPS22HH_Set_State>
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  HAL_Init();
 8003a32:	f004 f9ef 	bl	8007e14 <HAL_Init>
  
  SystemClock_Config();
 8003a36:	f000 f869 	bl	8003b0c <SystemClock_Config>
    
  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <main+0x9c>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <main+0x9c>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <main+0x9c>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB(); 
 8003a52:	f009 fb5f 	bl	800d114 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8003a56:	f009 fb6d 	bl	800d134 <HAL_PWREx_EnableVddIO2>
  BSP_Enable_DCDC2();
 8003a5a:	f003 fb85 	bl	8007168 <BSP_Enable_DCDC2>
  
  /* Configure the Battery Charger */
  BattChrg_Init();
 8003a5e:	f000 f8ed 	bl	8003c3c <BattChrg_Init>
  
  /* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
  PVD_Config();
 8003a62:	f000 f91f 	bl	8003ca4 <PVD_Config>
  
  /* Configure DEBUG PIN and LED */
  BSP_DEBUG_PIN_Init_All();
 8003a66:	f003 ff2d 	bl	80078c4 <BSP_DEBUG_PIN_Init_All>
  BSP_LED_Init(LED1);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f003 fbfa 	bl	8007264 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f003 fbf7 	bl	8007264 <BSP_LED_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <main+0x9c>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <main+0x9c>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <main+0x9c>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
   
  HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);  
 8003a8e:	490f      	ldr	r1, [pc, #60]	; (8003acc <main+0xa0>)
 8003a90:	480f      	ldr	r0, [pc, #60]	; (8003ad0 <main+0xa4>)
 8003a92:	f7fd f957 	bl	8000d44 <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  MX_USB_DEVICE_Init();
 8003a96:	f000 f81d 	bl	8003ad4 <MX_USB_DEVICE_Init>
  
  /* Set default device description */
  set_default_description();
 8003a9a:	f7fe fa81 	bl	8001fa0 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f003 fb8d 	bl	80071c0 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8003aa6:	f003 fb2f 	bl	8007108 <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8003aaa:	f001 ff29 	bl	8005900 <SM_Peripheral_Init>
  SM_OS_Init();
 8003aae:	f001 fca9 	bl	8005404 <SM_OS_Init>
  
  Peripheral_MSP_Init_All();  
 8003ab2:	f000 fb7b 	bl	80041ac <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8003ab6:	f000 ff1b 	bl	80048f0 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8003aba:	f000 fb7d 	bl	80041b8 <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8003abe:	f000 ff1d 	bl	80048fc <SDM_OS_Init>
  
  /* Start scheduler */
  osKernelStart();
 8003ac2:	f015 fa6f 	bl	8018fa4 <osKernelStart>
  
  while(1);  
 8003ac6:	e7fe      	b.n	8003ac6 <main+0x9a>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	0801fcc5 	.word	0x0801fcc5
 8003ad0:	0801fcb5 	.word	0x0801fcb5

08003ad4 <MX_USB_DEVICE_Init>:
/**
* Init USB device Library, add supported class and start the library
* @retval None
*/
void MX_USB_DEVICE_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  USBD_Init(&USBD_Device, &WCID_STREAMING_Desc, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4908      	ldr	r1, [pc, #32]	; (8003afc <MX_USB_DEVICE_Init+0x28>)
 8003adc:	4808      	ldr	r0, [pc, #32]	; (8003b00 <MX_USB_DEVICE_Init+0x2c>)
 8003ade:	f010 fca7 	bl	8014430 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_WCID_STREAMING_CLASS);
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <MX_USB_DEVICE_Init+0x30>)
 8003ae4:	4806      	ldr	r0, [pc, #24]	; (8003b00 <MX_USB_DEVICE_Init+0x2c>)
 8003ae6:	f010 fcce 	bl	8014486 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO and CDC Class */
  USBD_WCID_STREAMING_RegisterInterface(&USBD_Device, &USBD_WCID_STREAMING_fops);
 8003aea:	4907      	ldr	r1, [pc, #28]	; (8003b08 <MX_USB_DEVICE_Init+0x34>)
 8003aec:	4804      	ldr	r0, [pc, #16]	; (8003b00 <MX_USB_DEVICE_Init+0x2c>)
 8003aee:	f010 fb36 	bl	801415e <USBD_WCID_STREAMING_RegisterInterface>
  /* Start Device Process */  
  USBD_Start(&USBD_Device);
 8003af2:	4803      	ldr	r0, [pc, #12]	; (8003b00 <MX_USB_DEVICE_Init+0x2c>)
 8003af4:	f010 fce1 	bl	80144ba <USBD_Start>
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000003c 	.word	0x2000003c
 8003b00:	200163bc 	.word	0x200163bc
 8003b04:	200001bc 	.word	0x200001bc
 8003b08:	2000008c 	.word	0x2000008c

08003b0c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b0be      	sub	sp, #248	; 0xf8
 8003b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b16:	2244      	movs	r2, #68	; 0x44
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f01c f902 	bl	801fd24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	229c      	movs	r2, #156	; 0x9c
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f01c f8f4 	bl	801fd24 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f009 fa45 	bl	800cfcc <HAL_PWREx_ControlVoltageScaling>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8003b48:	f000 fb3c 	bl	80041c4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003b4c:	2321      	movs	r3, #33	; 0x21
 8003b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b66:	2303      	movs	r3, #3
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003b72:	231e      	movs	r3, #30
 8003b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8003b78:	2305      	movs	r3, #5
 8003b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b84:	2302      	movs	r3, #2
 8003b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f009 fb3a 	bl	800d208 <HAL_RCC_OscConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003b9a:	f000 fb13 	bl	80041c4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bbc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bc0:	2105      	movs	r1, #5
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f009 ff46 	bl	800da54 <HAL_RCC_ClockConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003bce:	f000 faf9 	bl	80041c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <SystemClock_Config+0x128>)
 8003bd4:	607b      	str	r3, [r7, #4]
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003bde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8003c00:	2305      	movs	r3, #5
 8003c02:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8003c04:	2360      	movs	r3, #96	; 0x60
 8003c06:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003c08:	2319      	movs	r3, #25
 8003c0a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8003c10:	2304      	movs	r3, #4
 8003c12:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <SystemClock_Config+0x12c>)
 8003c16:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f00a f9b2 	bl	800df84 <HAL_RCCEx_PeriphCLKConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8003c26:	f000 facd 	bl	80041c4 <Error_Handler>
  }  
}
 8003c2a:	bf00      	nop
 8003c2c:	37f8      	adds	r7, #248	; 0xf8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00296880 	.word	0x00296880
 8003c38:	01010000 	.word	0x01010000

08003c3c <BattChrg_Init>:


void BattChrg_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8003c40:	f003 fb86 	bl	8007350 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8003c44:	f003 fbc8 	bl	80073d8 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8003c48:	200a      	movs	r0, #10
 8003c4a:	f003 fb89 	bl	8007360 <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <BattChrg_Init+0x34>)
 8003c50:	4808      	ldr	r0, [pc, #32]	; (8003c74 <BattChrg_Init+0x38>)
 8003c52:	f005 ff89 	bl	8009b68 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <BattChrg_Init+0x3c>)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4806      	ldr	r0, [pc, #24]	; (8003c74 <BattChrg_Init+0x38>)
 8003c5c:	f005 ff6a 	bl	8009b34 <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8003c60:	f004 f944 	bl	8007eec <HAL_GetTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <BattChrg_Init+0x40>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	1600000a 	.word	0x1600000a
 8003c74:	20016684 	.word	0x20016684
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	20000948 	.word	0x20000948

08003c80 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8003c84:	f004 f932 	bl	8007eec <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <BC_Int_Callback+0x20>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003c94:	d902      	bls.n	8003c9c <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003c96:	2017      	movs	r0, #23
 8003c98:	f003 fb62 	bl	8007360 <BSP_BC_CmdSend>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000948 	.word	0x20000948

08003ca4 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <PVD_Config+0x50>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <PVD_Config+0x50>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <PVD_Config+0x50>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f005 fcdb 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f005 fcf4 	bl	80096ba <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003cd6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003cda:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003cdc:	f107 0308 	add.w	r3, r7, #8
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f009 f8e3 	bl	800ceac <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8003ce6:	f009 f941 	bl	800cf6c <HAL_PWR_EnablePVD>
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
  if(SD_Logging_Enabled)
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <vApplicationIdleHook+0xfc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8003d04:	f001 fad8 	bl	80052b8 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <vApplicationIdleHook+0x100>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d16f      	bne.n	8003df0 <vApplicationIdleHook+0xf8>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <vApplicationIdleHook+0x104>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d121      	bne.n	8003d5e <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8003d1a:	f004 f8e7 	bl	8007eec <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <vApplicationIdleHook+0x108>)
 8003d22:	fba3 1302 	umull	r1, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2164      	movs	r1, #100	; 0x64
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8003d34:	2001      	movs	r0, #1
 8003d36:	f003 fad7 	bl	80072e8 <BSP_LED_On>
          }
        }
      }
    }
  }
}
 8003d3a:	e059      	b.n	8003df0 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003d3c:	f004 f8d6 	bl	8007eec <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <vApplicationIdleHook+0x108>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	2132      	movs	r1, #50	; 0x32
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d14c      	bne.n	8003df0 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003d56:	2001      	movs	r0, #1
 8003d58:	f003 fae0 	bl	800731c <BSP_LED_Off>
}
 8003d5c:	e048      	b.n	8003df0 <vApplicationIdleHook+0xf8>
      if (!BSP_SD_IsDetected())
 8003d5e:	f003 ff7d 	bl	8007c5c <BSP_SD_IsDetected>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d121      	bne.n	8003dac <vApplicationIdleHook+0xb4>
        if(!(HAL_GetTick()%200)) 
 8003d68:	f004 f8c0 	bl	8007eec <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <vApplicationIdleHook+0x108>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	21c8      	movs	r1, #200	; 0xc8
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <vApplicationIdleHook+0x92>
          BSP_LED_On(LED_ORANGE);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f003 fab0 	bl	80072e8 <BSP_LED_On>
}
 8003d88:	e032      	b.n	8003df0 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%100)) 
 8003d8a:	f004 f8af 	bl	8007eec <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <vApplicationIdleHook+0x108>)
 8003d92:	fba3 1302 	umull	r1, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d125      	bne.n	8003df0 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f003 fab9 	bl	800731c <BSP_LED_Off>
}
 8003daa:	e021      	b.n	8003df0 <vApplicationIdleHook+0xf8>
        if(!(HAL_GetTick()%1000)) 
 8003dac:	f004 f89e 	bl	8007eec <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <vApplicationIdleHook+0x10c>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <vApplicationIdleHook+0xd8>
          BSP_LED_On(LED_ORANGE);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f003 fa8d 	bl	80072e8 <BSP_LED_On>
}
 8003dce:	e00f      	b.n	8003df0 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003dd0:	f004 f88c 	bl	8007eec <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <vApplicationIdleHook+0x108>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	2132      	movs	r1, #50	; 0x32
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003dea:	2001      	movs	r0, #1
 8003dec:	f003 fa96 	bl	800731c <BSP_LED_Off>
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000990 	.word	0x20000990
 8003df8:	2000097c 	.word	0x2000097c
 8003dfc:	20000504 	.word	0x20000504
 8003e00:	51eb851f 	.word	0x51eb851f
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	ed87 0b00 	vstr	d0, [r7]
 8003e16:	81fb      	strh	r3, [r7, #14]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fd ffa3 	bl	8001d6c <COM_GetSensorStatus>
 8003e26:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8003e28:	89fb      	ldrh	r3, [r7, #14]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd ff89 	bl	8001d44 <COM_GetSensorDescriptor>
 8003e32:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e38:	2300      	movs	r3, #0
 8003e3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8003e3c:	89fb      	ldrh	r3, [r7, #14]
 8003e3e:	4a89      	ldr	r2, [pc, #548]	; (8004064 <SENSOR_Generic_Data_Ready+0x25c>)
 8003e40:	5cd3      	ldrb	r3, [r2, r3]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d020      	beq.n	8003e88 <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	4a86      	ldr	r2, [pc, #536]	; (8004064 <SENSOR_Generic_Data_Ready+0x25c>)
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	4a85      	ldr	r2, [pc, #532]	; (8004068 <SENSOR_Generic_Data_Ready+0x260>)
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 8003e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e60:	f7fc feea 	bl	8000c38 <__aeabi_d2f>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	4a7f      	ldr	r2, [pc, #508]	; (800406c <SENSOR_Generic_Data_Ready+0x264>)
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e76:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	8991      	ldrh	r1, [r2, #12]
 8003e80:	4a7b      	ldr	r2, [pc, #492]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8003e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 8003e86:	e16c      	b.n	8004162 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	7c5b      	ldrb	r3, [r3, #17]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d007      	beq.n	8003ea0 <SENSOR_Generic_Data_Ready+0x98>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	7c5b      	ldrb	r3, [r3, #17]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d003      	beq.n	8003ea0 <SENSOR_Generic_Data_Ready+0x98>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	7c5b      	ldrb	r3, [r3, #17]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d102      	bne.n	8003ea6 <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003ea4:	e014      	b.n	8003ed0 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	7c5b      	ldrb	r3, [r3, #17]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <SENSOR_Generic_Data_Ready+0xae>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	7c5b      	ldrb	r3, [r3, #17]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d102      	bne.n	8003ebc <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003eba:	e009      	b.n	8003ed0 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	7c5b      	ldrb	r3, [r3, #17]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <SENSOR_Generic_Data_Ready+0xc4>
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	7c5b      	ldrb	r3, [r3, #17]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	e01d      	b.n	8003f18 <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3324      	adds	r3, #36	; 0x24
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00f      	beq.n	8003f12 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003ef2:	89fb      	ldrh	r3, [r7, #14]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fd ff4b 	bl	8001d98 <COM_GetSubSensorDescriptor>
 8003f02:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	789a      	ldrb	r2, [r3, #2]
 8003f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	4293      	cmp	r3, r2
 8003f24:	dbda      	blt.n	8003edc <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 8003f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f2e:	fb12 f303 	smulbb	r3, r2, r3
 8003f32:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003f34:	89ba      	ldrh	r2, [r7, #12]
 8003f36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f48:	4a47      	ldr	r2, [pc, #284]	; (8004068 <SENSOR_Generic_Data_Ready+0x260>)
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	4a44      	ldr	r2, [pc, #272]	; (8004068 <SENSOR_Generic_Data_Ready+0x260>)
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fb1b 	bl	8000598 <__aeabi_f2d>
 8003f62:	4604      	mov	r4, r0
 8003f64:	460d      	mov	r5, r1
 8003f66:	89fb      	ldrh	r3, [r7, #14]
 8003f68:	4a40      	ldr	r2, [pc, #256]	; (800406c <SENSOR_Generic_Data_Ready+0x264>)
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f76:	f7fc f9af 	bl	80002d8 <__aeabi_dsub>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc fc8b 	bl	800089c <__aeabi_ddiv>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fc fe53 	bl	8000c38 <__aeabi_d2f>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <SENSOR_Generic_Data_Ready+0x264>)
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	18d1      	adds	r1, r2, r3
 8003fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa4:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 8003fa8:	89ba      	ldrh	r2, [r7, #12]
 8003faa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 8003fb2:	e0d2      	b.n	800415a <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8003fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d305      	bcc.n	8003fce <SENSOR_Generic_Data_Ready+0x1c6>
 8003fc2:	89fb      	ldrh	r3, [r7, #14]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8003fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d135      	bne.n	800403a <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <SENSOR_Generic_Data_Ready+0x26c>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d10b      	bne.n	8003ff0 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 8003fd8:	89fb      	ldrh	r3, [r7, #14]
 8003fda:	b2d8      	uxtb	r0, r3
 8003fdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003fde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fe0:	fb12 f303 	smulbb	r3, r2, r3
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	f000 ff69 	bl	8004ec0 <SDM_Fill_Buffer>
 8003fee:	e010      	b.n	8004012 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <SENSOR_Generic_Data_Ready+0x26c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10b      	bne.n	8004012 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004000:	b2d9      	uxtb	r1, r3
 8004002:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004004:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	481a      	ldr	r0, [pc, #104]	; (8004078 <SENSOR_Generic_Data_Ready+0x270>)
 800400e:	f010 f8bd 	bl	801418c <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8004016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 800401e:	89fb      	ldrh	r3, [r7, #14]
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8004022:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800402a:	1a8a      	subs	r2, r1, r2
 800402c:	b291      	uxth	r1, r2
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 8004030:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004038:	e08f      	b.n	800415a <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <SENSOR_Generic_Data_Ready+0x26c>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d11b      	bne.n	800407c <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	b2d8      	uxtb	r0, r3
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <SENSOR_Generic_Data_Ready+0x268>)
 800404c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004050:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004052:	fb12 f303 	smulbb	r3, r2, r3
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f000 ff30 	bl	8004ec0 <SDM_Fill_Buffer>
 8004060:	e021      	b.n	80040a6 <SENSOR_Generic_Data_Ready+0x29e>
 8004062:	bf00      	nop
 8004064:	20000028 	.word	0x20000028
 8004068:	200008a8 	.word	0x200008a8
 800406c:	200008d8 	.word	0x200008d8
 8004070:	20000930 	.word	0x20000930
 8004074:	20000504 	.word	0x20000504
 8004078:	200163bc 	.word	0x200163bc
        else if (com_status == HS_DATALOG_USB_STARTED )
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <SENSOR_Generic_Data_Ready+0x364>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10f      	bne.n	80040a6 <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	4a37      	ldr	r2, [pc, #220]	; (8004170 <SENSOR_Generic_Data_Ready+0x368>)
 8004092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004096:	461a      	mov	r2, r3
 8004098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800409a:	fb03 f302 	mul.w	r3, r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4834      	ldr	r0, [pc, #208]	; (8004174 <SENSOR_Generic_Data_Ready+0x36c>)
 80040a2:	f010 f873 	bl	801418c <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	4a31      	ldr	r2, [pc, #196]	; (8004170 <SENSOR_Generic_Data_Ready+0x368>)
 80040aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ae:	461a      	mov	r2, r3
 80040b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040b2:	fb03 f302 	mul.w	r3, r3, r2
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4413      	add	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 80040be:	89fb      	ldrh	r3, [r7, #14]
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <SENSOR_Generic_Data_Ready+0x368>)
 80040c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fa61 	bl	8000598 <__aeabi_f2d>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	4926      	ldr	r1, [pc, #152]	; (8004178 <SENSOR_Generic_Data_Ready+0x370>)
 80040e0:	f7fc fbdc 	bl	800089c <__aeabi_ddiv>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc fa40 	bl	8000574 <__aeabi_i2d>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc faa4 	bl	8000648 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004108:	f7fc f8e6 	bl	80002d8 <__aeabi_dsub>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <SENSOR_Generic_Data_Ready+0x364>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d108      	bne.n	8004130 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f107 0110 	add.w	r1, r7, #16
 8004126:	2208      	movs	r2, #8
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fec9 	bl	8004ec0 <SDM_Fill_Buffer>
 800412e:	e00e      	b.n	800414e <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <SENSOR_Generic_Data_Ready+0x364>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d109      	bne.n	800414e <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004140:	b2d9      	uxtb	r1, r3
 8004142:	f107 0210 	add.w	r2, r7, #16
 8004146:	2308      	movs	r3, #8
 8004148:	480a      	ldr	r0, [pc, #40]	; (8004174 <SENSOR_Generic_Data_Ready+0x36c>)
 800414a:	f010 f81f 	bl	801418c <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	8991      	ldrh	r1, [r2, #12]
 8004154:	4a06      	ldr	r2, [pc, #24]	; (8004170 <SENSOR_Generic_Data_Ready+0x368>)
 8004156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 800415a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f af29 	bne.w	8003fb4 <SENSOR_Generic_Data_Ready+0x1ac>
}
 8004162:	bf00      	nop
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bdb0      	pop	{r4, r5, r7, pc}
 800416a:	bf00      	nop
 800416c:	20000504 	.word	0x20000504
 8004170:	20000930 	.word	0x20000930
 8004174:	200163bc 	.word	0x200163bc
 8004178:	3ff00000 	.word	0x3ff00000

0800417c <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	460b      	mov	r3, r1
 8004186:	ed87 0b00 	vstr	d0, [r7]
 800418a:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <IIS3DWB_Data_Ready+0x2c>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	897a      	ldrh	r2, [r7, #10]
 8004194:	ed97 0b00 	vldr	d0, [r7]
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fe34 	bl	8003e08 <SENSOR_Generic_Data_Ready>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200163ac 	.word	0x200163ac

080041ac <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 80041b0:	f7ff f956 	bl	8003460 <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 80041bc:	f7ff f9b8 	bl	8003530 <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  while(1);
 80041c8:	e7fe      	b.n	80041c8 <Error_Handler+0x4>
	...

080041cc <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <MP23ABS1_Set_State+0x1c>)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	7013      	strb	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20000033 	.word	0x20000033

080041ec <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80041f0:	2003      	movs	r0, #3
 80041f2:	f7ff ffeb 	bl	80041cc <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 80041f6:	4b03      	ldr	r3, [pc, #12]	; (8004204 <MP23ABS1_Start+0x18>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f015 f986 	bl	801950c <osThreadResume>
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200166e0 	.word	0x200166e0

08004208 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800420c:	2001      	movs	r0, #1
 800420e:	f7ff ffdd 	bl	80041cc <MP23ABS1_Set_State>
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <SD_CheckStatus+0x38>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004228:	f003 fdc2 	bl	8007db0 <BSP_SD_GetCardState>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <SD_CheckStatus+0x38>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <SD_CheckStatus+0x38>)
 8004240:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004242:	4b03      	ldr	r3, [pc, #12]	; (8004250 <SD_CheckStatus+0x38>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000034 	.word	0x20000034

08004254 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <SD_initialize+0x38>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004264:	f003 fca2 	bl	8007bac <BSP_SD_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ffd1 	bl	8004218 <SD_CheckStatus>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <SD_initialize+0x38>)
 800427c:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800427e:	4b03      	ldr	r3, [pc, #12]	; (800428c <SD_initialize+0x38>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000034 	.word	0x20000034

08004290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ffbb 	bl	8004218 <SD_CheckStatus>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 80042c0:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <SD_read+0x94>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f003 fce0 	bl	8007c90 <BSP_SD_ReadBlocks_DMA>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d12f      	bne.n	8004336 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 80042d6:	f003 fe09 	bl	8007eec <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80042dc:	bf00      	nop
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <SD_read+0x94>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <SD_read+0x4c>
 80042e6:	f003 fe01 	bl	8007eec <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d9f2      	bls.n	80042de <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <SD_read+0x94>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <SD_read+0x5a>
    {
      res = RES_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
 8004304:	e017      	b.n	8004336 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <SD_read+0x94>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 800430c:	f003 fdee 	bl	8007eec <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004312:	e007      	b.n	8004324 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004314:	f003 fd4c 	bl	8007db0 <BSP_SD_GetCardState>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <SD_read+0x78>
        {
          res = RES_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 8004322:	e008      	b.n	8004336 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004324:	f003 fde2 	bl	8007eec <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004332:	4293      	cmp	r3, r2
 8004334:	d9ee      	bls.n	8004314 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 8004336:	7dfb      	ldrb	r3, [r7, #23]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000950 	.word	0x20000950

08004344 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <SD_write+0x88>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f003 fcae 	bl	8007cc4 <BSP_SD_WriteBlocks_DMA>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d128      	bne.n	80043c0 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 800436e:	f003 fdbd 	bl	8007eec <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <SD_write+0x8c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f247 5130 	movw	r1, #30000	; 0x7530
 800437c:	4618      	mov	r0, r3
 800437e:	f014 fe63 	bl	8019048 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <SD_write+0x88>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <SD_write+0x4c>
    {
      res = RES_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
 800438e:	e017      	b.n	80043c0 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <SD_write+0x88>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8004396:	f003 fda9 	bl	8007eec <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800439c:	e007      	b.n	80043ae <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800439e:	f003 fd07 	bl	8007db0 <BSP_SD_GetCardState>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <SD_write+0x6a>
        {
          res = RES_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
          break;
 80043ac:	e008      	b.n	80043c0 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80043ae:	f003 fd9d 	bl	8007eec <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80043bc:	4293      	cmp	r3, r2
 80043be:	d9ee      	bls.n	800439e <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000094c 	.word	0x2000094c
 80043d0:	20018834 	.word	0x20018834

080043d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08c      	sub	sp, #48	; 0x30
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	603a      	str	r2, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
 80043e0:	460b      	mov	r3, r1
 80043e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <SD_ioctl+0xac>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <SD_ioctl+0x28>
 80043f8:	2303      	movs	r3, #3
 80043fa:	e03c      	b.n	8004476 <SD_ioctl+0xa2>

  switch (cmd)
 80043fc:	79bb      	ldrb	r3, [r7, #6]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d834      	bhi.n	800446c <SD_ioctl+0x98>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <SD_ioctl+0x34>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	08004421 	.word	0x08004421
 8004410:	08004439 	.word	0x08004439
 8004414:	08004453 	.word	0x08004453
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800441e:	e028      	b.n	8004472 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	4618      	mov	r0, r3
 8004426:	f003 fcd3 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004436:	e01c      	b.n	8004472 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004438:	f107 0308 	add.w	r3, r7, #8
 800443c:	4618      	mov	r0, r3
 800443e:	f003 fcc7 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	b29a      	uxth	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004450:	e00f      	b.n	8004472 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fcba 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	0a5a      	lsrs	r2, r3, #9
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800446a:	e002      	b.n	8004472 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800446c:	2304      	movs	r3, #4
 800446e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004476:	4618      	mov	r0, r3
 8004478:	3730      	adds	r7, #48	; 0x30
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000034 	.word	0x20000034

08004484 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <BSP_SD_WriteCpltCallback+0x18>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <BSP_SD_WriteCpltCallback+0x1c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f014 fe26 	bl	80190e4 <osSemaphoreRelease>
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	2000094c 	.word	0x2000094c
 80044a0:	20018834 	.word	0x20018834

080044a4 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <BSP_SD_ReadCpltCallback+0x14>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20000950 	.word	0x20000950

080044bc <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <Enable_Sensors+0x64>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f83d 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(hts221_com_id);
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <Enable_Sensors+0x68>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f838 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(iis2dh_com_id);
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <Enable_Sensors+0x6c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f833 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(iis2mdc_com_id);
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <Enable_Sensors+0x70>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f82e 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(imp34dt05_com_id);
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <Enable_Sensors+0x74>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f829 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <Enable_Sensors+0x78>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f824 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(ism330dhcx_com_id);
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <Enable_Sensors+0x7c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f81f 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(lps22hh_com_id);
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <Enable_Sensors+0x80>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f81a 	bl	8004544 <Activate_Sensor>
  Activate_Sensor(stts751_com_id);
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <Enable_Sensors+0x84>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 f815 	bl	8004544 <Activate_Sensor>
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200163ac 	.word	0x200163ac
 8004524:	200166c0 	.word	0x200166c0
 8004528:	200166d0 	.word	0x200166d0
 800452c:	20016681 	.word	0x20016681
 8004530:	200166c8 	.word	0x200166c8
 8004534:	20016680 	.word	0x20016680
 8004538:	200166c1 	.word	0x200166c1
 800453c:	200166d9 	.word	0x200166d9
 8004540:	200166d8 	.word	0x200166d8

08004544 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fc0b 	bl	8001d6c <COM_GetSensorStatus>
 8004556:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	739a      	strb	r2, [r3, #14]
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b09a      	sub	sp, #104	; 0x68
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 8004574:	f003 fb72 	bl	8007c5c <BSP_SD_IsDetected>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d063      	beq.n	8004646 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 800457e:	4b91      	ldr	r3, [pc, #580]	; (80047c4 <SDM_Thread+0x25c>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d004      	beq.n	8004590 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 8004586:	f000 f9f9 	bl	800497c <SDM_SD_Init>
      init_SD_peripheral = 1;
 800458a:	4b8e      	ldr	r3, [pc, #568]	; (80047c4 <SDM_Thread+0x25c>)
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	498c      	ldr	r1, [pc, #560]	; (80047c8 <SDM_Thread+0x260>)
 8004596:	4618      	mov	r0, r3
 8004598:	f014 f94e 	bl	8018838 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	498a      	ldr	r1, [pc, #552]	; (80047cc <SDM_Thread+0x264>)
 80045a2:	4618      	mov	r0, r3
 80045a4:	f014 f9e1 	bl	801896a <f_readdir>
      if (fno.fname[0] == 0) break;
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <SDM_Thread+0x264>)
 80045aa:	7d9b      	ldrb	r3, [r3, #22]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d034      	beq.n	800461a <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 80045b0:	4b86      	ldr	r3, [pc, #536]	; (80047cc <SDM_Thread+0x264>)
 80045b2:	7a1b      	ldrb	r3, [r3, #8]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 80045bc:	4984      	ldr	r1, [pc, #528]	; (80047d0 <SDM_Thread+0x268>)
 80045be:	4885      	ldr	r0, [pc, #532]	; (80047d4 <SDM_Thread+0x26c>)
 80045c0:	f7fb fe1e 	bl	8000200 <strcmp>
 80045c4:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 80045c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d028      	beq.n	800461e <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 80045cc:	2201      	movs	r2, #1
 80045ce:	4980      	ldr	r1, [pc, #512]	; (80047d0 <SDM_Thread+0x268>)
 80045d0:	4881      	ldr	r0, [pc, #516]	; (80047d8 <SDM_Thread+0x270>)
 80045d2:	f013 fc17 	bl	8017e04 <f_open>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d120      	bne.n	800461e <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 80045e0:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <SDM_Thread+0x270>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	3301      	adds	r3, #1
 80045e6:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 80045e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ea:	4618      	mov	r0, r3
 80045ec:	f01b fb62 	bl	801fcb4 <malloc>
 80045f0:	4603      	mov	r3, r0
 80045f2:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 80045f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045f6:	f107 0308 	add.w	r3, r7, #8
 80045fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045fc:	4876      	ldr	r0, [pc, #472]	; (80047d8 <SDM_Thread+0x270>)
 80045fe:	f013 fdbf 	bl	8018180 <f_read>
            SDM_ReadJSON(config_JSON_string);
 8004602:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004604:	f000 fdba 	bl	800517c <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8004608:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800460a:	f7fc fbaf 	bl	8000d6c <HSD_JSON_free>
            config_JSON_string = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 8004612:	4871      	ldr	r0, [pc, #452]	; (80047d8 <SDM_Thread+0x270>)
 8004614:	f014 f8e6 	bl	80187e4 <f_close>
          }
        }
        break; 
 8004618:	e001      	b.n	800461e <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <SDM_Thread+0xb8>
        break; 
 800461e:	bf00      	nop
      }
    }
    f_closedir(&dir);
 8004620:	f107 030c 	add.w	r3, r7, #12
 8004624:	4618      	mov	r0, r3
 8004626:	f014 f97a 	bl	801891e <f_closedir>
    
    if (isJSON == 0)
 800462a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 8004630:	f7ff ff44 	bl	80044bc <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 8004634:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <SDM_Thread+0x25c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 800463c:	f000 f9c6 	bl	80049cc <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 8004640:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <SDM_Thread+0x25c>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 8004646:	2102      	movs	r1, #2
 8004648:	2000      	movs	r0, #0
 800464a:	f016 fbe3 	bl	801ae14 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 800464e:	2000      	movs	r0, #0
 8004650:	f002 fe64 	bl	800731c <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <SDM_Thread+0x274>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d117      	bne.n	800468e <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 800465e:	f001 fb65 	bl	8005d2c <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 8004662:	f000 fb07 	bl	8004c74 <SDM_CloseFiles>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 800466c:	4b5c      	ldr	r3, [pc, #368]	; (80047e0 <SDM_Thread+0x278>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 8004672:	f000 f909 	bl	8004888 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 8004676:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <SDM_Thread+0x25c>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 800467e:	f000 f9a5 	bl	80049cc <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 8004682:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <SDM_Thread+0x25c>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8004688:	2017      	movs	r0, #23
 800468a:	f002 fe69 	bl	8007360 <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 800468e:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <SDM_Thread+0x27c>)
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	4618      	mov	r0, r3
 800469c:	f014 feaa 	bl	80193f4 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 80046a0:	4b51      	ldr	r3, [pc, #324]	; (80047e8 <SDM_Thread+0x280>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <SDM_Thread+0x14c>
 80046aa:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <SDM_Thread+0x280>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d1cc      	bne.n	800464e <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 80046b4:	2000      	movs	r0, #0
 80046b6:	f002 fe17 	bl	80072e8 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d1c6      	bne.n	800464e <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 80046c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c2:	f248 0201 	movw	r2, #32769	; 0x8001
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d14b      	bne.n	8004762 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 80046ca:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <SDM_Thread+0x278>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d12a      	bne.n	8004728 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 80046d2:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <SDM_Thread+0x280>)
 80046d4:	2202      	movs	r2, #2
 80046d6:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 80046d8:	f001 fb1e 	bl	8005d18 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 80046dc:	f003 fabe 	bl	8007c5c <BSP_SD_IsDetected>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01c      	beq.n	8004720 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <SDM_Thread+0x25c>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d004      	beq.n	80046f8 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 80046ee:	f000 f945 	bl	800497c <SDM_SD_Init>
                init_SD_peripheral = 1;
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <SDM_Thread+0x25c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 80046f8:	4b3c      	ldr	r3, [pc, #240]	; (80047ec <SDM_Thread+0x284>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 80046fe:	f000 fa41 	bl	8004b84 <SDM_InitFiles>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <SDM_Thread+0x278>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 800470e:	2001      	movs	r0, #1
 8004710:	f002 fe04 	bl	800731c <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8004714:	f003 fbea 	bl	8007eec <HAL_GetTick>
 8004718:	4603      	mov	r3, r0
 800471a:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <SDM_Thread+0x288>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e796      	b.n	800464e <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <SDM_Thread+0x284>)
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e792      	b.n	800464e <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <SDM_Thread+0x278>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d18e      	bne.n	800464e <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 8004730:	f001 fafc 	bl	8005d2c <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8004734:	f000 fa9e 	bl	8004c74 <SDM_CloseFiles>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <SDM_Thread+0x278>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 8004744:	f000 f8a0 	bl	8004888 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <SDM_Thread+0x25c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 8004750:	f000 f93c 	bl	80049cc <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <SDM_Thread+0x25c>)
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <SDM_Thread+0x280>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e775      	b.n	800464e <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004768:	2b00      	cmp	r3, #0
 800476a:	f43f af70 	beq.w	800464e <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 800476e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004770:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 8004774:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004778:	4618      	mov	r0, r3
 800477a:	f7fd faf7 	bl	8001d6c <COM_GetSensorStatus>
 800477e:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 8004780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 8004790:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8004794:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <SDM_Thread+0x28c>)
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047a0:	4619      	mov	r1, r3
 80047a2:	f000 fb0d 	bl	8004dc0 <SDM_WriteBuffer>
 80047a6:	e752      	b.n	800464e <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 80047a8:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 80047ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047b0:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <SDM_Thread+0x28c>)
 80047b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b8:	4413      	add	r3, r2
 80047ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047bc:	4619      	mov	r1, r3
 80047be:	f000 faff 	bl	8004dc0 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 80047c2:	e744      	b.n	800464e <SDM_Thread+0xe6>
 80047c4:	2000097e 	.word	0x2000097e
 80047c8:	08022eac 	.word	0x08022eac
 80047cc:	20000994 	.word	0x20000994
 80047d0:	200009aa 	.word	0x200009aa
 80047d4:	08022eb0 	.word	0x08022eb0
 80047d8:	200185b0 	.word	0x200185b0
 80047dc:	20000988 	.word	0x20000988
 80047e0:	2000097c 	.word	0x2000097c
 80047e4:	200185a8 	.word	0x200185a8
 80047e8:	20000504 	.word	0x20000504
 80047ec:	2000097d 	.word	0x2000097d
 80047f0:	20000984 	.word	0x20000984
 80047f4:	2001880c 	.word	0x2001880c

080047f8 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_PWR_PVDCallback+0x14>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20000988 	.word	0x20000988

08004810 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004816:	f7fd fa77 	bl	8001d08 <COM_GetDeviceDescriptor>
 800481a:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e026      	b.n	8004870 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd faa0 	bl	8001d6c <COM_GetSensorStatus>
 800482c:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7b9b      	ldrb	r3, [r3, #14]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f01b fa39 	bl	801fcb4 <malloc>
 8004842:	4603      	mov	r3, r0
 8004844:	4619      	mov	r1, r3
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <SDM_Memory_Init+0x74>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <SDM_Memory_Init+0x74>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 800485a:	f000 fd7f 	bl	800535c <_Error_Handler>
 800485e:	e004      	b.n	800486a <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <SDM_Memory_Init+0x74>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2100      	movs	r1, #0
 8004866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3d3      	bcc.n	8004822 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	2001880c 	.word	0x2001880c

08004888 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 800488e:	f7fd fa3b 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004892:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e01e      	b.n	80048d8 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fa64 	bl	8001d6c <COM_GetSensorStatus>
 80048a4:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	7b9b      	ldrb	r3, [r3, #14]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <SDM_Memory_Deinit+0x4a>
 80048ae:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <SDM_Memory_Deinit+0x64>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <SDM_Memory_Deinit+0x64>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f01b f9fe 	bl	801fcc4 <free>
      SD_WriteBuffer[i] = NULL;
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <SDM_Memory_Deinit+0x64>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2100      	movs	r1, #0
 80048ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3db      	bcc.n	800489a <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 80048e2:	2301      	movs	r3, #1
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	2001880c 	.word	0x2001880c

080048f0 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 80048f4:	f003 f98c 	bl	8007c10 <BSP_SD_Detect_Init>
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8004902:	2101      	movs	r1, #1
 8004904:	4816      	ldr	r0, [pc, #88]	; (8004960 <SDM_OS_Init+0x64>)
 8004906:	f014 fb7b 	bl	8019000 <osSemaphoreCreate>
 800490a:	4603      	mov	r3, r0
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <SDM_OS_Init+0x68>)
 800490e:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <SDM_OS_Init+0x68>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	4618      	mov	r0, r3
 800491a:	f014 fb95 	bl	8019048 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 800491e:	2100      	movs	r1, #0
 8004920:	4811      	ldr	r0, [pc, #68]	; (8004968 <SDM_OS_Init+0x6c>)
 8004922:	f014 fd15 	bl	8019350 <osMessageCreate>
 8004926:	4603      	mov	r3, r0
 8004928:	4a10      	ldr	r2, [pc, #64]	; (800496c <SDM_OS_Init+0x70>)
 800492a:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <SDM_OS_Init+0x70>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	490f      	ldr	r1, [pc, #60]	; (8004970 <SDM_OS_Init+0x74>)
 8004932:	4618      	mov	r0, r3
 8004934:	f015 fd72 	bl	801a41c <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <SDM_OS_Init+0x78>)
 800493a:	1d3c      	adds	r4, r7, #4
 800493c:	461d      	mov	r5, r3
 800493e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f014 fb31 	bl	8018fb2 <osThreadCreate>
 8004950:	4603      	mov	r3, r0
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <SDM_OS_Init+0x7c>)
 8004954:	6013      	str	r3, [r2, #0]
}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bdb0      	pop	{r4, r5, r7, pc}
 800495e:	bf00      	nop
 8004960:	08023214 	.word	0x08023214
 8004964:	20018834 	.word	0x20018834
 8004968:	08023218 	.word	0x08023218
 800496c:	200185a8 	.word	0x200185a8
 8004970:	08022ee8 	.word	0x08022ee8
 8004974:	08022efc 	.word	0x08022efc
 8004978:	20018808 	.word	0x20018808

0800497c <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8004980:	490f      	ldr	r1, [pc, #60]	; (80049c0 <SDM_SD_Init+0x44>)
 8004982:	4810      	ldr	r0, [pc, #64]	; (80049c4 <SDM_SD_Init+0x48>)
 8004984:	f014 f9c8 	bl	8018d18 <FATFS_LinkDriver>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d115      	bne.n	80049ba <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800498e:	2200      	movs	r2, #0
 8004990:	490b      	ldr	r1, [pc, #44]	; (80049c0 <SDM_SD_Init+0x44>)
 8004992:	480d      	ldr	r0, [pc, #52]	; (80049c8 <SDM_SD_Init+0x4c>)
 8004994:	f013 f9f0 	bl	8017d78 <f_mount>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 800499e:	2000      	movs	r0, #0
 80049a0:	f002 fca2 	bl	80072e8 <BSP_LED_On>
        HAL_Delay(500);
 80049a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049a8:	f003 faac 	bl	8007f04 <HAL_Delay>
        BSP_LED_Off(LED1);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f002 fcb5 	bl	800731c <BSP_LED_Off>
        HAL_Delay(100);
 80049b2:	2064      	movs	r0, #100	; 0x64
 80049b4:	f003 faa6 	bl	8007f04 <HAL_Delay>
        BSP_LED_On(LED1);
 80049b8:	e7f1      	b.n	800499e <SDM_SD_Init+0x22>
      }
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200185ac 	.word	0x200185ac
 80049c4:	08023200 	.word	0x08023200
 80049c8:	20016934 	.word	0x20016934

080049cc <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 80049d0:	480e      	ldr	r0, [pc, #56]	; (8004a0c <SDM_SD_DeInit+0x40>)
 80049d2:	f014 f9e9 	bl	8018da8 <FATFS_UnLinkDriver>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d115      	bne.n	8004a08 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 80049dc:	2200      	movs	r2, #0
 80049de:	490b      	ldr	r1, [pc, #44]	; (8004a0c <SDM_SD_DeInit+0x40>)
 80049e0:	2000      	movs	r0, #0
 80049e2:	f013 f9c9 	bl	8017d78 <f_mount>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 80049ec:	2000      	movs	r0, #0
 80049ee:	f002 fc7b 	bl	80072e8 <BSP_LED_On>
        HAL_Delay(500);
 80049f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049f6:	f003 fa85 	bl	8007f04 <HAL_Delay>
        BSP_LED_Off(LED1);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f002 fc8e 	bl	800731c <BSP_LED_Off>
        HAL_Delay(100);
 8004a00:	2064      	movs	r0, #100	; 0x64
 8004a02:	f003 fa7f 	bl	8007f04 <HAL_Delay>
        BSP_LED_On(LED1);
 8004a06:	e7f1      	b.n	80049ec <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200185ac 	.word	0x200185ac

08004a10 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b090      	sub	sp, #64	; 0x40
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8004a1a:	f107 000c 	add.w	r0, r7, #12
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <SDM_OpenFile+0x48>)
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	490e      	ldr	r1, [pc, #56]	; (8004a5c <SDM_OpenFile+0x4c>)
 8004a24:	f01b fa50 	bl	801fec8 <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <SDM_OpenFile+0x50>)
 8004a34:	4413      	add	r3, r2
 8004a36:	f107 010c 	add.w	r1, r7, #12
 8004a3a:	220a      	movs	r2, #10
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f013 f9e1 	bl	8017e04 <f_open>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <SDM_OpenFile+0x3c>
  {
    return 1;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3740      	adds	r7, #64	; 0x40
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	08022f44 	.word	0x08022f44
 8004a5c:	08022f4c 	.word	0x08022f4c
 8004a60:	20016fc8 	.word	0x20016fc8

08004a64 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <SDM_CloseFile+0x28>)
 8004a78:	4413      	add	r3, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f013 feb2 	bl	80187e4 <f_close>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20016fc8 	.word	0x20016fc8

08004a90 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0da      	sub	sp, #360	; 0x168
 8004a94:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8004a9c:	1d3a      	adds	r2, r7, #4
 8004a9e:	4937      	ldr	r1, [pc, #220]	; (8004b7c <SDM_GetLastDirNumber+0xec>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	c903      	ldmia	r1, {r0, r1}
 8004aa4:	6018      	str	r0, [r3, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	8019      	strh	r1, [r3, #0]
 8004aaa:	3302      	adds	r3, #2
 8004aac:	0c09      	lsrs	r1, r1, #16
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	222a      	movs	r2, #42	; 0x2a
 8004ab8:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	2200      	movs	r2, #0
 8004abe:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	f107 010c 	add.w	r1, r7, #12
 8004ac6:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8004aca:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <SDM_GetLastDirNumber+0xf0>)
 8004acc:	f013 ffb2 	bl	8018a34 <f_findfirst>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	7d9b      	ldrb	r3, [r3, #22]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d038      	beq.n	8004b52 <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	331d      	adds	r3, #29
 8004ae6:	220a      	movs	r2, #10
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f01c f93a 	bl	8020d64 <strtol>
 8004af0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8004af4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004af8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004afc:	429a      	cmp	r2, r3
 8004afe:	da28      	bge.n	8004b52 <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8004b00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b04:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8004b08:	e023      	b.n	8004b52 <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8004b0a:	f107 020c 	add.w	r2, r7, #12
 8004b0e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f013 ff65 	bl	80189e4 <f_findnext>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	7d9b      	ldrb	r3, [r3, #22]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d013      	beq.n	8004b52 <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	331d      	adds	r3, #29
 8004b30:	220a      	movs	r2, #10
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f01c f915 	bl	8020d64 <strtol>
 8004b3a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8004b3e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004b42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b46:	429a      	cmp	r2, r3
 8004b48:	dd03      	ble.n	8004b52 <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8004b4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8004b52:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <SDM_GetLastDirNumber+0xd4>
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	7d9b      	ldrb	r3, [r3, #22]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1d2      	bne.n	8004b0a <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8004b64:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f013 fed8 	bl	801891e <f_closedir>
  return (uint32_t)dir_n;
 8004b6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08022f58 	.word	0x08022f58
 8004b80:	08022f54 	.word	0x08022f54

08004b84 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b096      	sub	sp, #88	; 0x58
 8004b88:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b8e:	2300      	movs	r3, #0
 8004b90:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8004b92:	f7fd f8b9 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004b96:	64f8      	str	r0, [r7, #76]	; 0x4c
  dir_n = SDM_GetLastDirNumber();
 8004b98:	f7ff ff7a 	bl	8004a90 <SDM_GetLastDirNumber>
 8004b9c:	6538      	str	r0, [r7, #80]	; 0x50
  dir_n++;
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	653b      	str	r3, [r7, #80]	; 0x50
  
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004ba4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004baa:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <SDM_InitFiles+0xe4>)
 8004bac:	492f      	ldr	r1, [pc, #188]	; (8004c6c <SDM_InitFiles+0xe8>)
 8004bae:	f01b f98b 	bl	801fec8 <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8004bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f013 ff5a 	bl	8018a70 <f_mkdir>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if(test != FR_OK)
 8004bc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <SDM_InitFiles+0x4a>
  {
    return 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e047      	b.n	8004c5e <SDM_InitFiles+0xda>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd2:	e024      	b.n	8004c1e <SDM_InitFiles+0x9a>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd f8c7 	bl	8001d6c <COM_GetSensorStatus>
 8004bde:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be2:	7b9b      	ldrb	r3, [r3, #14]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <SDM_InitFiles+0x94>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd f8a9 	bl	8001d44 <COM_GetSensorDescriptor>
 8004bf2:	6438      	str	r0, [r7, #64]	; 0x40
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	491c      	ldr	r1, [pc, #112]	; (8004c70 <SDM_InitFiles+0xec>)
 8004c00:	f01b f962 	bl	801fec8 <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8004c04:	463b      	mov	r3, r7
 8004c06:	4619      	mov	r1, r3
 8004c08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c0a:	f7ff ff01 	bl	8004a10 <SDM_OpenFile>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <SDM_InitFiles+0x94>
      {
        return 1;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e022      	b.n	8004c5e <SDM_InitFiles+0xda>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3d5      	bcc.n	8004bd4 <SDM_InitFiles+0x50>
      }
    }
  }
  
  SDM_Memory_Init();
 8004c28:	f7ff fdf2 	bl	8004810 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c30:	e00f      	b.n	8004c52 <SDM_InitFiles+0xce>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd f898 	bl	8001d6c <COM_GetSensorStatus>
 8004c3c:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	7b9b      	ldrb	r3, [r3, #14]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <SDM_InitFiles+0xc8>
    {
      SDM_StartSensorThread(i);
 8004c46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c48:	f000 f9b4 	bl	8004fb4 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4e:	3301      	adds	r3, #1
 8004c50:	657b      	str	r3, [r7, #84]	; 0x54
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d3ea      	bcc.n	8004c32 <SDM_InitFiles+0xae>
    }
  }  
  
  return 0;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3758      	adds	r7, #88	; 0x58
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	08022f60 	.word	0x08022f60
 8004c6c:	08022f68 	.word	0x08022f68
 8004c70:	08022f70 	.word	0x08022f70

08004c74 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b097      	sub	sp, #92	; 0x5c
 8004c78:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7e:	2300      	movs	r3, #0
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004c86:	f7fd f83f 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004c8a:	64f8      	str	r0, [r7, #76]	; 0x4c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c90:	e00f      	b.n	8004cb2 <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd f868 	bl	8001d6c <COM_GetSensorStatus>
 8004c9c:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca0:	7b9b      	ldrb	r3, [r3, #14]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004ca6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ca8:	f000 f9f6 	bl	8005098 <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cae:	3301      	adds	r3, #1
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3ea      	bcc.n	8004c92 <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc0:	e017      	b.n	8004cf2 <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd f850 	bl	8001d6c <COM_GetSensorStatus>
 8004ccc:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd0:	7b9b      	ldrb	r3, [r3, #14]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8004cd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cd8:	f000 f892 	bl	8004e00 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8004cdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cde:	f7ff fec1 	bl	8004a64 <SDM_CloseFile>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <SDM_CloseFiles+0x78>
      {
        return 1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e042      	b.n	8004d72 <SDM_CloseFiles+0xfe>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cee:	3301      	adds	r3, #1
 8004cf0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3e2      	bcc.n	8004cc2 <SDM_CloseFiles+0x4e>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 8004cfc:	f7ff fec8 	bl	8004a90 <SDM_GetLastDirNumber>
 8004d00:	6538      	str	r0, [r7, #80]	; 0x50
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004d02:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <SDM_CloseFiles+0x108>)
 8004d0a:	491d      	ldr	r1, [pc, #116]	; (8004d80 <SDM_CloseFiles+0x10c>)
 8004d0c:	f01b f8dc 	bl	801fec8 <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8004d10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	491a      	ldr	r1, [pc, #104]	; (8004d84 <SDM_CloseFiles+0x110>)
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f01b f8d4 	bl	801fec8 <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	220a      	movs	r2, #10
 8004d26:	4619      	mov	r1, r3
 8004d28:	4817      	ldr	r0, [pc, #92]	; (8004d88 <SDM_CloseFiles+0x114>)
 8004d2a:	f013 f86b 	bl	8017e04 <f_open>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <SDM_CloseFiles+0xc4>
  {
    return 1;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e01c      	b.n	8004d72 <SDM_CloseFiles+0xfe>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fa58 	bl	80051f0 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8004d40:	687c      	ldr	r4, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fa65 	bl	8000214 <strlen>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 f81c 	bl	8004d8c <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8004d54:	480c      	ldr	r0, [pc, #48]	; (8004d88 <SDM_CloseFiles+0x114>)
 8004d56:	f013 fd45 	bl	80187e4 <f_close>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <SDM_CloseFiles+0xf0>
  {
    return 1;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e006      	b.n	8004d72 <SDM_CloseFiles+0xfe>
  }
  
  HSD_JSON_free(JSON_string);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc f800 	bl	8000d6c <HSD_JSON_free>
  JSON_string = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
  
  return 0;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	375c      	adds	r7, #92	; 0x5c
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08022f60 	.word	0x08022f60
 8004d80:	08022f68 	.word	0x08022f68
 8004d84:	08022f78 	.word	0x08022f78
 8004d88:	20016d98 	.word	0x20016d98

08004d8c <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8004d96:	f107 0308 	add.w	r3, r7, #8
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4807      	ldr	r0, [pc, #28]	; (8004dbc <SDM_WriteConfigBuffer+0x30>)
 8004da0:	f013 fb2d 	bl	80183fe <f_write>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8004db2:	2301      	movs	r3, #1
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20016d98 	.word	0x20016d98

08004dc0 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <SDM_WriteBuffer+0x3c>)
 8004dd8:	1898      	adds	r0, r3, r2
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	f013 fb0c 	bl	80183fe <f_write>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <SDM_WriteBuffer+0x30>
  {
    return 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8004df0:	2301      	movs	r3, #1
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20016fc8 	.word	0x20016fc8

08004e00 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fc ffab 	bl	8001d6c <COM_GetSensorStatus>
 8004e16:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <SDM_Flush_Buffer+0x5a>
 8004e2a:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20f      	bcs.n	8004e5a <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8004e3a:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <SDM_Flush_Buffer+0xbc>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ffb6 	bl	8004dc0 <SDM_WriteBuffer>
 8004e54:	4603      	mov	r3, r0
 8004e56:	75fb      	strb	r3, [r7, #23]
 8004e58:	e023      	b.n	8004ea2 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d91b      	bls.n	8004ea2 <SDM_Flush_Buffer+0xa2>
 8004e6a:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	3b01      	subs	r3, #1
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d212      	bcs.n	8004ea2 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <SDM_Flush_Buffer+0xbc>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	18d1      	adds	r1, r2, r3
 8004e88:	4a0b      	ldr	r2, [pc, #44]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	461a      	mov	r2, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff91 	bl	8004dc0 <SDM_WriteBuffer>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <SDM_Flush_Buffer+0xb8>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000954 	.word	0x20000954
 8004ebc:	2001880c 	.word	0x2001880c

08004ec0 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc ff48 	bl	8001d6c <COM_GetSensorStatus>
 8004edc:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	4a31      	ldr	r2, [pc, #196]	; (8004fa8 <SDM_Fill_Buffer+0xe8>)
 8004ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee6:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
 8004eea:	4a30      	ldr	r2, [pc, #192]	; (8004fac <SDM_Fill_Buffer+0xec>)
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004efe:	e013      	b.n	8004f28 <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	441a      	add	r2, r3
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	440b      	add	r3, r1
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	701a      	strb	r2, [r3, #0]
    dstP++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
    srcP++;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d301      	bcc.n	8004f28 <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 8004f28:	88bb      	ldrh	r3, [r7, #4]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3e7      	bcc.n	8004f00 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <SDM_Fill_Buffer+0xec>)
 8004f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d213      	bcs.n	8004f68 <SDM_Fill_Buffer+0xa8>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d30e      	bcc.n	8004f68 <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004f4a:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <SDM_Fill_Buffer+0xf0>)
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004f54:	2200      	movs	r2, #0
 8004f56:	4619      	mov	r1, r3
 8004f58:	f014 fa0c 	bl	8019374 <osMessagePut>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d017      	beq.n	8004f92 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004f62:	f000 f9fb 	bl	800535c <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004f66:	e014      	b.n	8004f92 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <SDM_Fill_Buffer+0xec>)
 8004f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d20d      	bcs.n	8004f92 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <SDM_Fill_Buffer+0xf0>)
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f80:	2200      	movs	r2, #0
 8004f82:	4619      	mov	r1, r3
 8004f84:	f014 f9f6 	bl	8019374 <osMessagePut>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004f8e:	f000 f9e5 	bl	800535c <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	4905      	ldr	r1, [pc, #20]	; (8004fac <SDM_Fill_Buffer+0xec>)
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2001880c 	.word	0x2001880c
 8004fac:	20000954 	.word	0x20000954
 8004fb0:	200185a8 	.word	0x200185a8

08004fb4 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8004fbc:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <SDM_StartSensorThread+0xbc>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d102      	bne.n	8004fce <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 8004fc8:	f7fe fca8 	bl	800391c <IIS3DWB_Start>
 8004fcc:	e046      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <SDM_StartSensorThread+0xc0>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d102      	bne.n	8004fe0 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 8004fda:	f7fe f9df 	bl	800339c <HTS221_Start>
 8004fde:	e03d      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <SDM_StartSensorThread+0xc4>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d102      	bne.n	8004ff2 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 8004fec:	f7fe f9fc 	bl	80033e8 <IIS2DH_Start>
 8004ff0:	e034      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <SDM_StartSensorThread+0xc8>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d102      	bne.n	8005004 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 8004ffe:	f7fe fa19 	bl	8003434 <IIS2MDC_Start>
 8005002:	e02b      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <SDM_StartSensorThread+0xcc>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4293      	cmp	r3, r2
 800500e:	d102      	bne.n	8005016 <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 8005010:	f7fe fcaa 	bl	8003968 <IMP34DT05_Start>
 8005014:	e022      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <SDM_StartSensorThread+0xd0>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4293      	cmp	r3, r2
 8005020:	d102      	bne.n	8005028 <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 8005022:	f7ff f8e3 	bl	80041ec <MP23ABS1_Start>
 8005026:	e019      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <SDM_StartSensorThread+0xd4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4293      	cmp	r3, r2
 8005032:	d102      	bne.n	800503a <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 8005034:	f7fe fcbe 	bl	80039b4 <ISM330DHCX_Start>
 8005038:	e010      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <SDM_StartSensorThread+0xd8>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4293      	cmp	r3, r2
 8005044:	d102      	bne.n	800504c <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 8005046:	f7fe fcdb 	bl	8003a00 <LPS22HH_Start>
 800504a:	e007      	b.n	800505c <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <SDM_StartSensorThread+0xdc>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 8005058:	f000 ff0a 	bl	8005e70 <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 800505c:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <SDM_StartSensorThread+0xe0>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
  
  return 0;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200163ac 	.word	0x200163ac
 8005074:	200166c0 	.word	0x200166c0
 8005078:	200166d0 	.word	0x200166d0
 800507c:	20016681 	.word	0x20016681
 8005080:	200166c8 	.word	0x200166c8
 8005084:	20016680 	.word	0x20016680
 8005088:	200166c1 	.word	0x200166c1
 800508c:	200166d9 	.word	0x200166d9
 8005090:	200166d8 	.word	0x200166d8
 8005094:	20000028 	.word	0x20000028

08005098 <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <SDM_StopSensorThread+0xbc>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d102      	bne.n	80050b2 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 80050ac:	f7fe fc44 	bl	8003938 <IIS3DWB_Stop>
 80050b0:	e046      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <SDM_StopSensorThread+0xc0>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d102      	bne.n	80050c4 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 80050be:	f7fe f97b 	bl	80033b8 <HTS221_Stop>
 80050c2:	e03d      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <SDM_StopSensorThread+0xc4>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d102      	bne.n	80050d6 <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 80050d0:	f7fe f998 	bl	8003404 <IIS2DH_Stop>
 80050d4:	e034      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80050d6:	4b22      	ldr	r3, [pc, #136]	; (8005160 <SDM_StopSensorThread+0xc8>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4293      	cmp	r3, r2
 80050e0:	d102      	bne.n	80050e8 <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 80050e2:	f7fe f9b5 	bl	8003450 <IIS2MDC_Stop>
 80050e6:	e02b      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 80050e8:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <SDM_StopSensorThread+0xcc>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d102      	bne.n	80050fa <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 80050f4:	f7fe fc46 	bl	8003984 <IMP34DT05_Stop>
 80050f8:	e022      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <SDM_StopSensorThread+0xd0>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4293      	cmp	r3, r2
 8005104:	d102      	bne.n	800510c <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 8005106:	f7ff f87f 	bl	8004208 <MP23ABS1_Stop>
 800510a:	e019      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <SDM_StopSensorThread+0xd4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4293      	cmp	r3, r2
 8005116:	d102      	bne.n	800511e <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 8005118:	f7fe fc5a 	bl	80039d0 <ISM330DHCX_Stop>
 800511c:	e010      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <SDM_StopSensorThread+0xd8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4293      	cmp	r3, r2
 8005128:	d102      	bne.n	8005130 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 800512a:	f7fe fc77 	bl	8003a1c <LPS22HH_Stop>
 800512e:	e007      	b.n	8005140 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <SDM_StopSensorThread+0xdc>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 800513c:	f000 fea6 	bl	8005e8c <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 8005140:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <SDM_StopSensorThread+0xe0>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
  return 0;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200163ac 	.word	0x200163ac
 8005158:	200166c0 	.word	0x200166c0
 800515c:	200166d0 	.word	0x200166d0
 8005160:	20016681 	.word	0x20016681
 8005164:	200166c8 	.word	0x200166c8
 8005168:	20016680 	.word	0x20016680
 800516c:	200166c1 	.word	0x200166c1
 8005170:	200166d9 	.word	0x200166d9
 8005174:	200166d8 	.word	0x200166d8
 8005178:	20000028 	.word	0x20000028

0800517c <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 8005184:	f7fc fdb6 	bl	8001cf4 <COM_GetDevice>
 8005188:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 800518a:	2354      	movs	r3, #84	; 0x54
 800518c:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6939      	ldr	r1, [r7, #16]
 8005192:	4816      	ldr	r0, [pc, #88]	; (80051ec <SDM_ReadJSON+0x70>)
 8005194:	f01a fd9e 	bl	801fcd4 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 8005198:	4914      	ldr	r1, [pc, #80]	; (80051ec <SDM_ReadJSON+0x70>)
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fe4e 	bl	8000e3c <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	75fb      	strb	r3, [r7, #23]
 80051a4:	e016      	b.n	80051d4 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	330a      	adds	r3, #10
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <SDM_ReadJSON+0x70>)
 80051ba:	330a      	adds	r3, #10
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80051c6:	7dfa      	ldrb	r2, [r7, #23]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fd fec3 	bl	8002f54 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	3301      	adds	r3, #1
 80051d2:	75fb      	strb	r3, [r7, #23]
 80051d4:	7dfa      	ldrb	r2, [r7, #23]
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <SDM_ReadJSON+0x70>)
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	429a      	cmp	r2, r3
 80051dc:	d3e3      	bcc.n	80051a6 <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 80051de:	f7fd ffc7 	bl	8003170 <update_sensors_config>
  
  return 0;  
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000aac 	.word	0x20000aac

080051f0 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 80051f8:	f7fc fd7c 	bl	8001cf4 <COM_GetDevice>
 80051fc:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 80051fe:	2201      	movs	r2, #1
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7fb fdc2 	bl	8000d8c <HSD_JSON_serialize_Device>
 8005208:	4603      	mov	r3, r0
 800520a:	60bb      	str	r3, [r7, #8]
  
  return size;
 800520c:	68bb      	ldr	r3, [r7, #8]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d138      	bne.n	800529a <HAL_GPIO_EXTI_Callback+0x82>
  {
  case USER_BUTTON_PIN:
    if( HAL_GetTick() - t_start > 1000 )
 8005228:	f002 fe60 	bl	8007eec <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005238:	d92f      	bls.n	800529a <HAL_GPIO_EXTI_Callback+0x82>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_GPIO_EXTI_Callback+0x90>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <HAL_GPIO_EXTI_Callback+0x36>
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_GPIO_EXTI_Callback+0x90>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d125      	bne.n	800529a <HAL_GPIO_EXTI_Callback+0x82>
      {  		
        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <HAL_GPIO_EXTI_Callback+0x94>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	f248 0101 	movw	r1, #32769	; 0x8001
 8005258:	4618      	mov	r0, r3
 800525a:	f014 f88b 	bl	8019374 <osMessagePut>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_GPIO_EXTI_Callback+0x50>
        {
          _Error_Handler();
 8005264:	f000 f87a 	bl	800535c <_Error_Handler>
        }
        
        t_start = HAL_GetTick();
 8005268:	f002 fe40 	bl	8007eec <HAL_GetTick>
 800526c:	4603      	mov	r3, r0
 800526e:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005270:	6013      	str	r3, [r2, #0]
        
#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005272:	f002 fe3b 	bl	8007eec <HAL_GetTick>
 8005276:	4603      	mov	r3, r0
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005282:	6013      	str	r3, [r2, #0]
        
        if (SD_Logging_Enabled == 1)
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d103      	bne.n	8005294 <HAL_GPIO_EXTI_Callback+0x7c>
          SD_Logging_Enabled = 0;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
#endif        
      }
    }
    
  default:
    break;
 8005292:	e002      	b.n	800529a <HAL_GPIO_EXTI_Callback+0x82>
          SD_Logging_Enabled = 1;
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
    break;
 800529a:	bf00      	nop
  }
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20000980 	.word	0x20000980
 80052a8:	20000504 	.word	0x20000504
 80052ac:	200185a8 	.word	0x200185a8
 80052b0:	2000098c 	.word	0x2000098c
 80052b4:	20000990 	.word	0x20000990

080052b8 <SDM_AutosaveFile>:


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <SDM_AutosaveFile+0x94>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 80052c4:	f002 fe12 	bl	8007eec <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b21      	ldr	r3, [pc, #132]	; (8005350 <SDM_AutosaveFile+0x98>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d936      	bls.n	8005346 <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <SDM_AutosaveFile+0x9c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	f248 0101 	movw	r1, #32769	; 0x8001
 80052e2:	4618      	mov	r0, r3
 80052e4:	f014 f846 	bl	8019374 <osMessagePut>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 80052ee:	f000 f835 	bl	800535c <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 80052f2:	f002 fdfb 	bl	8007eec <HAL_GetTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <SDM_AutosaveFile+0x98>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <SDM_AutosaveFile+0x98>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <SDM_AutosaveFile+0xa0>)
 8005302:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 8005304:	e01f      	b.n	8005346 <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8005306:	f002 fdf1 	bl	8007eec <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <SDM_AutosaveFile+0x98>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f242 7210 	movw	r2, #10000	; 0x2710
 8005316:	4293      	cmp	r3, r2
 8005318:	d915      	bls.n	8005346 <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <SDM_AutosaveFile+0x9c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	f248 0101 	movw	r1, #32769	; 0x8001
 8005324:	4618      	mov	r0, r3
 8005326:	f014 f825 	bl	8019374 <osMessagePut>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8005330:	f000 f814 	bl	800535c <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005334:	f002 fdda 	bl	8007eec <HAL_GetTick>
 8005338:	4603      	mov	r3, r0
 800533a:	4a05      	ldr	r2, [pc, #20]	; (8005350 <SDM_AutosaveFile+0x98>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <SDM_AutosaveFile+0x98>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a05      	ldr	r2, [pc, #20]	; (8005358 <SDM_AutosaveFile+0xa0>)
 8005344:	6013      	str	r3, [r2, #0]
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2000097c 	.word	0x2000097c
 8005350:	2000098c 	.word	0x2000098c
 8005354:	200185a8 	.word	0x200185a8
 8005358:	20000980 	.word	0x20000980

0800535c <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  while (1)
 8005360:	e7fe      	b.n	8005360 <_Error_Handler+0x4>
	...

08005364 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 8005368:	4b20      	ldr	r3, [pc, #128]	; (80053ec <SM_SPI_Init+0x88>)
 800536a:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <SM_SPI_Init+0x8c>)
 800536c:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 800536e:	4b1f      	ldr	r3, [pc, #124]	; (80053ec <SM_SPI_Init+0x88>)
 8005370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005374:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <SM_SPI_Init+0x88>)
 8005378:	2200      	movs	r2, #0
 800537a:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <SM_SPI_Init+0x88>)
 800537e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005382:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <SM_SPI_Init+0x88>)
 8005386:	2202      	movs	r2, #2
 8005388:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <SM_SPI_Init+0x88>)
 800538c:	2201      	movs	r2, #1
 800538e:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 8005390:	4b16      	ldr	r3, [pc, #88]	; (80053ec <SM_SPI_Init+0x88>)
 8005392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005396:	619a      	str	r2, [r3, #24]
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 8005398:	4b14      	ldr	r3, [pc, #80]	; (80053ec <SM_SPI_Init+0x88>)
 800539a:	2218      	movs	r2, #24
 800539c:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <SM_SPI_Init+0x88>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <SM_SPI_Init+0x88>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <SM_SPI_Init+0x88>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <SM_SPI_Init+0x88>)
 80053b2:	2207      	movs	r2, #7
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <SM_SPI_Init+0x88>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <SM_SPI_Init+0x88>)
 80053be:	2200      	movs	r2, #0
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <SM_SPI_Init+0x90>)
 80053c4:	2108      	movs	r1, #8
 80053c6:	4809      	ldr	r0, [pc, #36]	; (80053ec <SM_SPI_Init+0x88>)
 80053c8:	f00b f89c 	bl	8010504 <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 80053cc:	4807      	ldr	r0, [pc, #28]	; (80053ec <SM_SPI_Init+0x88>)
 80053ce:	f00a ffcf 	bl	8010370 <HAL_SPI_Init>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 80053d8:	f000 f810 	bl	80053fc <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <SM_SPI_Init+0x94>)
 80053de:	2102      	movs	r1, #2
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <SM_SPI_Init+0x88>)
 80053e2:	f00b f88f 	bl	8010504 <HAL_SPI_RegisterCallback>
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20018948 	.word	0x20018948
 80053f0:	40003800 	.word	0x40003800
 80053f4:	080059b5 	.word	0x080059b5
 80053f8:	080056d5 	.word	0x080056d5

080053fc <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  while (1)
 8005400:	e7fe      	b.n	8005400 <SM_Error_Handler+0x4>
	...

08005404 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 800540a:	2101      	movs	r1, #1
 800540c:	482f      	ldr	r0, [pc, #188]	; (80054cc <SM_OS_Init+0xc8>)
 800540e:	f013 fdf7 	bl	8019000 <osSemaphoreCreate>
 8005412:	4603      	mov	r3, r0
 8005414:	4a2e      	ldr	r2, [pc, #184]	; (80054d0 <SM_OS_Init+0xcc>)
 8005416:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8005418:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <SM_OS_Init+0xcc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f04f 31ff 	mov.w	r1, #4294967295
 8005420:	4618      	mov	r0, r3
 8005422:	f013 fe11 	bl	8019048 <osSemaphoreWait>
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
 8005426:	2101      	movs	r1, #1
 8005428:	482a      	ldr	r0, [pc, #168]	; (80054d4 <SM_OS_Init+0xd0>)
 800542a:	f013 fde9 	bl	8019000 <osSemaphoreCreate>
 800542e:	4603      	mov	r3, r0
 8005430:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <SM_OS_Init+0xd4>)
 8005432:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <SM_OS_Init+0xd4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f04f 31ff 	mov.w	r1, #4294967295
 800543c:	4618      	mov	r0, r3
 800543e:	f013 fe03 	bl	8019048 <osSemaphoreWait>
  
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));  
 8005442:	4826      	ldr	r0, [pc, #152]	; (80054dc <SM_OS_Init+0xd8>)
 8005444:	f013 fe84 	bl	8019150 <osPoolCreate>
 8005448:	4603      	mov	r3, r0
 800544a:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <SM_OS_Init+0xdc>)
 800544c:	6013      	str	r3, [r2, #0]
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 800544e:	4825      	ldr	r0, [pc, #148]	; (80054e4 <SM_OS_Init+0xe0>)
 8005450:	f013 fe7e 	bl	8019150 <osPoolCreate>
 8005454:	4603      	mov	r3, r0
 8005456:	4a24      	ldr	r2, [pc, #144]	; (80054e8 <SM_OS_Init+0xe4>)
 8005458:	6013      	str	r3, [r2, #0]
  
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 800545a:	2100      	movs	r1, #0
 800545c:	4823      	ldr	r0, [pc, #140]	; (80054ec <SM_OS_Init+0xe8>)
 800545e:	f013 ff77 	bl	8019350 <osMessageCreate>
 8005462:	4603      	mov	r3, r0
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <SM_OS_Init+0xec>)
 8005466:	6013      	str	r3, [r2, #0]
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 8005468:	2100      	movs	r1, #0
 800546a:	4822      	ldr	r0, [pc, #136]	; (80054f4 <SM_OS_Init+0xf0>)
 800546c:	f013 ff70 	bl	8019350 <osMessageCreate>
 8005470:	4603      	mov	r3, r0
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <SM_OS_Init+0xf4>)
 8005474:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <SM_OS_Init+0xec>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4920      	ldr	r1, [pc, #128]	; (80054fc <SM_OS_Init+0xf8>)
 800547c:	4618      	mov	r0, r3
 800547e:	f014 ffcd 	bl	801a41c <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <SM_OS_Init+0xfc>)
 8005484:	f107 0414 	add.w	r4, r7, #20
 8005488:	461d      	mov	r5, r3
 800548a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800548c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800548e:	682b      	ldr	r3, [r5, #0]
 8005490:	6023      	str	r3, [r4, #0]
  /* SPI read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <SM_OS_Init+0x100>)
 8005494:	463c      	mov	r4, r7
 8005496:	461d      	mov	r5, r3
 8005498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6023      	str	r3, [r4, #0]
  
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f013 fd83 	bl	8018fb2 <osThreadCreate>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a16      	ldr	r2, [pc, #88]	; (8005508 <SM_OS_Init+0x104>)
 80054b0:	6013      	str	r3, [r2, #0]
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);  
 80054b2:	463b      	mov	r3, r7
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f013 fd7b 	bl	8018fb2 <osThreadCreate>
 80054bc:	4603      	mov	r3, r0
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <SM_OS_Init+0x108>)
 80054c0:	6013      	str	r3, [r2, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3728      	adds	r7, #40	; 0x28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	08023220 	.word	0x08023220
 80054d0:	20018844 	.word	0x20018844
 80054d4:	08023224 	.word	0x08023224
 80054d8:	20018a54 	.word	0x20018a54
 80054dc:	08023238 	.word	0x08023238
 80054e0:	2001883c 	.word	0x2001883c
 80054e4:	08023244 	.word	0x08023244
 80054e8:	200189d4 	.word	0x200189d4
 80054ec:	08023228 	.word	0x08023228
 80054f0:	20018838 	.word	0x20018838
 80054f4:	08023230 	.word	0x08023230
 80054f8:	20018b1c 	.word	0x20018b1c
 80054fc:	08022fa8 	.word	0x08022fa8
 8005500:	08022fb8 	.word	0x08022fb8
 8005504:	08022fcc 	.word	0x08022fcc
 8005508:	20018840 	.word	0x20018840
 800550c:	20018a58 	.word	0x20018a58

08005510 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	460b      	mov	r3, r1
 800551e:	72fb      	strb	r3, [r7, #11]
 8005520:	4613      	mov	r3, r2
 8005522:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005524:	2300      	movs	r3, #0
 8005526:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <SM_SPI_Read_Os+0x84>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f013 fe6c 	bl	801920a <osPoolAlloc>
 8005532:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b33      	cmp	r3, #51	; 0x33
 800553a:	d104      	bne.n	8005546 <SM_SPI_Read_Os+0x36>
 800553c:	893b      	ldrh	r3, [r7, #8]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d901      	bls.n	8005546 <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 8005542:	2340      	movs	r3, #64	; 0x40
 8005544:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 800554c:	7afa      	ldrb	r2, [r7, #11]
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	4313      	orrs	r3, r2
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	893a      	ldrh	r2, [r7, #8]
 8005562:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <SM_SPI_Read_Os+0x88>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6939      	ldr	r1, [r7, #16]
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	4618      	mov	r0, r3
 8005576:	f013 fefd 	bl	8019374 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f04f 31ff 	mov.w	r1, #4294967295
 8005584:	4618      	mov	r0, r3
 8005586:	f013 fd5f 	bl	8019048 <osSemaphoreWait>
  
  return 0;  
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	2001883c 	.word	0x2001883c
 8005598:	20018838 	.word	0x20018838

0800559c <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	461a      	mov	r2, r3
 80055a8:	460b      	mov	r3, r1
 80055aa:	72fb      	strb	r3, [r7, #11]
 80055ac:	4613      	mov	r3, r2
 80055ae:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 80055b0:	2300      	movs	r3, #0
 80055b2:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b33      	cmp	r3, #51	; 0x33
 80055ba:	d104      	bne.n	80055c6 <SM_SPI_Write_Os+0x2a>
 80055bc:	893b      	ldrh	r3, [r7, #8]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d901      	bls.n	80055c6 <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 80055c2:	2340      	movs	r3, #64	; 0x40
 80055c4:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <SM_SPI_Write_Os+0x80>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f013 fe1d 	bl	801920a <osPoolAlloc>
 80055d0:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 80055d8:	7afa      	ldrb	r2, [r7, #11]
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	4313      	orrs	r3, r2
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	893a      	ldrh	r2, [r7, #8]
 80055e8:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <SM_SPI_Write_Os+0x84>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6939      	ldr	r1, [r7, #16]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	4618      	mov	r0, r3
 80055fc:	f013 feba 	bl	8019374 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f04f 31ff 	mov.w	r1, #4294967295
 800560a:	4618      	mov	r0, r3
 800560c:	f013 fd1c 	bl	8019048 <osSemaphoreWait>
  
  return 0;  
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2001883c 	.word	0x2001883c
 8005620:	20018838 	.word	0x20018838

08005624 <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 800562c:	210a      	movs	r1, #10
 800562e:	2000      	movs	r0, #0
 8005630:	f015 fbf0 	bl	801ae14 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <spi_Thread+0xa0>)
 8005636:	6819      	ldr	r1, [r3, #0]
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	4618      	mov	r0, r3
 8005642:	f013 fed7 	bl	80193f4 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6858      	ldr	r0, [r3, #4]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	891b      	ldrh	r3, [r3, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	4619      	mov	r1, r3
 800565a:	f004 fc73 	bl	8009f44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f103 010c 	add.w	r1, r3, #12
 8005664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005668:	2201      	movs	r2, #1
 800566a:	4817      	ldr	r0, [pc, #92]	; (80056c8 <spi_Thread+0xa4>)
 800566c:	f00a fff0 	bl	8010650 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	6899      	ldr	r1, [r3, #8]
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	89db      	ldrh	r3, [r3, #14]
 800567c:	4812      	ldr	r0, [pc, #72]	; (80056c8 <spi_Thread+0xa4>)
 800567e:	f00b f94d 	bl	801091c <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <spi_Thread+0xa8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f04f 31ff 	mov.w	r1, #4294967295
 800568a:	4618      	mov	r0, r3
 800568c:	f013 fcdc 	bl	8019048 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6858      	ldr	r0, [r3, #4]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	891b      	ldrh	r3, [r3, #8]
 800569c:	2201      	movs	r2, #1
 800569e:	4619      	mov	r1, r3
 80056a0:	f004 fc50 	bl	8009f44 <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <spi_Thread+0xac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f013 fe0b 	bl	80192ce <osPoolFree>
    osSemaphoreRelease(*sem);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f013 fd11 	bl	80190e4 <osSemaphoreRelease>
  {    
 80056c2:	e7b7      	b.n	8005634 <spi_Thread+0x10>
 80056c4:	20018838 	.word	0x20018838
 80056c8:	20018948 	.word	0x20018948
 80056cc:	20018844 	.word	0x20018844
 80056d0:	2001883c 	.word	0x2001883c

080056d4 <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <SM_SPI_TxRxCpltCallback+0x1c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f013 fcff 	bl	80190e4 <osSemaphoreRelease>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20018844 	.word	0x20018844

080056f4 <SM_I2C_Init>:
* @brief Sensor Manager I2C Initialization Function
* @param None
* @retval None
*/
static void SM_I2C_Init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  hsm_i2c.Instance = SM_I2C_x;
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <SM_I2C_Init+0x9c>)
 80056fa:	4a26      	ldr	r2, [pc, #152]	; (8005794 <SM_I2C_Init+0xa0>)
 80056fc:	601a      	str	r2, [r3, #0]
  hsm_i2c.Init.Timing = 0x00B03FDB;
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <SM_I2C_Init+0x9c>)
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <SM_I2C_Init+0xa4>)
 8005702:	605a      	str	r2, [r3, #4]
  hsm_i2c.Init.OwnAddress1 = 0;
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <SM_I2C_Init+0x9c>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  hsm_i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <SM_I2C_Init+0x9c>)
 800570c:	2201      	movs	r2, #1
 800570e:	60da      	str	r2, [r3, #12]
  hsm_i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005710:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <SM_I2C_Init+0x9c>)
 8005712:	2200      	movs	r2, #0
 8005714:	611a      	str	r2, [r3, #16]
  hsm_i2c.Init.OwnAddress2 = 0;
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <SM_I2C_Init+0x9c>)
 8005718:	2200      	movs	r2, #0
 800571a:	615a      	str	r2, [r3, #20]
  hsm_i2c.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800571c:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <SM_I2C_Init+0x9c>)
 800571e:	2200      	movs	r2, #0
 8005720:	619a      	str	r2, [r3, #24]
  hsm_i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005722:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <SM_I2C_Init+0x9c>)
 8005724:	2200      	movs	r2, #0
 8005726:	61da      	str	r2, [r3, #28]
  hsm_i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;    
 8005728:	4b19      	ldr	r3, [pc, #100]	; (8005790 <SM_I2C_Init+0x9c>)
 800572a:	2200      	movs	r2, #0
 800572c:	621a      	str	r2, [r3, #32]
  
  /* Register MSP Callback */
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MSPINIT_CB_ID, SM_I2C_MspInit);
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <SM_I2C_Init+0xa8>)
 8005730:	2109      	movs	r1, #9
 8005732:	4817      	ldr	r0, [pc, #92]	; (8005790 <SM_I2C_Init+0x9c>)
 8005734:	f004 fd26 	bl	800a184 <HAL_I2C_RegisterCallback>
  
  if (HAL_I2C_Init(&hsm_i2c) != HAL_OK)
 8005738:	4815      	ldr	r0, [pc, #84]	; (8005790 <SM_I2C_Init+0x9c>)
 800573a:	f004 fc4d 	bl	8009fd8 <HAL_I2C_Init>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <SM_I2C_Init+0x54>
  {
    SM_Error_Handler();
 8005744:	f7ff fe5a 	bl	80053fc <SM_Error_Handler>
  }
  /** Configure Analog filter */
  if (HAL_I2CEx_ConfigAnalogFilter(&hsm_i2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005748:	2100      	movs	r1, #0
 800574a:	4811      	ldr	r0, [pc, #68]	; (8005790 <SM_I2C_Init+0x9c>)
 800574c:	f006 fa6b 	bl	800bc26 <HAL_I2CEx_ConfigAnalogFilter>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <SM_I2C_Init+0x66>
  {
    SM_Error_Handler();
 8005756:	f7ff fe51 	bl	80053fc <SM_Error_Handler>
  }
  /** Configure Digital filter */
  if (HAL_I2CEx_ConfigDigitalFilter(&hsm_i2c, 0) != HAL_OK)
 800575a:	2100      	movs	r1, #0
 800575c:	480c      	ldr	r0, [pc, #48]	; (8005790 <SM_I2C_Init+0x9c>)
 800575e:	f006 faad 	bl	800bcbc <HAL_I2CEx_ConfigDigitalFilter>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <SM_I2C_Init+0x78>
  {
    SM_Error_Handler();
 8005768:	f7ff fe48 	bl	80053fc <SM_Error_Handler>
  }
  
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MEM_RX_COMPLETE_CB_ID, SM_I2C_MemRxCpltCallback);
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <SM_I2C_Init+0xac>)
 800576e:	2106      	movs	r1, #6
 8005770:	4807      	ldr	r0, [pc, #28]	; (8005790 <SM_I2C_Init+0x9c>)
 8005772:	f004 fd07 	bl	800a184 <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MEM_TX_COMPLETE_CB_ID, SM_I2C_MemTxCpltCallback);
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <SM_I2C_Init+0xb0>)
 8005778:	2105      	movs	r1, #5
 800577a:	4805      	ldr	r0, [pc, #20]	; (8005790 <SM_I2C_Init+0x9c>)
 800577c:	f004 fd02 	bl	800a184 <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_ERROR_CB_ID, SM_I2C_ErrorCallback);
 8005780:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <SM_I2C_Init+0xb4>)
 8005782:	2107      	movs	r1, #7
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <SM_I2C_Init+0x9c>)
 8005786:	f004 fcfd 	bl	800a184 <HAL_I2C_RegisterCallback>
}
 800578a:	bf00      	nop
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200189d8 	.word	0x200189d8
 8005794:	40005800 	.word	0x40005800
 8005798:	00b03fdb 	.word	0x00b03fdb
 800579c:	08005b3d 	.word	0x08005b3d
 80057a0:	08005889 	.word	0x08005889
 80057a4:	080058bd 	.word	0x080058bd
 80057a8:	080058dd 	.word	0x080058dd

080057ac <i2c_Thread>:
*         unlocks the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void i2c_Thread(void const *argument)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	6078      	str	r0, [r7, #4]
  (void)argument;

#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_I2C_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_I2C_DEBUG_PIN );
 80057b4:	210b      	movs	r1, #11
 80057b6:	2000      	movs	r0, #0
 80057b8:	f015 fb2c 	bl	801ae14 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {
    evt = osMessageGet(i2cReqQueue_id, osWaitForever);
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <i2c_Thread+0xcc>)
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	f107 0308 	add.w	r3, r7, #8
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	4618      	mov	r0, r3
 80057ca:	f013 fe13 	bl	80193f4 <osMessageGet>
    uint8_t autoInc = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
    
    SM_Message_t * msg = evt.value.p;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	61bb      	str	r3, [r7, #24]
    if (msg->sensorHandler->WhoAmI == 0xBCU && msg->readSize > 1)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2bbc      	cmp	r3, #188	; 0xbc
 80057de:	d105      	bne.n	80057ec <i2c_Thread+0x40>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	89db      	ldrh	r3, [r3, #14]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d901      	bls.n	80057ec <i2c_Thread+0x40>
    {
      autoInc = 0x80;
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	77fb      	strb	r3, [r7, #31]
    }

    if (msg->isRead)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <i2c_Thread+0x74>
    {
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	b299      	uxth	r1, r3
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	7b1a      	ldrb	r2, [r3, #12]
 8005800:	7ffb      	ldrb	r3, [r7, #31]
 8005802:	4313      	orrs	r3, r2
 8005804:	b2db      	uxtb	r3, r3
 8005806:	b298      	uxth	r0, r3
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	89d2      	ldrh	r2, [r2, #14]
 8005810:	9201      	str	r2, [sp, #4]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2301      	movs	r3, #1
 8005816:	4602      	mov	r2, r0
 8005818:	4818      	ldr	r0, [pc, #96]	; (800587c <i2c_Thread+0xd0>)
 800581a:	f004 fe51 	bl	800a4c0 <HAL_I2C_Mem_Read_DMA>
 800581e:	e014      	b.n	800584a <i2c_Thread+0x9e>
    }
    else
    {
      HAL_I2C_Mem_Write_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	b299      	uxth	r1, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	7b1a      	ldrb	r2, [r3, #12]
 800582c:	7ffb      	ldrb	r3, [r7, #31]
 800582e:	4313      	orrs	r3, r2
 8005830:	b2db      	uxtb	r3, r3
 8005832:	b298      	uxth	r0, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	89d2      	ldrh	r2, [r2, #14]
 800583c:	9201      	str	r2, [sp, #4]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2301      	movs	r3, #1
 8005842:	4602      	mov	r2, r0
 8005844:	480d      	ldr	r0, [pc, #52]	; (800587c <i2c_Thread+0xd0>)
 8005846:	f004 fd45 	bl	800a2d4 <HAL_I2C_Mem_Write_DMA>
    }
    osSemaphoreWait(i2cThreadSem_id, osWaitForever);  
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <i2c_Thread+0xd4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f04f 31ff 	mov.w	r1, #4294967295
 8005852:	4618      	mov	r0, r3
 8005854:	f013 fbf8 	bl	8019048 <osSemaphoreWait>
    
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	617b      	str	r3, [r7, #20]
    osPoolFree(i2cPool_id, msg);
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <i2c_Thread+0xd8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	4618      	mov	r0, r3
 8005868:	f013 fd31 	bl	80192ce <osPoolFree>
    
    osSemaphoreRelease(*sem);           
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f013 fc37 	bl	80190e4 <osSemaphoreRelease>
  {
 8005876:	e7a1      	b.n	80057bc <i2c_Thread+0x10>
 8005878:	20018b1c 	.word	0x20018b1c
 800587c:	200189d8 	.word	0x200189d8
 8005880:	20018a54 	.word	0x20018a54
 8005884:	200189d4 	.word	0x200189d4

08005888 <SM_I2C_MemRxCpltCallback>:
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);  
  return 0;
}

void SM_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(i2cThreadSem_id);    
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <SM_I2C_MemRxCpltCallback+0x28>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f013 fc25 	bl	80190e4 <osSemaphoreRelease>
  reg_after_release =  hsm_i2c.Instance->CR1 & 0x00000040;
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <SM_I2C_MemRxCpltCallback+0x2c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <SM_I2C_MemRxCpltCallback+0x30>)
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20018a54 	.word	0x20018a54
 80058b4:	200189d8 	.word	0x200189d8
 80058b8:	20000b00 	.word	0x20000b00

080058bc <SM_I2C_MemTxCpltCallback>:

void SM_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(i2cThreadSem_id);    
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <SM_I2C_MemTxCpltCallback+0x1c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f013 fc0b 	bl	80190e4 <osSemaphoreRelease>
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20018a54 	.word	0x20018a54

080058dc <SM_I2C_ErrorCallback>:


void SM_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  errors++;
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <SM_I2C_ErrorCallback+0x20>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a04      	ldr	r2, [pc, #16]	; (80058fc <SM_I2C_ErrorCallback+0x20>)
 80058ec:	6013      	str	r3, [r2, #0]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000b04 	.word	0x20000b04

08005900 <SM_Peripheral_Init>:

void SM_Peripheral_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 8005904:	f000 f808 	bl	8005918 <SM_DMA_Init>
  SM_I2C_Init();
 8005908:	f7ff fef4 	bl	80056f4 <SM_I2C_Init>
  SM_SPI_Init();
 800590c:	f7ff fd2a 	bl	8005364 <SM_SPI_Init>
  SM_TIM_Init();
 8005910:	f000 f9d2 	bl	8005cb8 <SM_TIM_Init>
}
 8005914:	bf00      	nop
 8005916:	bd80      	pop	{r7, pc}

08005918 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <SM_DMA_Init+0x98>)
 8005920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005922:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <SM_DMA_Init+0x98>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6493      	str	r3, [r2, #72]	; 0x48
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <SM_DMA_Init+0x98>)
 800592c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
  SM_SPIx_DMA_CLK_ENABLE();
 8005936:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <SM_DMA_Init+0x98>)
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <SM_DMA_Init+0x98>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	6493      	str	r3, [r2, #72]	; 0x48
 8005942:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <SM_DMA_Init+0x98>)
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
  SM_I2Cx_DMA_CLK_ENABLE();
 800594e:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <SM_DMA_Init+0x98>)
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <SM_DMA_Init+0x98>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6493      	str	r3, [r2, #72]	; 0x48
 800595a:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <SM_DMA_Init+0x98>)
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
  
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	2103      	movs	r1, #3
 800596a:	200e      	movs	r0, #14
 800596c:	f003 fe89 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_TX_DMA_IRQn);
 8005970:	200e      	movs	r0, #14
 8005972:	f003 fea2 	bl	80096ba <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	2103      	movs	r1, #3
 800597a:	200d      	movs	r0, #13
 800597c:	f003 fe81 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
 8005980:	200d      	movs	r0, #13
 8005982:	f003 fe9a 	bl	80096ba <HAL_NVIC_EnableIRQ>

  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 8005986:	2200      	movs	r2, #0
 8005988:	2103      	movs	r1, #3
 800598a:	200b      	movs	r0, #11
 800598c:	f003 fe79 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 8005990:	200b      	movs	r0, #11
 8005992:	f003 fe92 	bl	80096ba <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 8005996:	2200      	movs	r2, #0
 8005998:	2103      	movs	r1, #3
 800599a:	200c      	movs	r0, #12
 800599c:	f003 fe71 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 80059a0:	200c      	movs	r0, #12
 80059a2:	f003 fe8a 	bl	80096ba <HAL_NVIC_EnableIRQ>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000

080059b4 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059bc:	f107 031c 	add.w	r3, r7, #28
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	611a      	str	r2, [r3, #16]
  
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 80059cc:	4b54      	ldr	r3, [pc, #336]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d0:	4a53      	ldr	r2, [pc, #332]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059d2:	f043 0308 	orr.w	r3, r3, #8
 80059d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059d8:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 80059e4:	4b4e      	ldr	r3, [pc, #312]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e8:	4a4d      	ldr	r2, [pc, #308]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059ea:	f043 0308 	orr.w	r3, r3, #8
 80059ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	697b      	ldr	r3, [r7, #20]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 80059fc:	4b48      	ldr	r3, [pc, #288]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	4a47      	ldr	r2, [pc, #284]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 8005a02:	f043 0304 	orr.w	r3, r3, #4
 8005a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	693b      	ldr	r3, [r7, #16]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a14:	2302      	movs	r3, #2
 8005a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 8005a20:	2305      	movs	r3, #5
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8005a24:	2302      	movs	r3, #2
 8005a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005a28:	f107 031c 	add.w	r3, r7, #28
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	483d      	ldr	r0, [pc, #244]	; (8005b24 <SM_SPI_MspInit+0x170>)
 8005a30:	f004 f8de 	bl	8009bf0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8005a34:	2305      	movs	r3, #5
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8005a38:	2308      	movs	r3, #8
 8005a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005a3c:	f107 031c 	add.w	r3, r7, #28
 8005a40:	4619      	mov	r1, r3
 8005a42:	4838      	ldr	r0, [pc, #224]	; (8005b24 <SM_SPI_MspInit+0x170>)
 8005a44:	f004 f8d4 	bl	8009bf0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8005a48:	2305      	movs	r3, #5
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005a50:	f107 031c 	add.w	r3, r7, #28
 8005a54:	4619      	mov	r1, r3
 8005a56:	4834      	ldr	r0, [pc, #208]	; (8005b28 <SM_SPI_MspInit+0x174>)
 8005a58:	f004 f8ca 	bl	8009bf0 <HAL_GPIO_Init>
  
  SM_SPIx_CLK_ENABLE();
 8005a5c:	4b30      	ldr	r3, [pc, #192]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a2f      	ldr	r2, [pc, #188]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 8005a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
 8005a68:	4b2d      	ldr	r3, [pc, #180]	; (8005b20 <SM_SPI_MspInit+0x16c>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 8005a74:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a76:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <SM_SPI_MspInit+0x17c>)
 8005a78:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a80:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a8c:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a8e:	2280      	movs	r2, #128	; 0x80
 8005a90:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005aa4:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 8005aaa:	4820      	ldr	r0, [pc, #128]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005aac:	f003 fe20 	bl	80096f0 <HAL_DMA_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <SM_SPI_MspInit+0x106>
  {
    SM_Error_Handler();
 8005ab6:	f7ff fca1 	bl	80053fc <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005abe:	659a      	str	r2, [r3, #88]	; 0x58
 8005ac0:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <SM_SPI_MspInit+0x178>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <SM_SPI_MspInit+0x184>)
 8005aca:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ace:	220d      	movs	r2, #13
 8005ad0:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ad8:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8005afc:	480d      	ldr	r0, [pc, #52]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005afe:	f003 fdf7 	bl	80096f0 <HAL_DMA_Init>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <SM_SPI_MspInit+0x158>
  {
    SM_Error_Handler();
 8005b08:	f7ff fc78 	bl	80053fc <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54
 8005b12:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <SM_SPI_MspInit+0x180>)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005b18:	bf00      	nop
 8005b1a:	3730      	adds	r7, #48	; 0x30
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	48000c00 	.word	0x48000c00
 8005b28:	48000800 	.word	0x48000800
 8005b2c:	20018848 	.word	0x20018848
 8005b30:	40020008 	.word	0x40020008
 8005b34:	20018abc 	.word	0x20018abc
 8005b38:	4002001c 	.word	0x4002001c

08005b3c <SM_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
static void SM_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	611a      	str	r2, [r3, #16]
  
  SM_I2C_SCL_PIN_CLK_ENABLE();
 8005b54:	4b52      	ldr	r3, [pc, #328]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	4a51      	ldr	r2, [pc, #324]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b5a:	f043 0320 	orr.w	r3, r3, #32
 8005b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b60:	4b4f      	ldr	r3, [pc, #316]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	693b      	ldr	r3, [r7, #16]
  SM_I2C_SDA_PIN_CLK_ENABLE();
 8005b6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b70:	4a4b      	ldr	r2, [pc, #300]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b72:	f043 0320 	orr.w	r3, r3, #32
 8005b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b78:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b84:	2312      	movs	r3, #18
 8005b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	623b      	str	r3, [r7, #32]
  
  GPIO_InitStruct.Pin = SM_I2C_SCL_PIN;
 8005b90:	2302      	movs	r3, #2
 8005b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = SM_I2C_SCL_AF;
 8005b94:	2304      	movs	r3, #4
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);	
 8005b98:	f107 0314 	add.w	r3, r7, #20
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4841      	ldr	r0, [pc, #260]	; (8005ca4 <SM_I2C_MspInit+0x168>)
 8005ba0:	f004 f826 	bl	8009bf0 <HAL_GPIO_Init>
  
  
  GPIO_InitStruct.Pin = SM_I2C_SDA_PIN;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = SM_I2C_SDA_AF;
 8005ba8:	2304      	movs	r3, #4
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	483c      	ldr	r0, [pc, #240]	; (8005ca4 <SM_I2C_MspInit+0x168>)
 8005bb4:	f004 f81c 	bl	8009bf0 <HAL_GPIO_Init>
  
  /* Peripheral clock enable */
  SM_I2Cx_CLK_ENABLE();
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	4a38      	ldr	r2, [pc, #224]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc4:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <SM_I2C_MspInit+0x164>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
  
  /* I2C DMA Init */
  /* I2C_RX Init */
  hdma_sm_i2c_rx.Instance = SM_I2C_RX_DMA_CHANNEL;
 8005bd0:	4b35      	ldr	r3, [pc, #212]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bd2:	4a36      	ldr	r2, [pc, #216]	; (8005cac <SM_I2C_MspInit+0x170>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hdma_sm_i2c_rx.Init.Request = SM_I2C_RX_DMA_REQUEST;
 8005bd6:	4b34      	ldr	r3, [pc, #208]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bd8:	2212      	movs	r2, #18
 8005bda:	605a      	str	r2, [r3, #4]
  hdma_sm_i2c_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bdc:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
  hdma_sm_i2c_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be2:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
  hdma_sm_i2c_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005be8:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bea:	2280      	movs	r2, #128	; 0x80
 8005bec:	611a      	str	r2, [r3, #16]
  hdma_sm_i2c_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
  hdma_sm_i2c_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf4:	4b2c      	ldr	r3, [pc, #176]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
  hdma_sm_i2c_rx.Init.Mode = DMA_NORMAL;
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
  hdma_sm_i2c_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c00:	4b29      	ldr	r3, [pc, #164]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c06:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_i2c_rx) != HAL_OK)
 8005c08:	4827      	ldr	r0, [pc, #156]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005c0a:	f003 fd71 	bl	80096f0 <HAL_DMA_Init>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <SM_I2C_MspInit+0xdc>
  {
    SM_Error_Handler();
 8005c14:	f7ff fbf2 	bl	80053fc <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hi2c,hdmarx,hdma_sm_i2c_rx);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c1e:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <SM_I2C_MspInit+0x16c>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* I2C_TX Init */
  hdma_sm_i2c_tx.Instance = SM_I2C_TX_DMA_CHANNEL;
 8005c24:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c26:	4a23      	ldr	r2, [pc, #140]	; (8005cb4 <SM_I2C_MspInit+0x178>)
 8005c28:	601a      	str	r2, [r3, #0]
  hdma_sm_i2c_tx.Init.Request = SM_I2C_TX_DMA_REQUEST;
 8005c2a:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c2c:	2213      	movs	r2, #19
 8005c2e:	605a      	str	r2, [r3, #4]
  hdma_sm_i2c_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c30:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c32:	2210      	movs	r2, #16
 8005c34:	609a      	str	r2, [r3, #8]
  hdma_sm_i2c_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	60da      	str	r2, [r3, #12]
  hdma_sm_i2c_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	611a      	str	r2, [r3, #16]
  hdma_sm_i2c_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	615a      	str	r2, [r3, #20]
  hdma_sm_i2c_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	619a      	str	r2, [r3, #24]
  hdma_sm_i2c_tx.Init.Mode = DMA_NORMAL;
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	61da      	str	r2, [r3, #28]
  hdma_sm_i2c_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c54:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c5a:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_i2c_tx) != HAL_OK)
 8005c5c:	4814      	ldr	r0, [pc, #80]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c5e:	f003 fd47 	bl	80096f0 <HAL_DMA_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <SM_I2C_MspInit+0x130>
  {
    SM_Error_Handler();
 8005c68:	f7ff fbc8 	bl	80053fc <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hi2c,hdmatx,hdma_sm_i2c_tx);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <SM_I2C_MspInit+0x174>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 4, 0); /*defines*/
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	2021      	movs	r0, #33	; 0x21
 8005c7e:	f003 fd00 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005c82:	2021      	movs	r0, #33	; 0x21
 8005c84:	f003 fd19 	bl	80096ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	2022      	movs	r0, #34	; 0x22
 8005c8e:	f003 fcf8 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
 8005c92:	2022      	movs	r0, #34	; 0x22
 8005c94:	f003 fd11 	bl	80096ba <HAL_NVIC_EnableIRQ>
}
 8005c98:	bf00      	nop
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	48001400 	.word	0x48001400
 8005ca8:	200188a8 	.word	0x200188a8
 8005cac:	40020030 	.word	0x40020030
 8005cb0:	20018a5c 	.word	0x20018a5c
 8005cb4:	40020044 	.word	0x40020044

08005cb8 <SM_TIM_Init>:

void SM_TIM_Init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <SM_TIM_Init+0x54>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <SM_TIM_Init+0x54>)
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <SM_TIM_Init+0x54>)
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cd8:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <SM_TIM_Init+0x5c>)
 8005cda:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <SM_TIM_Init+0x58>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8005cfc:	4804      	ldr	r0, [pc, #16]	; (8005d10 <SM_TIM_Init+0x58>)
 8005cfe:	f00b fa2b 	bl	8011158 <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	20018908 	.word	0x20018908
 8005d14:	40000c00 	.word	0x40000c00

08005d18 <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <SM_TIM_Start+0x10>)
 8005d1e:	f00b fa51 	bl	80111c4 <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20018908 	.word	0x20018908

08005d2c <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8005d30:	4804      	ldr	r0, [pc, #16]	; (8005d44 <SM_TIM_Stop+0x18>)
 8005d32:	f00b fa71 	bl	8011218 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <SM_TIM_Stop+0x18>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005d3e:	bf00      	nop
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20018908 	.word	0x20018908

08005d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d5a:	e7fe      	b.n	8005d5a <HardFault_Handler+0x4>

08005d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d60:	e7fe      	b.n	8005d60 <MemManage_Handler+0x4>

08005d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d66:	e7fe      	b.n	8005d66 <BusFault_Handler+0x4>

08005d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d6c:	e7fe      	b.n	8005d6c <UsageFault_Handler+0x4>

08005d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0

}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8005d80:	f002 f8a2 	bl	8007ec8 <HAL_IncTick>
 osSystickHandler();
 8005d84:	f013 fbaa 	bl	80194dc <osSystickHandler>
}
 8005d88:	bf00      	nop
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8005d90:	f007 f9e0 	bl	800d154 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	f004 f903 	bl	8009fa8 <HAL_GPIO_EXTI_IRQHandler>
}
 8005da2:	bf00      	nop
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <EXTI9_5_IRQHandler+0x1c>)
 8005dae:	f003 feef 	bl	8009b90 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8005db2:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <EXTI9_5_IRQHandler+0x20>)
 8005db4:	f003 feec 	bl	8009b90 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <EXTI9_5_IRQHandler+0x24>)
 8005dba:	f003 fee9 	bl	8009b90 <HAL_EXTI_IRQHandler>
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	2001027c 	.word	0x2001027c
 8005dc8:	20016264 	.word	0x20016264
 8005dcc:	200102e4 	.word	0x200102e4

08005dd0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8005dd4:	4802      	ldr	r0, [pc, #8]	; (8005de0 <I2C2_EV_IRQHandler+0x10>)
 8005dd6:	f004 fc6b 	bl	800a6b0 <HAL_I2C_EV_IRQHandler>
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200189d8 	.word	0x200189d8

08005de4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8005de8:	4802      	ldr	r0, [pc, #8]	; (8005df4 <I2C2_ER_IRQHandler+0x10>)
 8005dea:	f004 fc7b 	bl	800a6e4 <HAL_I2C_ER_IRQHandler>
}
 8005dee:	bf00      	nop
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200189d8 	.word	0x200189d8

08005df8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis3dwb_exti);  
 8005dfc:	4803      	ldr	r0, [pc, #12]	; (8005e0c <EXTI15_10_IRQHandler+0x14>)
 8005dfe:	f003 fec7 	bl	8009b90 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&BC_exti);
 8005e02:	4803      	ldr	r0, [pc, #12]	; (8005e10 <EXTI15_10_IRQHandler+0x18>)
 8005e04:	f003 fec4 	bl	8009b90 <HAL_EXTI_IRQHandler>
}
 8005e08:	bf00      	nop
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	2001030c 	.word	0x2001030c
 8005e10:	20016684 	.word	0x20016684

08005e14 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <EXTI2_IRQHandler+0x10>)
 8005e1a:	f003 feb9 	bl	8009b90 <HAL_EXTI_IRQHandler>
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200102c0 	.word	0x200102c0

08005e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <OTG_FS_IRQHandler+0x10>)
 8005e2e:	f006 f8e4 	bl	800bffa <HAL_PCD_IRQHandler>
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20018b44 	.word	0x20018b44

08005e3c <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8005e40:	4802      	ldr	r0, [pc, #8]	; (8005e4c <SDMMC1_IRQHandler+0x10>)
 8005e42:	f009 f87d 	bl	800ef40 <HAL_SD_IRQHandler>
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200168b4 	.word	0x200168b4

08005e50 <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <STTS751_Set_State+0x1c>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	7013      	strb	r3, [r2, #0]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	20000035 	.word	0x20000035

08005e70 <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005e74:	2003      	movs	r0, #3
 8005e76:	f7ff ffeb 	bl	8005e50 <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <STTS751_Start+0x18>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f013 fb44 	bl	801950c <osThreadResume>
}
 8005e84:	bf00      	nop
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20018b40 	.word	0x20018b40

08005e8c <STTS751_Stop>:

void STTS751_Stop(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8005e90:	2001      	movs	r0, #1
 8005e92:	f7ff ffdd 	bl	8005e50 <STTS751_Set_State>
}
 8005e96:	bf00      	nop
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <SystemInit+0x64>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <SystemInit+0x64>)
 8005ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <SystemInit+0x68>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <SystemInit+0x68>)
 8005eb6:	f043 0301 	orr.w	r3, r3, #1
 8005eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <SystemInit+0x68>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <SystemInit+0x68>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <SystemInit+0x68>)
 8005ec8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005ecc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ed0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <SystemInit+0x68>)
 8005ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <SystemInit+0x68>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <SystemInit+0x68>)
 8005ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <SystemInit+0x68>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <SystemInit+0x64>)
 8005eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	40021000 	.word	0x40021000

08005f08 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f14:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	693b      	ldr	r3, [r7, #16]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005f28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f36:	2303      	movs	r3, #3
 8005f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f3a:	230a      	movs	r3, #10
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f48:	f003 fe52 	bl	8009bf0 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <HAL_PCD_MspInit+0x74>)
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8005f64:	2200      	movs	r2, #0
 8005f66:	2102      	movs	r1, #2
 8005f68:	2043      	movs	r0, #67	; 0x43
 8005f6a:	f003 fb8a 	bl	8009682 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005f6e:	2043      	movs	r0, #67	; 0x43
 8005f70:	f003 fba3 	bl	80096ba <HAL_NVIC_EnableIRQ>
    
}
 8005f74:	bf00      	nop
 8005f76:	3728      	adds	r7, #40	; 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40021000 	.word	0x40021000

08005f80 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f00e fad8 	bl	801454c <USBD_LL_SetupStage>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f00e fb0a 	bl	80145e6 <USBD_LL_DataOutStage>
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3348      	adds	r3, #72	; 0x48
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	4619      	mov	r1, r3
 8006002:	f00e fb61 	bl	80146c8 <USBD_LL_DataInStage>
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800601c:	4618      	mov	r0, r3
 800601e:	f00e fc74 	bl	801490a <USBD_LL_SOF>
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006038:	4618      	mov	r0, r3
 800603a:	f00e fbea 	bl	8014812 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f00e fc24 	bl	8014894 <USBD_LL_SetSpeed>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006062:	4618      	mov	r0, r3
 8006064:	f00e fc26 	bl	80148b4 <USBD_LL_Suspend>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800607e:	4618      	mov	r0, r3
 8006080:	f00e fc2d 	bl	80148de <USBD_LL_Resume>
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	4611      	mov	r1, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f00e fc58 	bl	8014958 <USBD_LL_IsoOUTIncomplete>
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00e fc39 	bl	801493e <USBD_LL_IsoINIncomplete>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060e2:	4618      	mov	r0, r3
 80060e4:	f00e fc45 	bl	8014972 <USBD_LL_DevConnected>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060fe:	4618      	mov	r0, r3
 8006100:	f00e fc42 	bl	8014988 <USBD_LL_DevDisconnected>
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006114:	4b2e      	ldr	r3, [pc, #184]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800611a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 8;
 800611c:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <USBD_LL_Init+0xc4>)
 800611e:	2208      	movs	r2, #8
 8006120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = 0;
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.ep0_mps = 0x40;
 8006128:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <USBD_LL_Init+0xc4>)
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.dma_enable = 0;
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006130:	2200      	movs	r2, #0
 8006132:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = 0;
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006136:	2200      	movs	r2, #0
 8006138:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = 0;
 800613a:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <USBD_LL_Init+0xc4>)
 800613c:	2200      	movs	r2, #0
 800613e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = 0;
 8006140:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006142:	2200      	movs	r2, #0
 8006144:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006146:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006148:	2202      	movs	r2, #2
 800614a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <USBD_LL_Init+0xc4>)
 800614e:	2201      	movs	r2, #1
 8006150:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006154:	2202      	movs	r2, #2
 8006156:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = 0;
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <USBD_LL_Init+0xc4>)
 800615a:	2200      	movs	r2, #0
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd_USB_OTG_FS.pData = pdev;
 800615e:	4a1c      	ldr	r2, [pc, #112]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <USBD_LL_Init+0xc4>)
 800616a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd_USB_OTG_FS);
 800616e:	4818      	ldr	r0, [pc, #96]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006170:	f005 fdf0 	bl	800bd54 <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4816      	ldr	r0, [pc, #88]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006178:	f006 fe57 	bl	800ce2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800617c:	2240      	movs	r2, #64	; 0x40
 800617e:	2100      	movs	r1, #0
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006182:	f006 fe0b 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
  
  /*FIFO allocation: equally divided respect to the endpoints
  This may be not the optimal solution, depending on the 
  datarate flowing on each eandpoint */
  
  uint16_t fifoSizePerEp = (320 - 2*(0x40)) / (N_IN_ENDPOINTS);
 8006186:	2326      	movs	r3, #38	; 0x26
 8006188:	81fb      	strh	r3, [r7, #14]

  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 1, fifoSizePerEp);
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	461a      	mov	r2, r3
 800618e:	2101      	movs	r1, #1
 8006190:	480f      	ldr	r0, [pc, #60]	; (80061d0 <USBD_LL_Init+0xc4>)
 8006192:	f006 fe03 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >1)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 2, fifoSizePerEp);
 8006196:	89fb      	ldrh	r3, [r7, #14]
 8006198:	461a      	mov	r2, r3
 800619a:	2102      	movs	r1, #2
 800619c:	480c      	ldr	r0, [pc, #48]	; (80061d0 <USBD_LL_Init+0xc4>)
 800619e:	f006 fdfd 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >2)    
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 3, fifoSizePerEp);
 80061a2:	89fb      	ldrh	r3, [r7, #14]
 80061a4:	461a      	mov	r2, r3
 80061a6:	2103      	movs	r1, #3
 80061a8:	4809      	ldr	r0, [pc, #36]	; (80061d0 <USBD_LL_Init+0xc4>)
 80061aa:	f006 fdf7 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >3)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 4, fifoSizePerEp);
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	461a      	mov	r2, r3
 80061b2:	2104      	movs	r1, #4
 80061b4:	4806      	ldr	r0, [pc, #24]	; (80061d0 <USBD_LL_Init+0xc4>)
 80061b6:	f006 fdf1 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >4)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 5, fifoSizePerEp);
 80061ba:	89fb      	ldrh	r3, [r7, #14]
 80061bc:	461a      	mov	r2, r3
 80061be:	2105      	movs	r1, #5
 80061c0:	4803      	ldr	r0, [pc, #12]	; (80061d0 <USBD_LL_Init+0xc4>)
 80061c2:	f006 fdeb 	bl	800cd9c <HAL_PCDEx_SetTxFiFo>
#endif
#endif  
#endif
#endif

  return USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20018b44 	.word	0x20018b44

080061d4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f005 feda 	bl	800bf9c <HAL_PCD_Start>
  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	461a      	mov	r2, r3
 8006200:	4603      	mov	r3, r0
 8006202:	70fb      	strb	r3, [r7, #3]
 8006204:	460b      	mov	r3, r1
 8006206:	70bb      	strb	r3, [r7, #2]
 8006208:	4613      	mov	r3, r2
 800620a:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006212:	78bb      	ldrb	r3, [r7, #2]
 8006214:	883a      	ldrh	r2, [r7, #0]
 8006216:	78f9      	ldrb	r1, [r7, #3]
 8006218:	f006 fab8 	bl	800c78c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f006 fb0d 	bl	800c85c <HAL_PCD_EP_Close>
  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f006 fbd7 	bl	800ca16 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f006 fc26 	bl	800cada <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062aa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80062ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	da0b      	bge.n	80062cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	333e      	adds	r3, #62	; 0x3e
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	e00b      	b.n	80062e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f006 fa1b 	bl	800c742 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	461a      	mov	r2, r3
 8006322:	460b      	mov	r3, r1
 8006324:	72fb      	strb	r3, [r7, #11]
 8006326:	4613      	mov	r3, r2
 8006328:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	7af9      	ldrb	r1, [r7, #11]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	f006 fb31 	bl	800c99c <HAL_PCD_EP_Transmit>
  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	461a      	mov	r2, r3
 8006350:	460b      	mov	r3, r1
 8006352:	72fb      	strb	r3, [r7, #11]
 8006354:	4613      	mov	r3, r2
 8006356:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	7af9      	ldrb	r1, [r7, #11]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	f006 fac4 	bl	800c8f0 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f006 faef 	bl	800c96c <HAL_PCD_EP_GetRxCount>
 800638e:	4603      	mov	r3, r0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_WCID_STREAMING_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	6039      	str	r1, [r7, #0]
 80063a2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2212      	movs	r2, #18
 80063a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 80063aa:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <USBD_WCID_STREAMING_DeviceDescriptor+0x20>)
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20000058 	.word	0x20000058

080063bc <USBD_WCID_STREAMING_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2204      	movs	r2, #4
 80063cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 80063ce:	4b03      	ldr	r3, [pc, #12]	; (80063dc <USBD_WCID_STREAMING_LangIDStrDescriptor+0x20>)
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	2000006c 	.word	0x2000006c

080063e0 <USBD_WCID_STREAMING_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{  
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	4904      	ldr	r1, [pc, #16]	; (8006400 <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
 80063f0:	4804      	ldr	r0, [pc, #16]	; (8006404 <USBD_WCID_STREAMING_ProductStrDescriptor+0x24>)
 80063f2:	f00f f82e 	bl	8015452 <USBD_GetString>
  return USBD_StrDesc;
 80063f6:	4b02      	ldr	r3, [pc, #8]	; (8006400 <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20018f4c 	.word	0x20018f4c
 8006404:	08022fe0 	.word	0x08022fe0

08006408 <USBD_WCID_STREAMING_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	4904      	ldr	r1, [pc, #16]	; (8006428 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
 8006418:	4804      	ldr	r0, [pc, #16]	; (800642c <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x24>)
 800641a:	f00f f81a 	bl	8015452 <USBD_GetString>
  return USBD_StrDesc;
 800641e:	4b02      	ldr	r3, [pc, #8]	; (8006428 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20018f4c 	.word	0x20018f4c
 800642c:	08023000 	.word	0x08023000

08006430 <USBD_WCID_STREAMING_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	221a      	movs	r2, #26
 8006440:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8006442:	f000 f82f 	bl	80064a4 <Get_SerialNum>
  
  return (uint8_t*)USBD_StringSerial;
 8006446:	4b02      	ldr	r3, [pc, #8]	; (8006450 <USBD_WCID_STREAMING_SerialStrDescriptor+0x20>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000070 	.word	0x20000070

08006454 <USBD_WCID_STREAMING_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{ 
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	4904      	ldr	r1, [pc, #16]	; (8006474 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
 8006464:	4804      	ldr	r0, [pc, #16]	; (8006478 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x24>)
 8006466:	f00e fff4 	bl	8015452 <USBD_GetString>
  return USBD_StrDesc;  
 800646a:	4b02      	ldr	r3, [pc, #8]	; (8006474 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20018f4c 	.word	0x20018f4c
 8006478:	08023014 	.word	0x08023014

0800647c <USBD_WCID_STREAMING_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	4904      	ldr	r1, [pc, #16]	; (800649c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
 800648c:	4804      	ldr	r0, [pc, #16]	; (80064a0 <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x24>)
 800648e:	f00e ffe0 	bl	8015452 <USBD_GetString>
  return USBD_StrDesc;  
 8006492:	4b02      	ldr	r3, [pc, #8]	; (800649c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20018f4c 	.word	0x20018f4c
 80064a0:	08023024 	.word	0x08023024

080064a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <Get_SerialNum+0x44>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <Get_SerialNum+0x48>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <Get_SerialNum+0x4c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80064ca:	2208      	movs	r2, #8
 80064cc:	4909      	ldr	r1, [pc, #36]	; (80064f4 <Get_SerialNum+0x50>)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f814 	bl	80064fc <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80064d4:	2204      	movs	r2, #4
 80064d6:	4908      	ldr	r1, [pc, #32]	; (80064f8 <Get_SerialNum+0x54>)
 80064d8:	68b8      	ldr	r0, [r7, #8]
 80064da:	f000 f80f 	bl	80064fc <IntToUnicode>
  }
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	1fff7590 	.word	0x1fff7590
 80064ec:	1fff7594 	.word	0x1fff7594
 80064f0:	1fff7598 	.word	0x1fff7598
 80064f4:	20000072 	.word	0x20000072
 80064f8:	20000082 	.word	0x20000082

080064fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
 8006512:	e027      	b.n	8006564 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0f1b      	lsrs	r3, r3, #28
 8006518:	2b09      	cmp	r3, #9
 800651a:	d80b      	bhi.n	8006534 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	0f1b      	lsrs	r3, r3, #28
 8006520:	b2da      	uxtb	r2, r3
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4619      	mov	r1, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	440b      	add	r3, r1
 800652c:	3230      	adds	r2, #48	; 0x30
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e00a      	b.n	800654a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	0f1b      	lsrs	r3, r3, #28
 8006538:	b2da      	uxtb	r2, r3
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4619      	mov	r1, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	440b      	add	r3, r1
 8006544:	3237      	adds	r2, #55	; 0x37
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	3301      	adds	r3, #1
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4413      	add	r3, r2
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	3301      	adds	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	7dfa      	ldrb	r2, [r7, #23]
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d3d3      	bcc.n	8006514 <IntToUnicode+0x18>
  }
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <WCID_STREAMING_Itf_Init>:
*         Initializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Init(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */
  USB_RxBuffer = HSD_calloc(512, sizeof(uint8_t));
 8006580:	2101      	movs	r1, #1
 8006582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006586:	f019 f943 	bl	801f810 <calloc>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <WCID_STREAMING_Itf_Init+0x28>)
 8006590:	601a      	str	r2, [r3, #0]
  if(USB_RxBuffer == NULL)
  {
    /* Error */
  }    
  
  USBD_WCID_STREAMING_SetRxDataBuffer(&USBD_Device, (uint8_t *)USB_RxBuffer);  
 8006592:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <WCID_STREAMING_Itf_Init+0x28>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <WCID_STREAMING_Itf_Init+0x2c>)
 800659a:	f00d fcdb 	bl	8013f54 <USBD_WCID_STREAMING_SetRxDataBuffer>
  return (USBD_OK);
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000b08 	.word	0x20000b08
 80065a8:	200163bc 	.word	0x200163bc

080065ac <WCID_STREAMING_Itf_DeInit>:
*         DeInitializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_DeInit(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */  
  if( USB_RxBuffer != NULL)
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <WCID_STREAMING_Itf_DeInit+0x24>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <WCID_STREAMING_Itf_DeInit+0x1c>
  {
    HSD_free(USB_RxBuffer);
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <WCID_STREAMING_Itf_DeInit+0x24>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f019 fb81 	bl	801fcc4 <free>
    USB_RxBuffer = NULL;
 80065c2:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <WCID_STREAMING_Itf_DeInit+0x24>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
  }
  
  return (USBD_OK);
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000b08 	.word	0x20000b08

080065d4 <WCID_STREAMING_Itf_Control>:
* @param  Buf: Buffer containing command data (request parameters)
* @param  Len: Number of data to be sent (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Control (uint8_t isHostToDevice, uint8_t cmd, uint16_t wValue, uint16_t wIndex, uint8_t* pbuf, uint16_t length)
{ 
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b08f      	sub	sp, #60	; 0x3c
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4623      	mov	r3, r4
 80065e4:	71fb      	strb	r3, [r7, #7]
 80065e6:	4603      	mov	r3, r0
 80065e8:	71bb      	strb	r3, [r7, #6]
 80065ea:	460b      	mov	r3, r1
 80065ec:	80bb      	strh	r3, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	807b      	strh	r3, [r7, #2]
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 80065f2:	4baa      	ldr	r3, [pc, #680]	; (800689c <WCID_STREAMING_Itf_Control+0x2c8>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <WCID_STREAMING_Itf_Control+0x36>
 80065fc:	4ba7      	ldr	r3, [pc, #668]	; (800689c <WCID_STREAMING_Itf_Control+0x2c8>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d001      	beq.n	800660a <WCID_STREAMING_Itf_Control+0x36>
    return USBD_FAIL;
 8006606:	2302      	movs	r3, #2
 8006608:	e304      	b.n	8006c14 <WCID_STREAMING_Itf_Control+0x640>
  
  uint32_t i = 0;  
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
  COM_SensorStatus_t * myStatus;
  COM_DeviceDescriptor_t * myDeviceDescriptor;
  
  static uint8_t state = STATE_WAITING;
  
  if(isHostToDevice)
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8205 	beq.w	8006a20 <WCID_STREAMING_Itf_Control+0x44c>
  {
    switch(state)
 8006616:	4ba2      	ldr	r3, [pc, #648]	; (80068a0 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <WCID_STREAMING_Itf_Control+0x50>
 800661e:	2b05      	cmp	r3, #5
 8006620:	d01b      	beq.n	800665a <WCID_STREAMING_Itf_Control+0x86>
 8006622:	e2f6      	b.n	8006c12 <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_WAITING:
      
      if(cmd != CMD_SIZE_SET)
 8006624:	79bb      	ldrb	r3, [r7, #6]
 8006626:	2b03      	cmp	r3, #3
 8006628:	d002      	beq.n	8006630 <WCID_STREAMING_Itf_Control+0x5c>
        return -1; /* error */      
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	e2f1      	b.n	8006c14 <WCID_STREAMING_Itf_Control+0x640>
      
      size = *(uint16_t *)pbuf;
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	4b9b      	ldr	r3, [pc, #620]	; (80068a4 <WCID_STREAMING_Itf_Control+0x2d0>)
 8006636:	801a      	strh	r2, [r3, #0]
      serialized = HSD_malloc(size);
 8006638:	4b9a      	ldr	r3, [pc, #616]	; (80068a4 <WCID_STREAMING_Itf_Control+0x2d0>)
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f019 fb39 	bl	801fcb4 <malloc>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	4b98      	ldr	r3, [pc, #608]	; (80068a8 <WCID_STREAMING_Itf_Control+0x2d4>)
 8006648:	601a      	str	r2, [r3, #0]
      p = serialized;
 800664a:	4b97      	ldr	r3, [pc, #604]	; (80068a8 <WCID_STREAMING_Itf_Control+0x2d4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a97      	ldr	r2, [pc, #604]	; (80068ac <WCID_STREAMING_Itf_Control+0x2d8>)
 8006650:	6013      	str	r3, [r2, #0]
      state = STATE_SIZE_RCVD;     
 8006652:	4b93      	ldr	r3, [pc, #588]	; (80068a0 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006654:	2205      	movs	r2, #5
 8006656:	701a      	strb	r2, [r3, #0]
      
      break;
 8006658:	e2db      	b.n	8006c12 <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_RCVD:
      if(cmd != CMD_DATA_SET)
 800665a:	79bb      	ldrb	r3, [r7, #6]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d002      	beq.n	8006666 <WCID_STREAMING_Itf_Control+0x92>
        return -1; /* error */ 
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	e2d6      	b.n	8006c14 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i ++)
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
 800666a:	e012      	b.n	8006692 <WCID_STREAMING_Itf_Control+0xbe>
      {
        *p++ = pbuf[i];
 800666c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	441a      	add	r2, r3
 8006672:	4b8e      	ldr	r3, [pc, #568]	; (80068ac <WCID_STREAMING_Itf_Control+0x2d8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1c59      	adds	r1, r3, #1
 8006678:	488c      	ldr	r0, [pc, #560]	; (80068ac <WCID_STREAMING_Itf_Control+0x2d8>)
 800667a:	6001      	str	r1, [r0, #0]
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	701a      	strb	r2, [r3, #0]
        size--;        
 8006680:	4b88      	ldr	r3, [pc, #544]	; (80068a4 <WCID_STREAMING_Itf_Control+0x2d0>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	4b86      	ldr	r3, [pc, #536]	; (80068a4 <WCID_STREAMING_Itf_Control+0x2d0>)
 800668a:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i ++)
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	3301      	adds	r3, #1
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	429a      	cmp	r2, r3
 800669a:	d3e7      	bcc.n	800666c <WCID_STREAMING_Itf_Control+0x98>
      }
      
      if (size == 0)
 800669c:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <WCID_STREAMING_Itf_Control+0x2d0>)
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 82b3 	bne.w	8006c0c <WCID_STREAMING_Itf_Control+0x638>
      {
        
        HSD_JSON_parse_Command((char *)serialized, &outCommand);
 80066a6:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <WCID_STREAMING_Itf_Control+0x2d4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4981      	ldr	r1, [pc, #516]	; (80068b0 <WCID_STREAMING_Itf_Control+0x2dc>)
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fa fbd3 	bl	8000e58 <HSD_JSON_parse_Command>
        state = STATE_REQUEST_SET;     
 80066b2:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <WCID_STREAMING_Itf_Control+0x2cc>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
        
        
        if(outCommand.command == COM_COMMAND_SET) 
 80066b8:	4b7d      	ldr	r3, [pc, #500]	; (80068b0 <WCID_STREAMING_Itf_Control+0x2dc>)
 80066ba:	f993 3000 	ldrsb.w	r3, [r3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d126      	bne.n	8006710 <WCID_STREAMING_Itf_Control+0x13c>
        {
          myStatus = COM_GetSensorStatus(outCommand.sensorId);
 80066c2:	4b7b      	ldr	r3, [pc, #492]	; (80068b0 <WCID_STREAMING_Itf_Control+0x2dc>)
 80066c4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fb fb4e 	bl	8001d6c <COM_GetSensorStatus>
 80066d0:	60b8      	str	r0, [r7, #8]
          memcpy(&tempSensor.sensorStatus, myStatus, sizeof(COM_SensorStatus_t));               
 80066d2:	224c      	movs	r2, #76	; 0x4c
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4877      	ldr	r0, [pc, #476]	; (80068b4 <WCID_STREAMING_Itf_Control+0x2e0>)
 80066d8:	f019 fafc 	bl	801fcd4 <memcpy>
          HSD_JSON_parse_Status((char *)serialized, &tempSensor.sensorStatus);    
 80066dc:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <WCID_STREAMING_Itf_Control+0x2d4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4974      	ldr	r1, [pc, #464]	; (80068b4 <WCID_STREAMING_Itf_Control+0x2e0>)
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fa fbc6 	bl	8000e74 <HSD_JSON_parse_Status>
          HSD_JSON_free(serialized);
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <WCID_STREAMING_Itf_Control+0x2d4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fa fb3d 	bl	8000d6c <HSD_JSON_free>
          
          update_sensorStatus(myStatus, &tempSensor.sensorStatus, outCommand.sensorId);
 80066f2:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <WCID_STREAMING_Itf_Control+0x2dc>)
 80066f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	496d      	ldr	r1, [pc, #436]	; (80068b4 <WCID_STREAMING_Itf_Control+0x2e0>)
 80066fe:	68b8      	ldr	r0, [r7, #8]
 8006700:	f7fc fc28 	bl	8002f54 <update_sensorStatus>
          
          
          /* Update the sensor-specific config structure */
          update_sensors_config();        
 8006704:	f7fc fd34 	bl	8003170 <update_sensors_config>
          
          state = STATE_WAITING;
 8006708:	4b65      	ldr	r3, [pc, #404]	; (80068a0 <WCID_STREAMING_Itf_Control+0x2cc>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
          
          SM_TIM_Stop(); 
          state = STATE_WAITING;
        }
      }
      break;
 800670e:	e27d      	b.n	8006c0c <WCID_STREAMING_Itf_Control+0x638>
        else if(outCommand.command == COM_COMMAND_START) 
 8006710:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <WCID_STREAMING_Itf_Control+0x2dc>)
 8006712:	f993 3000 	ldrsb.w	r3, [r3]
 8006716:	2b02      	cmp	r3, #2
 8006718:	f040 80e6 	bne.w	80068e8 <WCID_STREAMING_Itf_Control+0x314>
          com_status = HS_DATALOG_USB_STARTED;
 800671c:	4b5f      	ldr	r3, [pc, #380]	; (800689c <WCID_STREAMING_Itf_Control+0x2c8>)
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 8006722:	f7fb faf1 	bl	8001d08 <COM_GetDeviceDescriptor>
 8006726:	60f8      	str	r0, [r7, #12]
          SM_TIM_Start();
 8006728:	f7ff faf6 	bl	8005d18 <SM_TIM_Start>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 800672c:	2300      	movs	r3, #0
 800672e:	633b      	str	r3, [r7, #48]	; 0x30
 8006730:	e0a6      	b.n	8006880 <WCID_STREAMING_Itf_Control+0x2ac>
            myStatus = COM_GetSensorStatus(i);  
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	b2db      	uxtb	r3, r3
 8006736:	4618      	mov	r0, r3
 8006738:	f7fb fb18 	bl	8001d6c <COM_GetSensorStatus>
 800673c:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1 && myStatus->isActive)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	f000 8097 	beq.w	800687a <WCID_STREAMING_Itf_Control+0x2a6>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	7b9b      	ldrb	r3, [r3, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8092 	beq.w	800687a <WCID_STREAMING_Itf_Control+0x2a6>
              TxBuffer[myStatus->comChannelNumber] = NULL;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800675c:	4619      	mov	r1, r3
 800675e:	4b56      	ldr	r3, [pc, #344]	; (80068b8 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006760:	2200      	movs	r2, #0
 8006762:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
              TxBuffer[myStatus->comChannelNumber] = HSD_calloc((myStatus->usbDataPacketSize *2 +2), sizeof(uint8_t));
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	8a1b      	ldrh	r3, [r3, #16]
 800676a:	3301      	adds	r3, #1
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	461a      	mov	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006776:	461c      	mov	r4, r3
 8006778:	2101      	movs	r1, #1
 800677a:	4610      	mov	r0, r2
 800677c:	f019 f848 	bl	801f810 <calloc>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	4b4c      	ldr	r3, [pc, #304]	; (80068b8 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006786:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
              if(TxBuffer[myStatus->comChannelNumber] == NULL)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006790:	461a      	mov	r2, r3
 8006792:	4b49      	ldr	r3, [pc, #292]	; (80068b8 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <WCID_STREAMING_Itf_Control+0x1cc>
                _Error_Handler();
 800679c:	f000 fa52 	bl	8006c44 <_Error_Handler>
              USBD_WCID_STREAMING_SetTxDataBuffer(&USBD_Device, myStatus->comChannelNumber, TxBuffer[myStatus->comChannelNumber], myStatus->usbDataPacketSize);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80067a6:	b2d9      	uxtb	r1, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80067ae:	461a      	mov	r2, r3
 80067b0:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <WCID_STREAMING_Itf_Control+0x2e4>)
 80067b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	8a1b      	ldrh	r3, [r3, #16]
 80067ba:	4840      	ldr	r0, [pc, #256]	; (80068bc <WCID_STREAMING_Itf_Control+0x2e8>)
 80067bc:	f00d fdb0 	bl	8014320 <USBD_WCID_STREAMING_SetTxDataBuffer>
              USBD_WCID_STREAMING_CleanTxDataBuffer(&USBD_Device, myStatus->comChannelNumber);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	483c      	ldr	r0, [pc, #240]	; (80068bc <WCID_STREAMING_Itf_Control+0x2e8>)
 80067cc:	f00d fd8e 	bl	80142ec <USBD_WCID_STREAMING_CleanTxDataBuffer>
              if(i == iis3dwb_com_id)
 80067d0:	4b3b      	ldr	r3, [pc, #236]	; (80068c0 <WCID_STREAMING_Itf_Control+0x2ec>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	4293      	cmp	r3, r2
 80067da:	d102      	bne.n	80067e2 <WCID_STREAMING_Itf_Control+0x20e>
                IIS3DWB_Start();
 80067dc:	f7fd f89e 	bl	800391c <IIS3DWB_Start>
 80067e0:	e046      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == hts221_com_id)
 80067e2:	4b38      	ldr	r3, [pc, #224]	; (80068c4 <WCID_STREAMING_Itf_Control+0x2f0>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d102      	bne.n	80067f4 <WCID_STREAMING_Itf_Control+0x220>
                HTS221_Start();
 80067ee:	f7fc fdd5 	bl	800339c <HTS221_Start>
 80067f2:	e03d      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2dh_com_id)
 80067f4:	4b34      	ldr	r3, [pc, #208]	; (80068c8 <WCID_STREAMING_Itf_Control+0x2f4>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d102      	bne.n	8006806 <WCID_STREAMING_Itf_Control+0x232>
                IIS2DH_Start();
 8006800:	f7fc fdf2 	bl	80033e8 <IIS2DH_Start>
 8006804:	e034      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2mdc_com_id)
 8006806:	4b31      	ldr	r3, [pc, #196]	; (80068cc <WCID_STREAMING_Itf_Control+0x2f8>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	4293      	cmp	r3, r2
 8006810:	d102      	bne.n	8006818 <WCID_STREAMING_Itf_Control+0x244>
                IIS2MDC_Start();
 8006812:	f7fc fe0f 	bl	8003434 <IIS2MDC_Start>
 8006816:	e02b      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == imp34dt05_com_id)
 8006818:	4b2d      	ldr	r3, [pc, #180]	; (80068d0 <WCID_STREAMING_Itf_Control+0x2fc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	4293      	cmp	r3, r2
 8006822:	d102      	bne.n	800682a <WCID_STREAMING_Itf_Control+0x256>
                IMP34DT05_Start();
 8006824:	f7fd f8a0 	bl	8003968 <IMP34DT05_Start>
 8006828:	e022      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == mp23abs1_com_id)
 800682a:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <WCID_STREAMING_Itf_Control+0x300>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	4293      	cmp	r3, r2
 8006834:	d102      	bne.n	800683c <WCID_STREAMING_Itf_Control+0x268>
                MP23ABS1_Start();
 8006836:	f7fd fcd9 	bl	80041ec <MP23ABS1_Start>
 800683a:	e019      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == ism330dhcx_com_id)
 800683c:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <WCID_STREAMING_Itf_Control+0x304>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	4293      	cmp	r3, r2
 8006846:	d102      	bne.n	800684e <WCID_STREAMING_Itf_Control+0x27a>
                ISM330DHCX_Start();
 8006848:	f7fd f8b4 	bl	80039b4 <ISM330DHCX_Start>
 800684c:	e010      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == lps22hh_com_id)
 800684e:	4b23      	ldr	r3, [pc, #140]	; (80068dc <WCID_STREAMING_Itf_Control+0x308>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	4293      	cmp	r3, r2
 8006858:	d102      	bne.n	8006860 <WCID_STREAMING_Itf_Control+0x28c>
                LPS22HH_Start();
 800685a:	f7fd f8d1 	bl	8003a00 <LPS22HH_Start>
 800685e:	e007      	b.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == stts751_com_id)
 8006860:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <WCID_STREAMING_Itf_Control+0x30c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <WCID_STREAMING_Itf_Control+0x29c>
                STTS751_Start();          
 800686c:	f7ff fb00 	bl	8005e70 <STTS751_Start>
              sensor_first_dataReady[i] = 1;
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <WCID_STREAMING_Itf_Control+0x310>)
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	4413      	add	r3, r2
 8006876:	2201      	movs	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	3301      	adds	r3, #1
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	429a      	cmp	r2, r3
 8006888:	f63f af53 	bhi.w	8006732 <WCID_STREAMING_Itf_Control+0x15e>
          USBD_WCID_STREAMING_StartStreaming(&USBD_Device);
 800688c:	480b      	ldr	r0, [pc, #44]	; (80068bc <WCID_STREAMING_Itf_Control+0x2e8>)
 800688e:	f00d fd93 	bl	80143b8 <USBD_WCID_STREAMING_StartStreaming>
          state = STATE_WAITING;
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
      break;
 8006898:	e1b8      	b.n	8006c0c <WCID_STREAMING_Itf_Control+0x638>
 800689a:	bf00      	nop
 800689c:	20000504 	.word	0x20000504
 80068a0:	20000b0c 	.word	0x20000b0c
 80068a4:	20000b0e 	.word	0x20000b0e
 80068a8:	20000b10 	.word	0x20000b10
 80068ac:	20000b14 	.word	0x20000b14
 80068b0:	20000b18 	.word	0x20000b18
 80068b4:	20000cc8 	.word	0x20000cc8
 80068b8:	2001d04c 	.word	0x2001d04c
 80068bc:	200163bc 	.word	0x200163bc
 80068c0:	200163ac 	.word	0x200163ac
 80068c4:	200166c0 	.word	0x200166c0
 80068c8:	200166d0 	.word	0x200166d0
 80068cc:	20016681 	.word	0x20016681
 80068d0:	200166c8 	.word	0x200166c8
 80068d4:	20016680 	.word	0x20016680
 80068d8:	200166c1 	.word	0x200166c1
 80068dc:	200166d9 	.word	0x200166d9
 80068e0:	200166d8 	.word	0x200166d8
 80068e4:	20000028 	.word	0x20000028
        else if(outCommand.command == COM_COMMAND_STOP) 
 80068e8:	4ba2      	ldr	r3, [pc, #648]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068ea:	f993 3000 	ldrsb.w	r3, [r3]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	f040 818c 	bne.w	8006c0c <WCID_STREAMING_Itf_Control+0x638>
          USBD_WCID_STREAMING_StopStreaming(&USBD_Device);
 80068f4:	48a0      	ldr	r0, [pc, #640]	; (8006b78 <WCID_STREAMING_Itf_Control+0x5a4>)
 80068f6:	f00d fd87 	bl	8014408 <USBD_WCID_STREAMING_StopStreaming>
          com_status = HS_DATALOG_IDLE;
 80068fa:	4ba0      	ldr	r3, [pc, #640]	; (8006b7c <WCID_STREAMING_Itf_Control+0x5a8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 8006900:	2300      	movs	r3, #0
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006904:	e014      	b.n	8006930 <WCID_STREAMING_Itf_Control+0x35c>
            if( TxBuffer[i] != NULL)
 8006906:	4a9e      	ldr	r2, [pc, #632]	; (8006b80 <WCID_STREAMING_Itf_Control+0x5ac>)
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <WCID_STREAMING_Itf_Control+0x356>
              HSD_free(TxBuffer[i]);
 8006912:	4a9b      	ldr	r2, [pc, #620]	; (8006b80 <WCID_STREAMING_Itf_Control+0x5ac>)
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691a:	4618      	mov	r0, r3
 800691c:	f019 f9d2 	bl	801fcc4 <free>
              TxBuffer[i] = NULL;
 8006920:	4a97      	ldr	r2, [pc, #604]	; (8006b80 <WCID_STREAMING_Itf_Control+0x5ac>)
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	2100      	movs	r1, #0
 8006926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	3301      	adds	r3, #1
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b08      	cmp	r3, #8
 8006934:	dde7      	ble.n	8006906 <WCID_STREAMING_Itf_Control+0x332>
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 8006936:	f7fb f9e7 	bl	8001d08 <COM_GetDeviceDescriptor>
 800693a:	60f8      	str	r0, [r7, #12]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 800693c:	2300      	movs	r3, #0
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006940:	e063      	b.n	8006a0a <WCID_STREAMING_Itf_Control+0x436>
            myStatus = COM_GetSensorStatus(i);  
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb fa10 	bl	8001d6c <COM_GetSensorStatus>
 800694c:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d054      	beq.n	8006a04 <WCID_STREAMING_Itf_Control+0x430>
              if(i == iis3dwb_com_id)
 800695a:	4b8a      	ldr	r3, [pc, #552]	; (8006b84 <WCID_STREAMING_Itf_Control+0x5b0>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	4293      	cmp	r3, r2
 8006964:	d102      	bne.n	800696c <WCID_STREAMING_Itf_Control+0x398>
                IIS3DWB_Stop();
 8006966:	f7fc ffe7 	bl	8003938 <IIS3DWB_Stop>
 800696a:	e046      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == hts221_com_id)
 800696c:	4b86      	ldr	r3, [pc, #536]	; (8006b88 <WCID_STREAMING_Itf_Control+0x5b4>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	4293      	cmp	r3, r2
 8006976:	d102      	bne.n	800697e <WCID_STREAMING_Itf_Control+0x3aa>
                HTS221_Stop();
 8006978:	f7fc fd1e 	bl	80033b8 <HTS221_Stop>
 800697c:	e03d      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2dh_com_id)
 800697e:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <WCID_STREAMING_Itf_Control+0x5b8>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	4293      	cmp	r3, r2
 8006988:	d102      	bne.n	8006990 <WCID_STREAMING_Itf_Control+0x3bc>
                IIS2DH_Stop();
 800698a:	f7fc fd3b 	bl	8003404 <IIS2DH_Stop>
 800698e:	e034      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2mdc_com_id)
 8006990:	4b7f      	ldr	r3, [pc, #508]	; (8006b90 <WCID_STREAMING_Itf_Control+0x5bc>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	4293      	cmp	r3, r2
 800699a:	d102      	bne.n	80069a2 <WCID_STREAMING_Itf_Control+0x3ce>
                IIS2MDC_Stop();
 800699c:	f7fc fd58 	bl	8003450 <IIS2MDC_Stop>
 80069a0:	e02b      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == imp34dt05_com_id)
 80069a2:	4b7c      	ldr	r3, [pc, #496]	; (8006b94 <WCID_STREAMING_Itf_Control+0x5c0>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d102      	bne.n	80069b4 <WCID_STREAMING_Itf_Control+0x3e0>
                IMP34DT05_Stop();
 80069ae:	f7fc ffe9 	bl	8003984 <IMP34DT05_Stop>
 80069b2:	e022      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == mp23abs1_com_id)
 80069b4:	4b78      	ldr	r3, [pc, #480]	; (8006b98 <WCID_STREAMING_Itf_Control+0x5c4>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	4293      	cmp	r3, r2
 80069be:	d102      	bne.n	80069c6 <WCID_STREAMING_Itf_Control+0x3f2>
                MP23ABS1_Stop();              
 80069c0:	f7fd fc22 	bl	8004208 <MP23ABS1_Stop>
 80069c4:	e019      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == ism330dhcx_com_id)
 80069c6:	4b75      	ldr	r3, [pc, #468]	; (8006b9c <WCID_STREAMING_Itf_Control+0x5c8>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d102      	bne.n	80069d8 <WCID_STREAMING_Itf_Control+0x404>
                ISM330DHCX_Stop();
 80069d2:	f7fc fffd 	bl	80039d0 <ISM330DHCX_Stop>
 80069d6:	e010      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == lps22hh_com_id)
 80069d8:	4b71      	ldr	r3, [pc, #452]	; (8006ba0 <WCID_STREAMING_Itf_Control+0x5cc>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d102      	bne.n	80069ea <WCID_STREAMING_Itf_Control+0x416>
                LPS22HH_Stop();              
 80069e4:	f7fd f81a 	bl	8003a1c <LPS22HH_Stop>
 80069e8:	e007      	b.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == stts751_com_id)
 80069ea:	4b6e      	ldr	r3, [pc, #440]	; (8006ba4 <WCID_STREAMING_Itf_Control+0x5d0>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <WCID_STREAMING_Itf_Control+0x426>
                STTS751_Stop();          
 80069f6:	f7ff fa49 	bl	8005e8c <STTS751_Stop>
              sensor_first_dataReady[i] = 0;
 80069fa:	4a6b      	ldr	r2, [pc, #428]	; (8006ba8 <WCID_STREAMING_Itf_Control+0x5d4>)
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	4413      	add	r3, r2
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	3301      	adds	r3, #1
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d896      	bhi.n	8006942 <WCID_STREAMING_Itf_Control+0x36e>
          SM_TIM_Stop(); 
 8006a14:	f7ff f98a 	bl	8005d2c <SM_TIM_Stop>
          state = STATE_WAITING;
 8006a18:	4b64      	ldr	r3, [pc, #400]	; (8006bac <WCID_STREAMING_Itf_Control+0x5d8>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e0f5      	b.n	8006c0c <WCID_STREAMING_Itf_Control+0x638>
    }     
  }
  else /* Device to host */
  {
    switch(state)
 8006a20:	4b62      	ldr	r3, [pc, #392]	; (8006bac <WCID_STREAMING_Itf_Control+0x5d8>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d003      	beq.n	8006a30 <WCID_STREAMING_Itf_Control+0x45c>
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f000 809a 	beq.w	8006b62 <WCID_STREAMING_Itf_Control+0x58e>
 8006a2e:	e0f0      	b.n	8006c12 <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_REQUEST_SET: /* Host needs size */
      
      if(cmd != CMD_SIZE_GET)
 8006a30:	79bb      	ldrb	r3, [r7, #6]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d002      	beq.n	8006a3c <WCID_STREAMING_Itf_Control+0x468>
        return -1; /* error*/       
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	e0eb      	b.n	8006c14 <WCID_STREAMING_Itf_Control+0x640>
      
      HSD_JSON_free(serialized);
 8006a3c:	4b5c      	ldr	r3, [pc, #368]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fa f993 	bl	8000d6c <HSD_JSON_free>
      
      switch(outCommand.request)
 8006a46:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006a48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d87c      	bhi.n	8006b4a <WCID_STREAMING_Itf_Control+0x576>
 8006a50:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <WCID_STREAMING_Itf_Control+0x484>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006a9b 	.word	0x08006a9b
 8006a64:	08006af3 	.word	0x08006af3
      {
        COM_Device_t * myDevice;
        COM_DeviceDescriptor_t * myDeviceDescriptor;
      case COM_REQUEST_DEVICE:
        myDevice = COM_GetDevice();
 8006a68:	f7fb f944 	bl	8001cf4 <COM_GetDevice>
 8006a6c:	6138      	str	r0, [r7, #16]
        size = HSD_JSON_serialize_Device(myDevice, &serialized, SHORT_JSON);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	494f      	ldr	r1, [pc, #316]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006a72:	6938      	ldr	r0, [r7, #16]
 8006a74:	f7fa f98a 	bl	8000d8c <HSD_JSON_serialize_Device>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	4b4d      	ldr	r3, [pc, #308]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006a7e:	801a      	strh	r2, [r3, #0]
        break;
 8006a80:	e063      	b.n	8006b4a <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DEVICE_INFO:
        myDeviceDescriptor = COM_GetDeviceDescriptor();
 8006a82:	f7fb f941 	bl	8001d08 <COM_GetDeviceDescriptor>
 8006a86:	6178      	str	r0, [r7, #20]
        size = HSD_JSON_serialize_DeviceInfo(myDeviceDescriptor, &serialized);
 8006a88:	4949      	ldr	r1, [pc, #292]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006a8a:	6978      	ldr	r0, [r7, #20]
 8006a8c:	f7fa f990 	bl	8000db0 <HSD_JSON_serialize_DeviceInfo>
 8006a90:	4603      	mov	r3, r0
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	4b47      	ldr	r3, [pc, #284]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006a96:	801a      	strh	r2, [r3, #0]
        break;       
 8006a98:	e057      	b.n	8006b4a <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DESCRIPTOR:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 8006a9a:	4b36      	ldr	r3, [pc, #216]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006a9c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da10      	bge.n	8006ac6 <WCID_STREAMING_Itf_Control+0x4f2>
        {
          COM_SensorDescriptor_t * mySensorDescriptor =  COM_GetSensorDescriptor(outCommand.sensorId);
 8006aa4:	4b33      	ldr	r3, [pc, #204]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006aa6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fb f949 	bl	8001d44 <COM_GetSensorDescriptor>
 8006ab2:	61b8      	str	r0, [r7, #24]
          size = HSD_JSON_serialize_SensorDescriptor(mySensorDescriptor, &serialized);           
 8006ab4:	493e      	ldr	r1, [pc, #248]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006ab6:	69b8      	ldr	r0, [r7, #24]
 8006ab8:	f7fa f988 	bl	8000dcc <HSD_JSON_serialize_SensorDescriptor>
 8006abc:	4603      	mov	r3, r0
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	4b3c      	ldr	r3, [pc, #240]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006ac2:	801a      	strh	r2, [r3, #0]
        else
        {      
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
        }       
        break;       
 8006ac4:	e041      	b.n	8006b4a <WCID_STREAMING_Itf_Control+0x576>
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
 8006ac6:	4b2b      	ldr	r3, [pc, #172]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006ac8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4a29      	ldr	r2, [pc, #164]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006ad0:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fb f95d 	bl	8001d98 <COM_GetSubSensorDescriptor>
 8006ade:	61f8      	str	r0, [r7, #28]
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
 8006ae0:	4933      	ldr	r1, [pc, #204]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006ae2:	69f8      	ldr	r0, [r7, #28]
 8006ae4:	f7fa f98e 	bl	8000e04 <HSD_JSON_serialize_SubSensorDescriptor>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006aee:	801a      	strh	r2, [r3, #0]
        break;       
 8006af0:	e02b      	b.n	8006b4a <WCID_STREAMING_Itf_Control+0x576>
      case COM_REQUEST_STATUS:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006af4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da10      	bge.n	8006b1e <WCID_STREAMING_Itf_Control+0x54a>
        {
          COM_SensorStatus_t * mySensorStatus =  COM_GetSensorStatus(outCommand.sensorId);
 8006afc:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006afe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fb f931 	bl	8001d6c <COM_GetSensorStatus>
 8006b0a:	6238      	str	r0, [r7, #32]
          size = HSD_JSON_serialize_SensorStatus(mySensorStatus, &serialized);
 8006b0c:	4928      	ldr	r1, [pc, #160]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006b0e:	6a38      	ldr	r0, [r7, #32]
 8006b10:	f7fa f96a 	bl	8000de8 <HSD_JSON_serialize_SensorStatus>
 8006b14:	4603      	mov	r3, r0
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006b1a:	801a      	strh	r2, [r3, #0]
        else
        {
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
        }
        break;         
 8006b1c:	e014      	b.n	8006b48 <WCID_STREAMING_Itf_Control+0x574>
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006b20:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006b28:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fb f94f 	bl	8001dd4 <COM_GetSubSensorStatus>
 8006b36:	6278      	str	r0, [r7, #36]	; 0x24
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
 8006b38:	491d      	ldr	r1, [pc, #116]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b3c:	f7fa f970 	bl	8000e20 <HSD_JSON_serialize_SubSensorStatus>
 8006b40:	4603      	mov	r3, r0
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006b46:	801a      	strh	r2, [r3, #0]
        break;         
 8006b48:	bf00      	nop
      }
      
      *(uint16_t *)pbuf = size;           
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b50:	801a      	strh	r2, [r3, #0]
      p = serialized;       
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <WCID_STREAMING_Itf_Control+0x5e4>)
 8006b58:	6013      	str	r3, [r2, #0]
      
      state = STATE_SIZE_SENT;       
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <WCID_STREAMING_Itf_Control+0x5d8>)
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	701a      	strb	r2, [r3, #0]
      break;
 8006b60:	e057      	b.n	8006c12 <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_SENT:
      
      if(cmd != CMD_DATA_GET)
 8006b62:	79bb      	ldrb	r3, [r7, #6]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d002      	beq.n	8006b6e <WCID_STREAMING_Itf_Control+0x59a>
        return -1; /* error*/ 
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	e052      	b.n	8006c14 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	e036      	b.n	8006be2 <WCID_STREAMING_Itf_Control+0x60e>
 8006b74:	20000b18 	.word	0x20000b18
 8006b78:	200163bc 	.word	0x200163bc
 8006b7c:	20000504 	.word	0x20000504
 8006b80:	2001d04c 	.word	0x2001d04c
 8006b84:	200163ac 	.word	0x200163ac
 8006b88:	200166c0 	.word	0x200166c0
 8006b8c:	200166d0 	.word	0x200166d0
 8006b90:	20016681 	.word	0x20016681
 8006b94:	200166c8 	.word	0x200166c8
 8006b98:	20016680 	.word	0x20016680
 8006b9c:	200166c1 	.word	0x200166c1
 8006ba0:	200166d9 	.word	0x200166d9
 8006ba4:	200166d8 	.word	0x200166d8
 8006ba8:	20000028 	.word	0x20000028
 8006bac:	20000b0c 	.word	0x20000b0c
 8006bb0:	20000b10 	.word	0x20000b10
 8006bb4:	20000b0e 	.word	0x20000b0e
 8006bb8:	20000b14 	.word	0x20000b14
      {
        pbuf[i] = *p++;
 8006bbc:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <WCID_STREAMING_Itf_Control+0x648>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	4916      	ldr	r1, [pc, #88]	; (8006c1c <WCID_STREAMING_Itf_Control+0x648>)
 8006bc4:	600a      	str	r2, [r1, #0]
 8006bc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bca:	440a      	add	r2, r1
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	7013      	strb	r3, [r2, #0]
        size--;          
 8006bd0:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <WCID_STREAMING_Itf_Control+0x64c>)
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <WCID_STREAMING_Itf_Control+0x64c>)
 8006bda:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i++)
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	3301      	adds	r3, #1
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d3e7      	bcc.n	8006bbc <WCID_STREAMING_Itf_Control+0x5e8>
      }
      if(size == 0)
 8006bec:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <WCID_STREAMING_Itf_Control+0x64c>)
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <WCID_STREAMING_Itf_Control+0x63c>
      {
        HSD_JSON_free(serialized);
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <WCID_STREAMING_Itf_Control+0x650>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fa f8b7 	bl	8000d6c <HSD_JSON_free>
        serialized = NULL;
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <WCID_STREAMING_Itf_Control+0x650>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
        state = STATE_WAITING;         
 8006c04:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <WCID_STREAMING_Itf_Control+0x654>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
      }       
      break;    
 8006c0a:	e001      	b.n	8006c10 <WCID_STREAMING_Itf_Control+0x63c>
      break;
 8006c0c:	bf00      	nop
 8006c0e:	e000      	b.n	8006c12 <WCID_STREAMING_Itf_Control+0x63e>
      break;    
 8006c10:	bf00      	nop
    }
  }
  
  return (USBD_OK);
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	373c      	adds	r7, #60	; 0x3c
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd90      	pop	{r4, r7, pc}
 8006c1c:	20000b14 	.word	0x20000b14
 8006c20:	20000b0e 	.word	0x20000b0e
 8006c24:	20000b10 	.word	0x20000b10
 8006c28:	20000b0c 	.word	0x20000b0c

08006c2c <WCID_STREAMING_Itf_Receive>:
* @param  Buf: Buffer of data to be transmitted
* @param  Len: Number of data received (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Receive(uint8_t* Buf, uint32_t Len)
{  
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  return (USBD_OK);
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  while (1)
 8006c48:	e7fe      	b.n	8006c48 <_Error_Handler+0x4>

08006c4a <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	461a      	mov	r2, r3
 8006c56:	460b      	mov	r3, r1
 8006c58:	72fb      	strb	r3, [r7, #11]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685c      	ldr	r4, [r3, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6898      	ldr	r0, [r3, #8]
 8006c66:	893b      	ldrh	r3, [r7, #8]
 8006c68:	7af9      	ldrb	r1, [r7, #11]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	47a0      	blx	r4
 8006c6e:	6178      	str	r0, [r7, #20]
  return ret;
 8006c70:	697b      	ldr	r3, [r7, #20]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd90      	pop	{r4, r7, pc}

08006c7a <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8006c7a:	b590      	push	{r4, r7, lr}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	461a      	mov	r2, r3
 8006c86:	460b      	mov	r3, r1
 8006c88:	72fb      	strb	r3, [r7, #11]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681c      	ldr	r4, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6898      	ldr	r0, [r3, #8]
 8006c96:	893b      	ldrh	r3, [r7, #8]
 8006c98:	7af9      	ldrb	r1, [r7, #11]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	47a0      	blx	r4
 8006c9e:	6178      	str	r0, [r7, #20]
  return ret;
 8006ca0:	697b      	ldr	r3, [r7, #20]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}

08006caa <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006cb6:	f107 0208 	add.w	r2, r7, #8
 8006cba:	2301      	movs	r3, #1
 8006cbc:	2110      	movs	r1, #16
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ffc3 	bl	8006c4a <iis3dwb_read_reg>
 8006cc4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10f      	bne.n	8006cec <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	7a3b      	ldrb	r3, [r7, #8]
 8006cd6:	f362 0383 	bfi	r3, r2, #2, #2
 8006cda:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8006cdc:	f107 0208 	add.w	r2, r7, #8
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	2110      	movs	r1, #16
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff ffc8 	bl	8006c7a <iis3dwb_write_reg>
 8006cea:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006d02:	f107 0208 	add.w	r2, r7, #8
 8006d06:	2301      	movs	r3, #1
 8006d08:	210b      	movs	r1, #11
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff ff9d 	bl	8006c4a <iis3dwb_read_reg>
 8006d10:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	7a3b      	ldrb	r3, [r7, #8]
 8006d22:	f362 13c7 	bfi	r3, r2, #7, #1
 8006d26:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006d28:	f107 0208 	add.w	r2, r7, #8
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	210b      	movs	r1, #11
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ffa2 	bl	8006c7a <iis3dwb_write_reg>
 8006d36:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 8006d38:	68fb      	ldr	r3, [r7, #12]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	210f      	movs	r1, #15
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff ff79 	bl	8006c4a <iis3dwb_read_reg>
 8006d58:	60f8      	str	r0, [r7, #12]
  return ret;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006d70:	f107 0208 	add.w	r2, r7, #8
 8006d74:	2301      	movs	r3, #1
 8006d76:	2112      	movs	r1, #18
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff66 	bl	8006c4a <iis3dwb_read_reg>
 8006d7e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	7a3b      	ldrb	r3, [r7, #8]
 8006d90:	f362 0300 	bfi	r3, r2, #0, #1
 8006d94:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006d96:	f107 0208 	add.w	r2, r7, #8
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	2112      	movs	r1, #18
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ff6b 	bl	8006c7a <iis3dwb_write_reg>
 8006da4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006da6:	68fb      	ldr	r3, [r7, #12]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006dbc:	f107 0210 	add.w	r2, r7, #16
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff40 	bl	8006c4a <iis3dwb_read_reg>
 8006dca:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d111      	bne.n	8006df6 <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	09db      	lsrs	r3, r3, #7
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	7c3b      	ldrb	r3, [r7, #16]
 8006de0:	f362 0341 	bfi	r3, r2, #1, #1
 8006de4:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006de6:	f107 0210 	add.w	r2, r7, #16
 8006dea:	2301      	movs	r3, #1
 8006dec:	2110      	movs	r1, #16
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ff43 	bl	8006c7a <iis3dwb_write_reg>
 8006df4:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006dfc:	f107 020c 	add.w	r2, r7, #12
 8006e00:	2301      	movs	r3, #1
 8006e02:	2117      	movs	r1, #23
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff20 	bl	8006c4a <iis3dwb_read_reg>
 8006e0a:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d121      	bne.n	8006e56 <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	7b3b      	ldrb	r3, [r7, #12]
 8006e1e:	f362 0382 	bfi	r3, r2, #2, #1
 8006e22:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	7b3b      	ldrb	r3, [r7, #12]
 8006e30:	f362 1304 	bfi	r3, r2, #4, #1
 8006e34:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	7b3b      	ldrb	r3, [r7, #12]
 8006e40:	f362 1347 	bfi	r3, r2, #5, #3
 8006e44:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006e46:	f107 020c 	add.w	r2, r7, #12
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	2117      	movs	r1, #23
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff ff13 	bl	8006c7a <iis3dwb_write_reg>
 8006e54:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8006e56:	697b      	ldr	r3, [r7, #20]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006e6c:	f107 0208 	add.w	r2, r7, #8
 8006e70:	2301      	movs	r3, #1
 8006e72:	2113      	movs	r1, #19
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fee8 	bl	8006c4a <iis3dwb_read_reg>
 8006e7a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10f      	bne.n	8006ea2 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	7a3b      	ldrb	r3, [r7, #8]
 8006e8c:	f362 0382 	bfi	r3, r2, #2, #1
 8006e90:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006e92:	f107 0208 	add.w	r2, r7, #8
 8006e96:	2301      	movs	r3, #1
 8006e98:	2113      	movs	r1, #19
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff feed 	bl	8006c7a <iis3dwb_write_reg>
 8006ea0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8006eb6:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8006eb8:	2301      	movs	r3, #1
 8006eba:	210d      	movs	r1, #13
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff fedc 	bl	8006c7a <iis3dwb_write_reg>
 8006ec2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8006ece:	2301      	movs	r3, #1
 8006ed0:	215e      	movs	r1, #94	; 0x5e
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fed1 	bl	8006c7a <iis3dwb_write_reg>
 8006ed8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006ef0:	f107 020c 	add.w	r2, r7, #12
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	2108      	movs	r1, #8
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fea6 	bl	8006c4a <iis3dwb_read_reg>
 8006efe:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8006f0c:	f107 0210 	add.w	r2, r7, #16
 8006f10:	2301      	movs	r3, #1
 8006f12:	2107      	movs	r1, #7
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff feb0 	bl	8006c7a <iis3dwb_write_reg>
 8006f1a:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d111      	bne.n	8006f46 <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8006f22:	887b      	ldrh	r3, [r7, #2]
 8006f24:	0a1b      	lsrs	r3, r3, #8
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	7b3b      	ldrb	r3, [r7, #12]
 8006f30:	f362 0300 	bfi	r3, r2, #0, #1
 8006f34:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006f36:	f107 020c 	add.w	r2, r7, #12
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	2108      	movs	r1, #8
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fe9b 	bl	8006c7a <iis3dwb_write_reg>
 8006f44:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 8006f46:	697b      	ldr	r3, [r7, #20]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006f5c:	f107 0208 	add.w	r2, r7, #8
 8006f60:	2301      	movs	r3, #1
 8006f62:	2109      	movs	r1, #9
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff fe70 	bl	8006c4a <iis3dwb_read_reg>
 8006f6a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10f      	bne.n	8006f92 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	7a3b      	ldrb	r3, [r7, #8]
 8006f7c:	f362 0303 	bfi	r3, r2, #0, #4
 8006f80:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006f82:	f107 0208 	add.w	r2, r7, #8
 8006f86:	2301      	movs	r3, #1
 8006f88:	2109      	movs	r1, #9
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fe75 	bl	8006c7a <iis3dwb_write_reg>
 8006f90:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006fa8:	f107 0208 	add.w	r2, r7, #8
 8006fac:	2301      	movs	r3, #1
 8006fae:	210a      	movs	r1, #10
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff fe4a 	bl	8006c4a <iis3dwb_read_reg>
 8006fb6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10f      	bne.n	8006fde <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	7a3b      	ldrb	r3, [r7, #8]
 8006fc8:	f362 0302 	bfi	r3, r2, #0, #3
 8006fcc:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006fce:	f107 0208 	add.w	r2, r7, #8
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	210a      	movs	r1, #10
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fe4f 	bl	8006c7a <iis3dwb_write_reg>
 8006fdc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8006fde:	68fb      	ldr	r3, [r7, #12]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8006ff2:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <BSP_ADC1_Initialization+0xd0>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d152      	bne.n	80070a0 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8006ffc:	4a30      	ldr	r2, [pc, #192]	; (80070c0 <BSP_ADC1_Initialization+0xd8>)
 8006ffe:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007000:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007002:	2200      	movs	r2, #0
 8007004:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8007006:	4b2d      	ldr	r3, [pc, #180]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007008:	2200      	movs	r2, #0
 800700a:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800700e:	2200      	movs	r2, #0
 8007010:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8007012:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007014:	2200      	movs	r2, #0
 8007016:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800701a:	2204      	movs	r2, #4
 800701c:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 800701e:	4b27      	ldr	r3, [pc, #156]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007020:	2200      	movs	r2, #0
 8007022:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007026:	2201      	movs	r2, #1
 8007028:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800702c:	2201      	movs	r2, #1
 800702e:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8007030:	4b22      	ldr	r3, [pc, #136]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007032:	2201      	movs	r2, #1
 8007034:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8007036:	4b21      	ldr	r3, [pc, #132]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800703e:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007040:	2200      	movs	r2, #0
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007044:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007046:	2200      	movs	r2, #0
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800704a:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007052:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007058:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8007062:	4b16      	ldr	r3, [pc, #88]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007064:	2200      	movs	r2, #0
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8007068:	4b14      	ldr	r3, [pc, #80]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007070:	2201      	movs	r2, #1
 8007072:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007076:	2204      	movs	r2, #4
 8007078:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800707a:	4810      	ldr	r0, [pc, #64]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 800707c:	f001 f876 	bl	800816c <HAL_ADC_Init>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007086:	f06f 0303 	mvn.w	r3, #3
 800708a:	e011      	b.n	80070b0 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 800708c:	217f      	movs	r1, #127	; 0x7f
 800708e:	480b      	ldr	r0, [pc, #44]	; (80070bc <BSP_ADC1_Initialization+0xd4>)
 8007090:	f001 fd58 	bl	8008b44 <HAL_ADCEx_Calibration_Start>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800709a:	f06f 0303 	mvn.w	r3, #3
 800709e:	e007      	b.n	80070b0 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <BSP_ADC1_Initialization+0xd0>)
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <BSP_ADC1_Initialization+0xd0>)
 80070ac:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000d14 	.word	0x20000d14
 80070bc:	2001d070 	.word	0x2001d070
 80070c0:	50040000 	.word	0x50040000

080070c4 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 80070cc:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <HAL_ADC_MspInit+0x40>)
 80070ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d0:	4a0c      	ldr	r2, [pc, #48]	; (8007104 <HAL_ADC_MspInit+0x40>)
 80070d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <HAL_ADC_MspInit+0x40>)
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <HAL_ADC_MspInit+0x40>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80070ee:	4a05      	ldr	r2, [pc, #20]	; (8007104 <HAL_ADC_MspInit+0x40>)
 80070f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40021000 	.word	0x40021000

08007108 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <BSP_PB_PWR_Init+0x54>)
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <BSP_PB_PWR_Init+0x54>)
 8007114:	f043 0308 	orr.w	r3, r3, #8
 8007118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <BSP_PB_PWR_Init+0x54>)
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8007126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800712c:	2302      	movs	r3, #2
 800712e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007130:	2302      	movs	r3, #2
 8007132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007134:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <BSP_PB_PWR_Init+0x58>)
 8007136:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8007138:	1d3b      	adds	r3, r7, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <BSP_PB_PWR_Init+0x5c>)
 800713e:	f002 fd57 	bl	8009bf0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8007142:	2200      	movs	r2, #0
 8007144:	210f      	movs	r1, #15
 8007146:	2028      	movs	r0, #40	; 0x28
 8007148:	f002 fa9b 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 800714c:	2028      	movs	r0, #40	; 0x28
 800714e:	f002 fab4 	bl	80096ba <HAL_NVIC_EnableIRQ>
  
}
 8007152:	bf00      	nop
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40021000 	.word	0x40021000
 8007160:	10110000 	.word	0x10110000
 8007164:	48000c00 	.word	0x48000c00

08007168 <BSP_Enable_DCDC2>:
* @brief  Initialize the DCDC MSP.
* @param  None
* @retval None
*/
void BSP_Enable_DCDC2(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800716e:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <BSP_Enable_DCDC2+0x50>)
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	4a11      	ldr	r2, [pc, #68]	; (80071b8 <BSP_Enable_DCDC2+0x50>)
 8007174:	f043 0310 	orr.w	r3, r3, #16
 8007178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <BSP_Enable_DCDC2+0x50>)
 800717c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800718a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800718c:	2301      	movs	r3, #1
 800718e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007194:	2302      	movs	r3, #2
 8007196:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007198:	1d3b      	adds	r3, r7, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4807      	ldr	r0, [pc, #28]	; (80071bc <BSP_Enable_DCDC2+0x54>)
 800719e:	f002 fd27 	bl	8009bf0 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80071a2:	2201      	movs	r2, #1
 80071a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <BSP_Enable_DCDC2+0x54>)
 80071aa:	f002 fecb 	bl	8009f44 <HAL_GPIO_WritePin>
}
 80071ae:	bf00      	nop
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40021000 	.word	0x40021000
 80071bc:	48001000 	.word	0x48001000

080071c0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	460a      	mov	r2, r1
 80071ca:	71fb      	strb	r3, [r7, #7]
 80071cc:	4613      	mov	r3, r2
 80071ce:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80071d0:	4b21      	ldr	r3, [pc, #132]	; (8007258 <BSP_PB_Init+0x98>)
 80071d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d4:	4a20      	ldr	r2, [pc, #128]	; (8007258 <BSP_PB_Init+0x98>)
 80071d6:	f043 0310 	orr.w	r3, r3, #16
 80071da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071dc:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <BSP_PB_Init+0x98>)
 80071de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80071e8:	79bb      	ldrb	r3, [r7, #6]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d112      	bne.n	8007214 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80071ee:	2301      	movs	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80071f6:	2302      	movs	r3, #2
 80071f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071fa:	2302      	movs	r3, #2
 80071fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	4a16      	ldr	r2, [pc, #88]	; (800725c <BSP_PB_Init+0x9c>)
 8007202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007206:	f107 020c 	add.w	r2, r7, #12
 800720a:	4611      	mov	r1, r2
 800720c:	4618      	mov	r0, r3
 800720e:	f002 fcef 	bl	8009bf0 <HAL_GPIO_Init>
 8007212:	e01b      	b.n	800724c <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8007214:	2301      	movs	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800721c:	4b10      	ldr	r3, [pc, #64]	; (8007260 <BSP_PB_Init+0xa0>)
 800721e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	4a0e      	ldr	r2, [pc, #56]	; (800725c <BSP_PB_Init+0x9c>)
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	f107 020c 	add.w	r2, r7, #12
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fcde 	bl	8009bf0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007234:	2306      	movs	r3, #6
 8007236:	b25b      	sxtb	r3, r3
 8007238:	2200      	movs	r2, #0
 800723a:	210f      	movs	r1, #15
 800723c:	4618      	mov	r0, r3
 800723e:	f002 fa20 	bl	8009682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007242:	2306      	movs	r3, #6
 8007244:	b25b      	sxtb	r3, r3
 8007246:	4618      	mov	r0, r3
 8007248:	f002 fa37 	bl	80096ba <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40021000 	.word	0x40021000
 800725c:	2000009c 	.word	0x2000009c
 8007260:	10210000 	.word	0x10210000

08007264 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <BSP_LED_Init+0x2a>
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <BSP_LED_Init+0x78>)
 8007276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <BSP_LED_Init+0x78>)
 800727a:	f043 0310 	orr.w	r3, r3, #16
 800727e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007280:	4b16      	ldr	r3, [pc, #88]	; (80072dc <BSP_LED_Init+0x78>)
 8007282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	e00b      	b.n	80072a6 <BSP_LED_Init+0x42>
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <BSP_LED_Init+0x78>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	4a12      	ldr	r2, [pc, #72]	; (80072dc <BSP_LED_Init+0x78>)
 8007294:	f043 0308 	orr.w	r3, r3, #8
 8007298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <BSP_LED_Init+0x78>)
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	4a0d      	ldr	r2, [pc, #52]	; (80072e0 <BSP_LED_Init+0x7c>)
 80072aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80072b8:	2302      	movs	r3, #2
 80072ba:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <BSP_LED_Init+0x80>)
 80072c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c4:	f107 0214 	add.w	r2, r7, #20
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 fc90 	bl	8009bf0 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3728      	adds	r7, #40	; 0x28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40021000 	.word	0x40021000
 80072e0:	08023298 	.word	0x08023298
 80072e4:	200000a0 	.word	0x200000a0

080072e8 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	4a07      	ldr	r2, [pc, #28]	; (8007314 <BSP_LED_On+0x2c>)
 80072f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	4a06      	ldr	r2, [pc, #24]	; (8007318 <BSP_LED_On+0x30>)
 80072fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007302:	2201      	movs	r2, #1
 8007304:	4619      	mov	r1, r3
 8007306:	f002 fe1d 	bl	8009f44 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200000a0 	.word	0x200000a0
 8007318:	08023298 	.word	0x08023298

0800731c <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	4a07      	ldr	r2, [pc, #28]	; (8007348 <BSP_LED_Off+0x2c>)
 800732a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	4a06      	ldr	r2, [pc, #24]	; (800734c <BSP_LED_Off+0x30>)
 8007332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007336:	2200      	movs	r2, #0
 8007338:	4619      	mov	r1, r3
 800733a:	f002 fe03 	bl	8009f44 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200000a0 	.word	0x200000a0
 800734c:	08023298 	.word	0x08023298

08007350 <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8007354:	f000 f84a 	bl	80073ec <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8007358:	f000 f84e 	bl	80073f8 <BC_IO_Init>
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}

08007360 <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 800736a:	f000 fdbf 	bl	8007eec <HAL_GetTick>
 800736e:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8007370:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <BSP_BC_CmdSend+0x50>)
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <BSP_BC_CmdSend+0x54>)
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 800737c:	480e      	ldr	r0, [pc, #56]	; (80073b8 <BSP_BC_CmdSend+0x58>)
 800737e:	f009 ff77 	bl	8011270 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 8007382:	e008      	b.n	8007396 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8007384:	f000 fdb2 	bl	8007eec <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b0a      	cmp	r3, #10
 8007390:	d901      	bls.n	8007396 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 8007392:	2301      	movs	r3, #1
 8007394:	e007      	b.n	80073a6 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 8007396:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <BSP_BC_CmdSend+0x54>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f2      	bne.n	8007384 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 800739e:	4806      	ldr	r0, [pc, #24]	; (80073b8 <BSP_BC_CmdSend+0x58>)
 80073a0:	f009 ff90 	bl	80112c4 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000d15 	.word	0x20000d15
 80073b4:	20000d16 	.word	0x20000d16
 80073b8:	2001d104 	.word	0x2001d104

080073bc <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 80073c0:	f000 f908 	bl	80075d4 <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 80073c4:	f000 fd92 	bl	8007eec <HAL_GetTick>
 80073c8:	4603      	mov	r3, r0
 80073ca:	4a02      	ldr	r2, [pc, #8]	; (80073d4 <BSP_BC_ChgPinHasToggled+0x18>)
 80073cc:	6013      	str	r3, [r2, #0]
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000d18 	.word	0x20000d18

080073d8 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 80073dc:	2002      	movs	r0, #2
 80073de:	f7ff fe03 	bl	8006fe8 <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 80073e2:	f000 f9ef 	bl	80077c4 <Channel_ADC1_Init>
  return 0;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}

080073ec <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 80073f0:	f000 f93a 	bl	8007668 <BC_TIMx_Init>
}
 80073f4:	bf00      	nop
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 80073fc:	f000 f802 	bl	8007404 <BC_IO_SW_SEL_Init>
}
 8007400:	bf00      	nop
 8007402:	bd80      	pop	{r7, pc}

08007404 <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <BC_IO_SW_SEL_Init+0x4c>)
 800740c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740e:	4a10      	ldr	r2, [pc, #64]	; (8007450 <BC_IO_SW_SEL_Init+0x4c>)
 8007410:	f043 0320 	orr.w	r3, r3, #32
 8007414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007416:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <BC_IO_SW_SEL_Init+0x4c>)
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8007422:	2340      	movs	r3, #64	; 0x40
 8007424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007426:	2301      	movs	r3, #1
 8007428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800742e:	2302      	movs	r3, #2
 8007430:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007432:	2200      	movs	r2, #0
 8007434:	2140      	movs	r1, #64	; 0x40
 8007436:	4807      	ldr	r0, [pc, #28]	; (8007454 <BC_IO_SW_SEL_Init+0x50>)
 8007438:	f002 fd84 	bl	8009f44 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4804      	ldr	r0, [pc, #16]	; (8007454 <BC_IO_SW_SEL_Init+0x50>)
 8007442:	f002 fbd5 	bl	8009bf0 <HAL_GPIO_Init>
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000
 8007454:	48001400 	.word	0x48001400

08007458 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 800745c:	4b56      	ldr	r3, [pc, #344]	; (80075b8 <BC_CmdMng+0x160>)
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	3301      	adds	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	4b54      	ldr	r3, [pc, #336]	; (80075b8 <BC_CmdMng+0x160>)
 8007466:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8007468:	4b54      	ldr	r3, [pc, #336]	; (80075bc <BC_CmdMng+0x164>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b06      	cmp	r3, #6
 800746e:	f200 809e 	bhi.w	80075ae <BC_CmdMng+0x156>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <BC_CmdMng+0x20>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	080075af 	.word	0x080075af
 800747c:	08007495 	.word	0x08007495
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074dd 	.word	0x080074dd
 8007488:	08007501 	.word	0x08007501
 800748c:	08007525 	.word	0x08007525
 8007490:	08007549 	.word	0x08007549
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007494:	2140      	movs	r1, #64	; 0x40
 8007496:	484a      	ldr	r0, [pc, #296]	; (80075c0 <BC_CmdMng+0x168>)
 8007498:	f002 fd6c 	bl	8009f74 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 800749c:	4b46      	ldr	r3, [pc, #280]	; (80075b8 <BC_CmdMng+0x160>)
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	3346      	adds	r3, #70	; 0x46
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	4b47      	ldr	r3, [pc, #284]	; (80075c4 <BC_CmdMng+0x16c>)
 80074a6:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80074a8:	4b44      	ldr	r3, [pc, #272]	; (80075bc <BC_CmdMng+0x164>)
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	4b46      	ldr	r3, [pc, #280]	; (80075c8 <BC_CmdMng+0x170>)
 80074ae:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80074b0:	4b42      	ldr	r3, [pc, #264]	; (80075bc <BC_CmdMng+0x164>)
 80074b2:	2206      	movs	r2, #6
 80074b4:	701a      	strb	r2, [r3, #0]
    break;
 80074b6:	e07d      	b.n	80075b4 <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80074b8:	2140      	movs	r1, #64	; 0x40
 80074ba:	4841      	ldr	r0, [pc, #260]	; (80075c0 <BC_CmdMng+0x168>)
 80074bc:	f002 fd5a 	bl	8009f74 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80074c0:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <BC_CmdMng+0x160>)
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	3314      	adds	r3, #20
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	4b3e      	ldr	r3, [pc, #248]	; (80075c4 <BC_CmdMng+0x16c>)
 80074ca:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80074cc:	4b3b      	ldr	r3, [pc, #236]	; (80075bc <BC_CmdMng+0x164>)
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	4b3d      	ldr	r3, [pc, #244]	; (80075c8 <BC_CmdMng+0x170>)
 80074d2:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80074d4:	4b39      	ldr	r3, [pc, #228]	; (80075bc <BC_CmdMng+0x164>)
 80074d6:	2206      	movs	r2, #6
 80074d8:	701a      	strb	r2, [r3, #0]
    break;
 80074da:	e06b      	b.n	80075b4 <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80074dc:	2140      	movs	r1, #64	; 0x40
 80074de:	4838      	ldr	r0, [pc, #224]	; (80075c0 <BC_CmdMng+0x168>)
 80074e0:	f002 fd48 	bl	8009f74 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80074e4:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <BC_CmdMng+0x160>)
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	3314      	adds	r3, #20
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <BC_CmdMng+0x16c>)
 80074ee:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80074f0:	4b32      	ldr	r3, [pc, #200]	; (80075bc <BC_CmdMng+0x164>)
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	4b34      	ldr	r3, [pc, #208]	; (80075c8 <BC_CmdMng+0x170>)
 80074f6:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80074f8:	4b30      	ldr	r3, [pc, #192]	; (80075bc <BC_CmdMng+0x164>)
 80074fa:	2206      	movs	r2, #6
 80074fc:	701a      	strb	r2, [r3, #0]
    break;
 80074fe:	e059      	b.n	80075b4 <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007500:	2140      	movs	r1, #64	; 0x40
 8007502:	482f      	ldr	r0, [pc, #188]	; (80075c0 <BC_CmdMng+0x168>)
 8007504:	f002 fd36 	bl	8009f74 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8007508:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <BC_CmdMng+0x160>)
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	3314      	adds	r3, #20
 800750e:	b29a      	uxth	r2, r3
 8007510:	4b2c      	ldr	r3, [pc, #176]	; (80075c4 <BC_CmdMng+0x16c>)
 8007512:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8007514:	4b29      	ldr	r3, [pc, #164]	; (80075bc <BC_CmdMng+0x164>)
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	4b2b      	ldr	r3, [pc, #172]	; (80075c8 <BC_CmdMng+0x170>)
 800751a:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 800751c:	4b27      	ldr	r3, [pc, #156]	; (80075bc <BC_CmdMng+0x164>)
 800751e:	2206      	movs	r2, #6
 8007520:	701a      	strb	r2, [r3, #0]
    break;
 8007522:	e047      	b.n	80075b4 <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007524:	2140      	movs	r1, #64	; 0x40
 8007526:	4826      	ldr	r0, [pc, #152]	; (80075c0 <BC_CmdMng+0x168>)
 8007528:	f002 fd24 	bl	8009f74 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 800752c:	4b22      	ldr	r3, [pc, #136]	; (80075b8 <BC_CmdMng+0x160>)
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	3364      	adds	r3, #100	; 0x64
 8007532:	b29a      	uxth	r2, r3
 8007534:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <BC_CmdMng+0x16c>)
 8007536:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8007538:	4b20      	ldr	r3, [pc, #128]	; (80075bc <BC_CmdMng+0x164>)
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <BC_CmdMng+0x170>)
 800753e:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8007540:	4b1e      	ldr	r3, [pc, #120]	; (80075bc <BC_CmdMng+0x164>)
 8007542:	2206      	movs	r2, #6
 8007544:	701a      	strb	r2, [r3, #0]
    break;
 8007546:	e035      	b.n	80075b4 <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8007548:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <BC_CmdMng+0x160>)
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <BC_CmdMng+0x16c>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d92e      	bls.n	80075b2 <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8007554:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <BC_CmdMng+0x170>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b05      	cmp	r3, #5
 800755a:	d10b      	bne.n	8007574 <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 800755c:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <BC_CmdMng+0x174>)
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 8007562:	4b16      	ldr	r3, [pc, #88]	; (80075bc <BC_CmdMng+0x164>)
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007568:	2200      	movs	r2, #0
 800756a:	2140      	movs	r1, #64	; 0x40
 800756c:	4814      	ldr	r0, [pc, #80]	; (80075c0 <BC_CmdMng+0x168>)
 800756e:	f002 fce9 	bl	8009f44 <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 8007572:	e01e      	b.n	80075b2 <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8007574:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <BC_CmdMng+0x170>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d110      	bne.n	800759e <BC_CmdMng+0x146>
          CmdPulse++;
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <BC_CmdMng+0x174>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <BC_CmdMng+0x174>)
 8007586:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8007588:	4b10      	ldr	r3, [pc, #64]	; (80075cc <BC_CmdMng+0x174>)
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <BC_CmdMng+0x178>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d203      	bcs.n	800759c <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <BC_CmdMng+0x170>)
 8007596:	2201      	movs	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e000      	b.n	800759e <BC_CmdMng+0x146>
            __NOP();
 800759c:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <BC_CmdMng+0x170>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <BC_CmdMng+0x164>)
 80075a8:	701a      	strb	r2, [r3, #0]
        __NOP();
 80075aa:	bf00      	nop
    break;
 80075ac:	e001      	b.n	80075b2 <BC_CmdMng+0x15a>
  default:
    break;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <BC_CmdMng+0x15c>
    break;
 80075b2:	bf00      	nop
  }
}
 80075b4:	bf00      	nop
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000d70 	.word	0x20000d70
 80075bc:	20000d16 	.word	0x20000d16
 80075c0:	48001400 	.word	0x48001400
 80075c4:	20000d72 	.word	0x20000d72
 80075c8:	20000d74 	.word	0x20000d74
 80075cc:	20000d75 	.word	0x20000d75
 80075d0:	20000d15 	.word	0x20000d15

080075d4 <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <BC_ChgPinFreqGet+0x7c>)
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d107      	bne.n	80075f0 <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 80075e0:	f000 fc84 	bl	8007eec <HAL_GetTick>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <BC_ChgPinFreqGet+0x80>)
 80075e8:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 80075ea:	4b19      	ldr	r3, [pc, #100]	; (8007650 <BC_ChgPinFreqGet+0x7c>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <BC_ChgPinFreqGet+0x7c>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d128      	bne.n	800764a <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 80075f8:	f000 fc78 	bl	8007eec <HAL_GetTick>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4a16      	ldr	r2, [pc, #88]	; (8007658 <BC_ChgPinFreqGet+0x84>)
 8007600:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <BC_ChgPinFreqGet+0x84>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <BC_ChgPinFreqGet+0x80>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d907      	bls.n	800761e <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <BC_ChgPinFreqGet+0x84>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <BC_ChgPinFreqGet+0x80>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	4a10      	ldr	r2, [pc, #64]	; (800765c <BC_ChgPinFreqGet+0x88>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e006      	b.n	800762c <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 800761e:	4b0e      	ldr	r3, [pc, #56]	; (8007658 <BC_ChgPinFreqGet+0x84>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <BC_ChgPinFreqGet+0x80>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	4a0c      	ldr	r2, [pc, #48]	; (800765c <BC_ChgPinFreqGet+0x88>)
 800762a:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <BC_ChgPinFreqGet+0x88>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <BC_ChgPinFreqGet+0x88>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f242 7210 	movw	r2, #10000	; 0x2710
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	4a07      	ldr	r2, [pc, #28]	; (8007660 <BC_ChgPinFreqGet+0x8c>)
 8007642:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <BC_ChgPinFreqGet+0x7c>)
 8007646:	2200      	movs	r2, #0
 8007648:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800764a:	bf00      	nop
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000d68 	.word	0x20000d68
 8007654:	20000d5c 	.word	0x20000d5c
 8007658:	20000d60 	.word	0x20000d60
 800765c:	20000d64 	.word	0x20000d64
 8007660:	20000d6c 	.word	0x20000d6c
 8007664:	00000000 	.word	0x00000000

08007668 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800766e:	463b      	mov	r3, r7
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8007678:	f006 fbae 	bl	800ddd8 <HAL_RCC_GetPCLK1Freq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <BC_TIMx_Init+0xb0>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <BC_TIMx_Init+0x26>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <BC_TIMx_Init+0x28>
 800768e:	2302      	movs	r3, #2
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3301      	adds	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7f8 ff53 	bl	8000554 <__aeabi_ui2d>
 80076ae:	a318      	add	r3, pc, #96	; (adr r3, 8007710 <BC_TIMx_Init+0xa8>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 ffc8 	bl	8000648 <__aeabi_dmul>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4610      	mov	r0, r2
 80076be:	4619      	mov	r1, r3
 80076c0:	f7f9 fa9a 	bl	8000bf8 <__aeabi_d2uiz>
 80076c4:	4603      	mov	r3, r0
 80076c6:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ce:	d2e4      	bcs.n	800769a <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <BC_TIMx_Init+0xb4>)
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <BC_TIMx_Init+0xb8>)
 80076d4:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	3b01      	subs	r3, #1
 80076da:	4a10      	ldr	r2, [pc, #64]	; (800771c <BC_TIMx_Init+0xb4>)
 80076dc:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <BC_TIMx_Init+0xb4>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <BC_TIMx_Init+0xb4>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 80076ea:	480c      	ldr	r0, [pc, #48]	; (800771c <BC_TIMx_Init+0xb4>)
 80076ec:	f000 f81a 	bl	8007724 <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 80076f0:	480a      	ldr	r0, [pc, #40]	; (800771c <BC_TIMx_Init+0xb4>)
 80076f2:	f009 fd31 	bl	8011158 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076f6:	2300      	movs	r3, #0
 80076f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80076fe:	463b      	mov	r3, r7
 8007700:	4619      	mov	r1, r3
 8007702:	4806      	ldr	r0, [pc, #24]	; (800771c <BC_TIMx_Init+0xb4>)
 8007704:	f009 ffe0 	bl	80116c8 <HAL_TIMEx_MasterConfigSynchronization>
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	88e368f1 	.word	0x88e368f1
 8007714:	3ed4f8b5 	.word	0x3ed4f8b5
 8007718:	40021000 	.word	0x40021000
 800771c:	2001d104 	.word	0x2001d104
 8007720:	40001400 	.word	0x40001400

08007724 <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0d      	ldr	r2, [pc, #52]	; (8007768 <HAL_TIM_BC_MspInit+0x44>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d113      	bne.n	800775e <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <HAL_TIM_BC_MspInit+0x48>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773a:	4a0c      	ldr	r2, [pc, #48]	; (800776c <HAL_TIM_BC_MspInit+0x48>)
 800773c:	f043 0320 	orr.w	r3, r3, #32
 8007740:	6593      	str	r3, [r2, #88]	; 0x58
 8007742:	4b0a      	ldr	r3, [pc, #40]	; (800776c <HAL_TIM_BC_MspInit+0x48>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800774e:	2200      	movs	r2, #0
 8007750:	2103      	movs	r1, #3
 8007752:	2037      	movs	r0, #55	; 0x37
 8007754:	f001 ff95 	bl	8009682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8007758:	2037      	movs	r0, #55	; 0x37
 800775a:	f001 ffae 	bl	80096ba <HAL_NVIC_EnableIRQ>
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40001400 	.word	0x40001400
 800776c:	40021000 	.word	0x40021000

08007770 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <HAL_ADC_BC_MspInit+0x4c>)
 8007786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007788:	4a0c      	ldr	r2, [pc, #48]	; (80077bc <HAL_ADC_BC_MspInit+0x4c>)
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <HAL_ADC_BC_MspInit+0x4c>)
 8007792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 800779c:	2310      	movs	r3, #16
 800779e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 80077a0:	230b      	movs	r3, #11
 80077a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4804      	ldr	r0, [pc, #16]	; (80077c0 <HAL_ADC_BC_MspInit+0x50>)
 80077ae:	f002 fa1f 	bl	8009bf0 <HAL_GPIO_Init>
  
}
 80077b2:	bf00      	nop
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40021000 	.word	0x40021000
 80077c0:	48000800 	.word	0x48000800

080077c4 <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80077ca:	463b      	mov	r3, r7
 80077cc:	2234      	movs	r2, #52	; 0x34
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f018 faa7 	bl	801fd24 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 80077d6:	481e      	ldr	r0, [pc, #120]	; (8007850 <Channel_ADC1_Init+0x8c>)
 80077d8:	f000 ff0c 	bl	80085f4 <HAL_ADC_GetState>
 80077dc:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 80077e8:	4819      	ldr	r0, [pc, #100]	; (8007850 <Channel_ADC1_Init+0x8c>)
 80077ea:	f000 fea8 	bl	800853e <HAL_ADC_Stop>
    ADC_stopped=1;
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <Channel_ADC1_Init+0x90>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <Channel_ADC1_Init+0x94>)
 80077f6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80077f8:	2308      	movs	r3, #8
 80077fa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80077fc:	2307      	movs	r3, #7
 80077fe:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8007800:	237f      	movs	r3, #127	; 0x7f
 8007802:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8007804:	2304      	movs	r3, #4
 8007806:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800780c:	2301      	movs	r3, #1
 800780e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8007810:	2300      	movs	r3, #0
 8007812:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8007814:	2300      	movs	r3, #0
 8007816:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8007818:	2300      	movs	r3, #0
 800781a:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800781c:	2300      	movs	r3, #0
 800781e:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8007820:	2300      	movs	r3, #0
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8007824:	2300      	movs	r3, #0
 8007826:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 800782a:	f7ff ffa1 	bl	8007770 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 800782e:	463b      	mov	r3, r7
 8007830:	4619      	mov	r1, r3
 8007832:	4807      	ldr	r0, [pc, #28]	; (8007850 <Channel_ADC1_Init+0x8c>)
 8007834:	f001 fa18 	bl	8008c68 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <Channel_ADC1_Init+0x90>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d102      	bne.n	8007846 <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8007840:	4803      	ldr	r0, [pc, #12]	; (8007850 <Channel_ADC1_Init+0x8c>)
 8007842:	f000 fe19 	bl	8008478 <HAL_ADC_Start>
  }
  
  return 0;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3738      	adds	r7, #56	; 0x38
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2001d070 	.word	0x2001d070
 8007854:	20000d76 	.word	0x20000d76
 8007858:	36902000 	.word	0x36902000

0800785c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a04      	ldr	r2, [pc, #16]	; (800787c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 800786e:	f7ff fdf3 	bl	8007458 <BC_CmdMng>
  }
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40001400 	.word	0x40001400

08007880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7f1b      	ldrb	r3, [r3, #28]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d101      	bne.n	8007894 <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8007890:	f7ff fd94 	bl	80073bc <BSP_BC_ChgPinHasToggled>
  }
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 80078a0:	4802      	ldr	r0, [pc, #8]	; (80078ac <TIM7_IRQHandler+0x10>)
 80078a2:	f009 fd3a 	bl	801131a <HAL_TIM_IRQHandler>
}
 80078a6:	bf00      	nop
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	2001d104 	.word	0x2001d104

080078b0 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 80078b4:	4802      	ldr	r0, [pc, #8]	; (80078c0 <TIM3_IRQHandler+0x10>)
 80078b6:	f009 fd30 	bl	801131a <HAL_TIM_IRQHandler>
}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000d1c 	.word	0x20000d1c

080078c4 <BSP_DEBUG_PIN_Init_All>:
*         Pin name also identifies the pin number on STMOD+.
* @param  None
* @retval None
*/  
void BSP_DEBUG_PIN_Init_All(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  BSP_DEBUG_PIN_Off(DEBUG_PIN7);
 80078c8:	2000      	movs	r0, #0
 80078ca:	f000 f955 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN8);
 80078ce:	2001      	movs	r0, #1
 80078d0:	f000 f952 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN9);
 80078d4:	2002      	movs	r0, #2
 80078d6:	f000 f94f 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN10);
 80078da:	2003      	movs	r0, #3
 80078dc:	f000 f94c 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN11);
 80078e0:	2004      	movs	r0, #4
 80078e2:	f000 f949 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN12);
 80078e6:	2005      	movs	r0, #5
 80078e8:	f000 f946 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN13);
 80078ec:	2006      	movs	r0, #6
 80078ee:	f000 f943 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN14);
 80078f2:	2007      	movs	r0, #7
 80078f4:	f000 f940 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN17);
 80078f8:	2008      	movs	r0, #8
 80078fa:	f000 f93d 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN18);
 80078fe:	2009      	movs	r0, #9
 8007900:	f000 f93a 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN19);
 8007904:	200a      	movs	r0, #10
 8007906:	f000 f937 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN20);
 800790a:	200b      	movs	r0, #11
 800790c:	f000 f934 	bl	8007b78 <BSP_DEBUG_PIN_Off>
  
  BSP_DEBUG_PIN_Init(DEBUG_PIN7);
 8007910:	2000      	movs	r0, #0
 8007912:	f000 f823 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN8);
 8007916:	2001      	movs	r0, #1
 8007918:	f000 f820 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN9);
 800791c:	2002      	movs	r0, #2
 800791e:	f000 f81d 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN10);
 8007922:	2003      	movs	r0, #3
 8007924:	f000 f81a 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN11);
 8007928:	2004      	movs	r0, #4
 800792a:	f000 f817 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN12);
 800792e:	2005      	movs	r0, #5
 8007930:	f000 f814 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN13);  
 8007934:	2006      	movs	r0, #6
 8007936:	f000 f811 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN14);
 800793a:	2007      	movs	r0, #7
 800793c:	f000 f80e 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN17);  
 8007940:	2008      	movs	r0, #8
 8007942:	f000 f80b 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN18);
 8007946:	2009      	movs	r0, #9
 8007948:	f000 f808 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN19);
 800794c:	200a      	movs	r0, #10
 800794e:	f000 f805 	bl	800795c <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN20);
 8007952:	200b      	movs	r0, #11
 8007954:	f000 f802 	bl	800795c <BSP_DEBUG_PIN_Init>
}
 8007958:	bf00      	nop
 800795a:	bd80      	pop	{r7, pc}

0800795c <BSP_DEBUG_PIN_Init>:
  
  
void BSP_DEBUG_PIN_Init(Debug_Pin_TypeDef Pin)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b094      	sub	sp, #80	; 0x50
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO clock */
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10c      	bne.n	8007986 <BSP_DEBUG_PIN_Init+0x2a>
 800796c:	4b72      	ldr	r3, [pc, #456]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	4a71      	ldr	r2, [pc, #452]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007972:	f043 0308 	orr.w	r3, r3, #8
 8007976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007978:	4b6f      	ldr	r3, [pc, #444]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 800797a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	63bb      	str	r3, [r7, #56]	; 0x38
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	e0b4      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d10c      	bne.n	80079a6 <BSP_DEBUG_PIN_Init+0x4a>
 800798c:	4b6a      	ldr	r3, [pc, #424]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 800798e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007990:	4a69      	ldr	r2, [pc, #420]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007998:	4b67      	ldr	r3, [pc, #412]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 800799a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	e0a4      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d10c      	bne.n	80079c6 <BSP_DEBUG_PIN_Init+0x6a>
 80079ac:	4b62      	ldr	r3, [pc, #392]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b0:	4a61      	ldr	r2, [pc, #388]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079b8:	4b5f      	ldr	r3, [pc, #380]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	e094      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d10c      	bne.n	80079e6 <BSP_DEBUG_PIN_Init+0x8a>
 80079cc:	4b5a      	ldr	r3, [pc, #360]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d0:	4a59      	ldr	r2, [pc, #356]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079d2:	f043 0308 	orr.w	r3, r3, #8
 80079d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079d8:	4b57      	ldr	r3, [pc, #348]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	e084      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d10c      	bne.n	8007a06 <BSP_DEBUG_PIN_Init+0xaa>
 80079ec:	4b52      	ldr	r3, [pc, #328]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f0:	4a51      	ldr	r2, [pc, #324]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079f2:	f043 0304 	orr.w	r3, r3, #4
 80079f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079f8:	4b4f      	ldr	r3, [pc, #316]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	e074      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	d10c      	bne.n	8007a26 <BSP_DEBUG_PIN_Init+0xca>
 8007a0c:	4b4a      	ldr	r3, [pc, #296]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a10:	4a49      	ldr	r2, [pc, #292]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a12:	f043 0308 	orr.w	r3, r3, #8
 8007a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a18:	4b47      	ldr	r3, [pc, #284]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	e064      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d10c      	bne.n	8007a46 <BSP_DEBUG_PIN_Init+0xea>
 8007a2c:	4b42      	ldr	r3, [pc, #264]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a30:	4a41      	ldr	r2, [pc, #260]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a32:	f043 0301 	orr.w	r3, r3, #1
 8007a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a38:	4b3f      	ldr	r3, [pc, #252]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	623b      	str	r3, [r7, #32]
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	e054      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	2b07      	cmp	r3, #7
 8007a4a:	d10c      	bne.n	8007a66 <BSP_DEBUG_PIN_Init+0x10a>
 8007a4c:	4b3a      	ldr	r3, [pc, #232]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a50:	4a39      	ldr	r2, [pc, #228]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a58:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	e044      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d10c      	bne.n	8007a86 <BSP_DEBUG_PIN_Init+0x12a>
 8007a6c:	4b32      	ldr	r3, [pc, #200]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a70:	4a31      	ldr	r2, [pc, #196]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a78:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	e034      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b09      	cmp	r3, #9
 8007a8a:	d10e      	bne.n	8007aaa <BSP_DEBUG_PIN_Init+0x14e>
 8007a8c:	f005 fb52 	bl	800d134 <HAL_PWREx_EnableVddIO2>
 8007a90:	4b29      	ldr	r3, [pc, #164]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a94:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a9c:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	e022      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	2b0a      	cmp	r3, #10
 8007aae:	d10e      	bne.n	8007ace <BSP_DEBUG_PIN_Init+0x172>
 8007ab0:	f005 fb40 	bl	800d134 <HAL_PWREx_EnableVddIO2>
 8007ab4:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab8:	4a1f      	ldr	r2, [pc, #124]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	e010      	b.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	2b0b      	cmp	r3, #11
 8007ad2:	d10d      	bne.n	8007af0 <BSP_DEBUG_PIN_Init+0x194>
 8007ad4:	f005 fb2e 	bl	800d134 <HAL_PWREx_EnableVddIO2>
 8007ad8:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <BSP_DEBUG_PIN_Init+0x1dc>)
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO pin */
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	4a12      	ldr	r2, [pc, #72]	; (8007b3c <BSP_DEBUG_PIN_Init+0x1e0>)
 8007af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    
 8007afa:	2301      	movs	r3, #1
 8007afc:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b02:	2303      	movs	r3, #3
 8007b04:	64bb      	str	r3, [r7, #72]	; 0x48

  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	4a0d      	ldr	r2, [pc, #52]	; (8007b40 <BSP_DEBUG_PIN_Init+0x1e4>)
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b10:	b291      	uxth	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fa15 	bl	8009f44 <HAL_GPIO_WritePin>

  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <BSP_DEBUG_PIN_Init+0x1e4>)
 8007b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b22:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f002 f861 	bl	8009bf0 <HAL_GPIO_Init>
}
 8007b2e:	bf00      	nop
 8007b30:	3750      	adds	r7, #80	; 0x50
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	0802329c 	.word	0x0802329c
 8007b40:	200000a8 	.word	0x200000a8

08007b44 <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4a07      	ldr	r2, [pc, #28]	; (8007b70 <BSP_DEBUG_PIN_On+0x2c>)
 8007b52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <BSP_DEBUG_PIN_On+0x30>)
 8007b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4619      	mov	r1, r3
 8007b62:	f002 f9ef 	bl	8009f44 <HAL_GPIO_WritePin>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	200000a8 	.word	0x200000a8
 8007b74:	0802329c 	.word	0x0802329c

08007b78 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	4a07      	ldr	r2, [pc, #28]	; (8007ba4 <BSP_DEBUG_PIN_Off+0x2c>)
 8007b86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <BSP_DEBUG_PIN_Off+0x30>)
 8007b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b92:	2200      	movs	r2, #0
 8007b94:	4619      	mov	r1, r3
 8007b96:	f002 f9d5 	bl	8009f44 <HAL_GPIO_WritePin>
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200000a8 	.word	0x200000a8
 8007ba8:	0802329c 	.word	0x0802329c

08007bac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <BSP_SD_Init+0x60>)
 8007bb6:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bca:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bd2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8007be0:	4809      	ldr	r0, [pc, #36]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007be2:	f000 f889 	bl	8007cf8 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007be6:	f000 f839 	bl	8007c5c <BSP_SD_IsDetected>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e005      	b.n	8007c00 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8007bf4:	4804      	ldr	r0, [pc, #16]	; (8007c08 <BSP_SD_Init+0x5c>)
 8007bf6:	f006 ff3d 	bl	800ea74 <HAL_SD_Init>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200168b4 	.word	0x200168b4
 8007c0c:	50062400 	.word	0x50062400

08007c10 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <BSP_SD_Detect_Init+0x44>)
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	4a0e      	ldr	r2, [pc, #56]	; (8007c54 <BSP_SD_Detect_Init+0x44>)
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c22:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <BSP_SD_Detect_Init+0x44>)
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8007c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c32:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8007c34:	2301      	movs	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8007c40:	1d3b      	adds	r3, r7, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4804      	ldr	r0, [pc, #16]	; (8007c58 <BSP_SD_Detect_Init+0x48>)
 8007c46:	f001 ffd3 	bl	8009bf0 <HAL_GPIO_Init>
}
 8007c4a:	bf00      	nop
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40021000 	.word	0x40021000
 8007c58:	48000400 	.word	0x48000400

08007c5c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8007c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c64:	4808      	ldr	r0, [pc, #32]	; (8007c88 <BSP_SD_IsDetected+0x2c>)
 8007c66:	f002 f955 	bl	8009f14 <HAL_GPIO_ReadPin>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <BSP_SD_IsDetected+0x30>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <BSP_SD_IsDetected+0x30>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <BSP_SD_IsDetected+0x30>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	48000400 	.word	0x48000400
 8007c8c:	20000d77 	.word	0x20000d77

08007c90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	68f9      	ldr	r1, [r7, #12]
 8007ca6:	4806      	ldr	r0, [pc, #24]	; (8007cc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007ca8:	f006 fffa 	bl	800eca0 <HAL_SD_ReadBlocks_DMA>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200168b4 	.word	0x200168b4

08007cc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	68f9      	ldr	r1, [r7, #12]
 8007cda:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007cdc:	f007 f888 	bl	800edf0 <HAL_SD_WriteBlocks_DMA>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	200168b4 	.word	0x200168b4

08007cf8 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007d00:	f107 0314 	add.w	r3, r7, #20
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	609a      	str	r2, [r3, #8]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007d10:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d14:	4a23      	ldr	r2, [pc, #140]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d2e:	f043 0304 	orr.w	r3, r3, #4
 8007d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d34:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d40:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d46:	f043 0308 	orr.w	r3, r3, #8
 8007d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d4c:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <BSP_SD_MspInit+0xac>)
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d60:	2303      	movs	r3, #3
 8007d62:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8007d64:	230c      	movs	r3, #12
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007d68:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007d6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	4619      	mov	r1, r3
 8007d74:	480c      	ldr	r0, [pc, #48]	; (8007da8 <BSP_SD_MspInit+0xb0>)
 8007d76:	f001 ff3b 	bl	8009bf0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8007d7e:	f107 0314 	add.w	r3, r7, #20
 8007d82:	4619      	mov	r1, r3
 8007d84:	4809      	ldr	r0, [pc, #36]	; (8007dac <BSP_SD_MspInit+0xb4>)
 8007d86:	f001 ff33 	bl	8009bf0 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2105      	movs	r1, #5
 8007d8e:	2031      	movs	r0, #49	; 0x31
 8007d90:	f001 fc77 	bl	8009682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8007d94:	2031      	movs	r0, #49	; 0x31
 8007d96:	f001 fc90 	bl	80096ba <HAL_NVIC_EnableIRQ>


}
 8007d9a:	bf00      	nop
 8007d9c:	3728      	adds	r7, #40	; 0x28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
 8007da8:	48000800 	.word	0x48000800
 8007dac:	48000c00 	.word	0x48000c00

08007db0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <BSP_SD_GetCardState+0x1c>)
 8007db6:	f007 fdb3 	bl	800f920 <HAL_SD_GetCardState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200168b4 	.word	0x200168b4

08007dd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4803      	ldr	r0, [pc, #12]	; (8007de8 <BSP_SD_GetCardInfo+0x18>)
 8007ddc:	f007 fcca 	bl	800f774 <HAL_SD_GetCardInfo>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200168b4 	.word	0x200168b4

08007dec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 8007df4:	f7fc fb46 	bl	8004484 <BSP_SD_WriteCpltCallback>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007e08:	f7fc fb4c 	bl	80044a4 <BSP_SD_ReadCpltCallback>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e1e:	2003      	movs	r0, #3
 8007e20:	f001 fc24 	bl	800966c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007e24:	2000      	movs	r0, #0
 8007e26:	f000 f815 	bl	8007e54 <HAL_InitTick>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	71fb      	strb	r3, [r7, #7]
 8007e34:	e001      	b.n	8007e3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007e36:	f000 f805 	bl	8007e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007e60:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <HAL_InitTick+0x68>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d022      	beq.n	8007eae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007e68:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <HAL_InitTick+0x6c>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <HAL_InitTick+0x68>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fc2a 	bl	80096d6 <HAL_SYSTICK_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10f      	bne.n	8007ea8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b0f      	cmp	r3, #15
 8007e8c:	d809      	bhi.n	8007ea2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	f04f 30ff 	mov.w	r0, #4294967295
 8007e96:	f001 fbf4 	bl	8009682 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e9a:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <HAL_InitTick+0x70>)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	e007      	b.n	8007eb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	73fb      	strb	r3, [r7, #15]
 8007ea6:	e004      	b.n	8007eb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e001      	b.n	8007eb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200000dc 	.word	0x200000dc
 8007ec0:	20000038 	.word	0x20000038
 8007ec4:	200000d8 	.word	0x200000d8

08007ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <HAL_IncTick+0x1c>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_IncTick+0x20>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4a03      	ldr	r2, [pc, #12]	; (8007ee4 <HAL_IncTick+0x1c>)
 8007ed8:	6013      	str	r3, [r2, #0]
}
 8007eda:	bf00      	nop
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	2001d144 	.word	0x2001d144
 8007ee8:	200000dc 	.word	0x200000dc

08007eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  return uwTick;
 8007ef0:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <HAL_GetTick+0x14>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	2001d144 	.word	0x2001d144

08007f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f0c:	f7ff ffee 	bl	8007eec <HAL_GetTick>
 8007f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d004      	beq.n	8007f28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <HAL_Delay+0x40>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f28:	bf00      	nop
 8007f2a:	f7ff ffdf 	bl	8007eec <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d8f7      	bhi.n	8007f2a <HAL_Delay+0x26>
  {
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200000dc 	.word	0x200000dc

08007f48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	609a      	str	r2, [r3, #8]
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6093      	str	r3, [r2, #8]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa6:	d101      	bne.n	8007fac <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff6:	d101      	bne.n	8007ffc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800801a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008042:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008046:	f043 0202 	orr.w	r2, r3, #2
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <LL_ADC_IsEnabled+0x18>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <LL_ADC_IsEnabled+0x1a>
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d101      	bne.n	8008098 <LL_ADC_IsDisableOngoing+0x18>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <LL_ADC_IsDisableOngoing+0x1a>
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080ba:	f043 0204 	orr.w	r2, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080e2:	f043 0210 	orr.w	r2, r3, #16
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b04      	cmp	r3, #4
 8008108:	d101      	bne.n	800810e <LL_ADC_REG_IsConversionOngoing+0x18>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800812c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d101      	bne.n	800815c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008178:	2300      	movs	r3, #0
 800817a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e174      	b.n	8008470 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008190:	2b00      	cmp	r3, #0
 8008192:	d132      	bne.n	80081fa <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a9a      	ldr	r2, [pc, #616]	; (8008400 <HAL_ADC_Init+0x294>)
 8008198:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a99      	ldr	r2, [pc, #612]	; (8008404 <HAL_ADC_Init+0x298>)
 800819e:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a99      	ldr	r2, [pc, #612]	; (8008408 <HAL_ADC_Init+0x29c>)
 80081a4:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a98      	ldr	r2, [pc, #608]	; (800840c <HAL_ADC_Init+0x2a0>)
 80081aa:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a98      	ldr	r2, [pc, #608]	; (8008410 <HAL_ADC_Init+0x2a4>)
 80081b0:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a97      	ldr	r2, [pc, #604]	; (8008414 <HAL_ADC_Init+0x2a8>)
 80081b6:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a97      	ldr	r2, [pc, #604]	; (8008418 <HAL_ADC_Init+0x2ac>)
 80081bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a96      	ldr	r2, [pc, #600]	; (800841c <HAL_ADC_Init+0x2b0>)
 80081c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a95      	ldr	r2, [pc, #596]	; (8008420 <HAL_ADC_Init+0x2b4>)
 80081cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a91      	ldr	r2, [pc, #580]	; (8008424 <HAL_ADC_Init+0x2b8>)
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fec7 	bl	8007f92 <LL_ADC_IsDeepPowerDownEnabled>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fead 	bl	8007f6e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fee2 	bl	8007fe2 <LL_ADC_IsInternalRegulatorEnabled>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d113      	bne.n	800824c <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fec6 	bl	8007fba <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800822e:	4b7e      	ldr	r3, [pc, #504]	; (8008428 <HAL_ADC_Init+0x2bc>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	099b      	lsrs	r3, r3, #6
 8008234:	4a7d      	ldr	r2, [pc, #500]	; (800842c <HAL_ADC_Init+0x2c0>)
 8008236:	fba2 2303 	umull	r2, r3, r2, r3
 800823a:	099b      	lsrs	r3, r3, #6
 800823c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800823e:	e002      	b.n	8008246 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3b01      	subs	r3, #1
 8008244:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f9      	bne.n	8008240 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fec6 	bl	8007fe2 <LL_ADC_IsInternalRegulatorEnabled>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10d      	bne.n	8008278 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	f043 0210 	orr.w	r2, r3, #16
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826c:	f043 0201 	orr.w	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff3a 	bl	80080f6 <LL_ADC_REG_IsConversionOngoing>
 8008282:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 80e6 	bne.w	800845e <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 80e2 	bne.w	800845e <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fed3 	bl	800805a <LL_ADC_IsEnabled>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082ba:	485d      	ldr	r0, [pc, #372]	; (8008430 <HAL_ADC_Init+0x2c4>)
 80082bc:	f7ff fecd 	bl	800805a <LL_ADC_IsEnabled>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	4859      	ldr	r0, [pc, #356]	; (8008434 <HAL_ADC_Init+0x2c8>)
 80082ce:	f7ff fe3b 	bl	8007f48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7e5b      	ldrb	r3, [r3, #25]
 80082d6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80082dc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80082e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80082e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082f0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80082f2:	4313      	orrs	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d106      	bne.n	800830e <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	3b01      	subs	r3, #1
 8008306:	045b      	lsls	r3, r3, #17
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4313      	orrs	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	4313      	orrs	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	4b41      	ldr	r3, [pc, #260]	; (8008438 <HAL_ADC_Init+0x2cc>)
 8008332:	4013      	ands	r3, r2
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	430b      	orrs	r3, r1
 800833c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fed7 	bl	80080f6 <LL_ADC_REG_IsConversionOngoing>
 8008348:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff fef8 	bl	8008144 <LL_ADC_INJ_IsConversionOngoing>
 8008354:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d140      	bne.n	80083de <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d13d      	bne.n	80083de <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	7e1b      	ldrb	r3, [r3, #24]
 800836a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800836c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008374:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008376:	4313      	orrs	r3, r2
 8008378:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008384:	f023 0306 	bic.w	r3, r3, #6
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	69b9      	ldr	r1, [r7, #24]
 800838e:	430b      	orrs	r3, r1
 8008390:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008398:	2b01      	cmp	r3, #1
 800839a:	d118      	bne.n	80083ce <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083a6:	f023 0304 	bic.w	r3, r3, #4
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083b2:	4311      	orrs	r1, r2
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083b8:	4311      	orrs	r1, r2
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083be:	430a      	orrs	r2, r1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	611a      	str	r2, [r3, #16]
 80083cc:	e007      	b.n	80083de <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d12a      	bne.n	800843c <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	f023 010f 	bic.w	r1, r3, #15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	1e5a      	subs	r2, r3, #1
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
 80083fe:	e025      	b.n	800844c <HAL_ADC_Init+0x2e0>
 8008400:	080085a5 	.word	0x080085a5
 8008404:	080085b9 	.word	0x080085b9
 8008408:	080085cd 	.word	0x080085cd
 800840c:	080085e1 	.word	0x080085e1
 8008410:	08008c05 	.word	0x08008c05
 8008414:	08008c19 	.word	0x08008c19
 8008418:	08008c2d 	.word	0x08008c2d
 800841c:	08008c41 	.word	0x08008c41
 8008420:	08008c55 	.word	0x08008c55
 8008424:	080070c5 	.word	0x080070c5
 8008428:	20000038 	.word	0x20000038
 800842c:	053e2d63 	.word	0x053e2d63
 8008430:	50040000 	.word	0x50040000
 8008434:	50040300 	.word	0x50040300
 8008438:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 020f 	bic.w	r2, r2, #15
 800844a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	f043 0201 	orr.w	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	659a      	str	r2, [r3, #88]	; 0x58
 800845c:	e007      	b.n	800846e <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008462:	f043 0210 	orr.w	r2, r3, #16
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800846e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff fe36 	bl	80080f6 <LL_ADC_REG_IsConversionOngoing>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d14f      	bne.n	8008530 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_ADC_Start+0x26>
 800849a:	2302      	movs	r3, #2
 800849c:	e04b      	b.n	8008536 <HAL_ADC_Start+0xbe>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f964 	bl	8008774 <ADC_Enable>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d137      	bne.n	8008526 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084be:	f023 0301 	bic.w	r3, r3, #1
 80084c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d6:	d106      	bne.n	80084e6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084dc:	f023 0206 	bic.w	r2, r3, #6
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80084e4:	e002      	b.n	80084ec <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	221c      	movs	r2, #28
 80084f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fdc1 	bl	80080a6 <LL_ADC_REG_StartConversion>
 8008524:	e006      	b.n	8008534 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800852e:	e001      	b.n	8008534 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008530:	2302      	movs	r3, #2
 8008532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_ADC_Stop+0x16>
 8008550:	2302      	movs	r3, #2
 8008552:	e023      	b.n	800859c <HAL_ADC_Stop+0x5e>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800855c:	2103      	movs	r1, #3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f854 	bl	800860c <ADC_ConversionStop>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d111      	bne.n	8008592 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f95a 	bl	8008828 <ADC_Disable>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008582:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008586:	f023 0301 	bic.w	r3, r3, #1
 800858a:	f043 0201 	orr.w	r2, r3, #1
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fd67 	bl	80080f6 <LL_ADC_REG_IsConversionOngoing>
 8008628:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fd88 	bl	8008144 <LL_ADC_INJ_IsConversionOngoing>
 8008634:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8091 	beq.w	8008766 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d02a      	beq.n	80086a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7e5b      	ldrb	r3, [r3, #25]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d126      	bne.n	80086a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7e1b      	ldrb	r3, [r3, #24]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d122      	bne.n	80086a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008662:	2301      	movs	r3, #1
 8008664:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008666:	e014      	b.n	8008692 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4a41      	ldr	r2, [pc, #260]	; (8008770 <ADC_ConversionStop+0x164>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d90d      	bls.n	800868c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008674:	f043 0210 	orr.w	r2, r3, #16
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008680:	f043 0201 	orr.w	r2, r3, #1
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e06d      	b.n	8008768 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3301      	adds	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	d1e3      	bne.n	8008668 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2240      	movs	r2, #64	; 0x40
 80086a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d014      	beq.n	80086d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fd1f 	bl	80080f6 <LL_ADC_REG_IsConversionOngoing>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fcdc 	bl	8008080 <LL_ADC_IsDisableOngoing>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fcfb 	bl	80080ce <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d014      	beq.n	8008708 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fd2e 	bl	8008144 <LL_ADC_INJ_IsConversionOngoing>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fcc4 	bl	8008080 <LL_ADC_IsDisableOngoing>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fd0a 	bl	800811c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d005      	beq.n	800871a <ADC_ConversionStop+0x10e>
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d105      	bne.n	8008720 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008714:	230c      	movs	r3, #12
 8008716:	617b      	str	r3, [r7, #20]
        break;
 8008718:	e005      	b.n	8008726 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800871a:	2308      	movs	r3, #8
 800871c:	617b      	str	r3, [r7, #20]
        break;
 800871e:	e002      	b.n	8008726 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008720:	2304      	movs	r3, #4
 8008722:	617b      	str	r3, [r7, #20]
        break;
 8008724:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008726:	f7ff fbe1 	bl	8007eec <HAL_GetTick>
 800872a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800872c:	e014      	b.n	8008758 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800872e:	f7ff fbdd 	bl	8007eec <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b05      	cmp	r3, #5
 800873a:	d90d      	bls.n	8008758 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	f043 0210 	orr.w	r2, r3, #16
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874c:	f043 0201 	orr.w	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e007      	b.n	8008768 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	4013      	ands	r3, r2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	a33fffff 	.word	0xa33fffff

08008774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff fc6a 	bl	800805a <LL_ADC_IsEnabled>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d146      	bne.n	800881a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	4b24      	ldr	r3, [pc, #144]	; (8008824 <ADC_Enable+0xb0>)
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00d      	beq.n	80087b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	f043 0210 	orr.w	r2, r3, #16
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087aa:	f043 0201 	orr.w	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e032      	b.n	800881c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fc25 	bl	800800a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80087c0:	f7ff fb94 	bl	8007eec <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80087c6:	e021      	b.n	800880c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fc44 	bl	800805a <LL_ADC_IsEnabled>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fc14 	bl	800800a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80087e2:	f7ff fb83 	bl	8007eec <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d90d      	bls.n	800880c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f4:	f043 0210 	orr.w	r2, r3, #16
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008800:	f043 0201 	orr.w	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e007      	b.n	800881c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d1d6      	bne.n	80087c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	8000003f 	.word	0x8000003f

08008828 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fc23 	bl	8008080 <LL_ADC_IsDisableOngoing>
 800883a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fc0a 	bl	800805a <LL_ADC_IsEnabled>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d040      	beq.n	80088ce <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d13d      	bne.n	80088ce <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 030d 	and.w	r3, r3, #13
 800885c:	2b01      	cmp	r3, #1
 800885e:	d10c      	bne.n	800887a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fbe4 	bl	8008032 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2203      	movs	r2, #3
 8008870:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008872:	f7ff fb3b 	bl	8007eec <HAL_GetTick>
 8008876:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008878:	e022      	b.n	80088c0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	f043 0210 	orr.w	r2, r3, #16
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888a:	f043 0201 	orr.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e01c      	b.n	80088d0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008896:	f7ff fb29 	bl	8007eec <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d90d      	bls.n	80088c0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	f043 0210 	orr.w	r2, r3, #16
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b4:	f043 0201 	orr.w	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e007      	b.n	80088d0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e3      	bne.n	8008896 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <LL_ADC_SetCommonPathInternalCh>:
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	609a      	str	r2, [r3, #8]
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <LL_ADC_GetCommonPathInternalCh>:
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <LL_ADC_SetOffset>:
{
 800891c:	b490      	push	{r4, r7}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3360      	adds	r3, #96	; 0x60
 800892e:	461a      	mov	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	4b08      	ldr	r3, [pc, #32]	; (800895c <LL_ADC_SetOffset+0x40>)
 800893c:	4013      	ands	r3, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	4313      	orrs	r3, r2
 800894a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800894e:	6023      	str	r3, [r4, #0]
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bc90      	pop	{r4, r7}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	03fff000 	.word	0x03fff000

08008960 <LL_ADC_GetOffsetChannel>:
{
 8008960:	b490      	push	{r4, r7}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3360      	adds	r3, #96	; 0x60
 800896e:	461a      	mov	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bc90      	pop	{r4, r7}
 8008986:	4770      	bx	lr

08008988 <LL_ADC_SetOffsetState>:
{
 8008988:	b490      	push	{r4, r7}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3360      	adds	r3, #96	; 0x60
 8008998:	461a      	mov	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	6023      	str	r3, [r4, #0]
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc90      	pop	{r4, r7}
 80089b6:	4770      	bx	lr

080089b8 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	615a      	str	r2, [r3, #20]
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <LL_ADC_SetChannelSamplingTime>:
{
 80089de:	b490      	push	{r4, r7}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3314      	adds	r3, #20
 80089ee:	461a      	mov	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	0e5b      	lsrs	r3, r3, #25
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	4413      	add	r3, r2
 80089fc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	0d1b      	lsrs	r3, r3, #20
 8008a04:	f003 031f 	and.w	r3, r3, #31
 8008a08:	2107      	movs	r1, #7
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	401a      	ands	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	0d1b      	lsrs	r3, r3, #20
 8008a16:	f003 031f 	and.w	r3, r3, #31
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	6023      	str	r3, [r4, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bc90      	pop	{r4, r7}
 8008a2c:	4770      	bx	lr
	...

08008a30 <LL_ADC_SetChannelSingleDiff>:
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f003 0318 	and.w	r3, r3, #24
 8008a52:	4908      	ldr	r1, [pc, #32]	; (8008a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008a54:	40d9      	lsrs	r1, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	400b      	ands	r3, r1
 8008a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	0007ffff 	.word	0x0007ffff

08008a78 <LL_ADC_IsEnabled>:
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <LL_ADC_IsEnabled+0x18>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <LL_ADC_IsEnabled+0x1a>
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <LL_ADC_StartCalibration>:
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	609a      	str	r2, [r3, #8]
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <LL_ADC_IsCalibrationOnGoing>:
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae4:	d101      	bne.n	8008aea <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <LL_ADC_REG_IsConversionOngoing>:
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d101      	bne.n	8008b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <LL_ADC_INJ_IsConversionOngoing>:
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d101      	bne.n	8008b36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_ADCEx_Calibration_Start+0x1c>
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e04d      	b.n	8008bfc <HAL_ADCEx_Calibration_Start+0xb8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff fe5d 	bl	8008828 <ADC_Disable>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d136      	bne.n	8008be6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b80:	f023 0302 	bic.w	r3, r3, #2
 8008b84:	f043 0202 	orr.w	r2, r3, #2
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff ff83 	bl	8008a9e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008b98:	e014      	b.n	8008bc4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8008ba6:	d30d      	bcc.n	8008bc4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bac:	f023 0312 	bic.w	r3, r3, #18
 8008bb0:	f043 0210 	orr.w	r2, r3, #16
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e01b      	b.n	8008bfc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff ff81 	bl	8008ad0 <LL_ADC_IsCalibrationOnGoing>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e2      	bne.n	8008b9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	f043 0201 	orr.w	r2, r3, #1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	659a      	str	r2, [r3, #88]	; 0x58
 8008be4:	e005      	b.n	8008bf2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bea:	f043 0210 	orr.w	r2, r3, #16
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b0a8      	sub	sp, #160	; 0xa0
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	f000 bc13 	b.w	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x850>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d130      	bne.n	8008d0c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d179      	bne.n	8008da6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d010      	beq.n	8008cdc <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	0e9b      	lsrs	r3, r3, #26
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008cce:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cda:	e007      	b.n	8008cec <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	0e9b      	lsrs	r3, r3, #26
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf2:	4ba1      	ldr	r3, [pc, #644]	; (8008f78 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d08:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008d0a:	e04c      	b.n	8008da6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11d      	bne.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00d      	beq.n	8008d46 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008d38:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d44:	e004      	b.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	0e9b      	lsrs	r3, r3, #26
 8008d56:	f003 021f 	and.w	r2, r3, #31
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d74:	1e5a      	subs	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d96:	4b78      	ldr	r3, [pc, #480]	; (8008f78 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8008d98:	4013      	ands	r3, r2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	430b      	orrs	r3, r1
 8008da4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff feb7 	bl	8008b1e <LL_ADC_INJ_IsConversionOngoing>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d120      	bne.n	8008df8 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	7f5b      	ldrb	r3, [r3, #29]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d110      	bne.n	8008de0 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	7f9b      	ldrb	r3, [r3, #30]
 8008dcc:	055a      	lsls	r2, r3, #21
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	7f1b      	ldrb	r3, [r3, #28]
 8008dd2:	051b      	lsls	r3, r3, #20
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	60da      	str	r2, [r3, #12]
 8008dde:	e00b      	b.n	8008df8 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	7f9b      	ldrb	r3, [r3, #30]
 8008dee:	055a      	lsls	r2, r3, #21
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fe7b 	bl	8008af8 <LL_ADC_REG_IsConversionOngoing>
 8008e02:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fe87 	bl	8008b1e <LL_ADC_INJ_IsConversionOngoing>
 8008e10:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f040 81b9 	bne.w	8009190 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 81b4 	bne.w	8009190 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d115      	bne.n	8008e64 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	7f5b      	ldrb	r3, [r3, #29]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d108      	bne.n	8008e52 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008e4e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008e50:	e01e      	b.n	8008e90 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008e60:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008e62:	e015      	b.n	8008e90 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	7f5b      	ldrb	r3, [r3, #29]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d109      	bne.n	8008e80 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e70:	f043 0220 	orr.w	r2, r3, #32
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8008e7e:	e007      	b.n	8008e90 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008e8e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d110      	bne.n	8008ebc <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	430b      	orrs	r3, r1
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0202 	orr.w	r2, r2, #2
 8008eb8:	611a      	str	r2, [r3, #16]
 8008eba:	e007      	b.n	8008ecc <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0202 	bic.w	r2, r2, #2
 8008eca:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed4:	d10f      	bne.n	8008ef6 <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f7ff fd7c 	bl	80089de <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fd62 	bl	80089b8 <LL_ADC_SetSamplingTimeCommonConfig>
 8008ef4:	e00e      	b.n	8008f14 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6819      	ldr	r1, [r3, #0]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7ff fd6b 	bl	80089de <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fd52 	bl	80089b8 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	695a      	ldr	r2, [r3, #20]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d00a      	beq.n	8008f4c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6919      	ldr	r1, [r3, #16]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f46:	f7ff fce9 	bl	800891c <LL_ADC_SetOffset>
 8008f4a:	e121      	b.n	8009190 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fd04 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10c      	bne.n	8008f7c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fcf9 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	0e9b      	lsrs	r3, r3, #26
 8008f72:	f003 021f 	and.w	r2, r3, #31
 8008f76:	e016      	b.n	8008fa6 <HAL_ADCEx_InjectedConfigChannel+0x33e>
 8008f78:	82082000 	.word	0x82082000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fcec 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f92:	fa93 f3a3 	rbit	r3, r3
 8008f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f9e:	fab3 f383 	clz	r3, r3
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <HAL_ADCEx_InjectedConfigChannel+0x356>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	0e9b      	lsrs	r3, r3, #26
 8008fb8:	f003 031f 	and.w	r3, r3, #31
 8008fbc:	e00a      	b.n	8008fd4 <HAL_ADCEx_InjectedConfigChannel+0x36c>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fc6:	fa93 f3a3 	rbit	r3, r3
 8008fca:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fce:	fab3 f383 	clz	r3, r3
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d106      	bne.n	8008fe6 <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fcd1 	bl	8008988 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2101      	movs	r1, #1
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fcb7 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2101      	movs	r1, #1
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff fcac 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8009008:	4603      	mov	r3, r0
 800900a:	0e9b      	lsrs	r3, r3, #26
 800900c:	f003 021f 	and.w	r2, r3, #31
 8009010:	e010      	b.n	8009034 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2101      	movs	r1, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fca1 	bl	8008960 <LL_ADC_GetOffsetChannel>
 800901e:	4603      	mov	r3, r0
 8009020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009024:	fa93 f3a3 	rbit	r3, r3
 8009028:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800902a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800902c:	fab3 f383 	clz	r3, r3
 8009030:	b2db      	uxtb	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800903c:	2b00      	cmp	r3, #0
 800903e:	d105      	bne.n	800904c <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	0e9b      	lsrs	r3, r3, #26
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	e00a      	b.n	8009062 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009054:	fa93 f3a3 	rbit	r3, r3
 8009058:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 800905a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800905c:	fab3 f383 	clz	r3, r3
 8009060:	b2db      	uxtb	r3, r3
 8009062:	429a      	cmp	r2, r3
 8009064:	d106      	bne.n	8009074 <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	2101      	movs	r1, #1
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fc8a 	bl	8008988 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2102      	movs	r1, #2
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fc70 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8009080:	4603      	mov	r3, r0
 8009082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2102      	movs	r1, #2
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fc65 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8009096:	4603      	mov	r3, r0
 8009098:	0e9b      	lsrs	r3, r3, #26
 800909a:	f003 021f 	and.w	r2, r3, #31
 800909e:	e010      	b.n	80090c2 <HAL_ADCEx_InjectedConfigChannel+0x45a>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fc5a 	bl	8008960 <LL_ADC_GetOffsetChannel>
 80090ac:	4603      	mov	r3, r0
 80090ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090b2:	fa93 f3a3 	rbit	r3, r3
 80090b6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80090b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ba:	fab3 f383 	clz	r3, r3
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <HAL_ADCEx_InjectedConfigChannel+0x472>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	0e9b      	lsrs	r3, r3, #26
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	e00a      	b.n	80090f0 <HAL_ADCEx_InjectedConfigChannel+0x488>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e2:	fa93 f3a3 	rbit	r3, r3
 80090e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80090e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ea:	fab3 f383 	clz	r3, r3
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d106      	bne.n	8009102 <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	2102      	movs	r1, #2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fc43 	bl	8008988 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2103      	movs	r1, #3
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fc29 	bl	8008960 <LL_ADC_GetOffsetChannel>
 800910e:	4603      	mov	r3, r0
 8009110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2103      	movs	r1, #3
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fc1e 	bl	8008960 <LL_ADC_GetOffsetChannel>
 8009124:	4603      	mov	r3, r0
 8009126:	0e9b      	lsrs	r3, r3, #26
 8009128:	f003 021f 	and.w	r2, r3, #31
 800912c:	e010      	b.n	8009150 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2103      	movs	r1, #3
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fc13 	bl	8008960 <LL_ADC_GetOffsetChannel>
 800913a:	4603      	mov	r3, r0
 800913c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009140:	fa93 f3a3 	rbit	r3, r3
 8009144:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8009146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009148:	fab3 f383 	clz	r3, r3
 800914c:	b2db      	uxtb	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009158:	2b00      	cmp	r3, #0
 800915a:	d105      	bne.n	8009168 <HAL_ADCEx_InjectedConfigChannel+0x500>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	0e9b      	lsrs	r3, r3, #26
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	e00a      	b.n	800917e <HAL_ADCEx_InjectedConfigChannel+0x516>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800916e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009170:	fa93 f3a3 	rbit	r3, r3
 8009174:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8009176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009178:	fab3 f383 	clz	r3, r3
 800917c:	b2db      	uxtb	r3, r3
 800917e:	429a      	cmp	r2, r3
 8009180:	d106      	bne.n	8009190 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2200      	movs	r2, #0
 8009188:	2103      	movs	r1, #3
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fbfc 	bl	8008988 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff fc6f 	bl	8008a78 <LL_ADC_IsEnabled>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 810c 	bne.w	80093ba <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6819      	ldr	r1, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7ff fc3e 	bl	8008a30 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4aa8      	ldr	r2, [pc, #672]	; (800945c <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	f040 80fd 	bne.w	80093ba <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10b      	bne.n	80091e8 <HAL_ADCEx_InjectedConfigChannel+0x580>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	0e9b      	lsrs	r3, r3, #26
 80091d6:	3301      	adds	r3, #1
 80091d8:	f003 031f 	and.w	r3, r3, #31
 80091dc:	2b09      	cmp	r3, #9
 80091de:	bf94      	ite	ls
 80091e0:	2301      	movls	r3, #1
 80091e2:	2300      	movhi	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e012      	b.n	800920e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	fa93 f3a3 	rbit	r3, r3
 80091f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80091f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f8:	fab3 f383 	clz	r3, r3
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	3301      	adds	r3, #1
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	2b09      	cmp	r3, #9
 8009206:	bf94      	ite	ls
 8009208:	2301      	movls	r3, #1
 800920a:	2300      	movhi	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d064      	beq.n	80092dc <HAL_ADCEx_InjectedConfigChannel+0x674>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800921a:	2b00      	cmp	r3, #0
 800921c:	d107      	bne.n	800922e <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	0e9b      	lsrs	r3, r3, #26
 8009224:	3301      	adds	r3, #1
 8009226:	069b      	lsls	r3, r3, #26
 8009228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800922c:	e00e      	b.n	800924c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009236:	fa93 f3a3 	rbit	r3, r3
 800923a:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	fab3 f383 	clz	r3, r3
 8009242:	b2db      	uxtb	r3, r3
 8009244:	3301      	adds	r3, #1
 8009246:	069b      	lsls	r3, r3, #26
 8009248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <HAL_ADCEx_InjectedConfigChannel+0x604>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	0e9b      	lsrs	r3, r3, #26
 800925e:	3301      	adds	r3, #1
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f303 	lsl.w	r3, r1, r3
 800926a:	e010      	b.n	800928e <HAL_ADCEx_InjectedConfigChannel+0x626>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009274:	fa93 f3a3 	rbit	r3, r3
 8009278:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	fab3 f383 	clz	r3, r3
 8009280:	b2db      	uxtb	r3, r3
 8009282:	3301      	adds	r3, #1
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2101      	movs	r1, #1
 800928a:	fa01 f303 	lsl.w	r3, r1, r3
 800928e:	ea42 0103 	orr.w	r1, r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <HAL_ADCEx_InjectedConfigChannel+0x64c>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	0e9b      	lsrs	r3, r3, #26
 80092a4:	3301      	adds	r3, #1
 80092a6:	f003 021f 	and.w	r2, r3, #31
 80092aa:	4613      	mov	r3, r2
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4413      	add	r3, r2
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	e011      	b.n	80092d8 <HAL_ADCEx_InjectedConfigChannel+0x670>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	fa93 f3a3 	rbit	r3, r3
 80092c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	fab3 f383 	clz	r3, r3
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	3301      	adds	r3, #1
 80092cc:	f003 021f 	and.w	r2, r3, #31
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	051b      	lsls	r3, r3, #20
 80092d8:	430b      	orrs	r3, r1
 80092da:	e069      	b.n	80093b0 <HAL_ADCEx_InjectedConfigChannel+0x748>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d107      	bne.n	80092f8 <HAL_ADCEx_InjectedConfigChannel+0x690>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	0e9b      	lsrs	r3, r3, #26
 80092ee:	3301      	adds	r3, #1
 80092f0:	069b      	lsls	r3, r3, #26
 80092f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092f6:	e00e      	b.n	8009316 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	fa93 f3a3 	rbit	r3, r3
 8009304:	623b      	str	r3, [r7, #32]
  return result;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	fab3 f383 	clz	r3, r3
 800930c:	b2db      	uxtb	r3, r3
 800930e:	3301      	adds	r3, #1
 8009310:	069b      	lsls	r3, r3, #26
 8009312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	0e9b      	lsrs	r3, r3, #26
 8009328:	3301      	adds	r3, #1
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2101      	movs	r1, #1
 8009330:	fa01 f303 	lsl.w	r3, r1, r3
 8009334:	e010      	b.n	8009358 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	fa93 f3a3 	rbit	r3, r3
 8009342:	61bb      	str	r3, [r7, #24]
  return result;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	fab3 f383 	clz	r3, r3
 800934a:	b2db      	uxtb	r3, r3
 800934c:	3301      	adds	r3, #1
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2101      	movs	r1, #1
 8009354:	fa01 f303 	lsl.w	r3, r1, r3
 8009358:	ea42 0103 	orr.w	r1, r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <HAL_ADCEx_InjectedConfigChannel+0x71c>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	0e9b      	lsrs	r3, r3, #26
 800936e:	3301      	adds	r3, #1
 8009370:	f003 021f 	and.w	r2, r3, #31
 8009374:	4613      	mov	r3, r2
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	4413      	add	r3, r2
 800937a:	3b1e      	subs	r3, #30
 800937c:	051b      	lsls	r3, r3, #20
 800937e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009382:	e014      	b.n	80093ae <HAL_ADCEx_InjectedConfigChannel+0x746>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	fa93 f3a3 	rbit	r3, r3
 8009390:	613b      	str	r3, [r7, #16]
  return result;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	fab3 f383 	clz	r3, r3
 8009398:	b2db      	uxtb	r3, r3
 800939a:	3301      	adds	r3, #1
 800939c:	f003 021f 	and.w	r2, r3, #31
 80093a0:	4613      	mov	r3, r2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	4413      	add	r3, r2
 80093a6:	3b1e      	subs	r3, #30
 80093a8:	051b      	lsls	r3, r3, #20
 80093aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80093ae:	430b      	orrs	r3, r1
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	6892      	ldr	r2, [r2, #8]
 80093b4:	4619      	mov	r1, r3
 80093b6:	f7ff fb12 	bl	80089de <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b28      	ldr	r3, [pc, #160]	; (8009460 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d072      	beq.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80093c6:	4827      	ldr	r0, [pc, #156]	; (8009464 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 80093c8:	f7ff fa99 	bl	80088fe <LL_ADC_GetCommonPathInternalCh>
 80093cc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a24      	ldr	r2, [pc, #144]	; (8009468 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d126      	bne.n	8009428 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80093da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d120      	bne.n	8009428 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a20      	ldr	r2, [pc, #128]	; (800946c <HAL_ADCEx_InjectedConfigChannel+0x804>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d15d      	bne.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093f8:	4619      	mov	r1, r3
 80093fa:	481a      	ldr	r0, [pc, #104]	; (8009464 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 80093fc:	f7ff fa6c 	bl	80088d8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009400:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	099b      	lsrs	r3, r3, #6
 8009406:	4a1b      	ldr	r2, [pc, #108]	; (8009474 <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	099a      	lsrs	r2, r3, #6
 800940e:	4613      	mov	r3, r2
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8009418:	e002      	b.n	8009420 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3b01      	subs	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f9      	bne.n	800941a <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009426:	e041      	b.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a12      	ldr	r2, [pc, #72]	; (8009478 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d124      	bne.n	800947c <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d11e      	bne.n	800947c <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a0a      	ldr	r2, [pc, #40]	; (800946c <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d131      	bne.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009450:	4619      	mov	r1, r3
 8009452:	4804      	ldr	r0, [pc, #16]	; (8009464 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8009454:	f7ff fa40 	bl	80088d8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009458:	e028      	b.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
 800945a:	bf00      	nop
 800945c:	407f0000 	.word	0x407f0000
 8009460:	80080000 	.word	0x80080000
 8009464:	50040300 	.word	0x50040300
 8009468:	c7520000 	.word	0xc7520000
 800946c:	50040000 	.word	0x50040000
 8009470:	20000038 	.word	0x20000038
 8009474:	053e2d63 	.word	0x053e2d63
 8009478:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0f      	ldr	r2, [pc, #60]	; (80094c0 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d112      	bne.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800948a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10c      	bne.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a0b      	ldr	r2, [pc, #44]	; (80094c4 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d107      	bne.n	80094ac <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800949c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094a4:	4619      	mov	r1, r3
 80094a6:	4808      	ldr	r0, [pc, #32]	; (80094c8 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 80094a8:	f7ff fa16 	bl	80088d8 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80094b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	37a0      	adds	r7, #160	; 0xa0
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	80000001 	.word	0x80000001
 80094c4:	50040000 	.word	0x50040000
 80094c8:	50040300 	.word	0x50040300

080094cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <__NVIC_SetPriorityGrouping+0x44>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80094e8:	4013      	ands	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80094f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094fe:	4a04      	ldr	r2, [pc, #16]	; (8009510 <__NVIC_SetPriorityGrouping+0x44>)
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	60d3      	str	r3, [r2, #12]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	e000ed00 	.word	0xe000ed00

08009514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <__NVIC_GetPriorityGrouping+0x18>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	f003 0307 	and.w	r3, r3, #7
}
 8009522:	4618      	mov	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800953a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	db0b      	blt.n	800955a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	4907      	ldr	r1, [pc, #28]	; (8009568 <__NVIC_EnableIRQ+0x38>)
 800954a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	2001      	movs	r0, #1
 8009552:	fa00 f202 	lsl.w	r2, r0, r2
 8009556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	e000e100 	.word	0xe000e100

0800956c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957c:	2b00      	cmp	r3, #0
 800957e:	db0a      	blt.n	8009596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	b2da      	uxtb	r2, r3
 8009584:	490c      	ldr	r1, [pc, #48]	; (80095b8 <__NVIC_SetPriority+0x4c>)
 8009586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800958a:	0112      	lsls	r2, r2, #4
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	440b      	add	r3, r1
 8009590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009594:	e00a      	b.n	80095ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	4908      	ldr	r1, [pc, #32]	; (80095bc <__NVIC_SetPriority+0x50>)
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	3b04      	subs	r3, #4
 80095a4:	0112      	lsls	r2, r2, #4
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	440b      	add	r3, r1
 80095aa:	761a      	strb	r2, [r3, #24]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	e000e100 	.word	0xe000e100
 80095bc:	e000ed00 	.word	0xe000ed00

080095c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b089      	sub	sp, #36	; 0x24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f1c3 0307 	rsb	r3, r3, #7
 80095da:	2b04      	cmp	r3, #4
 80095dc:	bf28      	it	cs
 80095de:	2304      	movcs	r3, #4
 80095e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3304      	adds	r3, #4
 80095e6:	2b06      	cmp	r3, #6
 80095e8:	d902      	bls.n	80095f0 <NVIC_EncodePriority+0x30>
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3b03      	subs	r3, #3
 80095ee:	e000      	b.n	80095f2 <NVIC_EncodePriority+0x32>
 80095f0:	2300      	movs	r3, #0
 80095f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	fa02 f303 	lsl.w	r3, r2, r3
 80095fe:	43da      	mvns	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	401a      	ands	r2, r3
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009608:	f04f 31ff 	mov.w	r1, #4294967295
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	fa01 f303 	lsl.w	r3, r1, r3
 8009612:	43d9      	mvns	r1, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009618:	4313      	orrs	r3, r2
         );
}
 800961a:	4618      	mov	r0, r3
 800961c:	3724      	adds	r7, #36	; 0x24
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
	...

08009628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3b01      	subs	r3, #1
 8009634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009638:	d301      	bcc.n	800963e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800963a:	2301      	movs	r3, #1
 800963c:	e00f      	b.n	800965e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800963e:	4a0a      	ldr	r2, [pc, #40]	; (8009668 <SysTick_Config+0x40>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3b01      	subs	r3, #1
 8009644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009646:	210f      	movs	r1, #15
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	f7ff ff8e 	bl	800956c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <SysTick_Config+0x40>)
 8009652:	2200      	movs	r2, #0
 8009654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009656:	4b04      	ldr	r3, [pc, #16]	; (8009668 <SysTick_Config+0x40>)
 8009658:	2207      	movs	r2, #7
 800965a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	e000e010 	.word	0xe000e010

0800966c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff ff29 	bl	80094cc <__NVIC_SetPriorityGrouping>
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b086      	sub	sp, #24
 8009686:	af00      	add	r7, sp, #0
 8009688:	4603      	mov	r3, r0
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009694:	f7ff ff3e 	bl	8009514 <__NVIC_GetPriorityGrouping>
 8009698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	6978      	ldr	r0, [r7, #20]
 80096a0:	f7ff ff8e 	bl	80095c0 <NVIC_EncodePriority>
 80096a4:	4602      	mov	r2, r0
 80096a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff ff5d 	bl	800956c <__NVIC_SetPriority>
}
 80096b2:	bf00      	nop
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	4603      	mov	r3, r0
 80096c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff ff31 	bl	8009530 <__NVIC_EnableIRQ>
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff ffa2 	bl	8009628 <SysTick_Config>
 80096e4:	4603      	mov	r3, r0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e08d      	b.n	800981e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	4b47      	ldr	r3, [pc, #284]	; (8009828 <HAL_DMA_Init+0x138>)
 800970a:	429a      	cmp	r2, r3
 800970c:	d80f      	bhi.n	800972e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	4b45      	ldr	r3, [pc, #276]	; (800982c <HAL_DMA_Init+0x13c>)
 8009716:	4413      	add	r3, r2
 8009718:	4a45      	ldr	r2, [pc, #276]	; (8009830 <HAL_DMA_Init+0x140>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	091b      	lsrs	r3, r3, #4
 8009720:	009a      	lsls	r2, r3, #2
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a42      	ldr	r2, [pc, #264]	; (8009834 <HAL_DMA_Init+0x144>)
 800972a:	641a      	str	r2, [r3, #64]	; 0x40
 800972c:	e00e      	b.n	800974c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	4b40      	ldr	r3, [pc, #256]	; (8009838 <HAL_DMA_Init+0x148>)
 8009736:	4413      	add	r3, r2
 8009738:	4a3d      	ldr	r2, [pc, #244]	; (8009830 <HAL_DMA_Init+0x140>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	091b      	lsrs	r3, r3, #4
 8009740:	009a      	lsls	r2, r3, #2
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a3c      	ldr	r2, [pc, #240]	; (800983c <HAL_DMA_Init+0x14c>)
 800974a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009766:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800977c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f966 	bl	8009a70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ac:	d102      	bne.n	80097b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d010      	beq.n	80097f4 <HAL_DMA_Init+0x104>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d80c      	bhi.n	80097f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f986 	bl	8009aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	e008      	b.n	8009806 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	40020407 	.word	0x40020407
 800982c:	bffdfff8 	.word	0xbffdfff8
 8009830:	cccccccd 	.word	0xcccccccd
 8009834:	40020000 	.word	0x40020000
 8009838:	bffdfbf8 	.word	0xbffdfbf8
 800983c:	40020400 	.word	0x40020400

08009840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_DMA_Start_IT+0x20>
 800985c:	2302      	movs	r3, #2
 800985e:	e066      	b.n	800992e <HAL_DMA_Start_IT+0xee>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	d155      	bne.n	8009920 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0201 	bic.w	r2, r2, #1
 8009890:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f8ab 	bl	80099f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d008      	beq.n	80098b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 020e 	orr.w	r2, r2, #14
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	e00f      	b.n	80098d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0204 	bic.w	r2, r2, #4
 80098c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 020a 	orr.w	r2, r2, #10
 80098d6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d007      	beq.n	800990e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800990c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e005      	b.n	800992c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009928:	2302      	movs	r3, #2
 800992a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d005      	beq.n	800995a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2204      	movs	r2, #4
 8009952:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e047      	b.n	80099ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 020e 	bic.w	r2, r2, #14
 8009968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 0201 	bic.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998e:	f003 021c 	and.w	r2, r3, #28
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	2101      	movs	r1, #1
 8009998:	fa01 f202 	lsl.w	r2, r1, r2
 800999c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80099a6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099c8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
    }
  }
  return status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a0a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a1c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f003 021c 	and.w	r2, r3, #28
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8009a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	2b10      	cmp	r3, #16
 8009a40:	d108      	bne.n	8009a54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009a52:	e007      	b.n	8009a64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	60da      	str	r2, [r3, #12]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b17      	ldr	r3, [pc, #92]	; (8009adc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d80a      	bhi.n	8009a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	089b      	lsrs	r3, r3, #2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a90:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6493      	str	r3, [r2, #72]	; 0x48
 8009a98:	e007      	b.n	8009aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	089b      	lsrs	r3, r3, #2
 8009aa0:	009a      	lsls	r2, r3, #2
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009aa4:	4413      	add	r3, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	3b08      	subs	r3, #8
 8009ab2:	4a0c      	ldr	r2, [pc, #48]	; (8009ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab8:	091b      	lsrs	r3, r3, #4
 8009aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a0a      	ldr	r2, [pc, #40]	; (8009ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	2201      	movs	r2, #1
 8009aca:	409a      	lsls	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009ad0:	bf00      	nop
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	40020407 	.word	0x40020407
 8009ae0:	4002081c 	.word	0x4002081c
 8009ae4:	cccccccd 	.word	0xcccccccd
 8009ae8:	40020880 	.word	0x40020880

08009aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	461a      	mov	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a08      	ldr	r2, [pc, #32]	; (8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009b0e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	2201      	movs	r2, #1
 8009b1a:	409a      	lsls	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009b20:	bf00      	nop
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	1000823f 	.word	0x1000823f
 8009b30:	40020940 	.word	0x40020940

08009b34 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d103      	bne.n	8009b54 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
      break;
 8009b52:	e002      	b.n	8009b5a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]
      break;
 8009b58:	bf00      	nop
  }

  return status;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e003      	b.n	8009b84 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009b82:	2300      	movs	r3, #0
  }
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	0c1b      	lsrs	r3, r3, #16
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	2201      	movs	r2, #1
 8009bae:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <HAL_EXTI_IRQHandler+0x5c>)
 8009bba:	4413      	add	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d009      	beq.n	8009be2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4798      	blx	r3
    }
  }
}
 8009be2:	bf00      	nop
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	40010414 	.word	0x40010414

08009bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009bfe:	e166      	b.n	8009ece <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	2101      	movs	r1, #1
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 8158 	beq.w	8009ec8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d003      	beq.n	8009c28 <HAL_GPIO_Init+0x38>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b12      	cmp	r3, #18
 8009c26:	d123      	bne.n	8009c70 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	08da      	lsrs	r2, r3, #3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3208      	adds	r2, #8
 8009c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	220f      	movs	r2, #15
 8009c40:	fa02 f303 	lsl.w	r3, r2, r3
 8009c44:	43db      	mvns	r3, r3
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	691a      	ldr	r2, [r3, #16]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	08da      	lsrs	r2, r3, #3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3208      	adds	r2, #8
 8009c6a:	6939      	ldr	r1, [r7, #16]
 8009c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c80:	43db      	mvns	r3, r3
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	4013      	ands	r3, r2
 8009c86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f003 0203 	and.w	r2, r3, #3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	fa02 f303 	lsl.w	r3, r2, r3
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d00b      	beq.n	8009cc4 <HAL_GPIO_Init+0xd4>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d007      	beq.n	8009cc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009cb8:	2b11      	cmp	r3, #17
 8009cba:	d003      	beq.n	8009cc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b12      	cmp	r3, #18
 8009cc2:	d130      	bne.n	8009d26 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	2203      	movs	r2, #3
 8009cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd4:	43db      	mvns	r3, r3
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009d02:	43db      	mvns	r3, r3
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4013      	ands	r3, r2
 8009d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	091b      	lsrs	r3, r3, #4
 8009d10:	f003 0201 	and.w	r2, r3, #1
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	2203      	movs	r2, #3
 8009d32:	fa02 f303 	lsl.w	r3, r2, r3
 8009d36:	43db      	mvns	r3, r3
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80b2 	beq.w	8009ec8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d64:	4b61      	ldr	r3, [pc, #388]	; (8009eec <HAL_GPIO_Init+0x2fc>)
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	4a60      	ldr	r2, [pc, #384]	; (8009eec <HAL_GPIO_Init+0x2fc>)
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8009d70:	4b5e      	ldr	r3, [pc, #376]	; (8009eec <HAL_GPIO_Init+0x2fc>)
 8009d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009d7c:	4a5c      	ldr	r2, [pc, #368]	; (8009ef0 <HAL_GPIO_Init+0x300>)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	089b      	lsrs	r3, r3, #2
 8009d82:	3302      	adds	r3, #2
 8009d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	220f      	movs	r2, #15
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009da6:	d02b      	beq.n	8009e00 <HAL_GPIO_Init+0x210>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a52      	ldr	r2, [pc, #328]	; (8009ef4 <HAL_GPIO_Init+0x304>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d025      	beq.n	8009dfc <HAL_GPIO_Init+0x20c>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a51      	ldr	r2, [pc, #324]	; (8009ef8 <HAL_GPIO_Init+0x308>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d01f      	beq.n	8009df8 <HAL_GPIO_Init+0x208>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a50      	ldr	r2, [pc, #320]	; (8009efc <HAL_GPIO_Init+0x30c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d019      	beq.n	8009df4 <HAL_GPIO_Init+0x204>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a4f      	ldr	r2, [pc, #316]	; (8009f00 <HAL_GPIO_Init+0x310>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <HAL_GPIO_Init+0x200>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a4e      	ldr	r2, [pc, #312]	; (8009f04 <HAL_GPIO_Init+0x314>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00d      	beq.n	8009dec <HAL_GPIO_Init+0x1fc>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a4d      	ldr	r2, [pc, #308]	; (8009f08 <HAL_GPIO_Init+0x318>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d007      	beq.n	8009de8 <HAL_GPIO_Init+0x1f8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a4c      	ldr	r2, [pc, #304]	; (8009f0c <HAL_GPIO_Init+0x31c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d101      	bne.n	8009de4 <HAL_GPIO_Init+0x1f4>
 8009de0:	2307      	movs	r3, #7
 8009de2:	e00e      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009de4:	2308      	movs	r3, #8
 8009de6:	e00c      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009de8:	2306      	movs	r3, #6
 8009dea:	e00a      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009dec:	2305      	movs	r3, #5
 8009dee:	e008      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009df0:	2304      	movs	r3, #4
 8009df2:	e006      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009df4:	2303      	movs	r3, #3
 8009df6:	e004      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	e002      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e000      	b.n	8009e02 <HAL_GPIO_Init+0x212>
 8009e00:	2300      	movs	r3, #0
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	f002 0203 	and.w	r2, r2, #3
 8009e08:	0092      	lsls	r2, r2, #2
 8009e0a:	4093      	lsls	r3, r2
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009e12:	4937      	ldr	r1, [pc, #220]	; (8009ef0 <HAL_GPIO_Init+0x300>)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	089b      	lsrs	r3, r3, #2
 8009e18:	3302      	adds	r3, #2
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009e20:	4b3b      	ldr	r3, [pc, #236]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009e44:	4a32      	ldr	r2, [pc, #200]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009e4a:	4b31      	ldr	r3, [pc, #196]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	43db      	mvns	r3, r3
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4013      	ands	r3, r2
 8009e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009e6e:	4a28      	ldr	r2, [pc, #160]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e74:	4b26      	ldr	r3, [pc, #152]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	4013      	ands	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009e98:	4a1d      	ldr	r2, [pc, #116]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009e9e:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	43db      	mvns	r3, r3
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009ec2:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <HAL_GPIO_Init+0x320>)
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f47f ae91 	bne.w	8009c00 <HAL_GPIO_Init+0x10>
  }
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	40021000 	.word	0x40021000
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	48000400 	.word	0x48000400
 8009ef8:	48000800 	.word	0x48000800
 8009efc:	48000c00 	.word	0x48000c00
 8009f00:	48001000 	.word	0x48001000
 8009f04:	48001400 	.word	0x48001400
 8009f08:	48001800 	.word	0x48001800
 8009f0c:	48001c00 	.word	0x48001c00
 8009f10:	40010400 	.word	0x40010400

08009f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	887b      	ldrh	r3, [r7, #2]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]
 8009f30:	e001      	b.n	8009f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
 8009f50:	4613      	mov	r3, r2
 8009f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f54:	787b      	ldrb	r3, [r7, #1]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009f5a:	887a      	ldrh	r2, [r7, #2]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009f60:	e002      	b.n	8009f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009f62:	887a      	ldrh	r2, [r7, #2]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	695a      	ldr	r2, [r3, #20]
 8009f84:	887b      	ldrh	r3, [r7, #2]
 8009f86:	4013      	ands	r3, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009f8c:	887a      	ldrh	r2, [r7, #2]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009f92:	e002      	b.n	8009f9a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009f94:	887a      	ldrh	r2, [r7, #2]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	619a      	str	r2, [r3, #24]
}
 8009f9a:	bf00      	nop
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009fb2:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fb4:	695a      	ldr	r2, [r3, #20]
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d006      	beq.n	8009fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009fbe:	4a05      	ldr	r2, [pc, #20]	; (8009fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009fc4:	88fb      	ldrh	r3, [r7, #6]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fb f926 	bl	8005218 <HAL_GPIO_EXTI_Callback>
  }
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40010400 	.word	0x40010400

08009fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e0a7      	b.n	800a13a <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d12c      	bne.n	800a050 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a50      	ldr	r2, [pc, #320]	; (800a144 <HAL_I2C_Init+0x16c>)
 800a002:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a50      	ldr	r2, [pc, #320]	; (800a148 <HAL_I2C_Init+0x170>)
 800a008:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a4f      	ldr	r2, [pc, #316]	; (800a14c <HAL_I2C_Init+0x174>)
 800a00e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a4f      	ldr	r2, [pc, #316]	; (800a150 <HAL_I2C_Init+0x178>)
 800a014:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a4e      	ldr	r2, [pc, #312]	; (800a154 <HAL_I2C_Init+0x17c>)
 800a01a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a4e      	ldr	r2, [pc, #312]	; (800a158 <HAL_I2C_Init+0x180>)
 800a020:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a4d      	ldr	r2, [pc, #308]	; (800a15c <HAL_I2C_Init+0x184>)
 800a026:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a4d      	ldr	r2, [pc, #308]	; (800a160 <HAL_I2C_Init+0x188>)
 800a02c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a4c      	ldr	r2, [pc, #304]	; (800a164 <HAL_I2C_Init+0x18c>)
 800a032:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a4c      	ldr	r2, [pc, #304]	; (800a168 <HAL_I2C_Init+0x190>)
 800a038:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a49      	ldr	r2, [pc, #292]	; (800a16c <HAL_I2C_Init+0x194>)
 800a046:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2224      	movs	r2, #36	; 0x24
 800a054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0201 	bic.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d107      	bne.n	800a09e <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a09a:	609a      	str	r2, [r3, #8]
 800a09c:	e006      	b.n	800a0ac <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a0aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d104      	bne.n	800a0be <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68da      	ldr	r2, [r3, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	ea42 0103 	orr.w	r1, r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	021a      	lsls	r2, r3, #8
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	69d9      	ldr	r1, [r3, #28]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1a      	ldr	r2, [r3, #32]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	0800a7a7 	.word	0x0800a7a7
 800a148:	0800a7bb 	.word	0x0800a7bb
 800a14c:	0800a7cf 	.word	0x0800a7cf
 800a150:	0800a7e3 	.word	0x0800a7e3
 800a154:	0800a813 	.word	0x0800a813
 800a158:	0800a827 	.word	0x0800a827
 800a15c:	0800a83b 	.word	0x0800a83b
 800a160:	0800a84f 	.word	0x0800a84f
 800a164:	0800a863 	.word	0x0800a863
 800a168:	0800a7f7 	.word	0x0800a7f7
 800a16c:	0800a171 	.word	0x0800a171

0800a170 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_I2C_RegisterCallback>:
  *          @arg @ref HAL_I2C_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID, pI2C_CallbackTypeDef pCallback)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	460b      	mov	r3, r1
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d107      	bne.n	800a1ac <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e08c      	b.n	800a2c6 <HAL_I2C_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(hi2c);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_I2C_RegisterCallback+0x36>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e085      	b.n	800a2c6 <HAL_I2C_RegisterCallback+0x142>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (HAL_I2C_STATE_READY == hi2c->State)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d151      	bne.n	800a272 <HAL_I2C_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	2b0a      	cmp	r3, #10
 800a1d2:	d845      	bhi.n	800a260 <HAL_I2C_RegisterCallback+0xdc>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <HAL_I2C_RegisterCallback+0x58>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a219 	.word	0x0800a219
 800a1e8:	0800a221 	.word	0x0800a221
 800a1ec:	0800a229 	.word	0x0800a229
 800a1f0:	0800a231 	.word	0x0800a231
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a241 	.word	0x0800a241
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a251 	.word	0x0800a251
 800a204:	0800a259 	.word	0x0800a259
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a20e:	e055      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a216:	e051      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a21e:	e04d      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a226:	e049      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a22e:	e045      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a236:	e041      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a23e:	e03d      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a246:	e039      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a24e:	e035      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a256:	e031      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a25e:	e02d      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]
        break;
 800a270:	e024      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d116      	bne.n	800a2ac <HAL_I2C_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	2b09      	cmp	r3, #9
 800a282:	d002      	beq.n	800a28a <HAL_I2C_RegisterCallback+0x106>
 800a284:	2b0a      	cmp	r3, #10
 800a286:	d004      	beq.n	800a292 <HAL_I2C_RegisterCallback+0x10e>
 800a288:	e007      	b.n	800a29a <HAL_I2C_RegisterCallback+0x116>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a290:	e014      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a298:	e010      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	75fb      	strb	r3, [r7, #23]
        break;
 800a2aa:	e007      	b.n	800a2bc <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return status;
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop

0800a2d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	817b      	strh	r3, [r7, #10]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	813b      	strh	r3, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b20      	cmp	r3, #32
 800a2f8:	f040 80d5 	bne.w	800a4a6 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <HAL_I2C_Mem_Write_DMA+0x34>
 800a302:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d105      	bne.n	800a314 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a30e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e0c9      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a322:	d101      	bne.n	800a328 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 800a324:	2302      	movs	r3, #2
 800a326:	e0bf      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_I2C_Mem_Write_DMA+0x62>
 800a332:	2302      	movs	r3, #2
 800a334:	e0b8      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a33e:	f7fd fdd5 	bl	8007eec <HAL_GetTick>
 800a342:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2221      	movs	r2, #33	; 0x21
 800a348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2240      	movs	r2, #64	; 0x40
 800a350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a35e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4a51      	ldr	r2, [pc, #324]	; (800a4b0 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a51      	ldr	r2, [pc, #324]	; (800a4b4 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 800a370:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a376:	b29b      	uxth	r3, r3
 800a378:	2bff      	cmp	r3, #255	; 0xff
 800a37a:	d906      	bls.n	800a38a <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	22ff      	movs	r2, #255	; 0xff
 800a380:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a386:	61fb      	str	r3, [r7, #28]
 800a388:	e007      	b.n	800a39a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a38e:	b29a      	uxth	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a398:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a39a:	88f8      	ldrh	r0, [r7, #6]
 800a39c:	893a      	ldrh	r2, [r7, #8]
 800a39e:	8979      	ldrh	r1, [r7, #10]
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	2319      	movs	r3, #25
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fd22 	bl	800adf4 <I2C_RequestMemoryWrite>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d005      	beq.n	800a3c2 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e072      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d020      	beq.n	800a40c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	4a3a      	ldr	r2, [pc, #232]	; (800a4b8 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 800a3d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	4a39      	ldr	r2, [pc, #228]	; (800a4bc <HAL_I2C_Mem_Write_DMA+0x1e8>)
 800a3d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	2200      	movs	r2, #0
 800a3e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3328      	adds	r3, #40	; 0x28
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3fc:	f7ff fa20 	bl	8009840 <HAL_DMA_Start_IT>
 800a400:	4603      	mov	r3, r0
 800a402:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d139      	bne.n	800a47e <HAL_I2C_Mem_Write_DMA+0x1aa>
 800a40a:	e013      	b.n	800a434 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e039      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	8979      	ldrh	r1, [r7, #10]
 800a43c:	2300      	movs	r3, #0
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 faee 	bl	800ba24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a462:	2111      	movs	r1, #17
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f001 fb0b 	bl	800ba80 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a478:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e014      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2220      	movs	r2, #32
 800a482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a492:	f043 0210 	orr.w	r2, r3, #16
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e000      	b.n	800a4a8 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800a4a6:	2302      	movs	r3, #2
  }
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	ffff0000 	.word	0xffff0000
 800a4b4:	0800aa7d 	.word	0x0800aa7d
 800a4b8:	0800b6b1 	.word	0x0800b6b1
 800a4bc:	0800b7dd 	.word	0x0800b7dd

0800a4c0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08a      	sub	sp, #40	; 0x28
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	817b      	strh	r3, [r7, #10]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	813b      	strh	r3, [r7, #8]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	f040 80d5 	bne.w	800a692 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <HAL_I2C_Mem_Read_DMA+0x34>
 800a4ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e0c9      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a50e:	d101      	bne.n	800a514 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800a510:	2302      	movs	r3, #2
 800a512:	e0bf      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_I2C_Mem_Read_DMA+0x62>
 800a51e:	2302      	movs	r3, #2
 800a520:	e0b8      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a52a:	f7fd fcdf 	bl	8007eec <HAL_GetTick>
 800a52e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2222      	movs	r2, #34	; 0x22
 800a534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2240      	movs	r2, #64	; 0x40
 800a53c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a54a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4a51      	ldr	r2, [pc, #324]	; (800a69c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800a556:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4a51      	ldr	r2, [pc, #324]	; (800a6a0 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 800a55c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	2bff      	cmp	r3, #255	; 0xff
 800a566:	d906      	bls.n	800a576 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	22ff      	movs	r2, #255	; 0xff
 800a56c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a56e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e007      	b.n	800a586 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a584:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a586:	88f8      	ldrh	r0, [r7, #6]
 800a588:	893a      	ldrh	r2, [r7, #8]
 800a58a:	8979      	ldrh	r1, [r7, #10]
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	2319      	movs	r3, #25
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	4603      	mov	r3, r0
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 fc80 	bl	800ae9c <I2C_RequestMemoryRead>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e072      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d020      	beq.n	800a5f8 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ba:	4a3a      	ldr	r2, [pc, #232]	; (800a6a4 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 800a5bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c2:	4a39      	ldr	r2, [pc, #228]	; (800a6a8 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3324      	adds	r3, #36	; 0x24
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e8:	f7ff f92a 	bl	8009840 <HAL_DMA_Start_IT>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d139      	bne.n	800a66a <HAL_I2C_Mem_Read_DMA+0x1aa>
 800a5f6:	e013      	b.n	800a620 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e039      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a624:	b2da      	uxtb	r2, r3
 800a626:	8979      	ldrh	r1, [r7, #10]
 800a628:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f001 f9f8 	bl	800ba24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a64e:	2111      	movs	r1, #17
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f001 fa15 	bl	800ba80 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a664:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	e014      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67e:	f043 0210 	orr.w	r2, r3, #16
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800a692:	2302      	movs	r3, #2
  }
}
 800a694:	4618      	mov	r0, r3
 800a696:	3720      	adds	r7, #32
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	ffff0000 	.word	0xffff0000
 800a6a0:	0800aa7d 	.word	0x0800aa7d
 800a6a4:	0800b747 	.word	0x0800b747
 800a6a8:	0800b7dd 	.word	0x0800b7dd
 800a6ac:	80002400 	.word	0x80002400

0800a6b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	68f9      	ldr	r1, [r7, #12]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	4798      	blx	r3
  }
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	0a1b      	lsrs	r3, r3, #8
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <HAL_I2C_ER_IRQHandler+0x46>
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	09db      	lsrs	r3, r3, #7
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a718:	f043 0201 	orr.w	r2, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a728:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	0a9b      	lsrs	r3, r3, #10
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d010      	beq.n	800a758 <HAL_I2C_ER_IRQHandler+0x74>
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	09db      	lsrs	r3, r3, #7
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00a      	beq.n	800a758 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a746:	f043 0208 	orr.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a756:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	0a5b      	lsrs	r3, r3, #9
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d010      	beq.n	800a786 <HAL_I2C_ER_IRQHandler+0xa2>
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	09db      	lsrs	r3, r3, #7
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	f043 0202 	orr.w	r2, r3, #2
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a784:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 030b 	and.w	r3, r3, #11
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a796:	68f9      	ldr	r1, [r7, #12]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fea3 	bl	800b4e4 <I2C_ITError>
  }
}
 800a79e:	bf00      	nop
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a7ae:	bf00      	nop
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a7c2:	bf00      	nop
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a7d6:	bf00      	nop
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
 800a802:	4613      	mov	r3, r2
 800a804:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a892:	2b01      	cmp	r3, #1
 800a894:	d101      	bne.n	800a89a <I2C_Slave_ISR_IT+0x24>
 800a896:	2302      	movs	r3, #2
 800a898:	e0ec      	b.n	800aa74 <I2C_Slave_ISR_IT+0x1fe>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	095b      	lsrs	r3, r3, #5
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d009      	beq.n	800a8c2 <I2C_Slave_ISR_IT+0x4c>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	095b      	lsrs	r3, r3, #5
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a8ba:	6939      	ldr	r1, [r7, #16]
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 fce1 	bl	800b284 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	091b      	lsrs	r3, r3, #4
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d04d      	beq.n	800a96a <I2C_Slave_ISR_IT+0xf4>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	091b      	lsrs	r3, r3, #4
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d047      	beq.n	800a96a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d128      	bne.n	800a936 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b28      	cmp	r3, #40	; 0x28
 800a8ee:	d108      	bne.n	800a902 <I2C_Slave_ISR_IT+0x8c>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8f6:	d104      	bne.n	800a902 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a8f8:	6939      	ldr	r1, [r7, #16]
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fd9c 	bl	800b438 <I2C_ITListenCplt>
 800a900:	e032      	b.n	800a968 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b29      	cmp	r3, #41	; 0x29
 800a90c:	d10e      	bne.n	800a92c <I2C_Slave_ISR_IT+0xb6>
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a914:	d00a      	beq.n	800a92c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2210      	movs	r2, #16
 800a91c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 fea2 	bl	800b668 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fbce 	bl	800b0c6 <I2C_ITSlaveSeqCplt>
 800a92a:	e01d      	b.n	800a968 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2210      	movs	r2, #16
 800a932:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a934:	e096      	b.n	800aa64 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2210      	movs	r2, #16
 800a93c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a942:	f043 0204 	orr.w	r2, r3, #4
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <I2C_Slave_ISR_IT+0xe4>
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a956:	f040 8085 	bne.w	800aa64 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	4619      	mov	r1, r3
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fdbf 	bl	800b4e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a966:	e07d      	b.n	800aa64 <I2C_Slave_ISR_IT+0x1ee>
 800a968:	e07c      	b.n	800aa64 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	089b      	lsrs	r3, r3, #2
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d030      	beq.n	800a9d8 <I2C_Slave_ISR_IT+0x162>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	089b      	lsrs	r3, r3, #2
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d02a      	beq.n	800a9d8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a986:	b29b      	uxth	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d018      	beq.n	800a9be <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d14f      	bne.n	800aa68 <I2C_Slave_ISR_IT+0x1f2>
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9ce:	d04b      	beq.n	800aa68 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fb78 	bl	800b0c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a9d6:	e047      	b.n	800aa68 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <I2C_Slave_ISR_IT+0x184>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	08db      	lsrs	r3, r3, #3
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a9f0:	6939      	ldr	r1, [r7, #16]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 faa6 	bl	800af44 <I2C_ITAddrCplt>
 800a9f8:	e037      	b.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	085b      	lsrs	r3, r3, #1
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d031      	beq.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	085b      	lsrs	r3, r3, #1
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d02b      	beq.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d018      	beq.n	800aa4e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	781a      	ldrb	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	851a      	strh	r2, [r3, #40]	; 0x28
 800aa4c:	e00d      	b.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa54:	d002      	beq.n	800aa5c <I2C_Slave_ISR_IT+0x1e6>
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d106      	bne.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 fb32 	bl	800b0c6 <I2C_ITSlaveSeqCplt>
 800aa62:	e002      	b.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800aa68:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <I2C_Master_ISR_DMA+0x1a>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e0e1      	b.n	800ac5a <I2C_Master_ISR_DMA+0x1de>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d017      	beq.n	800aada <I2C_Master_ISR_DMA+0x5e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	091b      	lsrs	r3, r3, #4
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d011      	beq.n	800aada <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2210      	movs	r2, #16
 800aabc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac2:	f043 0204 	orr.w	r2, r3, #4
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aaca:	2112      	movs	r1, #18
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 ffd7 	bl	800ba80 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fdc8 	bl	800b668 <I2C_Flush_TXDR>
 800aad8:	e0ba      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	09db      	lsrs	r3, r3, #7
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d072      	beq.n	800abcc <I2C_Master_ISR_DMA+0x150>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	099b      	lsrs	r3, r3, #6
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d06c      	beq.n	800abcc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab00:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d04e      	beq.n	800abaa <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab18:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	2bff      	cmp	r3, #255	; 0xff
 800ab22:	d906      	bls.n	800ab32 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	22ff      	movs	r2, #255	; 0xff
 800ab28:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800ab2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e010      	b.n	800ab54 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab44:	d003      	beq.n	800ab4e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	e002      	b.n	800ab54 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800ab4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab52:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	8a79      	ldrh	r1, [r7, #18]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 ff5e 	bl	800ba24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b22      	cmp	r3, #34	; 0x22
 800ab84:	d108      	bne.n	800ab98 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ab96:	e05b      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aba6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aba8:	e052      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abb8:	d003      	beq.n	800abc2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f000 fa44 	bl	800b048 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800abc0:	e046      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800abc2:	2140      	movs	r1, #64	; 0x40
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fc8d 	bl	800b4e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800abca:	e041      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	099b      	lsrs	r3, r3, #6
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d029      	beq.n	800ac2c <I2C_Master_ISR_DMA+0x1b0>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	099b      	lsrs	r3, r3, #6
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d023      	beq.n	800ac2c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d119      	bne.n	800ac22 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abfc:	d027      	beq.n	800ac4e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac06:	d108      	bne.n	800ac1a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac16:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ac18:	e019      	b.n	800ac4e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 fa14 	bl	800b048 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ac20:	e015      	b.n	800ac4e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ac22:	2140      	movs	r1, #64	; 0x40
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 fc5d 	bl	800b4e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ac2a:	e010      	b.n	800ac4e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	095b      	lsrs	r3, r3, #5
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 fa7c 	bl	800b144 <I2C_ITMasterCplt>
 800ac4c:	e000      	b.n	800ac50 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800ac4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b086      	sub	sp, #24
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <I2C_Slave_ISR_DMA+0x24>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e0b1      	b.n	800adea <I2C_Slave_ISR_DMA+0x188>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	095b      	lsrs	r3, r3, #5
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <I2C_Slave_ISR_DMA+0x4c>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 faeb 	bl	800b284 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	091b      	lsrs	r3, r3, #4
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8082 	beq.w	800adc0 <I2C_Slave_ISR_DMA+0x15e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	091b      	lsrs	r3, r3, #4
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d07b      	beq.n	800adc0 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	0b9b      	lsrs	r3, r3, #14
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0bdb      	lsrs	r3, r3, #15
 800acd8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d068      	beq.n	800adb2 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00d      	beq.n	800ad04 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0bdb      	lsrs	r3, r3, #15
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800ad00:	2301      	movs	r3, #1
 800ad02:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00d      	beq.n	800ad28 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	0b9b      	lsrs	r3, r3, #14
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d128      	bne.n	800ad80 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b28      	cmp	r3, #40	; 0x28
 800ad38:	d108      	bne.n	800ad4c <I2C_Slave_ISR_DMA+0xea>
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad40:	d104      	bne.n	800ad4c <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 fb77 	bl	800b438 <I2C_ITListenCplt>
 800ad4a:	e031      	b.n	800adb0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b29      	cmp	r3, #41	; 0x29
 800ad56:	d10e      	bne.n	800ad76 <I2C_Slave_ISR_DMA+0x114>
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad5e:	d00a      	beq.n	800ad76 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2210      	movs	r2, #16
 800ad66:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 fc7d 	bl	800b668 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 f9a9 	bl	800b0c6 <I2C_ITSlaveSeqCplt>
 800ad74:	e01c      	b.n	800adb0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ad7e:	e01d      	b.n	800adbc <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2210      	movs	r2, #16
 800ad86:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8c:	f043 0204 	orr.w	r2, r3, #4
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <I2C_Slave_ISR_DMA+0x140>
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ada0:	d10c      	bne.n	800adbc <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 fb9b 	bl	800b4e4 <I2C_ITError>
      if (treatdmanack == 1U)
 800adae:	e005      	b.n	800adbc <I2C_Slave_ISR_DMA+0x15a>
 800adb0:	e004      	b.n	800adbc <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2210      	movs	r2, #16
 800adb8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800adba:	e011      	b.n	800ade0 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800adbc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800adbe:	e00f      	b.n	800ade0 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	08db      	lsrs	r3, r3, #3
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <I2C_Slave_ISR_DMA+0x17e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 f8b2 	bl	800af44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	4608      	mov	r0, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	461a      	mov	r2, r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	817b      	strh	r3, [r7, #10]
 800ae06:	460b      	mov	r3, r1
 800ae08:	813b      	strh	r3, [r7, #8]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	8979      	ldrh	r1, [r7, #10]
 800ae14:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <I2C_RequestMemoryWrite+0xa4>)
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fe01 	bl	800ba24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae22:	69fa      	ldr	r2, [r7, #28]
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fd55 	bl	800b8d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e02c      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d105      	bne.n	800ae48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae3c:	893b      	ldrh	r3, [r7, #8]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	629a      	str	r2, [r3, #40]	; 0x28
 800ae46:	e015      	b.n	800ae74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae48:	893b      	ldrh	r3, [r7, #8]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	69b9      	ldr	r1, [r7, #24]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fd3b 	bl	800b8d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e012      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae6a:	893b      	ldrh	r3, [r7, #8]
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2180      	movs	r1, #128	; 0x80
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 fce9 	bl	800b856 <I2C_WaitOnFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e000      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	80002000 	.word	0x80002000

0800ae9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	817b      	strh	r3, [r7, #10]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	813b      	strh	r3, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	8979      	ldrh	r1, [r7, #10]
 800aebc:	4b20      	ldr	r3, [pc, #128]	; (800af40 <I2C_RequestMemoryRead+0xa4>)
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	2300      	movs	r3, #0
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fdae 	bl	800ba24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aec8:	69fa      	ldr	r2, [r7, #28]
 800aeca:	69b9      	ldr	r1, [r7, #24]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fd02 	bl	800b8d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e02c      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d105      	bne.n	800aeee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aee2:	893b      	ldrh	r3, [r7, #8]
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	629a      	str	r2, [r3, #40]	; 0x28
 800aeec:	e015      	b.n	800af1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	b2da      	uxtb	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	69b9      	ldr	r1, [r7, #24]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fce8 	bl	800b8d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e012      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af10:	893b      	ldrh	r3, [r7, #8]
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2200      	movs	r2, #0
 800af22:	2140      	movs	r1, #64	; 0x40
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fc96 	bl	800b856 <I2C_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e000      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	80002000 	.word	0x80002000

0800af44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af5a:	2b28      	cmp	r3, #40	; 0x28
 800af5c:	d168      	bne.n	800b030 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	0c1b      	lsrs	r3, r3, #16
 800af66:	b2db      	uxtb	r3, r3
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	0c1b      	lsrs	r3, r3, #16
 800af76:	b29b      	uxth	r3, r3
 800af78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800af7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	b29b      	uxth	r3, r3
 800af94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800af98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d137      	bne.n	800b012 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800afa2:	897b      	ldrh	r3, [r7, #10]
 800afa4:	09db      	lsrs	r3, r3, #7
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	89bb      	ldrh	r3, [r7, #12]
 800afaa:	4053      	eors	r3, r2
 800afac:	b29b      	uxth	r3, r3
 800afae:	f003 0306 	and.w	r3, r3, #6
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11c      	bne.n	800aff0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800afb6:	897b      	ldrh	r3, [r7, #10]
 800afb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d139      	bne.n	800b040 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2208      	movs	r2, #8
 800afd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe6:	89ba      	ldrh	r2, [r7, #12]
 800afe8:	7bf9      	ldrb	r1, [r7, #15]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800afee:	e027      	b.n	800b040 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800aff0:	893b      	ldrh	r3, [r7, #8]
 800aff2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800aff4:	2104      	movs	r1, #4
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fdb0 	bl	800bb5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	89ba      	ldrh	r2, [r7, #12]
 800b00a:	7bf9      	ldrb	r1, [r7, #15]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
}
 800b010:	e016      	b.n	800b040 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b012:	2104      	movs	r1, #4
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fda1 	bl	800bb5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b026:	89ba      	ldrh	r2, [r7, #12]
 800b028:	7bf9      	ldrb	r1, [r7, #15]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
}
 800b02e:	e007      	b.n	800b040 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2208      	movs	r2, #8
 800b036:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b040:	bf00      	nop
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b21      	cmp	r3, #33	; 0x21
 800b062:	d116      	bne.n	800b092 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2220      	movs	r2, #32
 800b068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2211      	movs	r2, #17
 800b070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b078:	2101      	movs	r1, #1
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fd6e 	bl	800bb5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b090:	e015      	b.n	800b0be <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2212      	movs	r2, #18
 800b09e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b0a6:	2102      	movs	r1, #2
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fd57 	bl	800bb5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b29      	cmp	r3, #41	; 0x29
 800b0e0:	d113      	bne.n	800b10a <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2228      	movs	r2, #40	; 0x28
 800b0e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2221      	movs	r2, #33	; 0x21
 800b0ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fd32 	bl	800bb5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 800b108:	e018      	b.n	800b13c <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b2a      	cmp	r3, #42	; 0x2a
 800b114:	d112      	bne.n	800b13c <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2228      	movs	r2, #40	; 0x28
 800b11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2222      	movs	r2, #34	; 0x22
 800b122:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b124:	2102      	movs	r1, #2
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fd18 	bl	800bb5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	4798      	blx	r3
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2220      	movs	r2, #32
 800b154:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6859      	ldr	r1, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	4b46      	ldr	r3, [pc, #280]	; (800b27c <I2C_ITMasterCplt+0x138>)
 800b162:	400b      	ands	r3, r1
 800b164:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a42      	ldr	r2, [pc, #264]	; (800b280 <I2C_ITMasterCplt+0x13c>)
 800b176:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	091b      	lsrs	r3, r3, #4
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d009      	beq.n	800b198 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2210      	movs	r2, #16
 800b18a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b190:	f043 0204 	orr.w	r2, r3, #4
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fa65 	bl	800b668 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b19e:	2103      	movs	r1, #3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fcdb 	bl	800bb5c <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b60      	cmp	r3, #96	; 0x60
 800b1b6:	d002      	beq.n	800b1be <I2C_ITMasterCplt+0x7a>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d006      	beq.n	800b1cc <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f98d 	bl	800b4e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1ca:	e052      	b.n	800b272 <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b21      	cmp	r3, #33	; 0x21
 800b1d6:	d123      	bne.n	800b220 <I2C_ITMasterCplt+0xdc>
    hi2c->State = HAL_I2C_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	d10c      	bne.n	800b206 <I2C_ITMasterCplt+0xc2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	4798      	blx	r3
}
 800b204:	e035      	b.n	800b272 <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	4798      	blx	r3
}
 800b21e:	e028      	b.n	800b272 <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b22      	cmp	r3, #34	; 0x22
 800b22a:	d122      	bne.n	800b272 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d10c      	bne.n	800b25a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
}
 800b258:	e00b      	b.n	800b272 <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	4798      	blx	r3
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	fe00e800 	.word	0xfe00e800
 800b280:	ffff0000 	.word	0xffff0000

0800b284 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b2a2:	2107      	movs	r1, #7
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fc59 	bl	800bb5c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6859      	ldr	r1, [r3, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	4b5a      	ldr	r3, [pc, #360]	; (800b430 <I2C_ITSlaveCplt+0x1ac>)
 800b2c6:	400b      	ands	r3, r1
 800b2c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9cc 	bl	800b668 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	0b9b      	lsrs	r3, r3, #14
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d018      	beq.n	800b316 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2f2:	e010      	b.n	800b316 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	0bdb      	lsrs	r3, r3, #15
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00a      	beq.n	800b316 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d006      	beq.n	800b316 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	b29a      	uxth	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	089b      	lsrs	r3, r3, #2
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d020      	beq.n	800b364 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f023 0304 	bic.w	r3, r3, #4
 800b328:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	1c5a      	adds	r2, r3, #1
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00c      	beq.n	800b364 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34e:	3b01      	subs	r3, #1
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b368:	b29b      	uxth	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b372:	f043 0204 	orr.w	r2, r3, #4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b392:	2b00      	cmp	r3, #0
 800b394:	d010      	beq.n	800b3b8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f8a1 	bl	800b4e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b28      	cmp	r3, #40	; 0x28
 800b3ac:	d13b      	bne.n	800b426 <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b3ae:	68f9      	ldr	r1, [r7, #12]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f841 	bl	800b438 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b3b6:	e036      	b.n	800b426 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b3c0:	d012      	beq.n	800b3e8 <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fe7f 	bl	800b0c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a1a      	ldr	r2, [pc, #104]	; (800b434 <I2C_ITSlaveCplt+0x1b0>)
 800b3cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	4798      	blx	r3
}
 800b3e6:	e01e      	b.n	800b426 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b22      	cmp	r3, #34	; 0x22
 800b3f2:	d10c      	bne.n	800b40e <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	4798      	blx	r3
}
 800b40c:	e00b      	b.n	800b426 <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	fe00e800 	.word	0xfe00e800
 800b434:	ffff0000 	.word	0xffff0000

0800b438 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a26      	ldr	r2, [pc, #152]	; (800b4e0 <I2C_ITListenCplt+0xa8>)
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	089b      	lsrs	r3, r3, #2
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d022      	beq.n	800b4b6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d012      	beq.n	800b4b6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b494:	3b01      	subs	r3, #1
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ae:	f043 0204 	orr.w	r2, r3, #4
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b4b6:	2107      	movs	r1, #7
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fb4f 	bl	800bb5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2210      	movs	r2, #16
 800b4c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	ffff0000 	.word	0xffff0000

0800b4e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4f4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a56      	ldr	r2, [pc, #344]	; (800b65c <I2C_ITError+0x178>)
 800b502:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	431a      	orrs	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	2b28      	cmp	r3, #40	; 0x28
 800b51a:	d005      	beq.n	800b528 <I2C_ITError+0x44>
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	2b29      	cmp	r3, #41	; 0x29
 800b520:	d002      	beq.n	800b528 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2b2a      	cmp	r3, #42	; 0x2a
 800b526:	d10e      	bne.n	800b546 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b528:	2103      	movs	r1, #3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fb16 	bl	800bb5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2228      	movs	r2, #40	; 0x28
 800b534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a47      	ldr	r2, [pc, #284]	; (800b660 <I2C_ITError+0x17c>)
 800b542:	635a      	str	r2, [r3, #52]	; 0x34
 800b544:	e013      	b.n	800b56e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b546:	2107      	movs	r1, #7
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fb07 	bl	800bb5c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b60      	cmp	r3, #96	; 0x60
 800b558:	d003      	beq.n	800b562 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b57c:	d123      	bne.n	800b5c6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b58c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b592:	2b00      	cmp	r3, #0
 800b594:	d05e      	beq.n	800b654 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	4a32      	ldr	r2, [pc, #200]	; (800b664 <I2C_ITError+0x180>)
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe f9c3 	bl	8009936 <HAL_DMA_Abort_IT>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d04e      	beq.n	800b654 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b5c4:	e046      	b.n	800b654 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d4:	d123      	bne.n	800b61e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5e4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d032      	beq.n	800b654 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	4a1c      	ldr	r2, [pc, #112]	; (800b664 <I2C_ITError+0x180>)
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe f997 	bl	8009936 <HAL_DMA_Abort_IT>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d022      	beq.n	800b654 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
}
 800b61c:	e01a      	b.n	800b654 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b60      	cmp	r3, #96	; 0x60
 800b628:	d10c      	bne.n	800b644 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	4798      	blx	r3
}
 800b642:	e007      	b.n	800b654 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	4798      	blx	r3
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	ffff0000 	.word	0xffff0000
 800b660:	0800a877 	.word	0x0800a877
 800b664:	0800b80b 	.word	0x0800b80b

0800b668 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d103      	bne.n	800b686 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b01      	cmp	r3, #1
 800b692:	d007      	beq.n	800b6a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	699a      	ldr	r2, [r3, #24]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f042 0201 	orr.w	r2, r2, #1
 800b6a2:	619a      	str	r2, [r3, #24]
  }
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d104      	bne.n	800b6e2 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b6d8:	2112      	movs	r1, #18
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 f9d0 	bl	800ba80 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b6e0:	e02d      	b.n	800b73e <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b6ea:	441a      	add	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	2bff      	cmp	r3, #255	; 0xff
 800b6f8:	d903      	bls.n	800b702 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	22ff      	movs	r2, #255	; 0xff
 800b6fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800b700:	e004      	b.n	800b70c <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b706:	b29a      	uxth	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	4619      	mov	r1, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3328      	adds	r3, #40	; 0x28
 800b71c:	461a      	mov	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b722:	f7fe f88d 	bl	8009840 <HAL_DMA_Start_IT>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b72c:	2110      	movs	r1, #16
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7ff fed8 	bl	800b4e4 <I2C_ITError>
}
 800b734:	e003      	b.n	800b73e <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b736:	2112      	movs	r1, #18
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 f9a1 	bl	800ba80 <I2C_Enable_IRQ>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b752:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b762:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b768:	b29b      	uxth	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d104      	bne.n	800b778 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b76e:	2112      	movs	r1, #18
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f985 	bl	800ba80 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b776:	e02d      	b.n	800b7d4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b780:	441a      	add	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2bff      	cmp	r3, #255	; 0xff
 800b78e:	d903      	bls.n	800b798 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	22ff      	movs	r2, #255	; 0xff
 800b794:	851a      	strh	r2, [r3, #40]	; 0x28
 800b796:	e004      	b.n	800b7a2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3324      	adds	r3, #36	; 0x24
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b8:	f7fe f842 	bl	8009840 <HAL_DMA_Start_IT>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d004      	beq.n	800b7cc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b7c2:	2110      	movs	r1, #16
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fe8d 	bl	800b4e4 <I2C_ITError>
}
 800b7ca:	e003      	b.n	800b7d4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b7cc:	2112      	movs	r1, #18
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 f956 	bl	800ba80 <I2C_Enable_IRQ>
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7f8:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b7fa:	2110      	movs	r1, #16
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7ff fe71 	bl	800b4e4 <I2C_ITError>
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81c:	2200      	movs	r2, #0
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b824:	2200      	movs	r2, #0
 800b826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b60      	cmp	r3, #96	; 0x60
 800b832:	d108      	bne.n	800b846 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b844:	e003      	b.n	800b84e <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	4798      	blx	r3
}
 800b84e:	bf00      	nop
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b866:	e022      	b.n	800b8ae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86e:	d01e      	beq.n	800b8ae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b870:	f7fc fb3c 	bl	8007eec <HAL_GetTick>
 800b874:	4602      	mov	r2, r0
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d302      	bcc.n	800b886 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d113      	bne.n	800b8ae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88a:	f043 0220 	orr.w	r2, r3, #32
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e00f      	b.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	699a      	ldr	r2, [r3, #24]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	bf0c      	ite	eq
 800b8be:	2301      	moveq	r3, #1
 800b8c0:	2300      	movne	r3, #0
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d0cd      	beq.n	800b868 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8e2:	e02c      	b.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f835 	bl	800b958 <I2C_IsAcknowledgeFailed>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e02a      	b.n	800b94e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fe:	d01e      	beq.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b900:	f7fc faf4 	bl	8007eec <HAL_GetTick>
 800b904:	4602      	mov	r2, r0
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d302      	bcc.n	800b916 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d113      	bne.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	f043 0220 	orr.w	r2, r3, #32
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2220      	movs	r2, #32
 800b926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e007      	b.n	800b94e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	f003 0302 	and.w	r3, r3, #2
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d1cb      	bne.n	800b8e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	f003 0310 	and.w	r3, r3, #16
 800b96e:	2b10      	cmp	r3, #16
 800b970:	d151      	bne.n	800ba16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b972:	e022      	b.n	800b9ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d01e      	beq.n	800b9ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b97c:	f7fc fab6 	bl	8007eec <HAL_GetTick>
 800b980:	4602      	mov	r2, r0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d302      	bcc.n	800b992 <I2C_IsAcknowledgeFailed+0x3a>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d113      	bne.n	800b9ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b996:	f043 0220 	orr.w	r2, r3, #32
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e02e      	b.n	800ba18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	f003 0320 	and.w	r3, r3, #32
 800b9c4:	2b20      	cmp	r3, #32
 800b9c6:	d1d5      	bne.n	800b974 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff fe45 	bl	800b668 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6859      	ldr	r1, [r3, #4]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <I2C_IsAcknowledgeFailed+0xc8>)
 800b9ea:	400b      	ands	r3, r1
 800b9ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f2:	f043 0204 	orr.w	r2, r3, #4
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	fe00e800 	.word	0xfe00e800

0800ba24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	817b      	strh	r3, [r7, #10]
 800ba32:	4613      	mov	r3, r2
 800ba34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	0d5b      	lsrs	r3, r3, #21
 800ba40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ba44:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <I2C_TransferConfig+0x58>)
 800ba46:	430b      	orrs	r3, r1
 800ba48:	43db      	mvns	r3, r3
 800ba4a:	ea02 0103 	and.w	r1, r2, r3
 800ba4e:	897b      	ldrh	r3, [r7, #10]
 800ba50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba54:	7a7b      	ldrb	r3, [r7, #9]
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	431a      	orrs	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ba6e:	bf00      	nop
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	03ff63ff 	.word	0x03ff63ff

0800ba80 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	4a2f      	ldr	r2, [pc, #188]	; (800bb54 <I2C_Enable_IRQ+0xd4>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d004      	beq.n	800baa4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ba9e:	4a2e      	ldr	r2, [pc, #184]	; (800bb58 <I2C_Enable_IRQ+0xd8>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d124      	bne.n	800baee <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800baa4:	887b      	ldrh	r3, [r7, #2]
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bab4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800bab6:	887b      	ldrh	r3, [r7, #2]
 800bab8:	f003 0311 	and.w	r3, r3, #17
 800babc:	2b11      	cmp	r3, #17
 800babe:	d103      	bne.n	800bac8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bac6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800bac8:	887b      	ldrh	r3, [r7, #2]
 800baca:	f003 0312 	and.w	r3, r3, #18
 800bace:	2b12      	cmp	r3, #18
 800bad0:	d103      	bne.n	800bada <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f043 0320 	orr.w	r3, r3, #32
 800bad8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800bada:	887b      	ldrh	r3, [r7, #2]
 800badc:	f003 0312 	and.w	r3, r3, #18
 800bae0:	2b12      	cmp	r3, #18
 800bae2:	d128      	bne.n	800bb36 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baea:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800baec:	e023      	b.n	800bb36 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800baee:	887b      	ldrh	r3, [r7, #2]
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bafe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bb00:	887b      	ldrh	r3, [r7, #2]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800bb10:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bb12:	887b      	ldrh	r3, [r7, #2]
 800bb14:	f003 0302 	and.w	r3, r3, #2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800bb22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800bb24:	887b      	ldrh	r3, [r7, #2]
 800bb26:	f003 0312 	and.w	r3, r3, #18
 800bb2a:	2b12      	cmp	r3, #18
 800bb2c:	d103      	bne.n	800bb36 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f043 0320 	orr.w	r3, r3, #32
 800bb34:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6819      	ldr	r1, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	601a      	str	r2, [r3, #0]
}
 800bb46:	bf00      	nop
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	0800aa7d 	.word	0x0800aa7d
 800bb58:	0800ac63 	.word	0x0800ac63

0800bb5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bb6c:	887b      	ldrh	r3, [r7, #2]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00f      	beq.n	800bb96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bb7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bb8a:	2b28      	cmp	r3, #40	; 0x28
 800bb8c:	d003      	beq.n	800bb96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bb94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bb96:	887b      	ldrh	r3, [r7, #2]
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00f      	beq.n	800bbc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bba6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bbb4:	2b28      	cmp	r3, #40	; 0x28
 800bbb6:	d003      	beq.n	800bbc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bbbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bbc0:	887b      	ldrh	r3, [r7, #2]
 800bbc2:	f003 0304 	and.w	r3, r3, #4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bbd0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800bbd2:	887b      	ldrh	r3, [r7, #2]
 800bbd4:	f003 0311 	and.w	r3, r3, #17
 800bbd8:	2b11      	cmp	r3, #17
 800bbda:	d103      	bne.n	800bbe4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bbe2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800bbe4:	887b      	ldrh	r3, [r7, #2]
 800bbe6:	f003 0312 	and.w	r3, r3, #18
 800bbea:	2b12      	cmp	r3, #18
 800bbec:	d103      	bne.n	800bbf6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f043 0320 	orr.w	r3, r3, #32
 800bbf4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800bbf6:	887b      	ldrh	r3, [r7, #2]
 800bbf8:	f003 0312 	and.w	r3, r3, #18
 800bbfc:	2b12      	cmp	r3, #18
 800bbfe:	d103      	bne.n	800bc08 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc06:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6819      	ldr	r1, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	43da      	mvns	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	400a      	ands	r2, r1
 800bc18:	601a      	str	r2, [r3, #0]
}
 800bc1a:	bf00      	nop
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b20      	cmp	r3, #32
 800bc3a:	d138      	bne.n	800bcae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc46:	2302      	movs	r3, #2
 800bc48:	e032      	b.n	800bcb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2224      	movs	r2, #36	; 0x24
 800bc56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	430a      	orrs	r2, r1
 800bc88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f042 0201 	orr.w	r2, r2, #1
 800bc98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e000      	b.n	800bcb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bcae:	2302      	movs	r3, #2
  }
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d139      	bne.n	800bd46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d101      	bne.n	800bce0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bcdc:	2302      	movs	r3, #2
 800bcde:	e033      	b.n	800bd48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2224      	movs	r2, #36	; 0x24
 800bcec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0201 	bic.w	r2, r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f042 0201 	orr.w	r2, r2, #1
 800bd30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e000      	b.n	800bd48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd46:	2302      	movs	r3, #2
  }
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd56:	b08f      	sub	sp, #60	; 0x3c
 800bd58:	af0a      	add	r7, sp, #40	; 0x28
 800bd5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e116      	b.n	800bf94 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d106      	bne.n	800bd86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7fa f8c1 	bl	8005f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f006 fc0a 	bl	80125be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	687e      	ldr	r6, [r7, #4]
 800bdb2:	466d      	mov	r5, sp
 800bdb4:	f106 0410 	add.w	r4, r6, #16
 800bdb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bdc4:	e885 0003 	stmia.w	r5, {r0, r1}
 800bdc8:	1d33      	adds	r3, r6, #4
 800bdca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdcc:	6838      	ldr	r0, [r7, #0]
 800bdce:	f006 faf7 	bl	80123c0 <USB_CoreInit>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e0d7      	b.n	800bf94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2100      	movs	r1, #0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f006 fbf8 	bl	80125e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
 800bdf4:	e04a      	b.n	800be8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bdf6:	7bfa      	ldrb	r2, [r7, #15]
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	333d      	adds	r3, #61	; 0x3d
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	333c      	adds	r3, #60	; 0x3c
 800be1a:	7bfa      	ldrb	r2, [r7, #15]
 800be1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800be1e:	7bfa      	ldrb	r2, [r7, #15]
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	b298      	uxth	r0, r3
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	4613      	mov	r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	1a9b      	subs	r3, r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	440b      	add	r3, r1
 800be30:	3342      	adds	r3, #66	; 0x42
 800be32:	4602      	mov	r2, r0
 800be34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800be36:	7bfa      	ldrb	r2, [r7, #15]
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	4613      	mov	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	1a9b      	subs	r3, r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	440b      	add	r3, r1
 800be44:	333f      	adds	r3, #63	; 0x3f
 800be46:	2200      	movs	r2, #0
 800be48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800be4a:	7bfa      	ldrb	r2, [r7, #15]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3344      	adds	r3, #68	; 0x44
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800be5e:	7bfa      	ldrb	r2, [r7, #15]
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	1a9b      	subs	r3, r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	3348      	adds	r3, #72	; 0x48
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800be72:	7bfa      	ldrb	r2, [r7, #15]
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	4613      	mov	r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	440b      	add	r3, r1
 800be80:	3350      	adds	r3, #80	; 0x50
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	3301      	adds	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
 800be8c:	7bfa      	ldrb	r2, [r7, #15]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	429a      	cmp	r2, r3
 800be94:	d3af      	bcc.n	800bdf6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
 800be9a:	e044      	b.n	800bf26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800be9c:	7bfa      	ldrb	r2, [r7, #15]
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	4613      	mov	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	440b      	add	r3, r1
 800beaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800beb2:	7bfa      	ldrb	r2, [r7, #15]
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	440b      	add	r3, r1
 800bec0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bec4:	7bfa      	ldrb	r2, [r7, #15]
 800bec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bec8:	7bfa      	ldrb	r2, [r7, #15]
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	4613      	mov	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	1a9b      	subs	r3, r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	440b      	add	r3, r1
 800bed6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bede:	7bfa      	ldrb	r2, [r7, #15]
 800bee0:	6879      	ldr	r1, [r7, #4]
 800bee2:	4613      	mov	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	1a9b      	subs	r3, r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	440b      	add	r3, r1
 800beec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bef4:	7bfa      	ldrb	r2, [r7, #15]
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	4613      	mov	r3, r2
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	1a9b      	subs	r3, r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bf0a:	7bfa      	ldrb	r2, [r7, #15]
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	440b      	add	r3, r1
 800bf18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	3301      	adds	r3, #1
 800bf24:	73fb      	strb	r3, [r7, #15]
 800bf26:	7bfa      	ldrb	r2, [r7, #15]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d3b5      	bcc.n	800be9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	603b      	str	r3, [r7, #0]
 800bf36:	687e      	ldr	r6, [r7, #4]
 800bf38:	466d      	mov	r5, sp
 800bf3a:	f106 0410 	add.w	r4, r6, #16
 800bf3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf46:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf4a:	e885 0003 	stmia.w	r5, {r0, r1}
 800bf4e:	1d33      	adds	r3, r6, #4
 800bf50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf52:	6838      	ldr	r0, [r7, #0]
 800bf54:	f006 fb6e 	bl	8012634 <USB_DevInit>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2202      	movs	r2, #2
 800bf62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e014      	b.n	800bf94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d102      	bne.n	800bf88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 ff62 	bl	800ce4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f007 fae7 	bl	8013560 <USB_DevDisconnect>

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d101      	bne.n	800bfb8 <HAL_PCD_Start+0x1c>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e01c      	b.n	800bff2 <HAL_PCD_Start+0x56>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d105      	bne.n	800bfd4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f007 faa9 	bl	8013530 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f006 fada 	bl	801259c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bffa:	b590      	push	{r4, r7, lr}
 800bffc:	b08d      	sub	sp, #52	; 0x34
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f007 fb50 	bl	80136b6 <USB_GetMode>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f040 838f 	bne.w	800c73c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4618      	mov	r0, r3
 800c024:	f007 fab4 	bl	8013590 <USB_ReadInterrupts>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 8385 	beq.w	800c73a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4618      	mov	r0, r3
 800c036:	f007 faab 	bl	8013590 <USB_ReadInterrupts>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f003 0302 	and.w	r3, r3, #2
 800c040:	2b02      	cmp	r3, #2
 800c042:	d107      	bne.n	800c054 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	695a      	ldr	r2, [r3, #20]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f002 0202 	and.w	r2, r2, #2
 800c052:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f007 fa99 	bl	8013590 <USB_ReadInterrupts>
 800c05e:	4603      	mov	r3, r0
 800c060:	f003 0310 	and.w	r3, r3, #16
 800c064:	2b10      	cmp	r3, #16
 800c066:	d161      	bne.n	800c12c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0210 	bic.w	r2, r2, #16
 800c076:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	4613      	mov	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	1a9b      	subs	r3, r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	4413      	add	r3, r2
 800c094:	3304      	adds	r3, #4
 800c096:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	0c5b      	lsrs	r3, r3, #17
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d124      	bne.n	800c0ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d035      	beq.n	800c11c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	091b      	lsrs	r3, r3, #4
 800c0b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c0ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6a38      	ldr	r0, [r7, #32]
 800c0c4:	f007 f911 	bl	80132ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	091b      	lsrs	r3, r3, #4
 800c0d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0d4:	441a      	add	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	699a      	ldr	r2, [r3, #24]
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	091b      	lsrs	r3, r3, #4
 800c0e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0e6:	441a      	add	r2, r3
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	619a      	str	r2, [r3, #24]
 800c0ec:	e016      	b.n	800c11c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	0c5b      	lsrs	r3, r3, #17
 800c0f2:	f003 030f 	and.w	r3, r3, #15
 800c0f6:	2b06      	cmp	r3, #6
 800c0f8:	d110      	bne.n	800c11c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c100:	2208      	movs	r2, #8
 800c102:	4619      	mov	r1, r3
 800c104:	6a38      	ldr	r0, [r7, #32]
 800c106:	f007 f8f0 	bl	80132ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	091b      	lsrs	r3, r3, #4
 800c112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c116:	441a      	add	r2, r3
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f042 0210 	orr.w	r2, r2, #16
 800c12a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4618      	mov	r0, r3
 800c132:	f007 fa2d 	bl	8013590 <USB_ReadInterrupts>
 800c136:	4603      	mov	r3, r0
 800c138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c13c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c140:	d16e      	bne.n	800c220 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c142:	2300      	movs	r3, #0
 800c144:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f007 fa33 	bl	80135b6 <USB_ReadDevAllOutEpInterrupt>
 800c150:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c152:	e062      	b.n	800c21a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d057      	beq.n	800c20e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f007 fa58 	bl	801361e <USB_ReadDevOutEPInterrupt>
 800c16e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00c      	beq.n	800c194 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c186:	461a      	mov	r2, r3
 800c188:	2301      	movs	r3, #1
 800c18a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c18c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fd82 	bl	800cc98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	f003 0308 	and.w	r3, r3, #8
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00c      	beq.n	800c1b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c1b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fdbe 	bl	800cd34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d008      	beq.n	800c1d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f003 0320 	and.w	r3, r3, #32
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d008      	beq.n	800c1f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2320      	movs	r3, #32
 800c1ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c206:	461a      	mov	r2, r3
 800c208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c20c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	3301      	adds	r3, #1
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	085b      	lsrs	r3, r3, #1
 800c218:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d199      	bne.n	800c154 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4618      	mov	r0, r3
 800c226:	f007 f9b3 	bl	8013590 <USB_ReadInterrupts>
 800c22a:	4603      	mov	r3, r0
 800c22c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c234:	f040 8087 	bne.w	800c346 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f007 f9d4 	bl	80135ea <USB_ReadDevAllInEpInterrupt>
 800c242:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c248:	e07a      	b.n	800c340 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d06f      	beq.n	800c334 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f007 f9fb 	bl	801365a <USB_ReadDevInEPInterrupt>
 800c264:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d020      	beq.n	800c2b2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	2201      	movs	r2, #1
 800c278:	fa02 f303 	lsl.w	r3, r2, r3
 800c27c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	43db      	mvns	r3, r3
 800c28a:	69f9      	ldr	r1, [r7, #28]
 800c28c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c290:	4013      	ands	r3, r2
 800c292:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7f9 fe94 	bl	8005fda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d008      	beq.n	800c2ce <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	2308      	movs	r3, #8
 800c2cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f003 0310 	and.w	r3, r3, #16
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d008      	beq.n	800c2ea <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	2310      	movs	r3, #16
 800c2e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	015a      	lsls	r2, r3, #5
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c300:	461a      	mov	r2, r3
 800c302:	2340      	movs	r3, #64	; 0x40
 800c304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f003 0302 	and.w	r3, r3, #2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d008      	beq.n	800c322 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	461a      	mov	r2, r3
 800c31e:	2302      	movs	r3, #2
 800c320:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c32c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fc29 	bl	800cb86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	3301      	adds	r3, #1
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	085b      	lsrs	r3, r3, #1
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	2b00      	cmp	r3, #0
 800c344:	d181      	bne.n	800c24a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f007 f920 	bl	8013590 <USB_ReadInterrupts>
 800c350:	4603      	mov	r3, r0
 800c352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c35a:	d122      	bne.n	800c3a2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	69fa      	ldr	r2, [r7, #28]
 800c366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c36a:	f023 0301 	bic.w	r3, r3, #1
 800c36e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c376:	2b01      	cmp	r3, #1
 800c378:	d108      	bne.n	800c38c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c382:	2100      	movs	r1, #0
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fd85 	bl	800ce94 <HAL_PCDEx_LPM_Callback>
 800c38a:	e002      	b.n	800c392 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7f9 fe6f 	bl	8006070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	695a      	ldr	r2, [r3, #20]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c3a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f007 f8f2 	bl	8013590 <USB_ReadInterrupts>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3b6:	d112      	bne.n	800c3de <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d102      	bne.n	800c3ce <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7f9 fe43 	bl	8006054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	695a      	ldr	r2, [r3, #20]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c3dc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f007 f8d4 	bl	8013590 <USB_ReadInterrupts>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3f2:	d121      	bne.n	800c438 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	695a      	ldr	r2, [r3, #20]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800c402:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d111      	bne.n	800c432 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41c:	089b      	lsrs	r3, r3, #2
 800c41e:	f003 020f 	and.w	r2, r3, #15
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c428:	2101      	movs	r1, #1
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fd32 	bl	800ce94 <HAL_PCDEx_LPM_Callback>
 800c430:	e002      	b.n	800c438 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7f9 fe0e 	bl	8006054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f007 f8a7 	bl	8013590 <USB_ReadInterrupts>
 800c442:	4603      	mov	r3, r0
 800c444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c44c:	f040 80c5 	bne.w	800c5da <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	69fa      	ldr	r2, [r7, #28]
 800c45a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c45e:	f023 0301 	bic.w	r3, r3, #1
 800c462:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2110      	movs	r1, #16
 800c46a:	4618      	mov	r0, r3
 800c46c:	f006 fa2e 	bl	80128cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c470:	2300      	movs	r3, #0
 800c472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c474:	e056      	b.n	800c524 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c482:	461a      	mov	r2, r3
 800c484:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c488:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49a:	0151      	lsls	r1, r2, #5
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	440a      	add	r2, r1
 800c4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ba:	0151      	lsls	r1, r2, #5
 800c4bc:	69fa      	ldr	r2, [r7, #28]
 800c4be:	440a      	add	r2, r1
 800c4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	015a      	lsls	r2, r3, #5
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ee:	0151      	lsls	r1, r2, #5
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	440a      	add	r2, r1
 800c4f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	4413      	add	r3, r2
 800c506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c50e:	0151      	lsls	r1, r2, #5
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	440a      	add	r2, r1
 800c514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c51c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	3301      	adds	r3, #1
 800c522:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d3a3      	bcc.n	800c476 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c534:	69db      	ldr	r3, [r3, #28]
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c53c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c540:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c546:	2b00      	cmp	r3, #0
 800c548:	d016      	beq.n	800c578 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c55a:	f043 030b 	orr.w	r3, r3, #11
 800c55e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	69fa      	ldr	r2, [r7, #28]
 800c56c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c570:	f043 030b 	orr.w	r3, r3, #11
 800c574:	6453      	str	r3, [r2, #68]	; 0x44
 800c576:	e015      	b.n	800c5a4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	69fa      	ldr	r2, [r7, #28]
 800c582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c58a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c58e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c59e:	f043 030b 	orr.w	r3, r3, #11
 800c5a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f007 f8a7 	bl	8013718 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	695a      	ldr	r2, [r3, #20]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c5d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f006 ffd6 	bl	8013590 <USB_ReadInterrupts>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ee:	d124      	bne.n	800c63a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f007 f86c 	bl	80136d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f006 f9c5 	bl	801298e <USB_GetDevSpeed>
 800c604:	4603      	mov	r3, r0
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681c      	ldr	r4, [r3, #0]
 800c610:	f001 fbd6 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800c614:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	461a      	mov	r2, r3
 800c61e:	4620      	mov	r0, r4
 800c620:	f005 ff20 	bl	8012464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7f9 fd00 	bl	800602a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	695a      	ldr	r2, [r3, #20]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c638:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	f006 ffa6 	bl	8013590 <USB_ReadInterrupts>
 800c644:	4603      	mov	r3, r0
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	2b08      	cmp	r3, #8
 800c64c:	d10a      	bne.n	800c664 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7f9 fcdd 	bl	800600e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695a      	ldr	r2, [r3, #20]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f002 0208 	and.w	r2, r2, #8
 800c662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f006 ff91 	bl	8013590 <USB_ReadInterrupts>
 800c66e:	4603      	mov	r3, r0
 800c670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c678:	d10f      	bne.n	800c69a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c67a:	2300      	movs	r3, #0
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	b2db      	uxtb	r3, r3
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7f9 fd13 	bl	80060b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	695a      	ldr	r2, [r3, #20]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f006 ff76 	bl	8013590 <USB_ReadInterrupts>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6ae:	d10f      	bne.n	800c6d0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7f9 fce6 	bl	800608c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	695a      	ldr	r2, [r3, #20]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c6ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f006 ff5b 	bl	8013590 <USB_ReadInterrupts>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e4:	d10a      	bne.n	800c6fc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f9 fcf4 	bl	80060d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	695a      	ldr	r2, [r3, #20]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c6fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	f006 ff45 	bl	8013590 <USB_ReadInterrupts>
 800c706:	4603      	mov	r3, r0
 800c708:	f003 0304 	and.w	r3, r3, #4
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d115      	bne.n	800c73c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7f9 fce4 	bl	80060f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6859      	ldr	r1, [r3, #4]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	430a      	orrs	r2, r1
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	e000      	b.n	800c73c <HAL_PCD_IRQHandler+0x742>
      return;
 800c73a:	bf00      	nop
    }
  }
}
 800c73c:	3734      	adds	r7, #52	; 0x34
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd90      	pop	{r4, r7, pc}

0800c742 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c754:	2b01      	cmp	r3, #1
 800c756:	d101      	bne.n	800c75c <HAL_PCD_SetAddress+0x1a>
 800c758:	2302      	movs	r3, #2
 800c75a:	e013      	b.n	800c784 <HAL_PCD_SetAddress+0x42>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f006 feb5 	bl	80134e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	4608      	mov	r0, r1
 800c796:	4611      	mov	r1, r2
 800c798:	461a      	mov	r2, r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	70fb      	strb	r3, [r7, #3]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	803b      	strh	r3, [r7, #0]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c7aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	da0f      	bge.n	800c7d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7b2:	78fb      	ldrb	r3, [r7, #3]
 800c7b4:	f003 020f 	and.w	r2, r3, #15
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	3338      	adds	r3, #56	; 0x38
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	705a      	strb	r2, [r3, #1]
 800c7d0:	e00f      	b.n	800c7f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	4613      	mov	r3, r2
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	1a9b      	subs	r3, r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	f003 030f 	and.w	r3, r3, #15
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c7fe:	883a      	ldrh	r2, [r7, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	78ba      	ldrb	r2, [r7, #2]
 800c808:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d004      	beq.n	800c81c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c81c:	78bb      	ldrb	r3, [r7, #2]
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d102      	bne.n	800c828 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d101      	bne.n	800c836 <HAL_PCD_EP_Open+0xaa>
 800c832:	2302      	movs	r3, #2
 800c834:	e00e      	b.n	800c854 <HAL_PCD_EP_Open+0xc8>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	4618      	mov	r0, r3
 800c846:	f006 f8c1 	bl	80129cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c852:	7afb      	ldrb	r3, [r7, #11]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da0f      	bge.n	800c890 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	f003 020f 	and.w	r2, r3, #15
 800c876:	4613      	mov	r3, r2
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	3338      	adds	r3, #56	; 0x38
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	3304      	adds	r3, #4
 800c886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2201      	movs	r2, #1
 800c88c:	705a      	strb	r2, [r3, #1]
 800c88e:	e00f      	b.n	800c8b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	f003 020f 	and.w	r2, r3, #15
 800c896:	4613      	mov	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d101      	bne.n	800c8ca <HAL_PCD_EP_Close+0x6e>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e00e      	b.n	800c8e8 <HAL_PCD_EP_Close+0x8c>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f006 f8ff 	bl	8012adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c900:	7afb      	ldrb	r3, [r7, #11]
 800c902:	f003 020f 	and.w	r2, r3, #15
 800c906:	4613      	mov	r3, r2
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	3304      	adds	r3, #4
 800c918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	2200      	movs	r2, #0
 800c92a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2200      	movs	r2, #0
 800c930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	f003 030f 	and.w	r3, r3, #15
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6979      	ldr	r1, [r7, #20]
 800c94e:	4618      	mov	r0, r3
 800c950:	f006 fb7c 	bl	801304c <USB_EP0StartXfer>
 800c954:	e005      	b.n	800c962 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6979      	ldr	r1, [r7, #20]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f006 f999 	bl	8012c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	f003 020f 	and.w	r2, r3, #15
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	4613      	mov	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	1a9b      	subs	r3, r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	440b      	add	r3, r1
 800c98a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c98e:	681b      	ldr	r3, [r3, #0]
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	607a      	str	r2, [r7, #4]
 800c9a6:	603b      	str	r3, [r7, #0]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9ac:	7afb      	ldrb	r3, [r7, #11]
 800c9ae:	f003 020f 	and.w	r2, r3, #15
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	1a9b      	subs	r3, r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	3338      	adds	r3, #56	; 0x38
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9dc:	7afb      	ldrb	r3, [r7, #11]
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	b2da      	uxtb	r2, r3
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c9e8:	7afb      	ldrb	r3, [r7, #11]
 800c9ea:	f003 030f 	and.w	r3, r3, #15
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f006 fb27 	bl	801304c <USB_EP0StartXfer>
 800c9fe:	e005      	b.n	800ca0c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6979      	ldr	r1, [r7, #20]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f006 f944 	bl	8012c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ca22:	78fb      	ldrb	r3, [r7, #3]
 800ca24:	f003 020f 	and.w	r2, r3, #15
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d901      	bls.n	800ca34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e04e      	b.n	800cad2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	da0f      	bge.n	800ca5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	f003 020f 	and.w	r2, r3, #15
 800ca42:	4613      	mov	r3, r2
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	1a9b      	subs	r3, r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	3338      	adds	r3, #56	; 0x38
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4413      	add	r3, r2
 800ca50:	3304      	adds	r3, #4
 800ca52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2201      	movs	r2, #1
 800ca58:	705a      	strb	r2, [r3, #1]
 800ca5a:	e00d      	b.n	800ca78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ca5c:	78fa      	ldrb	r2, [r7, #3]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3304      	adds	r3, #4
 800ca70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca7e:	78fb      	ldrb	r3, [r7, #3]
 800ca80:	f003 030f 	and.w	r3, r3, #15
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_PCD_EP_SetStall+0x82>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e01c      	b.n	800cad2 <HAL_PCD_EP_SetStall+0xbc>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68f9      	ldr	r1, [r7, #12]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f006 fc48 	bl	801333c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800caac:	78fb      	ldrb	r3, [r7, #3]
 800caae:	f003 030f 	and.w	r3, r3, #15
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d108      	bne.n	800cac8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f006 fe28 	bl	8013718 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cae6:	78fb      	ldrb	r3, [r7, #3]
 800cae8:	f003 020f 	and.w	r2, r3, #15
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d901      	bls.n	800caf8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e042      	b.n	800cb7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800caf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da0f      	bge.n	800cb20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	f003 020f 	and.w	r2, r3, #15
 800cb06:	4613      	mov	r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	1a9b      	subs	r3, r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	3338      	adds	r3, #56	; 0x38
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	4413      	add	r3, r2
 800cb14:	3304      	adds	r3, #4
 800cb16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	705a      	strb	r2, [r3, #1]
 800cb1e:	e00f      	b.n	800cb40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	f003 020f 	and.w	r2, r3, #15
 800cb26:	4613      	mov	r3, r2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	1a9b      	subs	r3, r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	4413      	add	r3, r2
 800cb36:	3304      	adds	r3, #4
 800cb38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb46:	78fb      	ldrb	r3, [r7, #3]
 800cb48:	f003 030f 	and.w	r3, r3, #15
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_PCD_EP_ClrStall+0x86>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e00e      	b.n	800cb7e <HAL_PCD_EP_ClrStall+0xa4>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68f9      	ldr	r1, [r7, #12]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f006 fc52 	bl	8013418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b088      	sub	sp, #32
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	1a9b      	subs	r3, r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	3338      	adds	r3, #56	; 0x38
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	4413      	add	r3, r2
 800cbaa:	3304      	adds	r3, #4
 800cbac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d901      	bls.n	800cbbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e067      	b.n	800cc8e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	695a      	ldr	r2, [r3, #20]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d902      	bls.n	800cbda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	3303      	adds	r3, #3
 800cbde:	089b      	lsrs	r3, r3, #2
 800cbe0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbe2:	e026      	b.n	800cc32 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	695a      	ldr	r2, [r3, #20]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	69fa      	ldr	r2, [r7, #28]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d902      	bls.n	800cc00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	3303      	adds	r3, #3
 800cc04:	089b      	lsrs	r3, r3, #2
 800cc06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	68d9      	ldr	r1, [r3, #12]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	6978      	ldr	r0, [r7, #20]
 800cc16:	f006 fb37 	bl	8013288 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	68da      	ldr	r2, [r3, #12]
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	441a      	add	r2, r3
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	441a      	add	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	015a      	lsls	r2, r3, #5
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	4413      	add	r3, r2
 800cc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d809      	bhi.n	800cc5c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	699a      	ldr	r2, [r3, #24]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d203      	bcs.n	800cc5c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1c3      	bne.n	800cbe4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	695a      	ldr	r2, [r3, #20]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d811      	bhi.n	800cc8c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f003 030f 	and.w	r3, r3, #15
 800cc6e:	2201      	movs	r2, #1
 800cc70:	fa02 f303 	lsl.w	r3, r2, r3
 800cc74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	43db      	mvns	r3, r3
 800cc82:	6939      	ldr	r1, [r7, #16]
 800cc84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc88:	4013      	ands	r3, r2
 800cc8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
	...

0800cc98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	333c      	adds	r3, #60	; 0x3c
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a19      	ldr	r2, [pc, #100]	; (800cd30 <PCD_EP_OutXfrComplete_int+0x98>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d124      	bne.n	800cd18 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce4:	461a      	mov	r2, r3
 800cce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccea:	6093      	str	r3, [r2, #8]
 800ccec:	e01a      	b.n	800cd24 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f003 0320 	and.w	r3, r3, #32
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d008      	beq.n	800cd0a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	015a      	lsls	r2, r3, #5
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	4413      	add	r3, r2
 800cd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd04:	461a      	mov	r2, r3
 800cd06:	2320      	movs	r3, #32
 800cd08:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7f9 f947 	bl	8005fa4 <HAL_PCD_DataOutStageCallback>
 800cd16:	e005      	b.n	800cd24 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7f9 f940 	bl	8005fa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	4f54310a 	.word	0x4f54310a

0800cd34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	333c      	adds	r3, #60	; 0x3c
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	4a0c      	ldr	r2, [pc, #48]	; (800cd98 <PCD_EP_OutSetupPacket_int+0x64>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d90e      	bls.n	800cd88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd80:	461a      	mov	r2, r3
 800cd82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7f9 f8f9 	bl	8005f80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	4f54300a 	.word	0x4f54300a

0800cd9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d107      	bne.n	800cdca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cdba:	883b      	ldrh	r3, [r7, #0]
 800cdbc:	0419      	lsls	r1, r3, #16
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	430a      	orrs	r2, r1
 800cdc6:	629a      	str	r2, [r3, #40]	; 0x28
 800cdc8:	e028      	b.n	800ce1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd0:	0c1b      	lsrs	r3, r3, #16
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
 800cddc:	e00d      	b.n	800cdfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	3340      	adds	r3, #64	; 0x40
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	0c1b      	lsrs	r3, r3, #16
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	73fb      	strb	r3, [r7, #15]
 800cdfa:	7bfa      	ldrb	r2, [r7, #15]
 800cdfc:	78fb      	ldrb	r3, [r7, #3]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d3ec      	bcc.n	800cdde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ce04:	883b      	ldrh	r3, [r7, #0]
 800ce06:	0418      	lsls	r0, r3, #16
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6819      	ldr	r1, [r3, #0]
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	4302      	orrs	r2, r0
 800ce14:	3340      	adds	r3, #64	; 0x40
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	440b      	add	r3, r1
 800ce1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	887a      	ldrh	r2, [r7, #2]
 800ce3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce7e:	f043 0303 	orr.w	r3, r3, #3
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800ceb4:	4b2b      	ldr	r3, [pc, #172]	; (800cf64 <HAL_PWR_ConfigPVD+0xb8>)
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	f023 020e 	bic.w	r2, r3, #14
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4928      	ldr	r1, [pc, #160]	; (800cf64 <HAL_PWR_ConfigPVD+0xb8>)
 800cec2:	4313      	orrs	r3, r2
 800cec4:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800cec6:	4b28      	ldr	r3, [pc, #160]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	4a27      	ldr	r2, [pc, #156]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ced0:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800ced2:	4b25      	ldr	r3, [pc, #148]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a24      	ldr	r2, [pc, #144]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800ced8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cedc:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800cede:	4b22      	ldr	r3, [pc, #136]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	4a21      	ldr	r2, [pc, #132]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cee8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800ceea:	4b1f      	ldr	r3, [pc, #124]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	4a1e      	ldr	r2, [pc, #120]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d005      	beq.n	800cf0e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800cf02:	4b19      	ldr	r3, [pc, #100]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a18      	ldr	r2, [pc, #96]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf0c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d005      	beq.n	800cf26 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	4a12      	ldr	r2, [pc, #72]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf24:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d005      	beq.n	800cf3e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800cf32:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	4a0c      	ldr	r2, [pc, #48]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf3c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800cf4a:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	4a06      	ldr	r2, [pc, #24]	; (800cf68 <HAL_PWR_ConfigPVD+0xbc>)
 800cf50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf54:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	40007000 	.word	0x40007000
 800cf68:	40010400 	.word	0x40010400

0800cf6c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <HAL_PWR_EnablePVD+0x1c>)
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	4a04      	ldr	r2, [pc, #16]	; (800cf88 <HAL_PWR_EnablePVD+0x1c>)
 800cf76:	f043 0301 	orr.w	r3, r3, #1
 800cf7a:	6053      	str	r3, [r2, #4]
}
 800cf7c:	bf00      	nop
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40007000 	.word	0x40007000

0800cf8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cf90:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf9c:	d102      	bne.n	800cfa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800cf9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa2:	e00b      	b.n	800cfbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800cfa4:	4b08      	ldr	r3, [pc, #32]	; (800cfc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 800cfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb2:	d102      	bne.n	800cfba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800cfb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfb8:	e000      	b.n	800cfbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800cfba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40007000 	.word	0x40007000

0800cfcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d141      	bne.n	800d05e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cfda:	4b4b      	ldr	r3, [pc, #300]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cfe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfe6:	d131      	bne.n	800d04c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cfe8:	4b47      	ldr	r3, [pc, #284]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfee:	4a46      	ldr	r2, [pc, #280]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cff8:	4b43      	ldr	r3, [pc, #268]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d000:	4a41      	ldr	r2, [pc, #260]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800d008:	4b40      	ldr	r3, [pc, #256]	; (800d10c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2232      	movs	r2, #50	; 0x32
 800d00e:	fb02 f303 	mul.w	r3, r2, r3
 800d012:	4a3f      	ldr	r2, [pc, #252]	; (800d110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d014:	fba2 2303 	umull	r2, r3, r2, r3
 800d018:	0c9b      	lsrs	r3, r3, #18
 800d01a:	3301      	adds	r3, #1
 800d01c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d01e:	e002      	b.n	800d026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	3b01      	subs	r3, #1
 800d024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d026:	4b38      	ldr	r3, [pc, #224]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d032:	d102      	bne.n	800d03a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1f2      	bne.n	800d020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d03a:	4b33      	ldr	r3, [pc, #204]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d046:	d158      	bne.n	800d0fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e057      	b.n	800d0fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d04c:	4b2e      	ldr	r3, [pc, #184]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d052:	4a2d      	ldr	r2, [pc, #180]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d05c:	e04d      	b.n	800d0fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d064:	d141      	bne.n	800d0ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d066:	4b28      	ldr	r3, [pc, #160]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d072:	d131      	bne.n	800d0d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d074:	4b24      	ldr	r3, [pc, #144]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d07a:	4a23      	ldr	r2, [pc, #140]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d07c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d084:	4b20      	ldr	r3, [pc, #128]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d08c:	4a1e      	ldr	r2, [pc, #120]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d08e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800d094:	4b1d      	ldr	r3, [pc, #116]	; (800d10c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2232      	movs	r2, #50	; 0x32
 800d09a:	fb02 f303 	mul.w	r3, r2, r3
 800d09e:	4a1c      	ldr	r2, [pc, #112]	; (800d110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a4:	0c9b      	lsrs	r3, r3, #18
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d0aa:	e002      	b.n	800d0b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0be:	d102      	bne.n	800d0c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1f2      	bne.n	800d0ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d0c6:	4b10      	ldr	r3, [pc, #64]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0d2:	d112      	bne.n	800d0fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e011      	b.n	800d0fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d0d8:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0de:	4a0a      	ldr	r2, [pc, #40]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d0e8:	e007      	b.n	800d0fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d0ea:	4b07      	ldr	r3, [pc, #28]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d0f2:	4a05      	ldr	r2, [pc, #20]	; (800d108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d0f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	40007000 	.word	0x40007000
 800d10c:	20000038 	.word	0x20000038
 800d110:	431bde83 	.word	0x431bde83

0800d114 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800d114:	b480      	push	{r7}
 800d116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	4a04      	ldr	r2, [pc, #16]	; (800d130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800d11e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d122:	6053      	str	r3, [r2, #4]
}
 800d124:	bf00      	nop
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	40007000 	.word	0x40007000

0800d134 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800d134:	b480      	push	{r7}
 800d136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <HAL_PWREx_EnableVddIO2+0x1c>)
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4a04      	ldr	r2, [pc, #16]	; (800d150 <HAL_PWREx_EnableVddIO2+0x1c>)
 800d13e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d142:	6053      	str	r3, [r2, #4]
}
 800d144:	bf00      	nop
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	40007000 	.word	0x40007000

0800d154 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800d158:	4b1c      	ldr	r3, [pc, #112]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800d164:	f7f7 fb48 	bl	80047f8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800d168:	4b18      	ldr	r3, [pc, #96]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d16a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d16e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800d170:	4b16      	ldr	r3, [pc, #88]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d174:	f003 0308 	and.w	r3, r3, #8
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800d17c:	f000 f828 	bl	800d1d0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800d180:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d182:	2208      	movs	r2, #8
 800d184:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800d186:	4b11      	ldr	r3, [pc, #68]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18a:	f003 0310 	and.w	r3, r3, #16
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d004      	beq.n	800d19c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800d192:	f000 f824 	bl	800d1de <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800d196:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d198:	2210      	movs	r2, #16
 800d19a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800d19c:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d004      	beq.n	800d1b2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800d1a8:	f000 f820 	bl	800d1ec <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800d1ac:	4b07      	ldr	r3, [pc, #28]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800d1b2:	4b06      	ldr	r3, [pc, #24]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d004      	beq.n	800d1c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800d1be:	f000 f81c 	bl	800d1fa <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800d1c2:	4b02      	ldr	r3, [pc, #8]	; (800d1cc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800d1c4:	2240      	movs	r2, #64	; 0x40
 800d1c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800d1c8:	bf00      	nop
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	40010400 	.word	0x40010400

0800d1d0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800d1d4:	bf00      	nop
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800d1de:	b480      	push	{r7}
 800d1e0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800d1e2:	bf00      	nop
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800d1fe:	bf00      	nop
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	f000 bc16 	b.w	800da48 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d21c:	4ba0      	ldr	r3, [pc, #640]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	f003 030c 	and.w	r3, r3, #12
 800d224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d226:	4b9e      	ldr	r3, [pc, #632]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	f003 0303 	and.w	r3, r3, #3
 800d22e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 0310 	and.w	r3, r3, #16
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 80e4 	beq.w	800d406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <HAL_RCC_OscConfig+0x4c>
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b0c      	cmp	r3, #12
 800d248:	f040 808b 	bne.w	800d362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	f040 8087 	bne.w	800d362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d254:	4b92      	ldr	r3, [pc, #584]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <HAL_RCC_OscConfig+0x64>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e3ed      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a1a      	ldr	r2, [r3, #32]
 800d270:	4b8b      	ldr	r3, [pc, #556]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 0308 	and.w	r3, r3, #8
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <HAL_RCC_OscConfig+0x7e>
 800d27c:	4b88      	ldr	r3, [pc, #544]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d284:	e005      	b.n	800d292 <HAL_RCC_OscConfig+0x8a>
 800d286:	4b86      	ldr	r3, [pc, #536]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d28c:	091b      	lsrs	r3, r3, #4
 800d28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d292:	4293      	cmp	r3, r2
 800d294:	d223      	bcs.n	800d2de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 fdb2 	bl	800de04 <RCC_SetFlashLatencyFromMSIRange>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e3ce      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d2aa:	4b7d      	ldr	r3, [pc, #500]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a7c      	ldr	r2, [pc, #496]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2b0:	f043 0308 	orr.w	r3, r3, #8
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	4b7a      	ldr	r3, [pc, #488]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	4977      	ldr	r1, [pc, #476]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d2c8:	4b75      	ldr	r3, [pc, #468]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	69db      	ldr	r3, [r3, #28]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	4972      	ldr	r1, [pc, #456]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	604b      	str	r3, [r1, #4]
 800d2dc:	e025      	b.n	800d32a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d2de:	4b70      	ldr	r3, [pc, #448]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a6f      	ldr	r2, [pc, #444]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2e4:	f043 0308 	orr.w	r3, r3, #8
 800d2e8:	6013      	str	r3, [r2, #0]
 800d2ea:	4b6d      	ldr	r3, [pc, #436]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	496a      	ldr	r1, [pc, #424]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d2fc:	4b68      	ldr	r3, [pc, #416]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	021b      	lsls	r3, r3, #8
 800d30a:	4965      	ldr	r1, [pc, #404]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d30c:	4313      	orrs	r3, r2
 800d30e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d109      	bne.n	800d32a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a1b      	ldr	r3, [r3, #32]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fd72 	bl	800de04 <RCC_SetFlashLatencyFromMSIRange>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e38e      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d32a:	f000 fcbf 	bl	800dcac <HAL_RCC_GetSysClockFreq>
 800d32e:	4602      	mov	r2, r0
 800d330:	4b5b      	ldr	r3, [pc, #364]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	091b      	lsrs	r3, r3, #4
 800d336:	f003 030f 	and.w	r3, r3, #15
 800d33a:	495a      	ldr	r1, [pc, #360]	; (800d4a4 <HAL_RCC_OscConfig+0x29c>)
 800d33c:	5ccb      	ldrb	r3, [r1, r3]
 800d33e:	f003 031f 	and.w	r3, r3, #31
 800d342:	fa22 f303 	lsr.w	r3, r2, r3
 800d346:	4a58      	ldr	r2, [pc, #352]	; (800d4a8 <HAL_RCC_OscConfig+0x2a0>)
 800d348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d34a:	4b58      	ldr	r3, [pc, #352]	; (800d4ac <HAL_RCC_OscConfig+0x2a4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fa fd80 	bl	8007e54 <HAL_InitTick>
 800d354:	4603      	mov	r3, r0
 800d356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d052      	beq.n	800d404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	e372      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d032      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d36a:	4b4d      	ldr	r3, [pc, #308]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a4c      	ldr	r2, [pc, #304]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d370:	f043 0301 	orr.w	r3, r3, #1
 800d374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d376:	f7fa fdb9 	bl	8007eec <HAL_GetTick>
 800d37a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d37c:	e008      	b.n	800d390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d37e:	f7fa fdb5 	bl	8007eec <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d901      	bls.n	800d390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e35b      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d390:	4b43      	ldr	r3, [pc, #268]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d0f0      	beq.n	800d37e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d39c:	4b40      	ldr	r3, [pc, #256]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a3f      	ldr	r2, [pc, #252]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3a2:	f043 0308 	orr.w	r3, r3, #8
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	4b3d      	ldr	r3, [pc, #244]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	493a      	ldr	r1, [pc, #232]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d3ba:	4b39      	ldr	r3, [pc, #228]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	4935      	ldr	r1, [pc, #212]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	604b      	str	r3, [r1, #4]
 800d3ce:	e01a      	b.n	800d406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d3d0:	4b33      	ldr	r3, [pc, #204]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a32      	ldr	r2, [pc, #200]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3d6:	f023 0301 	bic.w	r3, r3, #1
 800d3da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d3dc:	f7fa fd86 	bl	8007eec <HAL_GetTick>
 800d3e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d3e2:	e008      	b.n	800d3f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d3e4:	f7fa fd82 	bl	8007eec <HAL_GetTick>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d901      	bls.n	800d3f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	e328      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d3f6:	4b2a      	ldr	r3, [pc, #168]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f0      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x1dc>
 800d402:	e000      	b.n	800d406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d073      	beq.n	800d4fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	2b08      	cmp	r3, #8
 800d416:	d005      	beq.n	800d424 <HAL_RCC_OscConfig+0x21c>
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	2b0c      	cmp	r3, #12
 800d41c:	d10e      	bne.n	800d43c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	2b03      	cmp	r3, #3
 800d422:	d10b      	bne.n	800d43c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d424:	4b1e      	ldr	r3, [pc, #120]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d063      	beq.n	800d4f8 <HAL_RCC_OscConfig+0x2f0>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d15f      	bne.n	800d4f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	e305      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d444:	d106      	bne.n	800d454 <HAL_RCC_OscConfig+0x24c>
 800d446:	4b16      	ldr	r3, [pc, #88]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a15      	ldr	r2, [pc, #84]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d44c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	e01d      	b.n	800d490 <HAL_RCC_OscConfig+0x288>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d45c:	d10c      	bne.n	800d478 <HAL_RCC_OscConfig+0x270>
 800d45e:	4b10      	ldr	r3, [pc, #64]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a0f      	ldr	r2, [pc, #60]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a0c      	ldr	r2, [pc, #48]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	e00b      	b.n	800d490 <HAL_RCC_OscConfig+0x288>
 800d478:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a08      	ldr	r2, [pc, #32]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d47e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a05      	ldr	r2, [pc, #20]	; (800d4a0 <HAL_RCC_OscConfig+0x298>)
 800d48a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d48e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d01b      	beq.n	800d4d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d498:	f7fa fd28 	bl	8007eec <HAL_GetTick>
 800d49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d49e:	e010      	b.n	800d4c2 <HAL_RCC_OscConfig+0x2ba>
 800d4a0:	40021000 	.word	0x40021000
 800d4a4:	08023250 	.word	0x08023250
 800d4a8:	20000038 	.word	0x20000038
 800d4ac:	200000d8 	.word	0x200000d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4b0:	f7fa fd1c 	bl	8007eec <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b64      	cmp	r3, #100	; 0x64
 800d4bc:	d901      	bls.n	800d4c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e2c2      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d4c2:	4baf      	ldr	r3, [pc, #700]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0f0      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x2a8>
 800d4ce:	e014      	b.n	800d4fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4d0:	f7fa fd0c 	bl	8007eec <HAL_GetTick>
 800d4d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d4d6:	e008      	b.n	800d4ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4d8:	f7fa fd08 	bl	8007eec <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2b64      	cmp	r3, #100	; 0x64
 800d4e4:	d901      	bls.n	800d4ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e2ae      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d4ea:	4ba5      	ldr	r3, [pc, #660]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1f0      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x2d0>
 800d4f6:	e000      	b.n	800d4fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f003 0302 	and.w	r3, r3, #2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d060      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b04      	cmp	r3, #4
 800d50a:	d005      	beq.n	800d518 <HAL_RCC_OscConfig+0x310>
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	2b0c      	cmp	r3, #12
 800d510:	d119      	bne.n	800d546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b02      	cmp	r3, #2
 800d516:	d116      	bne.n	800d546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d518:	4b99      	ldr	r3, [pc, #612]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <HAL_RCC_OscConfig+0x328>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	e28b      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d530:	4b93      	ldr	r3, [pc, #588]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	061b      	lsls	r3, r3, #24
 800d53e:	4990      	ldr	r1, [pc, #576]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d540:	4313      	orrs	r3, r2
 800d542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d544:	e040      	b.n	800d5c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d023      	beq.n	800d596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d54e:	4b8c      	ldr	r3, [pc, #560]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a8b      	ldr	r2, [pc, #556]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d55a:	f7fa fcc7 	bl	8007eec <HAL_GetTick>
 800d55e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d560:	e008      	b.n	800d574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d562:	f7fa fcc3 	bl	8007eec <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d901      	bls.n	800d574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d570:	2303      	movs	r3, #3
 800d572:	e269      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d574:	4b82      	ldr	r3, [pc, #520]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d0f0      	beq.n	800d562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d580:	4b7f      	ldr	r3, [pc, #508]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	061b      	lsls	r3, r3, #24
 800d58e:	497c      	ldr	r1, [pc, #496]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d590:	4313      	orrs	r3, r2
 800d592:	604b      	str	r3, [r1, #4]
 800d594:	e018      	b.n	800d5c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d596:	4b7a      	ldr	r3, [pc, #488]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a79      	ldr	r2, [pc, #484]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d59c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5a2:	f7fa fca3 	bl	8007eec <HAL_GetTick>
 800d5a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d5a8:	e008      	b.n	800d5bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5aa:	f7fa fc9f 	bl	8007eec <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d901      	bls.n	800d5bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e245      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d5bc:	4b70      	ldr	r3, [pc, #448]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1f0      	bne.n	800d5aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0308 	and.w	r3, r3, #8
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d03c      	beq.n	800d64e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d01c      	beq.n	800d616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5dc:	4b68      	ldr	r3, [pc, #416]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5e2:	4a67      	ldr	r2, [pc, #412]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d5e4:	f043 0301 	orr.w	r3, r3, #1
 800d5e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5ec:	f7fa fc7e 	bl	8007eec <HAL_GetTick>
 800d5f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d5f2:	e008      	b.n	800d606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5f4:	f7fa fc7a 	bl	8007eec <HAL_GetTick>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d901      	bls.n	800d606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d602:	2303      	movs	r3, #3
 800d604:	e220      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d606:	4b5e      	ldr	r3, [pc, #376]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d60c:	f003 0302 	and.w	r3, r3, #2
 800d610:	2b00      	cmp	r3, #0
 800d612:	d0ef      	beq.n	800d5f4 <HAL_RCC_OscConfig+0x3ec>
 800d614:	e01b      	b.n	800d64e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d616:	4b5a      	ldr	r3, [pc, #360]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d61c:	4a58      	ldr	r2, [pc, #352]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d61e:	f023 0301 	bic.w	r3, r3, #1
 800d622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d626:	f7fa fc61 	bl	8007eec <HAL_GetTick>
 800d62a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d62c:	e008      	b.n	800d640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d62e:	f7fa fc5d 	bl	8007eec <HAL_GetTick>
 800d632:	4602      	mov	r2, r0
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d901      	bls.n	800d640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e203      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d640:	4b4f      	ldr	r3, [pc, #316]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1ef      	bne.n	800d62e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 0304 	and.w	r3, r3, #4
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 80a6 	beq.w	800d7a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d65c:	2300      	movs	r3, #0
 800d65e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d660:	4b47      	ldr	r3, [pc, #284]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10d      	bne.n	800d688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d66c:	4b44      	ldr	r3, [pc, #272]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d670:	4a43      	ldr	r2, [pc, #268]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d676:	6593      	str	r3, [r2, #88]	; 0x58
 800d678:	4b41      	ldr	r3, [pc, #260]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d67c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d680:	60bb      	str	r3, [r7, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d684:	2301      	movs	r3, #1
 800d686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d688:	4b3e      	ldr	r3, [pc, #248]	; (800d784 <HAL_RCC_OscConfig+0x57c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d690:	2b00      	cmp	r3, #0
 800d692:	d118      	bne.n	800d6c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d694:	4b3b      	ldr	r3, [pc, #236]	; (800d784 <HAL_RCC_OscConfig+0x57c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a3a      	ldr	r2, [pc, #232]	; (800d784 <HAL_RCC_OscConfig+0x57c>)
 800d69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d69e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d6a0:	f7fa fc24 	bl	8007eec <HAL_GetTick>
 800d6a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d6a6:	e008      	b.n	800d6ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6a8:	f7fa fc20 	bl	8007eec <HAL_GetTick>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d901      	bls.n	800d6ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	e1c6      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d6ba:	4b32      	ldr	r3, [pc, #200]	; (800d784 <HAL_RCC_OscConfig+0x57c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d0f0      	beq.n	800d6a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d108      	bne.n	800d6e0 <HAL_RCC_OscConfig+0x4d8>
 800d6ce:	4b2c      	ldr	r3, [pc, #176]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6d4:	4a2a      	ldr	r2, [pc, #168]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d6d6:	f043 0301 	orr.w	r3, r3, #1
 800d6da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6de:	e024      	b.n	800d72a <HAL_RCC_OscConfig+0x522>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	2b05      	cmp	r3, #5
 800d6e6:	d110      	bne.n	800d70a <HAL_RCC_OscConfig+0x502>
 800d6e8:	4b25      	ldr	r3, [pc, #148]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ee:	4a24      	ldr	r2, [pc, #144]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d6f0:	f043 0304 	orr.w	r3, r3, #4
 800d6f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6f8:	4b21      	ldr	r3, [pc, #132]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6fe:	4a20      	ldr	r2, [pc, #128]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d700:	f043 0301 	orr.w	r3, r3, #1
 800d704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d708:	e00f      	b.n	800d72a <HAL_RCC_OscConfig+0x522>
 800d70a:	4b1d      	ldr	r3, [pc, #116]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d710:	4a1b      	ldr	r2, [pc, #108]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d712:	f023 0301 	bic.w	r3, r3, #1
 800d716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d71a:	4b19      	ldr	r3, [pc, #100]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d720:	4a17      	ldr	r2, [pc, #92]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d722:	f023 0304 	bic.w	r3, r3, #4
 800d726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d016      	beq.n	800d760 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d732:	f7fa fbdb 	bl	8007eec <HAL_GetTick>
 800d736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d738:	e00a      	b.n	800d750 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d73a:	f7fa fbd7 	bl	8007eec <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	f241 3288 	movw	r2, #5000	; 0x1388
 800d748:	4293      	cmp	r3, r2
 800d74a:	d901      	bls.n	800d750 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e17b      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d750:	4b0b      	ldr	r3, [pc, #44]	; (800d780 <HAL_RCC_OscConfig+0x578>)
 800d752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d0ed      	beq.n	800d73a <HAL_RCC_OscConfig+0x532>
 800d75e:	e01a      	b.n	800d796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d760:	f7fa fbc4 	bl	8007eec <HAL_GetTick>
 800d764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d766:	e00f      	b.n	800d788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d768:	f7fa fbc0 	bl	8007eec <HAL_GetTick>
 800d76c:	4602      	mov	r2, r0
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	f241 3288 	movw	r2, #5000	; 0x1388
 800d776:	4293      	cmp	r3, r2
 800d778:	d906      	bls.n	800d788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e164      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
 800d77e:	bf00      	nop
 800d780:	40021000 	.word	0x40021000
 800d784:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d788:	4ba8      	ldr	r3, [pc, #672]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1e8      	bne.n	800d768 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d796:	7ffb      	ldrb	r3, [r7, #31]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d105      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d79c:	4ba3      	ldr	r3, [pc, #652]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7a0:	4aa2      	ldr	r2, [pc, #648]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d03c      	beq.n	800d82e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d01c      	beq.n	800d7f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d7bc:	4b9b      	ldr	r3, [pc, #620]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7c2:	4a9a      	ldr	r2, [pc, #616]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7c4:	f043 0301 	orr.w	r3, r3, #1
 800d7c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7cc:	f7fa fb8e 	bl	8007eec <HAL_GetTick>
 800d7d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d7d2:	e008      	b.n	800d7e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d7d4:	f7fa fb8a 	bl	8007eec <HAL_GetTick>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d901      	bls.n	800d7e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e130      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d7e6:	4b91      	ldr	r3, [pc, #580]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7ec:	f003 0302 	and.w	r3, r3, #2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0ef      	beq.n	800d7d4 <HAL_RCC_OscConfig+0x5cc>
 800d7f4:	e01b      	b.n	800d82e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d7f6:	4b8d      	ldr	r3, [pc, #564]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7fc:	4a8b      	ldr	r2, [pc, #556]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d7fe:	f023 0301 	bic.w	r3, r3, #1
 800d802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d806:	f7fa fb71 	bl	8007eec <HAL_GetTick>
 800d80a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d80c:	e008      	b.n	800d820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d80e:	f7fa fb6d 	bl	8007eec <HAL_GetTick>
 800d812:	4602      	mov	r2, r0
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d901      	bls.n	800d820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	e113      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d820:	4b82      	ldr	r3, [pc, #520]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d826:	f003 0302 	and.w	r3, r3, #2
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1ef      	bne.n	800d80e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8107 	beq.w	800da46 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	f040 80cb 	bne.w	800d9d8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d842:	4b7a      	ldr	r3, [pc, #488]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f003 0203 	and.w	r2, r3, #3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d852:	429a      	cmp	r2, r3
 800d854:	d12c      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d860:	3b01      	subs	r3, #1
 800d862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d864:	429a      	cmp	r2, r3
 800d866:	d123      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d874:	429a      	cmp	r2, r3
 800d876:	d11b      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d884:	429a      	cmp	r2, r3
 800d886:	d113      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d892:	085b      	lsrs	r3, r3, #1
 800d894:	3b01      	subs	r3, #1
 800d896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d898:	429a      	cmp	r2, r3
 800d89a:	d109      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d06d      	beq.n	800d98c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	2b0c      	cmp	r3, #12
 800d8b4:	d068      	beq.n	800d988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d8b6:	4b5d      	ldr	r3, [pc, #372]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d105      	bne.n	800d8ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d8c2:	4b5a      	ldr	r3, [pc, #360]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e0ba      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d8d2:	4b56      	ldr	r3, [pc, #344]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a55      	ldr	r2, [pc, #340]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d8d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d8dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d8de:	f7fa fb05 	bl	8007eec <HAL_GetTick>
 800d8e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8e4:	e008      	b.n	800d8f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8e6:	f7fa fb01 	bl	8007eec <HAL_GetTick>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d901      	bls.n	800d8f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	e0a7      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8f8:	4b4c      	ldr	r3, [pc, #304]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1f0      	bne.n	800d8e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d904:	4b49      	ldr	r3, [pc, #292]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	4b49      	ldr	r3, [pc, #292]	; (800da30 <HAL_RCC_OscConfig+0x828>)
 800d90a:	4013      	ands	r3, r2
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d914:	3a01      	subs	r2, #1
 800d916:	0112      	lsls	r2, r2, #4
 800d918:	4311      	orrs	r1, r2
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d91e:	0212      	lsls	r2, r2, #8
 800d920:	4311      	orrs	r1, r2
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d926:	0852      	lsrs	r2, r2, #1
 800d928:	3a01      	subs	r2, #1
 800d92a:	0552      	lsls	r2, r2, #21
 800d92c:	4311      	orrs	r1, r2
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d932:	0852      	lsrs	r2, r2, #1
 800d934:	3a01      	subs	r2, #1
 800d936:	0652      	lsls	r2, r2, #25
 800d938:	4311      	orrs	r1, r2
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d93e:	06d2      	lsls	r2, r2, #27
 800d940:	430a      	orrs	r2, r1
 800d942:	493a      	ldr	r1, [pc, #232]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d944:	4313      	orrs	r3, r2
 800d946:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d948:	4b38      	ldr	r3, [pc, #224]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a37      	ldr	r2, [pc, #220]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d94e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d954:	4b35      	ldr	r3, [pc, #212]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	4a34      	ldr	r2, [pc, #208]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d95a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d95e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d960:	f7fa fac4 	bl	8007eec <HAL_GetTick>
 800d964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d966:	e008      	b.n	800d97a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d968:	f7fa fac0 	bl	8007eec <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	2b02      	cmp	r3, #2
 800d974:	d901      	bls.n	800d97a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e066      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d97a:	4b2c      	ldr	r3, [pc, #176]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f0      	beq.n	800d968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d986:	e05e      	b.n	800da46 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e05d      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d98c:	4b27      	ldr	r3, [pc, #156]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d156      	bne.n	800da46 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d998:	4b24      	ldr	r3, [pc, #144]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a23      	ldr	r2, [pc, #140]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d99e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d9a4:	4b21      	ldr	r3, [pc, #132]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a20      	ldr	r2, [pc, #128]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d9b0:	f7fa fa9c 	bl	8007eec <HAL_GetTick>
 800d9b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9b6:	e008      	b.n	800d9ca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9b8:	f7fa fa98 	bl	8007eec <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d901      	bls.n	800d9ca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	e03e      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9ca:	4b18      	ldr	r3, [pc, #96]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0f0      	beq.n	800d9b8 <HAL_RCC_OscConfig+0x7b0>
 800d9d6:	e036      	b.n	800da46 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	2b0c      	cmp	r3, #12
 800d9dc:	d031      	beq.n	800da42 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a12      	ldr	r2, [pc, #72]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d9e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d9ea:	4b10      	ldr	r3, [pc, #64]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d105      	bne.n	800da02 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d9f6:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	4a0c      	ldr	r2, [pc, #48]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800d9fc:	f023 0303 	bic.w	r3, r3, #3
 800da00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800da02:	4b0a      	ldr	r3, [pc, #40]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	4a09      	ldr	r2, [pc, #36]	; (800da2c <HAL_RCC_OscConfig+0x824>)
 800da08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800da0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da12:	f7fa fa6b 	bl	8007eec <HAL_GetTick>
 800da16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da18:	e00c      	b.n	800da34 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da1a:	f7fa fa67 	bl	8007eec <HAL_GetTick>
 800da1e:	4602      	mov	r2, r0
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	2b02      	cmp	r3, #2
 800da26:	d905      	bls.n	800da34 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800da28:	2303      	movs	r3, #3
 800da2a:	e00d      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
 800da2c:	40021000 	.word	0x40021000
 800da30:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da34:	4b06      	ldr	r3, [pc, #24]	; (800da50 <HAL_RCC_OscConfig+0x848>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1ec      	bne.n	800da1a <HAL_RCC_OscConfig+0x812>
 800da40:	e001      	b.n	800da46 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e000      	b.n	800da48 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3720      	adds	r7, #32
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	40021000 	.word	0x40021000

0800da54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800da5e:	2300      	movs	r3, #0
 800da60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	e10f      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800da6c:	4b89      	ldr	r3, [pc, #548]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	429a      	cmp	r2, r3
 800da78:	d910      	bls.n	800da9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da7a:	4b86      	ldr	r3, [pc, #536]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f023 020f 	bic.w	r2, r3, #15
 800da82:	4984      	ldr	r1, [pc, #528]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	4313      	orrs	r3, r2
 800da88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da8a:	4b82      	ldr	r3, [pc, #520]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 030f 	and.w	r3, r3, #15
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d001      	beq.n	800da9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e0f7      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 0301 	and.w	r3, r3, #1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 8089 	beq.w	800dbbc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d133      	bne.n	800db1a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dab2:	4b79      	ldr	r3, [pc, #484]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e0e4      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800dac2:	f000 f9f9 	bl	800deb8 <RCC_GetSysClockFreqFromPLLSource>
 800dac6:	4603      	mov	r3, r0
 800dac8:	4a74      	ldr	r2, [pc, #464]	; (800dc9c <HAL_RCC_ClockConfig+0x248>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d955      	bls.n	800db7a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800dace:	4b72      	ldr	r3, [pc, #456]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d10a      	bne.n	800daf0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dada:	4b6f      	ldr	r3, [pc, #444]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dae2:	4a6d      	ldr	r2, [pc, #436]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800daea:	2380      	movs	r3, #128	; 0x80
 800daec:	617b      	str	r3, [r7, #20]
 800daee:	e044      	b.n	800db7a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 0302 	and.w	r3, r3, #2
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d03e      	beq.n	800db7a <HAL_RCC_ClockConfig+0x126>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d13a      	bne.n	800db7a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800db04:	4b64      	ldr	r3, [pc, #400]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db0c:	4a62      	ldr	r2, [pc, #392]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e02f      	b.n	800db7a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d107      	bne.n	800db32 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800db22:	4b5d      	ldr	r3, [pc, #372]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d115      	bne.n	800db5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e0ac      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d107      	bne.n	800db4a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800db3a:	4b57      	ldr	r3, [pc, #348]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e0a0      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800db4a:	4b53      	ldr	r3, [pc, #332]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e098      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800db5a:	f000 f8a7 	bl	800dcac <HAL_RCC_GetSysClockFreq>
 800db5e:	4603      	mov	r3, r0
 800db60:	4a4e      	ldr	r2, [pc, #312]	; (800dc9c <HAL_RCC_ClockConfig+0x248>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d909      	bls.n	800db7a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800db66:	4b4c      	ldr	r3, [pc, #304]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db6e:	4a4a      	ldr	r2, [pc, #296]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800db76:	2380      	movs	r3, #128	; 0x80
 800db78:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800db7a:	4b47      	ldr	r3, [pc, #284]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f023 0203 	bic.w	r2, r3, #3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	4944      	ldr	r1, [pc, #272]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db8c:	f7fa f9ae 	bl	8007eec <HAL_GetTick>
 800db90:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db92:	e00a      	b.n	800dbaa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db94:	f7fa f9aa 	bl	8007eec <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d901      	bls.n	800dbaa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e070      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbaa:	4b3b      	ldr	r3, [pc, #236]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f003 020c 	and.w	r2, r3, #12
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d1eb      	bne.n	800db94 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0302 	and.w	r3, r3, #2
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d009      	beq.n	800dbdc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbc8:	4b33      	ldr	r3, [pc, #204]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	4930      	ldr	r1, [pc, #192]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	608b      	str	r3, [r1, #8]
 800dbda:	e008      	b.n	800dbee <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b80      	cmp	r3, #128	; 0x80
 800dbe0:	d105      	bne.n	800dbee <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800dbe2:	4b2d      	ldr	r3, [pc, #180]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	4a2c      	ldr	r2, [pc, #176]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbec:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dbee:	4b29      	ldr	r3, [pc, #164]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 030f 	and.w	r3, r3, #15
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d210      	bcs.n	800dc1e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbfc:	4b25      	ldr	r3, [pc, #148]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f023 020f 	bic.w	r2, r3, #15
 800dc04:	4923      	ldr	r1, [pc, #140]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc0c:	4b21      	ldr	r3, [pc, #132]	; (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 030f 	and.w	r3, r3, #15
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d001      	beq.n	800dc1e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e036      	b.n	800dc8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f003 0304 	and.w	r3, r3, #4
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d008      	beq.n	800dc3c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc2a:	4b1b      	ldr	r3, [pc, #108]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	4918      	ldr	r1, [pc, #96]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f003 0308 	and.w	r3, r3, #8
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d009      	beq.n	800dc5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dc48:	4b13      	ldr	r3, [pc, #76]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	691b      	ldr	r3, [r3, #16]
 800dc54:	00db      	lsls	r3, r3, #3
 800dc56:	4910      	ldr	r1, [pc, #64]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dc5c:	f000 f826 	bl	800dcac <HAL_RCC_GetSysClockFreq>
 800dc60:	4602      	mov	r2, r0
 800dc62:	4b0d      	ldr	r3, [pc, #52]	; (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	091b      	lsrs	r3, r3, #4
 800dc68:	f003 030f 	and.w	r3, r3, #15
 800dc6c:	490c      	ldr	r1, [pc, #48]	; (800dca0 <HAL_RCC_ClockConfig+0x24c>)
 800dc6e:	5ccb      	ldrb	r3, [r1, r3]
 800dc70:	f003 031f 	and.w	r3, r3, #31
 800dc74:	fa22 f303 	lsr.w	r3, r2, r3
 800dc78:	4a0a      	ldr	r2, [pc, #40]	; (800dca4 <HAL_RCC_ClockConfig+0x250>)
 800dc7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	; (800dca8 <HAL_RCC_ClockConfig+0x254>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fa f8e7 	bl	8007e54 <HAL_InitTick>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73fb      	strb	r3, [r7, #15]

  return status;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	40022000 	.word	0x40022000
 800dc98:	40021000 	.word	0x40021000
 800dc9c:	04c4b400 	.word	0x04c4b400
 800dca0:	08023250 	.word	0x08023250
 800dca4:	20000038 	.word	0x20000038
 800dca8:	200000d8 	.word	0x200000d8

0800dcac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b089      	sub	sp, #36	; 0x24
 800dcb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	61fb      	str	r3, [r7, #28]
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dcba:	4b3e      	ldr	r3, [pc, #248]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	f003 030c 	and.w	r3, r3, #12
 800dcc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dcc4:	4b3b      	ldr	r3, [pc, #236]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f003 0303 	and.w	r3, r3, #3
 800dccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d005      	beq.n	800dce0 <HAL_RCC_GetSysClockFreq+0x34>
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b0c      	cmp	r3, #12
 800dcd8:	d121      	bne.n	800dd1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d11e      	bne.n	800dd1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800dce0:	4b34      	ldr	r3, [pc, #208]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f003 0308 	and.w	r3, r3, #8
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d107      	bne.n	800dcfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800dcec:	4b31      	ldr	r3, [pc, #196]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dcee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcf2:	0a1b      	lsrs	r3, r3, #8
 800dcf4:	f003 030f 	and.w	r3, r3, #15
 800dcf8:	61fb      	str	r3, [r7, #28]
 800dcfa:	e005      	b.n	800dd08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800dcfc:	4b2d      	ldr	r3, [pc, #180]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	091b      	lsrs	r3, r3, #4
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800dd08:	4a2b      	ldr	r2, [pc, #172]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10d      	bne.n	800dd34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dd1c:	e00a      	b.n	800dd34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	d102      	bne.n	800dd2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dd24:	4b25      	ldr	r3, [pc, #148]	; (800ddbc <HAL_RCC_GetSysClockFreq+0x110>)
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	e004      	b.n	800dd34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2b08      	cmp	r3, #8
 800dd2e:	d101      	bne.n	800dd34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800dd30:	4b22      	ldr	r3, [pc, #136]	; (800ddbc <HAL_RCC_GetSysClockFreq+0x110>)
 800dd32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b0c      	cmp	r3, #12
 800dd38:	d134      	bne.n	800dda4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dd3a:	4b1e      	ldr	r3, [pc, #120]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d003      	beq.n	800dd52 <HAL_RCC_GetSysClockFreq+0xa6>
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d003      	beq.n	800dd58 <HAL_RCC_GetSysClockFreq+0xac>
 800dd50:	e005      	b.n	800dd5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800dd52:	4b1a      	ldr	r3, [pc, #104]	; (800ddbc <HAL_RCC_GetSysClockFreq+0x110>)
 800dd54:	617b      	str	r3, [r7, #20]
      break;
 800dd56:	e005      	b.n	800dd64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800dd58:	4b18      	ldr	r3, [pc, #96]	; (800ddbc <HAL_RCC_GetSysClockFreq+0x110>)
 800dd5a:	617b      	str	r3, [r7, #20]
      break;
 800dd5c:	e002      	b.n	800dd64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	617b      	str	r3, [r7, #20]
      break;
 800dd62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dd64:	4b13      	ldr	r3, [pc, #76]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	091b      	lsrs	r3, r3, #4
 800dd6a:	f003 030f 	and.w	r3, r3, #15
 800dd6e:	3301      	adds	r3, #1
 800dd70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800dd72:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	0a1b      	lsrs	r3, r3, #8
 800dd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	fb02 f203 	mul.w	r2, r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	0e5b      	lsrs	r3, r3, #25
 800dd90:	f003 0303 	and.w	r3, r3, #3
 800dd94:	3301      	adds	r3, #1
 800dd96:	005b      	lsls	r3, r3, #1
 800dd98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800dd9a:	697a      	ldr	r2, [r7, #20]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800dda4:	69bb      	ldr	r3, [r7, #24]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3724      	adds	r7, #36	; 0x24
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	40021000 	.word	0x40021000
 800ddb8:	08023268 	.word	0x08023268
 800ddbc:	00f42400 	.word	0x00f42400

0800ddc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ddc4:	4b03      	ldr	r3, [pc, #12]	; (800ddd4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	20000038 	.word	0x20000038

0800ddd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dddc:	f7ff fff0 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800dde0:	4602      	mov	r2, r0
 800dde2:	4b06      	ldr	r3, [pc, #24]	; (800ddfc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	0a1b      	lsrs	r3, r3, #8
 800dde8:	f003 0307 	and.w	r3, r3, #7
 800ddec:	4904      	ldr	r1, [pc, #16]	; (800de00 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ddee:	5ccb      	ldrb	r3, [r1, r3]
 800ddf0:	f003 031f 	and.w	r3, r3, #31
 800ddf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	40021000 	.word	0x40021000
 800de00:	08023260 	.word	0x08023260

0800de04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800de0c:	2300      	movs	r3, #0
 800de0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800de10:	4b27      	ldr	r3, [pc, #156]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800de1c:	f7ff f8b6 	bl	800cf8c <HAL_PWREx_GetVoltageRange>
 800de20:	6178      	str	r0, [r7, #20]
 800de22:	e014      	b.n	800de4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800de24:	4b22      	ldr	r3, [pc, #136]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de28:	4a21      	ldr	r2, [pc, #132]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de2e:	6593      	str	r3, [r2, #88]	; 0x58
 800de30:	4b1f      	ldr	r3, [pc, #124]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800de3c:	f7ff f8a6 	bl	800cf8c <HAL_PWREx_GetVoltageRange>
 800de40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800de42:	4b1b      	ldr	r3, [pc, #108]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de46:	4a1a      	ldr	r2, [pc, #104]	; (800deb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800de48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de54:	d10b      	bne.n	800de6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b80      	cmp	r3, #128	; 0x80
 800de5a:	d913      	bls.n	800de84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2ba0      	cmp	r3, #160	; 0xa0
 800de60:	d902      	bls.n	800de68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800de62:	2302      	movs	r3, #2
 800de64:	613b      	str	r3, [r7, #16]
 800de66:	e00d      	b.n	800de84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800de68:	2301      	movs	r3, #1
 800de6a:	613b      	str	r3, [r7, #16]
 800de6c:	e00a      	b.n	800de84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b7f      	cmp	r3, #127	; 0x7f
 800de72:	d902      	bls.n	800de7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800de74:	2302      	movs	r3, #2
 800de76:	613b      	str	r3, [r7, #16]
 800de78:	e004      	b.n	800de84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b70      	cmp	r3, #112	; 0x70
 800de7e:	d101      	bne.n	800de84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800de80:	2301      	movs	r3, #1
 800de82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800de84:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f023 020f 	bic.w	r2, r3, #15
 800de8c:	4909      	ldr	r1, [pc, #36]	; (800deb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	4313      	orrs	r3, r2
 800de92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800de94:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f003 030f 	and.w	r3, r3, #15
 800de9c:	693a      	ldr	r2, [r7, #16]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d001      	beq.n	800dea6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e000      	b.n	800dea8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	40021000 	.word	0x40021000
 800deb4:	40022000 	.word	0x40022000

0800deb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800deb8:	b480      	push	{r7}
 800deba:	b087      	sub	sp, #28
 800debc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800dec2:	4b2d      	ldr	r3, [pc, #180]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	f003 0303 	and.w	r3, r3, #3
 800deca:	2b01      	cmp	r3, #1
 800decc:	d118      	bne.n	800df00 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800dece:	4b2a      	ldr	r3, [pc, #168]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0308 	and.w	r3, r3, #8
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d107      	bne.n	800deea <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800deda:	4b27      	ldr	r3, [pc, #156]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800dedc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dee0:	0a1b      	lsrs	r3, r3, #8
 800dee2:	f003 030f 	and.w	r3, r3, #15
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e005      	b.n	800def6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800deea:	4b23      	ldr	r3, [pc, #140]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	091b      	lsrs	r3, r3, #4
 800def0:	f003 030f 	and.w	r3, r3, #15
 800def4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800def6:	4a21      	ldr	r2, [pc, #132]	; (800df7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800defe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df00:	4b1d      	ldr	r3, [pc, #116]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	f003 0303 	and.w	r3, r3, #3
 800df08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d003      	beq.n	800df18 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d003      	beq.n	800df1e <RCC_GetSysClockFreqFromPLLSource+0x66>
 800df16:	e005      	b.n	800df24 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800df18:	4b19      	ldr	r3, [pc, #100]	; (800df80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800df1a:	613b      	str	r3, [r7, #16]
    break;
 800df1c:	e005      	b.n	800df2a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800df1e:	4b18      	ldr	r3, [pc, #96]	; (800df80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800df20:	613b      	str	r3, [r7, #16]
    break;
 800df22:	e002      	b.n	800df2a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	613b      	str	r3, [r7, #16]
    break;
 800df28:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df2a:	4b13      	ldr	r3, [pc, #76]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	091b      	lsrs	r3, r3, #4
 800df30:	f003 030f 	and.w	r3, r3, #15
 800df34:	3301      	adds	r3, #1
 800df36:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800df38:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	0a1b      	lsrs	r3, r3, #8
 800df3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df42:	693a      	ldr	r2, [r7, #16]
 800df44:	fb02 f203 	mul.w	r2, r2, r3
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800df50:	4b09      	ldr	r3, [pc, #36]	; (800df78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	0e5b      	lsrs	r3, r3, #25
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	3301      	adds	r3, #1
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800df60:	693a      	ldr	r2, [r7, #16]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	fbb2 f3f3 	udiv	r3, r2, r3
 800df68:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800df6a:	683b      	ldr	r3, [r7, #0]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	371c      	adds	r7, #28
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr
 800df78:	40021000 	.word	0x40021000
 800df7c:	08023268 	.word	0x08023268
 800df80:	00f42400 	.word	0x00f42400

0800df84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800df8c:	2300      	movs	r3, #0
 800df8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800df90:	2300      	movs	r3, #0
 800df92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d040      	beq.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa4:	2b80      	cmp	r3, #128	; 0x80
 800dfa6:	d02a      	beq.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dfa8:	2b80      	cmp	r3, #128	; 0x80
 800dfaa:	d825      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfac:	2b60      	cmp	r3, #96	; 0x60
 800dfae:	d026      	beq.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dfb0:	2b60      	cmp	r3, #96	; 0x60
 800dfb2:	d821      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfb4:	2b40      	cmp	r3, #64	; 0x40
 800dfb6:	d006      	beq.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800dfb8:	2b40      	cmp	r3, #64	; 0x40
 800dfba:	d81d      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d009      	beq.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800dfc0:	2b20      	cmp	r3, #32
 800dfc2:	d010      	beq.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800dfc4:	e018      	b.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800dfc6:	4b89      	ldr	r3, [pc, #548]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	4a88      	ldr	r2, [pc, #544]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800dfcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dfd2:	e015      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fb62 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dfe4:	e00c      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3320      	adds	r3, #32
 800dfea:	2100      	movs	r1, #0
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fc4d 	bl	800e88c <RCCEx_PLLSAI2_Config>
 800dff2:	4603      	mov	r3, r0
 800dff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dff6:	e003      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dff8:	2301      	movs	r3, #1
 800dffa:	74fb      	strb	r3, [r7, #19]
      break;
 800dffc:	e000      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800dffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e000:	7cfb      	ldrb	r3, [r7, #19]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10b      	bne.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e006:	4b79      	ldr	r3, [pc, #484]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e00c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e014:	4975      	ldr	r1, [pc, #468]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e016:	4313      	orrs	r3, r2
 800e018:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e01c:	e001      	b.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e01e:	7cfb      	ldrb	r3, [r7, #19]
 800e020:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d047      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e036:	d030      	beq.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e03c:	d82a      	bhi.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e03e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e042:	d02a      	beq.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e048:	d824      	bhi.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e04a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e04e:	d008      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800e050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e054:	d81e      	bhi.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800e05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e05e:	d010      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e060:	e018      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e062:	4b62      	ldr	r3, [pc, #392]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4a61      	ldr	r2, [pc, #388]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e06c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e06e:	e015      	b.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3304      	adds	r3, #4
 800e074:	2100      	movs	r1, #0
 800e076:	4618      	mov	r0, r3
 800e078:	f000 fb14 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800e07c:	4603      	mov	r3, r0
 800e07e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e080:	e00c      	b.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3320      	adds	r3, #32
 800e086:	2100      	movs	r1, #0
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fbff 	bl	800e88c <RCCEx_PLLSAI2_Config>
 800e08e:	4603      	mov	r3, r0
 800e090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e092:	e003      	b.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	74fb      	strb	r3, [r7, #19]
      break;
 800e098:	e000      	b.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800e09a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e09c:	7cfb      	ldrb	r3, [r7, #19]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10b      	bne.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e0a2:	4b52      	ldr	r3, [pc, #328]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e0a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b0:	494e      	ldr	r1, [pc, #312]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e0b8:	e001      	b.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0ba:	7cfb      	ldrb	r3, [r7, #19]
 800e0bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 809f 	beq.w	800e20a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e0d0:	4b46      	ldr	r3, [pc, #280]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e000      	b.n	800e0e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00d      	beq.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e0e6:	4b41      	ldr	r3, [pc, #260]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ea:	4a40      	ldr	r2, [pc, #256]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0f0:	6593      	str	r3, [r2, #88]	; 0x58
 800e0f2:	4b3e      	ldr	r3, [pc, #248]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0fa:	60bb      	str	r3, [r7, #8]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e0fe:	2301      	movs	r3, #1
 800e100:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e102:	4b3b      	ldr	r3, [pc, #236]	; (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a3a      	ldr	r2, [pc, #232]	; (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e10c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e10e:	f7f9 feed 	bl	8007eec <HAL_GetTick>
 800e112:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e114:	e009      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e116:	f7f9 fee9 	bl	8007eec <HAL_GetTick>
 800e11a:	4602      	mov	r2, r0
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	2b02      	cmp	r3, #2
 800e122:	d902      	bls.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	74fb      	strb	r3, [r7, #19]
        break;
 800e128:	e005      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e12a:	4b31      	ldr	r3, [pc, #196]	; (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0ef      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800e136:	7cfb      	ldrb	r3, [r7, #19]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d15b      	bne.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e13c:	4b2b      	ldr	r3, [pc, #172]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e146:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d01f      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e154:	697a      	ldr	r2, [r7, #20]
 800e156:	429a      	cmp	r2, r3
 800e158:	d019      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e15a:	4b24      	ldr	r3, [pc, #144]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e164:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e166:	4b21      	ldr	r3, [pc, #132]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e16c:	4a1f      	ldr	r2, [pc, #124]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e16e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e176:	4b1d      	ldr	r3, [pc, #116]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e17c:	4a1b      	ldr	r2, [pc, #108]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e17e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e186:	4a19      	ldr	r2, [pc, #100]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	2b00      	cmp	r3, #0
 800e196:	d016      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e198:	f7f9 fea8 	bl	8007eec <HAL_GetTick>
 800e19c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e19e:	e00b      	b.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1a0:	f7f9 fea4 	bl	8007eec <HAL_GetTick>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d902      	bls.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800e1b2:	2303      	movs	r3, #3
 800e1b4:	74fb      	strb	r3, [r7, #19]
            break;
 800e1b6:	e006      	b.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1be:	f003 0302 	and.w	r3, r3, #2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0ec      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800e1c6:	7cfb      	ldrb	r3, [r7, #19]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10c      	bne.n	800e1e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1cc:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e1dc:	4903      	ldr	r1, [pc, #12]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e1e4:	e008      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e1e6:	7cfb      	ldrb	r3, [r7, #19]
 800e1e8:	74bb      	strb	r3, [r7, #18]
 800e1ea:	e005      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800e1ec:	40021000 	.word	0x40021000
 800e1f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f4:	7cfb      	ldrb	r3, [r7, #19]
 800e1f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e1f8:	7c7b      	ldrb	r3, [r7, #17]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d105      	bne.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1fe:	4ba0      	ldr	r3, [pc, #640]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e202:	4a9f      	ldr	r2, [pc, #636]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00a      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e216:	4b9a      	ldr	r3, [pc, #616]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e21c:	f023 0203 	bic.w	r2, r3, #3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e224:	4996      	ldr	r1, [pc, #600]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e226:	4313      	orrs	r3, r2
 800e228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00a      	beq.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e238:	4b91      	ldr	r3, [pc, #580]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e23e:	f023 020c 	bic.w	r2, r3, #12
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e246:	498e      	ldr	r1, [pc, #568]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e248:	4313      	orrs	r3, r2
 800e24a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e25a:	4b89      	ldr	r3, [pc, #548]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e268:	4985      	ldr	r1, [pc, #532]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e26a:	4313      	orrs	r3, r2
 800e26c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f003 0308 	and.w	r3, r3, #8
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e27c:	4b80      	ldr	r3, [pc, #512]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28a:	497d      	ldr	r1, [pc, #500]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e28c:	4313      	orrs	r3, r2
 800e28e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f003 0310 	and.w	r3, r3, #16
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00a      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e29e:	4b78      	ldr	r3, [pc, #480]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ac:	4974      	ldr	r1, [pc, #464]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 0320 	and.w	r3, r3, #32
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2c0:	4b6f      	ldr	r3, [pc, #444]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ce:	496c      	ldr	r1, [pc, #432]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e2e2:	4b67      	ldr	r3, [pc, #412]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f0:	4963      	ldr	r1, [pc, #396]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e304:	4b5e      	ldr	r3, [pc, #376]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e30a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e312:	495b      	ldr	r1, [pc, #364]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e326:	4b56      	ldr	r3, [pc, #344]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e32c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e334:	4952      	ldr	r1, [pc, #328]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e336:	4313      	orrs	r3, r2
 800e338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e348:	4b4d      	ldr	r3, [pc, #308]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e34e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e356:	494a      	ldr	r1, [pc, #296]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e36a:	4b45      	ldr	r3, [pc, #276]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e378:	4941      	ldr	r1, [pc, #260]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e38c:	4b3c      	ldr	r3, [pc, #240]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e38e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e392:	f023 0203 	bic.w	r2, r3, #3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e39a:	4939      	ldr	r1, [pc, #228]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d028      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e3ae:	4b34      	ldr	r3, [pc, #208]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3bc:	4930      	ldr	r1, [pc, #192]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3cc:	d106      	bne.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3ce:	4b2c      	ldr	r3, [pc, #176]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	4a2b      	ldr	r2, [pc, #172]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e3d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3d8:	60d3      	str	r3, [r2, #12]
 800e3da:	e011      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3e4:	d10c      	bne.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 f959 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800e3f6:	7cfb      	ldrb	r3, [r7, #19]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800e3fc:	7cfb      	ldrb	r3, [r7, #19]
 800e3fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d04d      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e414:	d108      	bne.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800e416:	4b1a      	ldr	r3, [pc, #104]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e41c:	4a18      	ldr	r2, [pc, #96]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e41e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e422:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e426:	e012      	b.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800e428:	4b15      	ldr	r3, [pc, #84]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e42a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e42e:	4a14      	ldr	r2, [pc, #80]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e434:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e438:	4b11      	ldr	r3, [pc, #68]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e43e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e446:	490e      	ldr	r1, [pc, #56]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e456:	d106      	bne.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e458:	4b09      	ldr	r3, [pc, #36]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	4a08      	ldr	r2, [pc, #32]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e45e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e462:	60d3      	str	r3, [r2, #12]
 800e464:	e020      	b.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e46a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e46e:	d109      	bne.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e470:	4b03      	ldr	r3, [pc, #12]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	4a02      	ldr	r2, [pc, #8]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e47a:	60d3      	str	r3, [r2, #12]
 800e47c:	e014      	b.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800e47e:	bf00      	nop
 800e480:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e48c:	d10c      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3304      	adds	r3, #4
 800e492:	2101      	movs	r1, #1
 800e494:	4618      	mov	r0, r3
 800e496:	f000 f905 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800e49a:	4603      	mov	r3, r0
 800e49c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e49e:	7cfb      	ldrb	r3, [r7, #19]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800e4a4:	7cfb      	ldrb	r3, [r7, #19]
 800e4a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d028      	beq.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e4b4:	4b7a      	ldr	r3, [pc, #488]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c2:	4977      	ldr	r1, [pc, #476]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4d2:	d106      	bne.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4d4:	4b72      	ldr	r3, [pc, #456]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	4a71      	ldr	r2, [pc, #452]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4de:	60d3      	str	r3, [r2, #12]
 800e4e0:	e011      	b.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4ea:	d10c      	bne.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	2101      	movs	r1, #1
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 f8d6 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e4fc:	7cfb      	ldrb	r3, [r7, #19]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800e502:	7cfb      	ldrb	r3, [r7, #19]
 800e504:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01e      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e512:	4b63      	ldr	r3, [pc, #396]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e522:	495f      	ldr	r1, [pc, #380]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e524:	4313      	orrs	r3, r2
 800e526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e534:	d10c      	bne.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	3304      	adds	r3, #4
 800e53a:	2102      	movs	r1, #2
 800e53c:	4618      	mov	r0, r3
 800e53e:	f000 f8b1 	bl	800e6a4 <RCCEx_PLLSAI1_Config>
 800e542:	4603      	mov	r3, r0
 800e544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e546:	7cfb      	ldrb	r3, [r7, #19]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800e54c:	7cfb      	ldrb	r3, [r7, #19]
 800e54e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00b      	beq.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e55c:	4b50      	ldr	r3, [pc, #320]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e55e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e562:	f023 0204 	bic.w	r2, r3, #4
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e56c:	494c      	ldr	r1, [pc, #304]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e56e:	4313      	orrs	r3, r2
 800e570:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00b      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e580:	4b47      	ldr	r3, [pc, #284]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e586:	f023 0218 	bic.w	r2, r3, #24
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e590:	4943      	ldr	r1, [pc, #268]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e592:	4313      	orrs	r3, r2
 800e594:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d035      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e5a4:	4b3e      	ldr	r3, [pc, #248]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a3d      	ldr	r2, [pc, #244]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e5aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e5ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5b0:	f7f9 fc9c 	bl	8007eec <HAL_GetTick>
 800e5b4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e5b6:	e009      	b.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e5b8:	f7f9 fc98 	bl	8007eec <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	2b02      	cmp	r3, #2
 800e5c4:	d902      	bls.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800e5c6:	2303      	movs	r3, #3
 800e5c8:	74fb      	strb	r3, [r7, #19]
        break;
 800e5ca:	e005      	b.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e5cc:	4b34      	ldr	r3, [pc, #208]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1ef      	bne.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800e5d8:	7cfb      	ldrb	r3, [r7, #19]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d113      	bne.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800e5de:	4b30      	ldr	r3, [pc, #192]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e5e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e5e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5ee:	492c      	ldr	r1, [pc, #176]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	3320      	adds	r3, #32
 800e5fa:	2102      	movs	r1, #2
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 f945 	bl	800e88c <RCCEx_PLLSAI2_Config>
 800e602:	4603      	mov	r3, r0
 800e604:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800e606:	7cfb      	ldrb	r3, [r7, #19]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800e60c:	7cfb      	ldrb	r3, [r7, #19]
 800e60e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01e      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800e61c:	4b20      	ldr	r3, [pc, #128]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e61e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e62c:	491c      	ldr	r1, [pc, #112]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e63e:	d10c      	bne.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3320      	adds	r3, #32
 800e644:	2101      	movs	r1, #1
 800e646:	4618      	mov	r0, r3
 800e648:	f000 f920 	bl	800e88c <RCCEx_PLLSAI2_Config>
 800e64c:	4603      	mov	r3, r0
 800e64e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e650:	7cfb      	ldrb	r3, [r7, #19]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800e656:	7cfb      	ldrb	r3, [r7, #19]
 800e658:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e662:	2b00      	cmp	r3, #0
 800e664:	d017      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e666:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e66c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e676:	490a      	ldr	r1, [pc, #40]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e678:	4313      	orrs	r3, r2
 800e67a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e688:	d105      	bne.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e68a:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	4a04      	ldr	r2, [pc, #16]	; (800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800e690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e694:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e696:	7cbb      	ldrb	r3, [r7, #18]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	40021000 	.word	0x40021000

0800e6a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e6b2:	4b72      	ldr	r3, [pc, #456]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f003 0303 	and.w	r3, r3, #3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00e      	beq.n	800e6dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e6be:	4b6f      	ldr	r3, [pc, #444]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	f003 0203 	and.w	r2, r3, #3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d103      	bne.n	800e6d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
       ||
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d142      	bne.n	800e75c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	73fb      	strb	r3, [r7, #15]
 800e6da:	e03f      	b.n	800e75c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b03      	cmp	r3, #3
 800e6e2:	d018      	beq.n	800e716 <RCCEx_PLLSAI1_Config+0x72>
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d825      	bhi.n	800e734 <RCCEx_PLLSAI1_Config+0x90>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d002      	beq.n	800e6f2 <RCCEx_PLLSAI1_Config+0x4e>
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d009      	beq.n	800e704 <RCCEx_PLLSAI1_Config+0x60>
 800e6f0:	e020      	b.n	800e734 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e6f2:	4b62      	ldr	r3, [pc, #392]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d11d      	bne.n	800e73a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e702:	e01a      	b.n	800e73a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e704:	4b5d      	ldr	r3, [pc, #372]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d116      	bne.n	800e73e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800e710:	2301      	movs	r3, #1
 800e712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e714:	e013      	b.n	800e73e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e716:	4b59      	ldr	r3, [pc, #356]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10f      	bne.n	800e742 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e722:	4b56      	ldr	r3, [pc, #344]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d109      	bne.n	800e742 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
 800e730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e732:	e006      	b.n	800e742 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	73fb      	strb	r3, [r7, #15]
      break;
 800e738:	e004      	b.n	800e744 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e73a:	bf00      	nop
 800e73c:	e002      	b.n	800e744 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e73e:	bf00      	nop
 800e740:	e000      	b.n	800e744 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e742:	bf00      	nop
    }

    if(status == HAL_OK)
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d108      	bne.n	800e75c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800e74a:	4b4c      	ldr	r3, [pc, #304]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	f023 0203 	bic.w	r2, r3, #3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4949      	ldr	r1, [pc, #292]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e758:	4313      	orrs	r3, r2
 800e75a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f040 8086 	bne.w	800e870 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e764:	4b45      	ldr	r3, [pc, #276]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a44      	ldr	r2, [pc, #272]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e76a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e76e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e770:	f7f9 fbbc 	bl	8007eec <HAL_GetTick>
 800e774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e776:	e009      	b.n	800e78c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e778:	f7f9 fbb8 	bl	8007eec <HAL_GetTick>
 800e77c:	4602      	mov	r2, r0
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	2b02      	cmp	r3, #2
 800e784:	d902      	bls.n	800e78c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	73fb      	strb	r3, [r7, #15]
        break;
 800e78a:	e005      	b.n	800e798 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e78c:	4b3b      	ldr	r3, [pc, #236]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1ef      	bne.n	800e778 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800e798:	7bfb      	ldrb	r3, [r7, #15]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d168      	bne.n	800e870 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d113      	bne.n	800e7cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7a4:	4b35      	ldr	r3, [pc, #212]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e7a6:	691a      	ldr	r2, [r3, #16]
 800e7a8:	4b35      	ldr	r3, [pc, #212]	; (800e880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	6892      	ldr	r2, [r2, #8]
 800e7b0:	0211      	lsls	r1, r2, #8
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	68d2      	ldr	r2, [r2, #12]
 800e7b6:	06d2      	lsls	r2, r2, #27
 800e7b8:	4311      	orrs	r1, r2
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	6852      	ldr	r2, [r2, #4]
 800e7be:	3a01      	subs	r2, #1
 800e7c0:	0112      	lsls	r2, r2, #4
 800e7c2:	430a      	orrs	r2, r1
 800e7c4:	492d      	ldr	r1, [pc, #180]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	610b      	str	r3, [r1, #16]
 800e7ca:	e02d      	b.n	800e828 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d115      	bne.n	800e7fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7d2:	4b2a      	ldr	r3, [pc, #168]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e7d4:	691a      	ldr	r2, [r3, #16]
 800e7d6:	4b2b      	ldr	r3, [pc, #172]	; (800e884 <RCCEx_PLLSAI1_Config+0x1e0>)
 800e7d8:	4013      	ands	r3, r2
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	6892      	ldr	r2, [r2, #8]
 800e7de:	0211      	lsls	r1, r2, #8
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	6912      	ldr	r2, [r2, #16]
 800e7e4:	0852      	lsrs	r2, r2, #1
 800e7e6:	3a01      	subs	r2, #1
 800e7e8:	0552      	lsls	r2, r2, #21
 800e7ea:	4311      	orrs	r1, r2
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	6852      	ldr	r2, [r2, #4]
 800e7f0:	3a01      	subs	r2, #1
 800e7f2:	0112      	lsls	r2, r2, #4
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	4921      	ldr	r1, [pc, #132]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	610b      	str	r3, [r1, #16]
 800e7fc:	e014      	b.n	800e828 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7fe:	4b1f      	ldr	r3, [pc, #124]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e800:	691a      	ldr	r2, [r3, #16]
 800e802:	4b21      	ldr	r3, [pc, #132]	; (800e888 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e804:	4013      	ands	r3, r2
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	6892      	ldr	r2, [r2, #8]
 800e80a:	0211      	lsls	r1, r2, #8
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	6952      	ldr	r2, [r2, #20]
 800e810:	0852      	lsrs	r2, r2, #1
 800e812:	3a01      	subs	r2, #1
 800e814:	0652      	lsls	r2, r2, #25
 800e816:	4311      	orrs	r1, r2
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	6852      	ldr	r2, [r2, #4]
 800e81c:	3a01      	subs	r2, #1
 800e81e:	0112      	lsls	r2, r2, #4
 800e820:	430a      	orrs	r2, r1
 800e822:	4916      	ldr	r1, [pc, #88]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e824:	4313      	orrs	r3, r2
 800e826:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e828:	4b14      	ldr	r3, [pc, #80]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a13      	ldr	r2, [pc, #76]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e82e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e834:	f7f9 fb5a 	bl	8007eec <HAL_GetTick>
 800e838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e83a:	e009      	b.n	800e850 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e83c:	f7f9 fb56 	bl	8007eec <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b02      	cmp	r3, #2
 800e848:	d902      	bls.n	800e850 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	73fb      	strb	r3, [r7, #15]
          break;
 800e84e:	e005      	b.n	800e85c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e850:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d0ef      	beq.n	800e83c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e862:	4b06      	ldr	r3, [pc, #24]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e864:	691a      	ldr	r2, [r3, #16]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	4904      	ldr	r1, [pc, #16]	; (800e87c <RCCEx_PLLSAI1_Config+0x1d8>)
 800e86c:	4313      	orrs	r3, r2
 800e86e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e870:	7bfb      	ldrb	r3, [r7, #15]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40021000 	.word	0x40021000
 800e880:	07ff800f 	.word	0x07ff800f
 800e884:	ff9f800f 	.word	0xff9f800f
 800e888:	f9ff800f 	.word	0xf9ff800f

0800e88c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e89a:	4b72      	ldr	r3, [pc, #456]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00e      	beq.n	800e8c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800e8a6:	4b6f      	ldr	r3, [pc, #444]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	f003 0203 	and.w	r2, r3, #3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d103      	bne.n	800e8be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
       ||
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d142      	bne.n	800e944 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	73fb      	strb	r3, [r7, #15]
 800e8c2:	e03f      	b.n	800e944 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d018      	beq.n	800e8fe <RCCEx_PLLSAI2_Config+0x72>
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d825      	bhi.n	800e91c <RCCEx_PLLSAI2_Config+0x90>
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d002      	beq.n	800e8da <RCCEx_PLLSAI2_Config+0x4e>
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d009      	beq.n	800e8ec <RCCEx_PLLSAI2_Config+0x60>
 800e8d8:	e020      	b.n	800e91c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e8da:	4b62      	ldr	r3, [pc, #392]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f003 0302 	and.w	r3, r3, #2
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d11d      	bne.n	800e922 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8ea:	e01a      	b.n	800e922 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e8ec:	4b5d      	ldr	r3, [pc, #372]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d116      	bne.n	800e926 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8fc:	e013      	b.n	800e926 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e8fe:	4b59      	ldr	r3, [pc, #356]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10f      	bne.n	800e92a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e90a:	4b56      	ldr	r3, [pc, #344]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e912:	2b00      	cmp	r3, #0
 800e914:	d109      	bne.n	800e92a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e91a:	e006      	b.n	800e92a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	73fb      	strb	r3, [r7, #15]
      break;
 800e920:	e004      	b.n	800e92c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800e922:	bf00      	nop
 800e924:	e002      	b.n	800e92c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800e926:	bf00      	nop
 800e928:	e000      	b.n	800e92c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800e92a:	bf00      	nop
    }

    if(status == HAL_OK)
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d108      	bne.n	800e944 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800e932:	4b4c      	ldr	r3, [pc, #304]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	f023 0203 	bic.w	r2, r3, #3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4949      	ldr	r1, [pc, #292]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e940:	4313      	orrs	r3, r2
 800e942:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	2b00      	cmp	r3, #0
 800e948:	f040 8086 	bne.w	800ea58 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e94c:	4b45      	ldr	r3, [pc, #276]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a44      	ldr	r2, [pc, #272]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e958:	f7f9 fac8 	bl	8007eec <HAL_GetTick>
 800e95c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e95e:	e009      	b.n	800e974 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e960:	f7f9 fac4 	bl	8007eec <HAL_GetTick>
 800e964:	4602      	mov	r2, r0
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d902      	bls.n	800e974 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800e96e:	2303      	movs	r3, #3
 800e970:	73fb      	strb	r3, [r7, #15]
        break;
 800e972:	e005      	b.n	800e980 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e974:	4b3b      	ldr	r3, [pc, #236]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1ef      	bne.n	800e960 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d168      	bne.n	800ea58 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d113      	bne.n	800e9b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e98c:	4b35      	ldr	r3, [pc, #212]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e98e:	695a      	ldr	r2, [r3, #20]
 800e990:	4b35      	ldr	r3, [pc, #212]	; (800ea68 <RCCEx_PLLSAI2_Config+0x1dc>)
 800e992:	4013      	ands	r3, r2
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	6892      	ldr	r2, [r2, #8]
 800e998:	0211      	lsls	r1, r2, #8
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	68d2      	ldr	r2, [r2, #12]
 800e99e:	06d2      	lsls	r2, r2, #27
 800e9a0:	4311      	orrs	r1, r2
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	6852      	ldr	r2, [r2, #4]
 800e9a6:	3a01      	subs	r2, #1
 800e9a8:	0112      	lsls	r2, r2, #4
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	492d      	ldr	r1, [pc, #180]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	614b      	str	r3, [r1, #20]
 800e9b2:	e02d      	b.n	800ea10 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d115      	bne.n	800e9e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e9bc:	695a      	ldr	r2, [r3, #20]
 800e9be:	4b2b      	ldr	r3, [pc, #172]	; (800ea6c <RCCEx_PLLSAI2_Config+0x1e0>)
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	6892      	ldr	r2, [r2, #8]
 800e9c6:	0211      	lsls	r1, r2, #8
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6912      	ldr	r2, [r2, #16]
 800e9cc:	0852      	lsrs	r2, r2, #1
 800e9ce:	3a01      	subs	r2, #1
 800e9d0:	0552      	lsls	r2, r2, #21
 800e9d2:	4311      	orrs	r1, r2
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	6852      	ldr	r2, [r2, #4]
 800e9d8:	3a01      	subs	r2, #1
 800e9da:	0112      	lsls	r2, r2, #4
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	4921      	ldr	r1, [pc, #132]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	614b      	str	r3, [r1, #20]
 800e9e4:	e014      	b.n	800ea10 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e9e8:	695a      	ldr	r2, [r3, #20]
 800e9ea:	4b21      	ldr	r3, [pc, #132]	; (800ea70 <RCCEx_PLLSAI2_Config+0x1e4>)
 800e9ec:	4013      	ands	r3, r2
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	6892      	ldr	r2, [r2, #8]
 800e9f2:	0211      	lsls	r1, r2, #8
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	6952      	ldr	r2, [r2, #20]
 800e9f8:	0852      	lsrs	r2, r2, #1
 800e9fa:	3a01      	subs	r2, #1
 800e9fc:	0652      	lsls	r2, r2, #25
 800e9fe:	4311      	orrs	r1, r2
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	6852      	ldr	r2, [r2, #4]
 800ea04:	3a01      	subs	r2, #1
 800ea06:	0112      	lsls	r2, r2, #4
 800ea08:	430a      	orrs	r2, r1
 800ea0a:	4916      	ldr	r1, [pc, #88]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ea10:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a13      	ldr	r2, [pc, #76]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea1c:	f7f9 fa66 	bl	8007eec <HAL_GetTick>
 800ea20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ea22:	e009      	b.n	800ea38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ea24:	f7f9 fa62 	bl	8007eec <HAL_GetTick>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d902      	bls.n	800ea38 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	73fb      	strb	r3, [r7, #15]
          break;
 800ea36:	e005      	b.n	800ea44 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ea38:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0ef      	beq.n	800ea24 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ea4a:	4b06      	ldr	r3, [pc, #24]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea4c:	695a      	ldr	r2, [r3, #20]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	4904      	ldr	r1, [pc, #16]	; (800ea64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea54:	4313      	orrs	r3, r2
 800ea56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	40021000 	.word	0x40021000
 800ea68:	07ff800f 	.word	0x07ff800f
 800ea6c:	ff9f800f 	.word	0xff9f800f
 800ea70:	f9ff800f 	.word	0xf9ff800f

0800ea74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08a      	sub	sp, #40	; 0x28
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	e075      	b.n	800eb72 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d105      	bne.n	800ea9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 f8f7 	bl	800ec8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2203      	movs	r2, #3
 800eaa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 f868 	bl	800eb7c <HAL_SD_InitCard>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e05d      	b.n	800eb72 <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800eab6:	f107 0308 	add.w	r3, r7, #8
 800eaba:	4619      	mov	r1, r3
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fda3 	bl	800f608 <HAL_SD_GetCardStatus>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e052      	b.n	800eb72 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800eacc:	7e3b      	ldrb	r3, [r7, #24]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ead2:	7e7b      	ldrb	r3, [r7, #25]
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d10a      	bne.n	800eaf6 <HAL_SD_Init+0x82>
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d102      	bne.n	800eaec <HAL_SD_Init+0x78>
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eaf2:	65da      	str	r2, [r3, #92]	; 0x5c
 800eaf4:	e00b      	b.n	800eb0e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d104      	bne.n	800eb08 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb04:	65da      	str	r2, [r3, #92]	; 0x5c
 800eb06:	e002      	b.n	800eb0e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	4619      	mov	r1, r3
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 fe59 	bl	800f7cc <HAL_SD_ConfigWideBusOperation>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e026      	b.n	800eb72 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800eb24:	f7f9 f9e2 	bl	8007eec <HAL_GetTick>
 800eb28:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800eb2a:	e011      	b.n	800eb50 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800eb2c:	f7f9 f9de 	bl	8007eec <HAL_GetTick>
 800eb30:	4602      	mov	r2, r0
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb3a:	d109      	bne.n	800eb50 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	e010      	b.n	800eb72 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fee5 	bl	800f920 <HAL_SD_GetCardState>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	d1e7      	bne.n	800eb2c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3728      	adds	r7, #40	; 0x28
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800eb7c:	b5b0      	push	{r4, r5, r7, lr}
 800eb7e:	b08e      	sub	sp, #56	; 0x38
 800eb80:	af04      	add	r7, sp, #16
 800eb82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800eb84:	2300      	movs	r3, #0
 800eb86:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800eb94:	238a      	movs	r3, #138	; 0x8a
 800eb96:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d107      	bne.n	800ebb0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f042 0210 	orr.w	r2, r2, #16
 800ebae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681d      	ldr	r5, [r3, #0]
 800ebb4:	466c      	mov	r4, sp
 800ebb6:	f107 0314 	add.w	r3, r7, #20
 800ebba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ebc2:	f107 0308 	add.w	r3, r7, #8
 800ebc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f002 fe23 	bl	8011814 <SDMMC_Init>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ebd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e04f      	b.n	800ec80 <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f002 fe5d 	bl	80118a4 <SDMMC_PowerState_ON>
 800ebea:	4603      	mov	r3, r0
 800ebec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ebf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e041      	b.n	800ec80 <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 ff6d 	bl	800fadc <SD_PowerON>
 800ec02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00b      	beq.n	800ec22 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	431a      	orrs	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e02e      	b.n	800ec80 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fe9c 	bl	800f960 <SD_InitCard>
 800ec28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00b      	beq.n	800ec48 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	431a      	orrs	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e01b      	b.n	800ec80 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec50:	4618      	mov	r0, r3
 800ec52:	f002 febd 	bl	80119d0 <SDMMC_CmdBlockLength>
 800ec56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00f      	beq.n	800ec7e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a09      	ldr	r2, [pc, #36]	; (800ec88 <HAL_SD_InitCard+0x10c>)
 800ec64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3728      	adds	r7, #40	; 0x28
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bdb0      	pop	{r4, r5, r7, pc}
 800ec88:	1fe00fff 	.word	0x1fe00fff

0800ec8c <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08c      	sub	sp, #48	; 0x30
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
 800ecac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d107      	bne.n	800ecc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e08d      	b.n	800ede4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	f040 8086 	bne.w	800ede2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ecdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	441a      	add	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d907      	bls.n	800ecfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e074      	b.n	800ede4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2203      	movs	r2, #3
 800ecfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2200      	movs	r2, #0
 800ed08:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	025a      	lsls	r2, r3, #9
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d002      	beq.n	800ed26 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	025b      	lsls	r3, r3, #9
 800ed24:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ed26:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	025b      	lsls	r3, r3, #9
 800ed30:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ed32:	2390      	movs	r3, #144	; 0x90
 800ed34:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ed36:	2302      	movs	r3, #2
 800ed38:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f107 0210 	add.w	r2, r7, #16
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f002 fe13 	bl	8011978 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed60:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d90a      	bls.n	800ed8e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2282      	movs	r2, #130	; 0x82
 800ed7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed84:	4618      	mov	r0, r3
 800ed86:	f002 fe69 	bl	8011a5c <SDMMC_CmdReadMultiBlock>
 800ed8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed8c:	e009      	b.n	800eda2 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2281      	movs	r2, #129	; 0x81
 800ed92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f002 fe3b 	bl	8011a16 <SDMMC_CmdReadSingleBlock>
 800eda0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d012      	beq.n	800edce <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a0f      	ldr	r2, [pc, #60]	; (800edec <HAL_SD_ReadBlocks_DMA+0x14c>)
 800edae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	431a      	orrs	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e00a      	b.n	800ede4 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800eddc:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	e000      	b.n	800ede4 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800ede2:	2302      	movs	r3, #2
  }
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3730      	adds	r7, #48	; 0x30
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	1fe00fff 	.word	0x1fe00fff

0800edf0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08c      	sub	sp, #48	; 0x30
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d107      	bne.n	800ee18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e08d      	b.n	800ef34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	f040 8086 	bne.w	800ef32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ee2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	441a      	add	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d907      	bls.n	800ee4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e074      	b.n	800ef34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2200      	movs	r2, #0
 800ee58:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	025a      	lsls	r2, r3, #9
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d002      	beq.n	800ee76 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	025b      	lsls	r3, r3, #9
 800ee74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee76:	f04f 33ff 	mov.w	r3, #4294967295
 800ee7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	025b      	lsls	r3, r3, #9
 800ee80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ee82:	2390      	movs	r3, #144	; 0x90
 800ee84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ee86:	2300      	movs	r3, #0
 800ee88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f107 0210 	add.w	r2, r7, #16
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f002 fd6b 	bl	8011978 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	68da      	ldr	r2, [r3, #12]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eeb0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2201      	movs	r2, #1
 800eec0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d90a      	bls.n	800eede <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	22a0      	movs	r2, #160	; 0xa0
 800eecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eed4:	4618      	mov	r0, r3
 800eed6:	f002 fe07 	bl	8011ae8 <SDMMC_CmdWriteMultiBlock>
 800eeda:	62f8      	str	r0, [r7, #44]	; 0x2c
 800eedc:	e009      	b.n	800eef2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2290      	movs	r2, #144	; 0x90
 800eee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eeea:	4618      	mov	r0, r3
 800eeec:	f002 fdd9 	bl	8011aa2 <SDMMC_CmdWriteSingleBlock>
 800eef0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d012      	beq.n	800ef1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a0f      	ldr	r2, [pc, #60]	; (800ef3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800eefe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	431a      	orrs	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e00a      	b.n	800ef34 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ef2c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e000      	b.n	800ef34 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800ef32:	2302      	movs	r3, #2
  }
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3730      	adds	r7, #48	; 0x30
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	1fe00fff 	.word	0x1fe00fff

0800ef40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d008      	beq.n	800ef6e <HAL_SD_IRQHandler+0x2e>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f003 0308 	and.w	r3, r3, #8
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f001 f928 	bl	80101bc <SD_Read_IT>
 800ef6c:	e199      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 80ae 	beq.w	800f0da <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	6812      	ldr	r2, [r2, #0]
 800ef92:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ef96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ef9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800efaa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68da      	ldr	r2, [r3, #12]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efba:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f003 0308 	and.w	r3, r3, #8
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d038      	beq.n	800f038 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f003 0302 	and.w	r3, r3, #2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d104      	bne.n	800efda <HAL_SD_IRQHandler+0x9a>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f003 0320 	and.w	r3, r3, #32
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d011      	beq.n	800effe <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4618      	mov	r0, r3
 800efe0:	f002 fda6 	bl	8011b30 <SDMMC_CmdStopTransfer>
 800efe4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d008      	beq.n	800effe <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	431a      	orrs	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f957 	bl	800f2ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4aa0      	ldr	r2, [pc, #640]	; (800f284 <HAL_SD_IRQHandler+0x344>)
 800f004:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d104      	bne.n	800f028 <HAL_SD_IRQHandler+0xe8>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f003 0302 	and.w	r3, r3, #2
 800f024:	2b00      	cmp	r3, #0
 800f026:	d003      	beq.n	800f030 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7f8 fee9 	bl	8007e00 <HAL_SD_RxCpltCallback>
 800f02e:	e138      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7f8 fedb 	bl	8007dec <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800f036:	e134      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f000 812f 	beq.w	800f2a2 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2200      	movs	r2, #0
 800f04a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2200      	movs	r2, #0
 800f052:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2200      	movs	r2, #0
 800f05a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d104      	bne.n	800f070 <HAL_SD_IRQHandler+0x130>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f003 0320 	and.w	r3, r3, #32
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d011      	beq.n	800f094 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4618      	mov	r0, r3
 800f076:	f002 fd5b 	bl	8011b30 <SDMMC_CmdStopTransfer>
 800f07a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d008      	beq.n	800f094 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	431a      	orrs	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f90c 	bl	800f2ac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f003 0310 	and.w	r3, r3, #16
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d104      	bne.n	800f0b6 <HAL_SD_IRQHandler+0x176>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f003 0320 	and.w	r3, r3, #32
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d002      	beq.n	800f0bc <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7f8 fe98 	bl	8007dec <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d105      	bne.n	800f0d2 <HAL_SD_IRQHandler+0x192>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f003 0302 	and.w	r3, r3, #2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f000 80e8 	beq.w	800f2a2 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7f8 fe94 	bl	8007e00 <HAL_SD_RxCpltCallback>
}
 800f0d8:	e0e3      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d008      	beq.n	800f0fa <HAL_SD_IRQHandler+0x1ba>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f003 0308 	and.w	r3, r3, #8
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d003      	beq.n	800f0fa <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f001 f8b3 	bl	801025e <SD_Write_IT>
 800f0f8:	e0d3      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f100:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800f104:	2b00      	cmp	r3, #0
 800f106:	f000 809d 	beq.w	800f244 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f110:	f003 0302 	and.w	r3, r3, #2
 800f114:	2b00      	cmp	r3, #0
 800f116:	d005      	beq.n	800f124 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11c:	f043 0202 	orr.w	r2, r3, #2
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f12a:	f003 0308 	and.w	r3, r3, #8
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d005      	beq.n	800f13e <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f136:	f043 0208 	orr.w	r2, r3, #8
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f144:	f003 0320 	and.w	r3, r3, #32
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f150:	f043 0220 	orr.w	r2, r3, #32
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f15e:	f003 0310 	and.w	r3, r3, #16
 800f162:	2b00      	cmp	r3, #0
 800f164:	d005      	beq.n	800f172 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f16a:	f043 0210 	orr.w	r2, r3, #16
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a43      	ldr	r2, [pc, #268]	; (800f284 <HAL_SD_IRQHandler+0x344>)
 800f178:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f188:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68da      	ldr	r2, [r3, #12]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f198:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68da      	ldr	r2, [r3, #12]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f1b8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f002 fcb6 	bl	8011b30 <SDMMC_CmdStopTransfer>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1de:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1e8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f003 0308 	and.w	r3, r3, #8
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00a      	beq.n	800f20a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 f852 	bl	800f2ac <HAL_SD_ErrorCallback>
}
 800f208:	e04b      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f210:	2b00      	cmp	r3, #0
 800f212:	d046      	beq.n	800f2a2 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d042      	beq.n	800f2a2 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f22a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2200      	movs	r2, #0
 800f232:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f835 	bl	800f2ac <HAL_SD_ErrorCallback>
}
 800f242:	e02e      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d027      	beq.n	800f2a2 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f25a:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f262:	f003 0304 	and.w	r3, r3, #4
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10e      	bne.n	800f288 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f003 0320 	and.w	r3, r3, #32
 800f270:	2b00      	cmp	r3, #0
 800f272:	d003      	beq.n	800f27c <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 f870 	bl	801035a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800f27a:	e012      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 f858 	bl	8010332 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800f282:	e00e      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
 800f284:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f003 0320 	and.w	r3, r3, #32
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d003      	beq.n	800f29a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 f857 	bl	8010346 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800f298:	e003      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f001 f83f 	bl	801031e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800f2a0:	e7ff      	b.n	800f2a2 <HAL_SD_IRQHandler+0x362>
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop

0800f2ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2ce:	0f9b      	lsrs	r3, r3, #30
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2da:	0e9b      	lsrs	r3, r3, #26
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	f003 030f 	and.w	r3, r3, #15
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2ec:	0e1b      	lsrs	r3, r3, #24
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	f003 0303 	and.w	r3, r3, #3
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2fe:	0c1b      	lsrs	r3, r3, #16
 800f300:	b2da      	uxtb	r2, r3
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f30a:	0a1b      	lsrs	r3, r3, #8
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f316:	b2da      	uxtb	r2, r3
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f320:	0d1b      	lsrs	r3, r3, #20
 800f322:	b29a      	uxth	r2, r3
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f32c:	0c1b      	lsrs	r3, r3, #16
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	f003 030f 	and.w	r3, r3, #15
 800f334:	b2da      	uxtb	r2, r3
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f33e:	0bdb      	lsrs	r3, r3, #15
 800f340:	b2db      	uxtb	r3, r3
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f350:	0b9b      	lsrs	r3, r3, #14
 800f352:	b2db      	uxtb	r3, r3
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f362:	0b5b      	lsrs	r3, r3, #13
 800f364:	b2db      	uxtb	r3, r3
 800f366:	f003 0301 	and.w	r3, r3, #1
 800f36a:	b2da      	uxtb	r2, r3
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f374:	0b1b      	lsrs	r3, r3, #12
 800f376:	b2db      	uxtb	r3, r3
 800f378:	f003 0301 	and.w	r3, r3, #1
 800f37c:	b2da      	uxtb	r2, r3
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2200      	movs	r2, #0
 800f386:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d163      	bne.n	800f458 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f394:	009a      	lsls	r2, r3, #2
 800f396:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f39a:	4013      	ands	r3, r2
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f3a0:	0f92      	lsrs	r2, r2, #30
 800f3a2:	431a      	orrs	r2, r3
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3ac:	0edb      	lsrs	r3, r3, #27
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 0307 	and.w	r3, r3, #7
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3be:	0e1b      	lsrs	r3, r3, #24
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	f003 0307 	and.w	r3, r3, #7
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3d0:	0d5b      	lsrs	r3, r3, #21
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	f003 0307 	and.w	r3, r3, #7
 800f3d8:	b2da      	uxtb	r2, r3
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3e2:	0c9b      	lsrs	r3, r3, #18
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	f003 0307 	and.w	r3, r3, #7
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3f4:	0bdb      	lsrs	r3, r3, #15
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f003 0307 	and.w	r3, r3, #7
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	1c5a      	adds	r2, r3, #1
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	7e1b      	ldrb	r3, [r3, #24]
 800f410:	b2db      	uxtb	r3, r3
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	3302      	adds	r3, #2
 800f418:	2201      	movs	r2, #1
 800f41a:	fa02 f303 	lsl.w	r3, r2, r3
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f422:	fb02 f203 	mul.w	r2, r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	7a1b      	ldrb	r3, [r3, #8]
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	2201      	movs	r2, #1
 800f436:	409a      	lsls	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f444:	0a52      	lsrs	r2, r2, #9
 800f446:	fb02 f203 	mul.w	r2, r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f454:	659a      	str	r2, [r3, #88]	; 0x58
 800f456:	e031      	b.n	800f4bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d11d      	bne.n	800f49c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f464:	041b      	lsls	r3, r3, #16
 800f466:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f46e:	0c1b      	lsrs	r3, r3, #16
 800f470:	431a      	orrs	r2, r3
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	3301      	adds	r3, #1
 800f47c:	029a      	lsls	r2, r3, #10
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f490:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	659a      	str	r2, [r3, #88]	; 0x58
 800f49a:	e00f      	b.n	800f4bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a58      	ldr	r2, [pc, #352]	; (800f604 <HAL_SD_GetCardCSD+0x344>)
 800f4a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e09d      	b.n	800f5f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4c0:	0b9b      	lsrs	r3, r3, #14
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4d2:	09db      	lsrs	r3, r3, #7
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f4:	0fdb      	lsrs	r3, r3, #31
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f500:	0f5b      	lsrs	r3, r3, #29
 800f502:	b2db      	uxtb	r3, r3
 800f504:	f003 0303 	and.w	r3, r3, #3
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f512:	0e9b      	lsrs	r3, r3, #26
 800f514:	b2db      	uxtb	r3, r3
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	b2da      	uxtb	r2, r3
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f524:	0d9b      	lsrs	r3, r3, #22
 800f526:	b2db      	uxtb	r3, r3
 800f528:	f003 030f 	and.w	r3, r3, #15
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f536:	0d5b      	lsrs	r3, r3, #21
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	f003 0301 	and.w	r3, r3, #1
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f552:	0c1b      	lsrs	r3, r3, #16
 800f554:	b2db      	uxtb	r3, r3
 800f556:	f003 0301 	and.w	r3, r3, #1
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f566:	0bdb      	lsrs	r3, r3, #15
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f57a:	0b9b      	lsrs	r3, r3, #14
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	f003 0301 	and.w	r3, r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f58e:	0b5b      	lsrs	r3, r3, #13
 800f590:	b2db      	uxtb	r3, r3
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	b2da      	uxtb	r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a2:	0b1b      	lsrs	r3, r3, #12
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	f003 0301 	and.w	r3, r3, #1
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5b6:	0a9b      	lsrs	r3, r3, #10
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	f003 0303 	and.w	r3, r3, #3
 800f5be:	b2da      	uxtb	r2, r3
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ca:	0a1b      	lsrs	r3, r3, #8
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	f003 0303 	and.w	r3, r3, #3
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5de:	085b      	lsrs	r3, r3, #1
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	1fe00fff 	.word	0x1fe00fff

0800f608 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b094      	sub	sp, #80	; 0x50
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800f618:	f107 0308 	add.w	r3, r7, #8
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fb6e 	bl	800fd00 <SD_SendSDStatus>
 800f624:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800f626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d011      	beq.n	800f650 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a4f      	ldr	r2, [pc, #316]	; (800f770 <HAL_SD_GetCardStatus+0x168>)
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f63a:	431a      	orrs	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2201      	movs	r2, #1
 800f644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f648:	2301      	movs	r3, #1
 800f64a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f64e:	e070      	b.n	800f732 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	099b      	lsrs	r3, r3, #6
 800f654:	b2db      	uxtb	r3, r3
 800f656:	f003 0303 	and.w	r3, r3, #3
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	095b      	lsrs	r3, r3, #5
 800f664:	b2db      	uxtb	r3, r3
 800f666:	f003 0301 	and.w	r3, r3, #1
 800f66a:	b2da      	uxtb	r2, r3
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	0a1b      	lsrs	r3, r3, #8
 800f674:	b29b      	uxth	r3, r3
 800f676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	0e1b      	lsrs	r3, r3, #24
 800f680:	b29b      	uxth	r3, r3
 800f682:	4313      	orrs	r3, r2
 800f684:	b29a      	uxth	r2, r3
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	061a      	lsls	r2, r3, #24
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	021b      	lsls	r3, r3, #8
 800f692:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f696:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	0a1b      	lsrs	r3, r3, #8
 800f69c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f6a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	0e1b      	lsrs	r3, r3, #24
 800f6a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	0a1b      	lsrs	r3, r3, #8
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	0d1b      	lsrs	r3, r3, #20
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	f003 030f 	and.w	r3, r3, #15
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	0c1b      	lsrs	r3, r3, #16
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	0a9b      	lsrs	r3, r3, #10
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	0a1b      	lsrs	r3, r3, #8
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 0303 	and.w	r3, r3, #3
 800f704:	b2da      	uxtb	r2, r3
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	091b      	lsrs	r3, r3, #4
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	f003 030f 	and.w	r3, r3, #15
 800f714:	b2da      	uxtb	r2, r3
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	f003 030f 	and.w	r3, r3, #15
 800f722:	b2da      	uxtb	r2, r3
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	0e1b      	lsrs	r3, r3, #24
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f73a:	4618      	mov	r0, r3
 800f73c:	f002 f948 	bl	80119d0 <SDMMC_CmdBlockLength>
 800f740:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800f742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00d      	beq.n	800f764 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a08      	ldr	r2, [pc, #32]	; (800f770 <HAL_SD_GetCardStatus+0x168>)
 800f74e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f754:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800f764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3750      	adds	r7, #80	; 0x50
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	1fe00fff 	.word	0x1fe00fff

0800f774 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f7be:	2300      	movs	r3, #0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f7cc:	b5b0      	push	{r4, r5, r7, lr}
 800f7ce:	b08e      	sub	sp, #56	; 0x38
 800f7d0:	af04      	add	r7, sp, #16
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2203      	movs	r2, #3
 800f7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d02e      	beq.n	800f84a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7f2:	d106      	bne.n	800f802 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	639a      	str	r2, [r3, #56]	; 0x38
 800f800:	e029      	b.n	800f856 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f808:	d10a      	bne.n	800f820 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fb70 	bl	800fef0 <SD_WideBus_Enable>
 800f810:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	431a      	orrs	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	639a      	str	r2, [r3, #56]	; 0x38
 800f81e:	e01a      	b.n	800f856 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10a      	bne.n	800f83c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fbad 	bl	800ff86 <SD_WideBus_Disable>
 800f82c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	431a      	orrs	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	639a      	str	r2, [r3, #56]	; 0x38
 800f83a:	e00c      	b.n	800f856 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f840:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	639a      	str	r2, [r3, #56]	; 0x38
 800f848:	e005      	b.n	800f856 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d007      	beq.n	800f86e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a2e      	ldr	r2, [pc, #184]	; (800f91c <HAL_SD_ConfigWideBusOperation+0x150>)
 800f864:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f866:	2301      	movs	r3, #1
 800f868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f86c:	e034      	b.n	800f8d8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	695b      	ldr	r3, [r3, #20]
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d903      	bls.n	800f894 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	695b      	ldr	r3, [r3, #20]
 800f890:	61bb      	str	r3, [r7, #24]
 800f892:	e012      	b.n	800f8ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f89c:	d103      	bne.n	800f8a6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	695b      	ldr	r3, [r3, #20]
 800f8a2:	61bb      	str	r3, [r7, #24]
 800f8a4:	e009      	b.n	800f8ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8ae:	d102      	bne.n	800f8b6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	61bb      	str	r3, [r7, #24]
 800f8b4:	e001      	b.n	800f8ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681d      	ldr	r5, [r3, #0]
 800f8be:	466c      	mov	r4, sp
 800f8c0:	f107 0314 	add.w	r3, r7, #20
 800f8c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f8cc:	f107 0308 	add.w	r3, r7, #8
 800f8d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f001 ff9e 	bl	8011814 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f002 f875 	bl	80119d0 <SDMMC_CmdBlockLength>
 800f8e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a0a      	ldr	r2, [pc, #40]	; (800f91c <HAL_SD_ConfigWideBusOperation+0x150>)
 800f8f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	431a      	orrs	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f902:	2301      	movs	r3, #1
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800f910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f914:	4618      	mov	r0, r3
 800f916:	3728      	adds	r7, #40	; 0x28
 800f918:	46bd      	mov	sp, r7
 800f91a:	bdb0      	pop	{r4, r5, r7, pc}
 800f91c:	1fe00fff 	.word	0x1fe00fff

0800f920 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f92c:	f107 030c 	add.w	r3, r7, #12
 800f930:	4619      	mov	r1, r3
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 fab4 	bl	800fea0 <SD_SendStatus>
 800f938:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	431a      	orrs	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	0a5b      	lsrs	r3, r3, #9
 800f950:	f003 030f 	and.w	r3, r3, #15
 800f954:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f956:	693b      	ldr	r3, [r7, #16]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b090      	sub	sp, #64	; 0x40
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f968:	2301      	movs	r3, #1
 800f96a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4618      	mov	r0, r3
 800f972:	f001 ffa9 	bl	80118c8 <SDMMC_GetPowerState>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d102      	bne.n	800f982 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f97c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f980:	e0a7      	b.n	800fad2 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f986:	2b03      	cmp	r3, #3
 800f988:	d02e      	beq.n	800f9e8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4618      	mov	r0, r3
 800f990:	f002 f9ee 	bl	8011d70 <SDMMC_CmdSendCID>
 800f994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d001      	beq.n	800f9a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800f99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99e:	e098      	b.n	800fad2 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f001 ffd3 	bl	8011952 <SDMMC_GetResponse>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2104      	movs	r1, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f001 ffca 	bl	8011952 <SDMMC_GetResponse>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2108      	movs	r1, #8
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f001 ffc1 	bl	8011952 <SDMMC_GetResponse>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	210c      	movs	r1, #12
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f001 ffb8 	bl	8011952 <SDMMC_GetResponse>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ec:	2b03      	cmp	r3, #3
 800f9ee:	d00d      	beq.n	800fa0c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f107 020e 	add.w	r2, r7, #14
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f002 f9f7 	bl	8011dee <SDMMC_CmdSetRelAdd>
 800fa00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <SD_InitCard+0xac>
    {
      return errorstate;
 800fa08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0a:	e062      	b.n	800fad2 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa10:	2b03      	cmp	r3, #3
 800fa12:	d036      	beq.n	800fa82 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fa14:	89fb      	ldrh	r3, [r7, #14]
 800fa16:	461a      	mov	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa24:	041b      	lsls	r3, r3, #16
 800fa26:	4619      	mov	r1, r3
 800fa28:	4610      	mov	r0, r2
 800fa2a:	f002 f9c0 	bl	8011dae <SDMMC_CmdSendCSD>
 800fa2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <SD_InitCard+0xda>
    {
      return errorstate;
 800fa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa38:	e04b      	b.n	800fad2 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2100      	movs	r1, #0
 800fa40:	4618      	mov	r0, r3
 800fa42:	f001 ff86 	bl	8011952 <SDMMC_GetResponse>
 800fa46:	4602      	mov	r2, r0
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2104      	movs	r1, #4
 800fa52:	4618      	mov	r0, r3
 800fa54:	f001 ff7d 	bl	8011952 <SDMMC_GetResponse>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2108      	movs	r1, #8
 800fa64:	4618      	mov	r0, r3
 800fa66:	f001 ff74 	bl	8011952 <SDMMC_GetResponse>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	210c      	movs	r1, #12
 800fa76:	4618      	mov	r0, r3
 800fa78:	f001 ff6b 	bl	8011952 <SDMMC_GetResponse>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2104      	movs	r1, #4
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f001 ff62 	bl	8011952 <SDMMC_GetResponse>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	0d1a      	lsrs	r2, r3, #20
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fa96:	f107 0310 	add.w	r3, r7, #16
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff fc0f 	bl	800f2c0 <HAL_SD_GetCardCSD>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800faa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800faac:	e011      	b.n	800fad2 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6819      	ldr	r1, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fab6:	041b      	lsls	r3, r3, #16
 800fab8:	461a      	mov	r2, r3
 800faba:	f04f 0300 	mov.w	r3, #0
 800fabe:	4608      	mov	r0, r1
 800fac0:	f002 f86c 	bl	8011b9c <SDMMC_CmdSelDesel>
 800fac4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800fac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <SD_InitCard+0x170>
  {
    return errorstate;
 800facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800face:	e000      	b.n	800fad2 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3740      	adds	r7, #64	; 0x40
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b088      	sub	sp, #32
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fae4:	2300      	movs	r3, #0
 800fae6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800fae8:	2300      	movs	r3, #0
 800faea:	61fb      	str	r3, [r7, #28]
 800faec:	2300      	movs	r3, #0
 800faee:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800faf0:	f7f8 f9fc 	bl	8007eec <HAL_GetTick>
 800faf4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f002 f872 	bl	8011be4 <SDMMC_CmdGoIdleState>
 800fb00:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <SD_PowerON+0x30>
  {
    return errorstate;
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	e0f2      	b.n	800fcf2 <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f002 f885 	bl	8011c20 <SDMMC_CmdOperCond>
 800fb16:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00d      	beq.n	800fb3a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f002 f85b 	bl	8011be4 <SDMMC_CmdGoIdleState>
 800fb2e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <SD_PowerON+0x64>
    {
      return errorstate;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	e0db      	b.n	800fcf2 <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d137      	bne.n	800fbb8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f002 f886 	bl	8011c60 <SDMMC_CmdAppCommand>
 800fb54:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02d      	beq.n	800fbb8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fb60:	e0c7      	b.n	800fcf2 <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2100      	movs	r1, #0
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f002 f879 	bl	8011c60 <SDMMC_CmdAppCommand>
 800fb6e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <SD_PowerON+0x9e>
    {
      return errorstate;
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	e0bb      	b.n	800fcf2 <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	495f      	ldr	r1, [pc, #380]	; (800fcfc <SD_PowerON+0x220>)
 800fb80:	4618      	mov	r0, r3
 800fb82:	f002 f890 	bl	8011ca6 <SDMMC_CmdAppOperCommand>
 800fb86:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d002      	beq.n	800fb94 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fb92:	e0ae      	b.n	800fcf2 <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2100      	movs	r1, #0
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f001 fed9 	bl	8011952 <SDMMC_GetResponse>
 800fba0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	0fdb      	lsrs	r3, r3, #31
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d101      	bne.n	800fbae <SD_PowerON+0xd2>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e000      	b.n	800fbb0 <SD_PowerON+0xd4>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	61bb      	str	r3, [r7, #24]

    count++;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d802      	bhi.n	800fbc8 <SD_PowerON+0xec>
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d0cc      	beq.n	800fb62 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d902      	bls.n	800fbd8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800fbd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fbd6:	e08c      	b.n	800fcf2 <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 8083 	beq.w	800fcea <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d17e      	bne.n	800fcf0 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d079      	beq.n	800fcf0 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc02:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f042 0208 	orr.w	r2, r2, #8
 800fc12:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f002 f94f 	bl	8011ebc <SDMMC_CmdVoltageSwitch>
 800fc1e:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00c      	beq.n	800fc40 <SD_PowerON+0x164>
        {
          return errorstate;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	e063      	b.n	800fcf2 <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fc2a:	f7f8 f95f 	bl	8007eec <HAL_GetTick>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc38:	d102      	bne.n	800fc40 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800fc3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc3e:	e058      	b.n	800fcf2 <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fc4e:	d1ec      	bne.n	800fc2a <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fc58:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc68:	d002      	beq.n	800fc70 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800fc6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fc6e:	e040      	b.n	800fcf2 <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800fc70:	2001      	movs	r0, #1
 800fc72:	f000 fb49 	bl	8010308 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f042 0204 	orr.w	r2, r2, #4
 800fc84:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800fc86:	e00a      	b.n	800fc9e <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fc88:	f7f8 f930 	bl	8007eec <HAL_GetTick>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc96:	d102      	bne.n	800fc9e <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800fc98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc9c:	e029      	b.n	800fcf2 <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fcac:	d1ec      	bne.n	800fc88 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fcb6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fcc6:	d102      	bne.n	800fcce <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800fcc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fccc:	e011      	b.n	800fcf2 <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2213      	movs	r2, #19
 800fcd4:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f04f 32ff 	mov.w	r2, #4294967295
 800fcde:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fce6:	65da      	str	r2, [r3, #92]	; 0x5c
 800fce8:	e002      	b.n	800fcf0 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3720      	adds	r7, #32
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	c1100000 	.word	0xc1100000

0800fd00 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08c      	sub	sp, #48	; 0x30
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fd0a:	f7f8 f8ef 	bl	8007eec <HAL_GetTick>
 800fd0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f001 fe19 	bl	8011952 <SDMMC_GetResponse>
 800fd20:	4603      	mov	r3, r0
 800fd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd2a:	d102      	bne.n	800fd32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fd2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd30:	e0b0      	b.n	800fe94 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2140      	movs	r1, #64	; 0x40
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f001 fe49 	bl	80119d0 <SDMMC_CmdBlockLength>
 800fd3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d005      	beq.n	800fd52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800fd4e:	6a3b      	ldr	r3, [r7, #32]
 800fd50:	e0a0      	b.n	800fe94 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd5a:	041b      	lsls	r3, r3, #16
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4610      	mov	r0, r2
 800fd60:	f001 ff7e 	bl	8011c60 <SDMMC_CmdAppCommand>
 800fd64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d005      	beq.n	800fd78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	e08d      	b.n	800fe94 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fd78:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800fd7e:	2340      	movs	r3, #64	; 0x40
 800fd80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800fd82:	2360      	movs	r3, #96	; 0x60
 800fd84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd86:	2302      	movs	r3, #2
 800fd88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f107 0208 	add.w	r2, r7, #8
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f001 fdeb 	bl	8011978 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f002 f866 	bl	8011e78 <SDMMC_CmdStatusRegister>
 800fdac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d02b      	beq.n	800fe0c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	e069      	b.n	800fe94 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d013      	beq.n	800fdf6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800fdce:	2300      	movs	r3, #0
 800fdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdd2:	e00d      	b.n	800fdf0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f001 fd45 	bl	8011868 <SDMMC_ReadFIFO>
 800fdde:	4602      	mov	r2, r0
 800fde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde2:	601a      	str	r2, [r3, #0]
        pData++;
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	3304      	adds	r3, #4
 800fde8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	3301      	adds	r3, #1
 800fdee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf2:	2b07      	cmp	r3, #7
 800fdf4:	d9ee      	bls.n	800fdd4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fdf6:	f7f8 f879 	bl	8007eec <HAL_GetTick>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe04:	d102      	bne.n	800fe0c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fe06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe0a:	e043      	b.n	800fe94 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe12:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0d2      	beq.n	800fdc0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe20:	f003 0308 	and.w	r3, r3, #8
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fe28:	2308      	movs	r3, #8
 800fe2a:	e033      	b.n	800fe94 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe32:	f003 0302 	and.w	r3, r3, #2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fe3a:	2302      	movs	r3, #2
 800fe3c:	e02a      	b.n	800fe94 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe44:	f003 0320 	and.w	r3, r3, #32
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d017      	beq.n	800fe7c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800fe4c:	2320      	movs	r3, #32
 800fe4e:	e021      	b.n	800fe94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4618      	mov	r0, r3
 800fe56:	f001 fd07 	bl	8011868 <SDMMC_ReadFIFO>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	601a      	str	r2, [r3, #0]
    pData++;
 800fe60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe62:	3304      	adds	r3, #4
 800fe64:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fe66:	f7f8 f841 	bl	8007eec <HAL_GetTick>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe74:	d102      	bne.n	800fe7c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fe76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe7a:	e00b      	b.n	800fe94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d1e2      	bne.n	800fe50 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a03      	ldr	r2, [pc, #12]	; (800fe9c <SD_SendSDStatus+0x19c>)
 800fe90:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3730      	adds	r7, #48	; 0x30
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	18000f3a 	.word	0x18000f3a

0800fea0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d102      	bne.n	800feb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800feb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800feb4:	e018      	b.n	800fee8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800febe:	041b      	lsls	r3, r3, #16
 800fec0:	4619      	mov	r1, r3
 800fec2:	4610      	mov	r0, r2
 800fec4:	f001 ffb5 	bl	8011e32 <SDMMC_CmdSendStatus>
 800fec8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	e009      	b.n	800fee8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2100      	movs	r1, #0
 800feda:	4618      	mov	r0, r3
 800fedc:	f001 fd39 	bl	8011952 <SDMMC_GetResponse>
 800fee0:	4602      	mov	r2, r0
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3710      	adds	r7, #16
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800fef8:	2300      	movs	r3, #0
 800fefa:	60fb      	str	r3, [r7, #12]
 800fefc:	2300      	movs	r3, #0
 800fefe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2100      	movs	r1, #0
 800ff06:	4618      	mov	r0, r3
 800ff08:	f001 fd23 	bl	8011952 <SDMMC_GetResponse>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff16:	d102      	bne.n	800ff1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ff18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff1c:	e02f      	b.n	800ff7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ff1e:	f107 030c 	add.w	r3, r7, #12
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f879 	bl	801001c <SD_FindSCR>
 800ff2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	e023      	b.n	800ff7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d01c      	beq.n	800ff7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff48:	041b      	lsls	r3, r3, #16
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	f001 fe87 	bl	8011c60 <SDMMC_CmdAppCommand>
 800ff52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d001      	beq.n	800ff5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	e00f      	b.n	800ff7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2102      	movs	r1, #2
 800ff64:	4618      	mov	r0, r3
 800ff66:	f001 febe 	bl	8011ce6 <SDMMC_CmdBusWidth>
 800ff6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	e003      	b.n	800ff7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	e001      	b.n	800ff7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ff7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3718      	adds	r7, #24
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b086      	sub	sp, #24
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ff8e:	2300      	movs	r3, #0
 800ff90:	60fb      	str	r3, [r7, #12]
 800ff92:	2300      	movs	r3, #0
 800ff94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f001 fcd8 	bl	8011952 <SDMMC_GetResponse>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ffac:	d102      	bne.n	800ffb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ffae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffb2:	e02f      	b.n	8010014 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ffb4:	f107 030c 	add.w	r3, r7, #12
 800ffb8:	4619      	mov	r1, r3
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 f82e 	bl	801001c <SD_FindSCR>
 800ffc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d001      	beq.n	800ffcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	e023      	b.n	8010014 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d01c      	beq.n	8010010 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffde:	041b      	lsls	r3, r3, #16
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f001 fe3c 	bl	8011c60 <SDMMC_CmdAppCommand>
 800ffe8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	e00f      	b.n	8010014 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2100      	movs	r1, #0
 800fffa:	4618      	mov	r0, r3
 800fffc:	f001 fe73 	bl	8011ce6 <SDMMC_CmdBusWidth>
 8010000:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	e003      	b.n	8010014 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801000c:	2300      	movs	r3, #0
 801000e:	e001      	b.n	8010014 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010010:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010014:	4618      	mov	r0, r3
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b08e      	sub	sp, #56	; 0x38
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010026:	f7f7 ff61 	bl	8007eec <HAL_GetTick>
 801002a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801002c:	2300      	movs	r3, #0
 801002e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010030:	2300      	movs	r3, #0
 8010032:	60bb      	str	r3, [r7, #8]
 8010034:	2300      	movs	r3, #0
 8010036:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2108      	movs	r1, #8
 8010042:	4618      	mov	r0, r3
 8010044:	f001 fcc4 	bl	80119d0 <SDMMC_CmdBlockLength>
 8010048:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010052:	e0ad      	b.n	80101b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801005c:	041b      	lsls	r3, r3, #16
 801005e:	4619      	mov	r1, r3
 8010060:	4610      	mov	r0, r2
 8010062:	f001 fdfd 	bl	8011c60 <SDMMC_CmdAppCommand>
 8010066:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <SD_FindSCR+0x56>
  {
    return errorstate;
 801006e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010070:	e09e      	b.n	80101b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010072:	f04f 33ff 	mov.w	r3, #4294967295
 8010076:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010078:	2308      	movs	r3, #8
 801007a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801007c:	2330      	movs	r3, #48	; 0x30
 801007e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010080:	2302      	movs	r3, #2
 8010082:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010084:	2300      	movs	r3, #0
 8010086:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010088:	2301      	movs	r3, #1
 801008a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f107 0210 	add.w	r2, r7, #16
 8010094:	4611      	mov	r1, r2
 8010096:	4618      	mov	r0, r3
 8010098:	f001 fc6e 	bl	8011978 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f001 fe43 	bl	8011d2c <SDMMC_CmdSendSCR>
 80100a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80100a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d027      	beq.n	80100fe <SD_FindSCR+0xe2>
  {
    return errorstate;
 80100ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b0:	e07e      	b.n	80101b0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d113      	bne.n	80100e8 <SD_FindSCR+0xcc>
 80100c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d110      	bne.n	80100e8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f001 fbcc 	bl	8011868 <SDMMC_ReadFIFO>
 80100d0:	4603      	mov	r3, r0
 80100d2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4618      	mov	r0, r3
 80100da:	f001 fbc5 	bl	8011868 <SDMMC_ReadFIFO>
 80100de:	4603      	mov	r3, r0
 80100e0:	60fb      	str	r3, [r7, #12]
      index++;
 80100e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e4:	3301      	adds	r3, #1
 80100e6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80100e8:	f7f7 ff00 	bl	8007eec <HAL_GetTick>
 80100ec:	4602      	mov	r2, r0
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f6:	d102      	bne.n	80100fe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80100f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80100fc:	e058      	b.n	80101b0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010104:	f240 532a 	movw	r3, #1322	; 0x52a
 8010108:	4013      	ands	r3, r2
 801010a:	2b00      	cmp	r3, #0
 801010c:	d0d1      	beq.n	80100b2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b00      	cmp	r3, #0
 801011a:	d005      	beq.n	8010128 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2208      	movs	r2, #8
 8010122:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010124:	2308      	movs	r3, #8
 8010126:	e043      	b.n	80101b0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801012e:	f003 0302 	and.w	r3, r3, #2
 8010132:	2b00      	cmp	r3, #0
 8010134:	d005      	beq.n	8010142 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2202      	movs	r2, #2
 801013c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801013e:	2302      	movs	r3, #2
 8010140:	e036      	b.n	80101b0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010148:	f003 0320 	and.w	r3, r3, #32
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2220      	movs	r2, #32
 8010156:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010158:	2320      	movs	r3, #32
 801015a:	e029      	b.n	80101b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a15      	ldr	r2, [pc, #84]	; (80101b8 <SD_FindSCR+0x19c>)
 8010162:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	061a      	lsls	r2, r3, #24
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	021b      	lsls	r3, r3, #8
 801016c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010170:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	0a1b      	lsrs	r3, r3, #8
 8010176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801017a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	0e1b      	lsrs	r3, r3, #24
 8010180:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010184:	601a      	str	r2, [r3, #0]
    scr++;
 8010186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010188:	3304      	adds	r3, #4
 801018a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	061a      	lsls	r2, r3, #24
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	021b      	lsls	r3, r3, #8
 8010194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010198:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	0a1b      	lsrs	r3, r3, #8
 801019e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80101a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	0e1b      	lsrs	r3, r3, #24
 80101a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3738      	adds	r7, #56	; 0x38
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}
 80101b8:	18000f3a 	.word	0x18000f3a

080101bc <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d03f      	beq.n	8010256 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80101d6:	2300      	movs	r3, #0
 80101d8:	617b      	str	r3, [r7, #20]
 80101da:	e033      	b.n	8010244 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f001 fb41 	bl	8011868 <SDMMC_ReadFIFO>
 80101e6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	b2da      	uxtb	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	3301      	adds	r3, #1
 80101f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	0a1b      	lsrs	r3, r3, #8
 8010200:	b2da      	uxtb	r2, r3
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3301      	adds	r3, #1
 801020a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3b01      	subs	r3, #1
 8010210:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	0c1b      	lsrs	r3, r3, #16
 8010216:	b2da      	uxtb	r2, r3
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	3301      	adds	r3, #1
 8010220:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	3b01      	subs	r3, #1
 8010226:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	0e1b      	lsrs	r3, r3, #24
 801022c:	b2da      	uxtb	r2, r3
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	3301      	adds	r3, #1
 8010236:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	3b01      	subs	r3, #1
 801023c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	3301      	adds	r3, #1
 8010242:	617b      	str	r3, [r7, #20]
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	2b07      	cmp	r3, #7
 8010248:	d9c8      	bls.n	80101dc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8010256:	bf00      	nop
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b086      	sub	sp, #24
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010270:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d043      	beq.n	8010300 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010278:	2300      	movs	r3, #0
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	e037      	b.n	80102ee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	3301      	adds	r3, #1
 8010288:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	3b01      	subs	r3, #1
 801028e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	021a      	lsls	r2, r3, #8
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	4313      	orrs	r3, r2
 801029a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3301      	adds	r3, #1
 80102a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	3b01      	subs	r3, #1
 80102a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	041a      	lsls	r2, r3, #16
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	3301      	adds	r3, #1
 80102b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	3b01      	subs	r3, #1
 80102be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	061a      	lsls	r2, r3, #24
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	4313      	orrs	r3, r2
 80102ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	3301      	adds	r3, #1
 80102d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f107 0208 	add.w	r2, r7, #8
 80102e0:	4611      	mov	r1, r2
 80102e2:	4618      	mov	r0, r3
 80102e4:	f001 facd 	bl	8011882 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	3301      	adds	r3, #1
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2b07      	cmp	r3, #7
 80102f2:	d9c4      	bls.n	801027e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8010300:	bf00      	nop
 8010302:	3718      	adds	r7, #24
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	4603      	mov	r3, r0
 8010310:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8010312:	bf00      	nop
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8010326:	bf00      	nop
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8010332:	b480      	push	{r7}
 8010334:	b083      	sub	sp, #12
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 801033a:	bf00      	nop
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8010346:	b480      	push	{r7}
 8010348:	b083      	sub	sp, #12
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 801034e:	bf00      	nop
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
	...

08010370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	e0a0      	b.n	80104c4 <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	d12a      	bne.n	80103ea <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a4b      	ldr	r2, [pc, #300]	; (80104cc <HAL_SPI_Init+0x15c>)
 80103a0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4a4a      	ldr	r2, [pc, #296]	; (80104d0 <HAL_SPI_Init+0x160>)
 80103a6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a4a      	ldr	r2, [pc, #296]	; (80104d4 <HAL_SPI_Init+0x164>)
 80103ac:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a49      	ldr	r2, [pc, #292]	; (80104d8 <HAL_SPI_Init+0x168>)
 80103b2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a49      	ldr	r2, [pc, #292]	; (80104dc <HAL_SPI_Init+0x16c>)
 80103b8:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4a48      	ldr	r2, [pc, #288]	; (80104e0 <HAL_SPI_Init+0x170>)
 80103be:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a48      	ldr	r2, [pc, #288]	; (80104e4 <HAL_SPI_Init+0x174>)
 80103c4:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a47      	ldr	r2, [pc, #284]	; (80104e8 <HAL_SPI_Init+0x178>)
 80103ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d103      	bne.n	80103e0 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a44      	ldr	r2, [pc, #272]	; (80104ec <HAL_SPI_Init+0x17c>)
 80103dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2202      	movs	r2, #2
 80103ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010400:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801040a:	d902      	bls.n	8010412 <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801040c:	2300      	movs	r3, #0
 801040e:	60fb      	str	r3, [r7, #12]
 8010410:	e002      	b.n	8010418 <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010416:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010420:	d007      	beq.n	8010432 <HAL_SPI_Init+0xc2>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801042a:	d002      	beq.n	8010432 <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10b      	bne.n	8010452 <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010442:	d903      	bls.n	801044c <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2202      	movs	r2, #2
 8010448:	631a      	str	r2, [r3, #48]	; 0x30
 801044a:	e002      	b.n	8010452 <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	431a      	orrs	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	691b      	ldr	r3, [r3, #16]
 8010460:	431a      	orrs	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	695b      	ldr	r3, [r3, #20]
 8010466:	431a      	orrs	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	699b      	ldr	r3, [r3, #24]
 801046c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010470:	431a      	orrs	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	69db      	ldr	r3, [r3, #28]
 8010476:	431a      	orrs	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	ea42 0103 	orr.w	r1, r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	430a      	orrs	r2, r1
 801048a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	699b      	ldr	r3, [r3, #24]
 8010490:	0c1b      	lsrs	r3, r3, #16
 8010492:	f003 0204 	and.w	r2, r3, #4
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049a:	431a      	orrs	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104a0:	431a      	orrs	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	ea42 0103 	orr.w	r1, r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	430a      	orrs	r2, r1
 80104b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2201      	movs	r2, #1
 80104be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3710      	adds	r7, #16
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	08010c35 	.word	0x08010c35
 80104d0:	08010c49 	.word	0x08010c49
 80104d4:	08010c5d 	.word	0x08010c5d
 80104d8:	08010c71 	.word	0x08010c71
 80104dc:	08010c85 	.word	0x08010c85
 80104e0:	08010c99 	.word	0x08010c99
 80104e4:	08010cad 	.word	0x08010cad
 80104e8:	08010cc1 	.word	0x08010cc1
 80104ec:	080104f1 	.word	0x080104f1

080104f0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 8010504:	b480      	push	{r7}
 8010506:	b087      	sub	sp, #28
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	460b      	mov	r3, r1
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d107      	bne.n	801052c <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	e08b      	b.n	8010644 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010532:	2b01      	cmp	r3, #1
 8010534:	d101      	bne.n	801053a <HAL_SPI_RegisterCallback+0x36>
 8010536:	2302      	movs	r3, #2
 8010538:	e084      	b.n	8010644 <HAL_SPI_RegisterCallback+0x140>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2201      	movs	r2, #1
 801053e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b01      	cmp	r3, #1
 801054c:	d14e      	bne.n	80105ec <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 801054e:	7afb      	ldrb	r3, [r7, #11]
 8010550:	2b09      	cmp	r3, #9
 8010552:	d842      	bhi.n	80105da <HAL_SPI_RegisterCallback+0xd6>
 8010554:	a201      	add	r2, pc, #4	; (adr r2, 801055c <HAL_SPI_RegisterCallback+0x58>)
 8010556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801055a:	bf00      	nop
 801055c:	08010585 	.word	0x08010585
 8010560:	0801058d 	.word	0x0801058d
 8010564:	08010595 	.word	0x08010595
 8010568:	0801059d 	.word	0x0801059d
 801056c:	080105a5 	.word	0x080105a5
 8010570:	080105ad 	.word	0x080105ad
 8010574:	080105b5 	.word	0x080105b5
 8010578:	080105bd 	.word	0x080105bd
 801057c:	080105c7 	.word	0x080105c7
 8010580:	080105d1 	.word	0x080105d1
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 801058a:	e056      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8010592:	e052      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 801059a:	e04e      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80105a2:	e04a      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80105aa:	e046      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80105b2:	e042      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80105ba:	e03e      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80105c4:	e039      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80105ce:	e034      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80105d8:	e02f      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 80105e6:	2301      	movs	r3, #1
 80105e8:	75fb      	strb	r3, [r7, #23]
        break;
 80105ea:	e026      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d118      	bne.n	801062a <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 80105f8:	7afb      	ldrb	r3, [r7, #11]
 80105fa:	2b08      	cmp	r3, #8
 80105fc:	d002      	beq.n	8010604 <HAL_SPI_RegisterCallback+0x100>
 80105fe:	2b09      	cmp	r3, #9
 8010600:	d005      	beq.n	801060e <HAL_SPI_RegisterCallback+0x10a>
 8010602:	e009      	b.n	8010618 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 801060c:	e015      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8010616:	e010      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801061c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8010624:	2301      	movs	r3, #1
 8010626:	75fb      	strb	r3, [r7, #23]
        break;
 8010628:	e007      	b.n	801063a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801062e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 8010642:	7dfb      	ldrb	r3, [r7, #23]
}
 8010644:	4618      	mov	r0, r3
 8010646:	371c      	adds	r7, #28
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b088      	sub	sp, #32
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	603b      	str	r3, [r7, #0]
 801065c:	4613      	mov	r3, r2
 801065e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801066a:	2b01      	cmp	r3, #1
 801066c:	d101      	bne.n	8010672 <HAL_SPI_Transmit+0x22>
 801066e:	2302      	movs	r3, #2
 8010670:	e150      	b.n	8010914 <HAL_SPI_Transmit+0x2c4>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2201      	movs	r2, #1
 8010676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801067a:	f7f7 fc37 	bl	8007eec <HAL_GetTick>
 801067e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010680:	88fb      	ldrh	r3, [r7, #6]
 8010682:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b01      	cmp	r3, #1
 801068e:	d002      	beq.n	8010696 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010690:	2302      	movs	r3, #2
 8010692:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010694:	e135      	b.n	8010902 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <HAL_SPI_Transmit+0x52>
 801069c:	88fb      	ldrh	r3, [r7, #6]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d102      	bne.n	80106a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80106a2:	2301      	movs	r3, #1
 80106a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80106a6:	e12c      	b.n	8010902 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2203      	movs	r2, #3
 80106ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2200      	movs	r2, #0
 80106b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	88fa      	ldrh	r2, [r7, #6]
 80106c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	88fa      	ldrh	r2, [r7, #6]
 80106c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2200      	movs	r2, #0
 80106cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2200      	movs	r2, #0
 80106da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106f2:	d107      	bne.n	8010704 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801070e:	2b40      	cmp	r3, #64	; 0x40
 8010710:	d007      	beq.n	8010722 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801072a:	d94b      	bls.n	80107c4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <HAL_SPI_Transmit+0xea>
 8010734:	8afb      	ldrh	r3, [r7, #22]
 8010736:	2b01      	cmp	r3, #1
 8010738:	d13e      	bne.n	80107b8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801073e:	881a      	ldrh	r2, [r3, #0]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074a:	1c9a      	adds	r2, r3, #2
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010754:	b29b      	uxth	r3, r3
 8010756:	3b01      	subs	r3, #1
 8010758:	b29a      	uxth	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801075e:	e02b      	b.n	80107b8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	2b02      	cmp	r3, #2
 801076c:	d112      	bne.n	8010794 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010772:	881a      	ldrh	r2, [r3, #0]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077e:	1c9a      	adds	r2, r3, #2
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010788:	b29b      	uxth	r3, r3
 801078a:	3b01      	subs	r3, #1
 801078c:	b29a      	uxth	r2, r3
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010792:	e011      	b.n	80107b8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010794:	f7f7 fbaa 	bl	8007eec <HAL_GetTick>
 8010798:	4602      	mov	r2, r0
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	683a      	ldr	r2, [r7, #0]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d803      	bhi.n	80107ac <HAL_SPI_Transmit+0x15c>
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107aa:	d102      	bne.n	80107b2 <HAL_SPI_Transmit+0x162>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d102      	bne.n	80107b8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80107b2:	2303      	movs	r3, #3
 80107b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80107b6:	e0a4      	b.n	8010902 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107bc:	b29b      	uxth	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1ce      	bne.n	8010760 <HAL_SPI_Transmit+0x110>
 80107c2:	e07c      	b.n	80108be <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <HAL_SPI_Transmit+0x182>
 80107cc:	8afb      	ldrh	r3, [r7, #22]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d170      	bne.n	80108b4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d912      	bls.n	8010802 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e0:	881a      	ldrh	r2, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ec:	1c9a      	adds	r2, r3, #2
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	3b02      	subs	r3, #2
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010800:	e058      	b.n	80108b4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	330c      	adds	r3, #12
 801080c:	7812      	ldrb	r2, [r2, #0]
 801080e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010814:	1c5a      	adds	r2, r3, #1
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801081e:	b29b      	uxth	r3, r3
 8010820:	3b01      	subs	r3, #1
 8010822:	b29a      	uxth	r2, r3
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010828:	e044      	b.n	80108b4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b02      	cmp	r3, #2
 8010836:	d12b      	bne.n	8010890 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801083c:	b29b      	uxth	r3, r3
 801083e:	2b01      	cmp	r3, #1
 8010840:	d912      	bls.n	8010868 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010846:	881a      	ldrh	r2, [r3, #0]
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010852:	1c9a      	adds	r2, r3, #2
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801085c:	b29b      	uxth	r3, r3
 801085e:	3b02      	subs	r3, #2
 8010860:	b29a      	uxth	r2, r3
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010866:	e025      	b.n	80108b4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	330c      	adds	r3, #12
 8010872:	7812      	ldrb	r2, [r2, #0]
 8010874:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010884:	b29b      	uxth	r3, r3
 8010886:	3b01      	subs	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801088e:	e011      	b.n	80108b4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010890:	f7f7 fb2c 	bl	8007eec <HAL_GetTick>
 8010894:	4602      	mov	r2, r0
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d803      	bhi.n	80108a8 <HAL_SPI_Transmit+0x258>
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a6:	d102      	bne.n	80108ae <HAL_SPI_Transmit+0x25e>
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d102      	bne.n	80108b4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80108ae:	2303      	movs	r3, #3
 80108b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80108b2:	e026      	b.n	8010902 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1b5      	bne.n	801082a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80108be:	69ba      	ldr	r2, [r7, #24]
 80108c0:	6839      	ldr	r1, [r7, #0]
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f000 fc02 	bl	80110cc <SPI_EndRxTxTransaction>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2220      	movs	r2, #32
 80108d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10a      	bne.n	80108f2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80108dc:	2300      	movs	r3, #0
 80108de:	613b      	str	r3, [r7, #16]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	613b      	str	r3, [r7, #16]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	613b      	str	r3, [r7, #16]
 80108f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80108fa:	2301      	movs	r3, #1
 80108fc:	77fb      	strb	r3, [r7, #31]
 80108fe:	e000      	b.n	8010902 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8010900:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2201      	movs	r2, #1
 8010906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2200      	movs	r2, #0
 801090e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010912:	7ffb      	ldrb	r3, [r7, #31]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3720      	adds	r7, #32
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010934:	2b01      	cmp	r3, #1
 8010936:	d101      	bne.n	801093c <HAL_SPI_TransmitReceive_DMA+0x20>
 8010938:	2302      	movs	r3, #2
 801093a:	e16c      	b.n	8010c16 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801094a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8010952:	7dbb      	ldrb	r3, [r7, #22]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d00d      	beq.n	8010974 <HAL_SPI_TransmitReceive_DMA+0x58>
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801095e:	d106      	bne.n	801096e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d102      	bne.n	801096e <HAL_SPI_TransmitReceive_DMA+0x52>
 8010968:	7dbb      	ldrb	r3, [r7, #22]
 801096a:	2b04      	cmp	r3, #4
 801096c:	d002      	beq.n	8010974 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 801096e:	2302      	movs	r3, #2
 8010970:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010972:	e14b      	b.n	8010c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d005      	beq.n	8010986 <HAL_SPI_TransmitReceive_DMA+0x6a>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8010980:	887b      	ldrh	r3, [r7, #2]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d102      	bne.n	801098c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8010986:	2301      	movs	r3, #1
 8010988:	75fb      	strb	r3, [r7, #23]
    goto error;
 801098a:	e13f      	b.n	8010c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b04      	cmp	r3, #4
 8010996:	d003      	beq.n	80109a0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2205      	movs	r2, #5
 801099c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	887a      	ldrh	r2, [r7, #2]
 80109b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	887a      	ldrh	r2, [r7, #2]
 80109b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	887a      	ldrh	r2, [r7, #2]
 80109c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	887a      	ldrh	r2, [r7, #2]
 80109ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	685a      	ldr	r2, [r3, #4]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80109e8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80109f2:	d908      	bls.n	8010a06 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685a      	ldr	r2, [r3, #4]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a02:	605a      	str	r2, [r3, #4]
 8010a04:	e06f      	b.n	8010ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010a14:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a20:	d126      	bne.n	8010a70 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d10f      	bne.n	8010a4e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	685a      	ldr	r2, [r3, #4]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010a3c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	085b      	lsrs	r3, r3, #1
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010a4c:	e010      	b.n	8010a70 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	685a      	ldr	r2, [r3, #4]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010a5c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	085b      	lsrs	r3, r3, #1
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	3301      	adds	r3, #1
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a74:	699b      	ldr	r3, [r3, #24]
 8010a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a7a:	d134      	bne.n	8010ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a8a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d111      	bne.n	8010ac0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	685a      	ldr	r2, [r3, #4]
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010aaa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	085b      	lsrs	r3, r3, #1
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010abe:	e012      	b.n	8010ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010ace:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	085b      	lsrs	r3, r3, #1
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	3301      	adds	r3, #1
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	2b04      	cmp	r3, #4
 8010af0:	d108      	bne.n	8010b04 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010af6:	4a4a      	ldr	r2, [pc, #296]	; (8010c20 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8010af8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010afe:	4a49      	ldr	r2, [pc, #292]	; (8010c24 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8010b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b02:	e007      	b.n	8010b14 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b08:	4a47      	ldr	r2, [pc, #284]	; (8010c28 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8010b0a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b10:	4a46      	ldr	r2, [pc, #280]	; (8010c2c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8010b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b18:	4a45      	ldr	r2, [pc, #276]	; (8010c30 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8010b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b20:	2200      	movs	r2, #0
 8010b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	330c      	adds	r3, #12
 8010b2e:	4619      	mov	r1, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b34:	461a      	mov	r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	f7f8 fe7f 	bl	8009840 <HAL_DMA_Start_IT>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00c      	beq.n	8010b62 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b4c:	f043 0210 	orr.w	r2, r3, #16
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010b60:	e054      	b.n	8010c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f042 0201 	orr.w	r2, r2, #1
 8010b70:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b76:	2200      	movs	r2, #0
 8010b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b7e:	2200      	movs	r2, #0
 8010b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b86:	2200      	movs	r2, #0
 8010b88:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b8e:	2200      	movs	r2, #0
 8010b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	330c      	adds	r3, #12
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	f7f8 fe49 	bl	8009840 <HAL_DMA_Start_IT>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00c      	beq.n	8010bce <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bb8:	f043 0210 	orr.w	r2, r3, #16
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010bcc:	e01e      	b.n	8010c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd8:	2b40      	cmp	r3, #64	; 0x40
 8010bda:	d007      	beq.n	8010bec <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	685a      	ldr	r2, [r3, #4]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f042 0220 	orr.w	r2, r2, #32
 8010bfa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f042 0202 	orr.w	r2, r2, #2
 8010c0a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3718      	adds	r7, #24
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	08010df1 	.word	0x08010df1
 8010c24:	08010cd5 	.word	0x08010cd5
 8010c28:	08010e0f 	.word	0x08010e0f
 8010c2c:	08010d5d 	.word	0x08010d5d
 8010c30:	08010e2d 	.word	0x08010e2d

08010c34 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8010c78:	bf00      	nop
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8010c8c:	bf00      	nop
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8010ca0:	bf00      	nop
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010cb4:	bf00      	nop
 8010cb6:	370c      	adds	r7, #12
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8010cc8:	bf00      	nop
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010ce2:	f7f7 f903 	bl	8007eec <HAL_GetTick>
 8010ce6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f003 0320 	and.w	r3, r3, #32
 8010cf2:	2b20      	cmp	r3, #32
 8010cf4:	d02b      	beq.n	8010d4e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f022 0220 	bic.w	r2, r2, #32
 8010d04:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	685a      	ldr	r2, [r3, #4]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f022 0203 	bic.w	r2, r2, #3
 8010d14:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	2164      	movs	r1, #100	; 0x64
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f000 f97e 	bl	801101c <SPI_EndRxTransaction>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d002      	beq.n	8010d2c <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2220      	movs	r2, #32
 8010d2a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2201      	movs	r2, #1
 8010d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d004      	beq.n	8010d4e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010d4c:	e003      	b.n	8010d56 <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d68:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010d6a:	f7f7 f8bf 	bl	8007eec <HAL_GetTick>
 8010d6e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f003 0320 	and.w	r3, r3, #32
 8010d7a:	2b20      	cmp	r3, #32
 8010d7c:	d031      	beq.n	8010de2 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	685a      	ldr	r2, [r3, #4]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f022 0220 	bic.w	r2, r2, #32
 8010d8c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	2164      	movs	r1, #100	; 0x64
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f000 f99a 	bl	80110cc <SPI_EndRxTxTransaction>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d005      	beq.n	8010daa <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010da2:	f043 0220 	orr.w	r2, r3, #32
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f022 0203 	bic.w	r2, r2, #3
 8010db8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d004      	beq.n	8010de2 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010de0:	e003      	b.n	8010dea <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010dea:	3710      	adds	r7, #16
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dfc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010e06:	bf00      	nop
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e1a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010e24:	bf00      	nop
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e38:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	685a      	ldr	r2, [r3, #4]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f022 0203 	bic.w	r2, r2, #3
 8010e48:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e4e:	f043 0210 	orr.w	r2, r3, #16
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010e66:	bf00      	nop
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	60b9      	str	r1, [r7, #8]
 8010e78:	603b      	str	r3, [r7, #0]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010e7e:	e04c      	b.n	8010f1a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e86:	d048      	beq.n	8010f1a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010e88:	f7f7 f830 	bl	8007eec <HAL_GetTick>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	683a      	ldr	r2, [r7, #0]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d902      	bls.n	8010e9e <SPI_WaitFlagStateUntilTimeout+0x30>
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d13d      	bne.n	8010f1a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	685a      	ldr	r2, [r3, #4]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010eb6:	d111      	bne.n	8010edc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ec0:	d004      	beq.n	8010ecc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010eca:	d107      	bne.n	8010edc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ee4:	d10f      	bne.n	8010f06 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010f16:	2303      	movs	r3, #3
 8010f18:	e00f      	b.n	8010f3a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	689a      	ldr	r2, [r3, #8]
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	4013      	ands	r3, r2
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	bf0c      	ite	eq
 8010f2a:	2301      	moveq	r3, #1
 8010f2c:	2300      	movne	r3, #0
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	461a      	mov	r2, r3
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d1a3      	bne.n	8010e80 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b084      	sub	sp, #16
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	607a      	str	r2, [r7, #4]
 8010f4e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8010f50:	e057      	b.n	8011002 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010f58:	d106      	bne.n	8010f68 <SPI_WaitFifoStateUntilTimeout+0x26>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d103      	bne.n	8010f68 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	330c      	adds	r3, #12
 8010f66:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6e:	d048      	beq.n	8011002 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010f70:	f7f6 ffbc 	bl	8007eec <HAL_GetTick>
 8010f74:	4602      	mov	r2, r0
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d902      	bls.n	8010f86 <SPI_WaitFifoStateUntilTimeout+0x44>
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d13d      	bne.n	8011002 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	685a      	ldr	r2, [r3, #4]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010f9e:	d111      	bne.n	8010fc4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fa8:	d004      	beq.n	8010fb4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fb2:	d107      	bne.n	8010fc4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fcc:	d10f      	bne.n	8010fee <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010ffe:	2303      	movs	r3, #3
 8011000:	e008      	b.n	8011014 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	689a      	ldr	r2, [r3, #8]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	4013      	ands	r3, r2
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d19f      	bne.n	8010f52 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b086      	sub	sp, #24
 8011020:	af02      	add	r7, sp, #8
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011030:	d111      	bne.n	8011056 <SPI_EndRxTransaction+0x3a>
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801103a:	d004      	beq.n	8011046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	689b      	ldr	r3, [r3, #8]
 8011040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011044:	d107      	bne.n	8011056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011054:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	2200      	movs	r2, #0
 801105e:	2180      	movs	r1, #128	; 0x80
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f7ff ff04 	bl	8010e6e <SPI_WaitFlagStateUntilTimeout>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011070:	f043 0220 	orr.w	r2, r3, #32
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011078:	2303      	movs	r3, #3
 801107a:	e023      	b.n	80110c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011084:	d11d      	bne.n	80110c2 <SPI_EndRxTransaction+0xa6>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801108e:	d004      	beq.n	801109a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011098:	d113      	bne.n	80110c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7ff ff4b 	bl	8010f42 <SPI_WaitFifoStateUntilTimeout>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d007      	beq.n	80110c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110b6:	f043 0220 	orr.w	r2, r3, #32
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80110be:	2303      	movs	r3, #3
 80110c0:	e000      	b.n	80110c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80110c2:	2300      	movs	r3, #0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f7ff ff2c 	bl	8010f42 <SPI_WaitFifoStateUntilTimeout>
 80110ea:	4603      	mov	r3, r0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d007      	beq.n	8011100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110f4:	f043 0220 	orr.w	r2, r3, #32
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e027      	b.n	8011150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	2200      	movs	r2, #0
 8011108:	2180      	movs	r1, #128	; 0x80
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f7ff feaf 	bl	8010e6e <SPI_WaitFlagStateUntilTimeout>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d007      	beq.n	8011126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801111a:	f043 0220 	orr.w	r2, r3, #32
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011122:	2303      	movs	r3, #3
 8011124:	e014      	b.n	8011150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	2200      	movs	r2, #0
 801112e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f7ff ff05 	bl	8010f42 <SPI_WaitFifoStateUntilTimeout>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d007      	beq.n	801114e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011142:	f043 0220 	orr.w	r2, r3, #32
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801114a:	2303      	movs	r3, #3
 801114c:	e000      	b.n	8011150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801114e:	2300      	movs	r3, #0
}
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e01d      	b.n	80111a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011170:	b2db      	uxtb	r3, r3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d106      	bne.n	8011184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f815 	bl	80111ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2202      	movs	r2, #2
 8011188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3304      	adds	r3, #4
 8011194:	4619      	mov	r1, r3
 8011196:	4610      	mov	r0, r2
 8011198:	f000 f9fc 	bl	8011594 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2201      	movs	r2, #1
 80111a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80111ae:	b480      	push	{r7}
 80111b0:	b083      	sub	sp, #12
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80111b6:	bf00      	nop
 80111b8:	370c      	adds	r7, #12
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
	...

080111c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2202      	movs	r2, #2
 80111d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	689a      	ldr	r2, [r3, #8]
 80111da:	4b0e      	ldr	r3, [pc, #56]	; (8011214 <HAL_TIM_Base_Start+0x50>)
 80111dc:	4013      	ands	r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b06      	cmp	r3, #6
 80111e4:	d00b      	beq.n	80111fe <HAL_TIM_Base_Start+0x3a>
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111ec:	d007      	beq.n	80111fe <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f042 0201 	orr.w	r2, r2, #1
 80111fc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2201      	movs	r2, #1
 8011202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011206:	2300      	movs	r3, #0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3714      	adds	r7, #20
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	00010007 	.word	0x00010007

08011218 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2202      	movs	r2, #2
 8011224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	6a1a      	ldr	r2, [r3, #32]
 801122e:	f241 1311 	movw	r3, #4369	; 0x1111
 8011232:	4013      	ands	r3, r2
 8011234:	2b00      	cmp	r3, #0
 8011236:	d10f      	bne.n	8011258 <HAL_TIM_Base_Stop+0x40>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	6a1a      	ldr	r2, [r3, #32]
 801123e:	f240 4344 	movw	r3, #1092	; 0x444
 8011242:	4013      	ands	r3, r2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d107      	bne.n	8011258 <HAL_TIM_Base_Stop+0x40>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f022 0201 	bic.w	r2, r2, #1
 8011256:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2201      	movs	r2, #1
 801125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	370c      	adds	r7, #12
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
	...

08011270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f042 0201 	orr.w	r2, r2, #1
 8011286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	689a      	ldr	r2, [r3, #8]
 801128e:	4b0c      	ldr	r3, [pc, #48]	; (80112c0 <HAL_TIM_Base_Start_IT+0x50>)
 8011290:	4013      	ands	r3, r2
 8011292:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2b06      	cmp	r3, #6
 8011298:	d00b      	beq.n	80112b2 <HAL_TIM_Base_Start_IT+0x42>
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112a0:	d007      	beq.n	80112b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f042 0201 	orr.w	r2, r2, #1
 80112b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	00010007 	.word	0x00010007

080112c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	68da      	ldr	r2, [r3, #12]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f022 0201 	bic.w	r2, r2, #1
 80112da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	6a1a      	ldr	r2, [r3, #32]
 80112e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80112e6:	4013      	ands	r3, r2
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d10f      	bne.n	801130c <HAL_TIM_Base_Stop_IT+0x48>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6a1a      	ldr	r2, [r3, #32]
 80112f2:	f240 4344 	movw	r3, #1092	; 0x444
 80112f6:	4013      	ands	r3, r2
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d107      	bne.n	801130c <HAL_TIM_Base_Stop_IT+0x48>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f022 0201 	bic.w	r2, r2, #1
 801130a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b082      	sub	sp, #8
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	2b02      	cmp	r3, #2
 801132e:	d122      	bne.n	8011376 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	f003 0302 	and.w	r3, r3, #2
 801133a:	2b02      	cmp	r3, #2
 801133c:	d11b      	bne.n	8011376 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f06f 0202 	mvn.w	r2, #2
 8011346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	f003 0303 	and.w	r3, r3, #3
 8011358:	2b00      	cmp	r3, #0
 801135a:	d003      	beq.n	8011364 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7f6 fa8f 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 8011362:	e005      	b.n	8011370 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 f8f7 	bl	8011558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 f8fe 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	691b      	ldr	r3, [r3, #16]
 801137c:	f003 0304 	and.w	r3, r3, #4
 8011380:	2b04      	cmp	r3, #4
 8011382:	d122      	bne.n	80113ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	f003 0304 	and.w	r3, r3, #4
 801138e:	2b04      	cmp	r3, #4
 8011390:	d11b      	bne.n	80113ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f06f 0204 	mvn.w	r2, #4
 801139a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2202      	movs	r2, #2
 80113a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	699b      	ldr	r3, [r3, #24]
 80113a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7f6 fa65 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 80113b6:	e005      	b.n	80113c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 f8cd 	bl	8011558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 f8d4 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	f003 0308 	and.w	r3, r3, #8
 80113d4:	2b08      	cmp	r3, #8
 80113d6:	d122      	bne.n	801141e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	f003 0308 	and.w	r3, r3, #8
 80113e2:	2b08      	cmp	r3, #8
 80113e4:	d11b      	bne.n	801141e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f06f 0208 	mvn.w	r2, #8
 80113ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2204      	movs	r2, #4
 80113f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	69db      	ldr	r3, [r3, #28]
 80113fc:	f003 0303 	and.w	r3, r3, #3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d003      	beq.n	801140c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7f6 fa3b 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 801140a:	e005      	b.n	8011418 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f8a3 	bl	8011558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f8aa 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2200      	movs	r2, #0
 801141c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	691b      	ldr	r3, [r3, #16]
 8011424:	f003 0310 	and.w	r3, r3, #16
 8011428:	2b10      	cmp	r3, #16
 801142a:	d122      	bne.n	8011472 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	f003 0310 	and.w	r3, r3, #16
 8011436:	2b10      	cmp	r3, #16
 8011438:	d11b      	bne.n	8011472 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f06f 0210 	mvn.w	r2, #16
 8011442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2208      	movs	r2, #8
 8011448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	69db      	ldr	r3, [r3, #28]
 8011450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011454:	2b00      	cmp	r3, #0
 8011456:	d003      	beq.n	8011460 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7f6 fa11 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 801145e:	e005      	b.n	801146c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 f879 	bl	8011558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f880 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	2b01      	cmp	r3, #1
 801147e:	d10e      	bne.n	801149e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	f003 0301 	and.w	r3, r3, #1
 801148a:	2b01      	cmp	r3, #1
 801148c:	d107      	bne.n	801149e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f06f 0201 	mvn.w	r2, #1
 8011496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7f6 f9df 	bl	800785c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114a8:	2b80      	cmp	r3, #128	; 0x80
 80114aa:	d10e      	bne.n	80114ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b6:	2b80      	cmp	r3, #128	; 0x80
 80114b8:	d107      	bne.n	80114ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80114c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f000 f991 	bl	80117ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114d8:	d10e      	bne.n	80114f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114e4:	2b80      	cmp	r3, #128	; 0x80
 80114e6:	d107      	bne.n	80114f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80114f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f984 	bl	8011800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011502:	2b40      	cmp	r3, #64	; 0x40
 8011504:	d10e      	bne.n	8011524 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011510:	2b40      	cmp	r3, #64	; 0x40
 8011512:	d107      	bne.n	8011524 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801151c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 f82e 	bl	8011580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	f003 0320 	and.w	r3, r3, #32
 801152e:	2b20      	cmp	r3, #32
 8011530:	d10e      	bne.n	8011550 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	f003 0320 	and.w	r3, r3, #32
 801153c:	2b20      	cmp	r3, #32
 801153e:	d107      	bne.n	8011550 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f06f 0220 	mvn.w	r2, #32
 8011548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f944 	bl	80117d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011550:	bf00      	nop
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011560:	bf00      	nop
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011574:	bf00      	nop
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011594:	b480      	push	{r7}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a40      	ldr	r2, [pc, #256]	; (80116a8 <TIM_Base_SetConfig+0x114>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d013      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115b2:	d00f      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a3d      	ldr	r2, [pc, #244]	; (80116ac <TIM_Base_SetConfig+0x118>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d00b      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a3c      	ldr	r2, [pc, #240]	; (80116b0 <TIM_Base_SetConfig+0x11c>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d007      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4a3b      	ldr	r2, [pc, #236]	; (80116b4 <TIM_Base_SetConfig+0x120>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d003      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4a3a      	ldr	r2, [pc, #232]	; (80116b8 <TIM_Base_SetConfig+0x124>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d108      	bne.n	80115e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	4313      	orrs	r3, r2
 80115e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4a2f      	ldr	r2, [pc, #188]	; (80116a8 <TIM_Base_SetConfig+0x114>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d01f      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f4:	d01b      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a2c      	ldr	r2, [pc, #176]	; (80116ac <TIM_Base_SetConfig+0x118>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d017      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a2b      	ldr	r2, [pc, #172]	; (80116b0 <TIM_Base_SetConfig+0x11c>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d013      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a2a      	ldr	r2, [pc, #168]	; (80116b4 <TIM_Base_SetConfig+0x120>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d00f      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4a29      	ldr	r2, [pc, #164]	; (80116b8 <TIM_Base_SetConfig+0x124>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d00b      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4a28      	ldr	r2, [pc, #160]	; (80116bc <TIM_Base_SetConfig+0x128>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d007      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4a27      	ldr	r2, [pc, #156]	; (80116c0 <TIM_Base_SetConfig+0x12c>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d003      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4a26      	ldr	r2, [pc, #152]	; (80116c4 <TIM_Base_SetConfig+0x130>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d108      	bne.n	8011640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	4313      	orrs	r3, r2
 801163e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	695b      	ldr	r3, [r3, #20]
 801164a:	4313      	orrs	r3, r2
 801164c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a10      	ldr	r2, [pc, #64]	; (80116a8 <TIM_Base_SetConfig+0x114>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d00f      	beq.n	801168c <TIM_Base_SetConfig+0xf8>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4a12      	ldr	r2, [pc, #72]	; (80116b8 <TIM_Base_SetConfig+0x124>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d00b      	beq.n	801168c <TIM_Base_SetConfig+0xf8>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4a11      	ldr	r2, [pc, #68]	; (80116bc <TIM_Base_SetConfig+0x128>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d007      	beq.n	801168c <TIM_Base_SetConfig+0xf8>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4a10      	ldr	r2, [pc, #64]	; (80116c0 <TIM_Base_SetConfig+0x12c>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d003      	beq.n	801168c <TIM_Base_SetConfig+0xf8>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a0f      	ldr	r2, [pc, #60]	; (80116c4 <TIM_Base_SetConfig+0x130>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d103      	bne.n	8011694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	691a      	ldr	r2, [r3, #16]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2201      	movs	r2, #1
 8011698:	615a      	str	r2, [r3, #20]
}
 801169a:	bf00      	nop
 801169c:	3714      	adds	r7, #20
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	40012c00 	.word	0x40012c00
 80116ac:	40000400 	.word	0x40000400
 80116b0:	40000800 	.word	0x40000800
 80116b4:	40000c00 	.word	0x40000c00
 80116b8:	40013400 	.word	0x40013400
 80116bc:	40014000 	.word	0x40014000
 80116c0:	40014400 	.word	0x40014400
 80116c4:	40014800 	.word	0x40014800

080116c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d101      	bne.n	80116e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80116dc:	2302      	movs	r3, #2
 80116de:	e068      	b.n	80117b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2201      	movs	r2, #1
 80116e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2202      	movs	r2, #2
 80116ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4a2e      	ldr	r2, [pc, #184]	; (80117c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d004      	beq.n	8011714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a2d      	ldr	r2, [pc, #180]	; (80117c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d108      	bne.n	8011726 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801171a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	4313      	orrs	r3, r2
 8011724:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801172c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	4313      	orrs	r3, r2
 8011736:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4a1e      	ldr	r2, [pc, #120]	; (80117c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d01d      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011752:	d018      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	4a1b      	ldr	r2, [pc, #108]	; (80117c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d013      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a1a      	ldr	r2, [pc, #104]	; (80117cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d00e      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4a18      	ldr	r2, [pc, #96]	; (80117d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d009      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	4a13      	ldr	r2, [pc, #76]	; (80117c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011778:	4293      	cmp	r3, r2
 801177a:	d004      	beq.n	8011786 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a14      	ldr	r2, [pc, #80]	; (80117d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011782:	4293      	cmp	r3, r2
 8011784:	d10c      	bne.n	80117a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801178c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	68ba      	ldr	r2, [r7, #8]
 8011794:	4313      	orrs	r3, r2
 8011796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2201      	movs	r2, #1
 80117a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80117b0:	2300      	movs	r3, #0
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3714      	adds	r7, #20
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	40012c00 	.word	0x40012c00
 80117c4:	40013400 	.word	0x40013400
 80117c8:	40000400 	.word	0x40000400
 80117cc:	40000800 	.word	0x40000800
 80117d0:	40000c00 	.word	0x40000c00
 80117d4:	40014000 	.word	0x40014000

080117d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80117e0:	bf00      	nop
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b083      	sub	sp, #12
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80117f4:	bf00      	nop
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011808:	bf00      	nop
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011814:	b084      	sub	sp, #16
 8011816:	b480      	push	{r7}
 8011818:	b085      	sub	sp, #20
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
 801181e:	f107 001c 	add.w	r0, r7, #28
 8011822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 801182a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 801182c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801182e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8011832:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011834:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8011836:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 801183a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	4313      	orrs	r3, r2
 8011840:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685a      	ldr	r2, [r3, #4]
 8011846:	4b07      	ldr	r3, [pc, #28]	; (8011864 <SDMMC_Init+0x50>)
 8011848:	4013      	ands	r3, r2
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	431a      	orrs	r2, r3
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011852:	2300      	movs	r3, #0
}
 8011854:	4618      	mov	r0, r3
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	b004      	add	sp, #16
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	ffc02c00 	.word	0xffc02c00

08011868 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011876:	4618      	mov	r0, r3
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011882:	b480      	push	{r7}
 8011884:	b083      	sub	sp, #12
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f043 0203 	orr.w	r2, r3, #3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80118b8:	2002      	movs	r0, #2
 80118ba:	f7f6 fb23 	bl	8007f04 <HAL_Delay>

  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f003 0303 	and.w	r3, r3, #3
}
 80118d8:	4618      	mov	r0, r3
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011902:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011908:	431a      	orrs	r2, r3
                       Command->CPSM);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801190e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011910:	68fa      	ldr	r2, [r7, #12]
 8011912:	4313      	orrs	r3, r2
 8011914:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	68da      	ldr	r2, [r3, #12]
 801191a:	4b06      	ldr	r3, [pc, #24]	; (8011934 <SDMMC_SendCommand+0x50>)
 801191c:	4013      	ands	r3, r2
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	431a      	orrs	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	fffee0c0 	.word	0xfffee0c0

08011938 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	b2db      	uxtb	r3, r3
}
 8011946:	4618      	mov	r0, r3
 8011948:	370c      	adds	r7, #12
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr

08011952 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011952:	b480      	push	{r7}
 8011954:	b085      	sub	sp, #20
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3314      	adds	r3, #20
 8011960:	461a      	mov	r2, r3
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	4413      	add	r3, r2
 8011966:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
}
 801196c:	4618      	mov	r0, r3
 801196e:	3714      	adds	r7, #20
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011978:	b480      	push	{r7}
 801197a:	b085      	sub	sp, #20
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801199e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80119a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80119aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	431a      	orrs	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80119c2:	2300      	movs	r3, #0

}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3714      	adds	r7, #20
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b088      	sub	sp, #32
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80119de:	2310      	movs	r3, #16
 80119e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119e8:	2300      	movs	r3, #0
 80119ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119f2:	f107 0308 	add.w	r3, r7, #8
 80119f6:	4619      	mov	r1, r3
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff ff73 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80119fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a02:	2110      	movs	r1, #16
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 faa5 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a0c:	69fb      	ldr	r3, [r7, #28]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3720      	adds	r7, #32
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b088      	sub	sp, #32
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
 8011a1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011a24:	2311      	movs	r3, #17
 8011a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a38:	f107 0308 	add.w	r3, r7, #8
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f7ff ff50 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a48:	2111      	movs	r1, #17
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 fa82 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011a50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a52:	69fb      	ldr	r3, [r7, #28]
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3720      	adds	r7, #32
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b088      	sub	sp, #32
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011a6a:	2312      	movs	r3, #18
 8011a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a74:	2300      	movs	r3, #0
 8011a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a7e:	f107 0308 	add.w	r3, r7, #8
 8011a82:	4619      	mov	r1, r3
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff ff2d 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a8e:	2112      	movs	r1, #18
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fa5f 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a98:	69fb      	ldr	r3, [r7, #28]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3720      	adds	r7, #32
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b088      	sub	sp, #32
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011ab0:	2318      	movs	r3, #24
 8011ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011aba:	2300      	movs	r3, #0
 8011abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ac4:	f107 0308 	add.w	r3, r7, #8
 8011ac8:	4619      	mov	r1, r3
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff ff0a 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ad4:	2118      	movs	r1, #24
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 fa3c 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ade:	69fb      	ldr	r3, [r7, #28]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3720      	adds	r7, #32
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011af6:	2319      	movs	r3, #25
 8011af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b00:	2300      	movs	r3, #0
 8011b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b0a:	f107 0308 	add.w	r3, r7, #8
 8011b0e:	4619      	mov	r1, r3
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7ff fee7 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b1a:	2119      	movs	r1, #25
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 fa19 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b24:	69fb      	ldr	r3, [r7, #28]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3720      	adds	r7, #32
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
	...

08011b30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b088      	sub	sp, #32
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011b3c:	230c      	movs	r3, #12
 8011b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b46:	2300      	movs	r3, #0
 8011b48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b4e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b68:	f107 0308 	add.w	r3, r7, #8
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f7ff feb8 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011b74:	4a08      	ldr	r2, [pc, #32]	; (8011b98 <SDMMC_CmdStopTransfer+0x68>)
 8011b76:	210c      	movs	r1, #12
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 f9eb 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011b7e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8011b8c:	69fb      	ldr	r3, [r7, #28]
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3720      	adds	r7, #32
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	05f5e100 	.word	0x05f5e100

08011b9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b08a      	sub	sp, #40	; 0x28
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011bac:	2307      	movs	r3, #7
 8011bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bb4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bbe:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bc0:	f107 0310 	add.w	r3, r7, #16
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f7ff fe8c 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd0:	2107      	movs	r1, #7
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f000 f9be 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011bd8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3728      	adds	r7, #40	; 0x28
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b088      	sub	sp, #32
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011bec:	2300      	movs	r3, #0
 8011bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fe6b 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 f976 	bl	8011f00 <SDMMC_GetCmdError>
 8011c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c16:	69fb      	ldr	r3, [r7, #28]
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3720      	adds	r7, #32
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b088      	sub	sp, #32
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011c28:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011c2e:	2308      	movs	r3, #8
 8011c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c42:	f107 0308 	add.w	r3, r7, #8
 8011c46:	4619      	mov	r1, r3
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff fe4b 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fb6a 	bl	8012328 <SDMMC_GetCmdResp7>
 8011c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c56:	69fb      	ldr	r3, [r7, #28]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3720      	adds	r7, #32
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b088      	sub	sp, #32
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011c6e:	2337      	movs	r3, #55	; 0x37
 8011c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c82:	f107 0308 	add.w	r3, r7, #8
 8011c86:	4619      	mov	r1, r3
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff fe2b 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c92:	2137      	movs	r1, #55	; 0x37
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 f95d 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3720      	adds	r7, #32
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b088      	sub	sp, #32
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011cb4:	2329      	movs	r3, #41	; 0x29
 8011cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cc8:	f107 0308 	add.w	r3, r7, #8
 8011ccc:	4619      	mov	r1, r3
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ff fe08 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 fa75 	bl	80121c4 <SDMMC_GetCmdResp3>
 8011cda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cdc:	69fb      	ldr	r3, [r7, #28]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3720      	adds	r7, #32
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b088      	sub	sp, #32
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011cf4:	2306      	movs	r3, #6
 8011cf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d08:	f107 0308 	add.w	r3, r7, #8
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff fde8 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d18:	2106      	movs	r1, #6
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 f91a 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d22:	69fb      	ldr	r3, [r7, #28]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3720      	adds	r7, #32
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011d34:	2300      	movs	r3, #0
 8011d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011d38:	2333      	movs	r3, #51	; 0x33
 8011d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d42:	2300      	movs	r3, #0
 8011d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d4c:	f107 0308 	add.w	r3, r7, #8
 8011d50:	4619      	mov	r1, r3
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7ff fdc6 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d5c:	2133      	movs	r1, #51	; 0x33
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 f8f8 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d66:	69fb      	ldr	r3, [r7, #28]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3720      	adds	r7, #32
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d86:	2300      	movs	r3, #0
 8011d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d90:	f107 0308 	add.w	r3, r7, #8
 8011d94:	4619      	mov	r1, r3
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f7ff fda4 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 f9c9 	bl	8012134 <SDMMC_GetCmdResp2>
 8011da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da4:	69fb      	ldr	r3, [r7, #28]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3720      	adds	r7, #32
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b088      	sub	sp, #32
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011dbc:	2309      	movs	r3, #9
 8011dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dd0:	f107 0308 	add.w	r3, r7, #8
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff fd84 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 f9a9 	bl	8012134 <SDMMC_GetCmdResp2>
 8011de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de4:	69fb      	ldr	r3, [r7, #28]
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3720      	adds	r7, #32
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b088      	sub	sp, #32
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
 8011df6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e10:	f107 0308 	add.w	r3, r7, #8
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7ff fd64 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011e1c:	683a      	ldr	r2, [r7, #0]
 8011e1e:	2103      	movs	r1, #3
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 fa0b 	bl	801223c <SDMMC_GetCmdResp6>
 8011e26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e28:	69fb      	ldr	r3, [r7, #28]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3720      	adds	r7, #32
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b088      	sub	sp, #32
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011e40:	230d      	movs	r3, #13
 8011e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e54:	f107 0308 	add.w	r3, r7, #8
 8011e58:	4619      	mov	r1, r3
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff fd42 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e64:	210d      	movs	r1, #13
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 f874 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e6e:	69fb      	ldr	r3, [r7, #28]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3720      	adds	r7, #32
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b088      	sub	sp, #32
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011e80:	2300      	movs	r3, #0
 8011e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011e84:	230d      	movs	r3, #13
 8011e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e98:	f107 0308 	add.w	r3, r7, #8
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7ff fd20 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ea8:	210d      	movs	r1, #13
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 f852 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eb2:	69fb      	ldr	r3, [r7, #28]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3720      	adds	r7, #32
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b088      	sub	sp, #32
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011ec8:	230b      	movs	r3, #11
 8011eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011eda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011edc:	f107 0308 	add.w	r3, r7, #8
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7ff fcfe 	bl	80118e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eec:	210b      	movs	r1, #11
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 f830 	bl	8011f54 <SDMMC_GetCmdResp1>
 8011ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3720      	adds	r7, #32
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011f00:	b490      	push	{r4, r7}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f08:	4b0f      	ldr	r3, [pc, #60]	; (8011f48 <SDMMC_GetCmdError+0x48>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a0f      	ldr	r2, [pc, #60]	; (8011f4c <SDMMC_GetCmdError+0x4c>)
 8011f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8011f12:	0a5b      	lsrs	r3, r3, #9
 8011f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f18:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011f1c:	4623      	mov	r3, r4
 8011f1e:	1e5c      	subs	r4, r3, #1
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f28:	e009      	b.n	8011f3e <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d0f2      	beq.n	8011f1c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4a05      	ldr	r2, [pc, #20]	; (8011f50 <SDMMC_GetCmdError+0x50>)
 8011f3a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011f3c:	2300      	movs	r3, #0
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bc90      	pop	{r4, r7}
 8011f46:	4770      	bx	lr
 8011f48:	20000038 	.word	0x20000038
 8011f4c:	10624dd3 	.word	0x10624dd3
 8011f50:	002000c5 	.word	0x002000c5

08011f54 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b087      	sub	sp, #28
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	607a      	str	r2, [r7, #4]
 8011f60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011f62:	4b6f      	ldr	r3, [pc, #444]	; (8012120 <SDMMC_GetCmdResp1+0x1cc>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a6f      	ldr	r2, [pc, #444]	; (8012124 <SDMMC_GetCmdResp1+0x1d0>)
 8011f68:	fba2 2303 	umull	r2, r3, r2, r3
 8011f6c:	0a5b      	lsrs	r3, r3, #9
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011f74:	4623      	mov	r3, r4
 8011f76:	1e5c      	subs	r4, r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d102      	bne.n	8011f82 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f80:	e0c9      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f86:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011f88:	697a      	ldr	r2, [r7, #20]
 8011f8a:	4b67      	ldr	r3, [pc, #412]	; (8012128 <SDMMC_GetCmdResp1+0x1d4>)
 8011f8c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d0f0      	beq.n	8011f74 <SDMMC_GetCmdResp1+0x20>
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1eb      	bne.n	8011f74 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d004      	beq.n	8011fb2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2204      	movs	r2, #4
 8011fac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fae:	2304      	movs	r3, #4
 8011fb0:	e0b1      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d004      	beq.n	8011fc8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e0a6      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	4a58      	ldr	r2, [pc, #352]	; (801212c <SDMMC_GetCmdResp1+0x1d8>)
 8011fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f7ff fcb2 	bl	8011938 <SDMMC_GetCommandResponse>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	7afb      	ldrb	r3, [r7, #11]
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d001      	beq.n	8011fe2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e099      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f7ff fcb4 	bl	8011952 <SDMMC_GetResponse>
 8011fea:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011fec:	693a      	ldr	r2, [r7, #16]
 8011fee:	4b50      	ldr	r3, [pc, #320]	; (8012130 <SDMMC_GetCmdResp1+0x1dc>)
 8011ff0:	4013      	ands	r3, r2
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d101      	bne.n	8011ffa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	e08d      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	da02      	bge.n	8012006 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012004:	e087      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012010:	2340      	movs	r3, #64	; 0x40
 8012012:	e080      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801201e:	2380      	movs	r3, #128	; 0x80
 8012020:	e079      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012030:	e071      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801203c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012040:	e069      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801204c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012050:	e061      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801205c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012060:	e059      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012070:	e051      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801207c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012080:	e049      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801208c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012090:	e041      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012098:	2b00      	cmp	r3, #0
 801209a:	d002      	beq.n	80120a2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801209c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120a0:	e039      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80120ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120b0:	e031      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80120bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120c0:	e029      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80120cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80120d0:	e021      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80120dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120e0:	e019      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80120ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80120f0:	e011      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80120fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012100:	e009      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	f003 0308 	and.w	r3, r3, #8
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801210c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012110:	e001      	b.n	8012116 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012116:	4618      	mov	r0, r3
 8012118:	371c      	adds	r7, #28
 801211a:	46bd      	mov	sp, r7
 801211c:	bd90      	pop	{r4, r7, pc}
 801211e:	bf00      	nop
 8012120:	20000038 	.word	0x20000038
 8012124:	10624dd3 	.word	0x10624dd3
 8012128:	00200045 	.word	0x00200045
 801212c:	002000c5 	.word	0x002000c5
 8012130:	fdffe008 	.word	0xfdffe008

08012134 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012134:	b490      	push	{r4, r7}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801213c:	4b1e      	ldr	r3, [pc, #120]	; (80121b8 <SDMMC_GetCmdResp2+0x84>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a1e      	ldr	r2, [pc, #120]	; (80121bc <SDMMC_GetCmdResp2+0x88>)
 8012142:	fba2 2303 	umull	r2, r3, r2, r3
 8012146:	0a5b      	lsrs	r3, r3, #9
 8012148:	f241 3288 	movw	r2, #5000	; 0x1388
 801214c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8012150:	4623      	mov	r3, r4
 8012152:	1e5c      	subs	r4, r3, #1
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801215c:	e026      	b.n	80121ac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012162:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801216a:	2b00      	cmp	r3, #0
 801216c:	d0f0      	beq.n	8012150 <SDMMC_GetCmdResp2+0x1c>
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1eb      	bne.n	8012150 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801217c:	f003 0304 	and.w	r3, r3, #4
 8012180:	2b00      	cmp	r3, #0
 8012182:	d004      	beq.n	801218e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2204      	movs	r2, #4
 8012188:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801218a:	2304      	movs	r3, #4
 801218c:	e00e      	b.n	80121ac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012192:	f003 0301 	and.w	r3, r3, #1
 8012196:	2b00      	cmp	r3, #0
 8012198:	d004      	beq.n	80121a4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121a0:	2301      	movs	r3, #1
 80121a2:	e003      	b.n	80121ac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4a06      	ldr	r2, [pc, #24]	; (80121c0 <SDMMC_GetCmdResp2+0x8c>)
 80121a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3710      	adds	r7, #16
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bc90      	pop	{r4, r7}
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20000038 	.word	0x20000038
 80121bc:	10624dd3 	.word	0x10624dd3
 80121c0:	002000c5 	.word	0x002000c5

080121c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80121c4:	b490      	push	{r4, r7}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80121cc:	4b18      	ldr	r3, [pc, #96]	; (8012230 <SDMMC_GetCmdResp3+0x6c>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4a18      	ldr	r2, [pc, #96]	; (8012234 <SDMMC_GetCmdResp3+0x70>)
 80121d2:	fba2 2303 	umull	r2, r3, r2, r3
 80121d6:	0a5b      	lsrs	r3, r3, #9
 80121d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80121dc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80121e0:	4623      	mov	r3, r4
 80121e2:	1e5c      	subs	r4, r3, #1
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d102      	bne.n	80121ee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121ec:	e01b      	b.n	8012226 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0f0      	beq.n	80121e0 <SDMMC_GetCmdResp3+0x1c>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1eb      	bne.n	80121e0 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801220c:	f003 0304 	and.w	r3, r3, #4
 8012210:	2b00      	cmp	r3, #0
 8012212:	d004      	beq.n	801221e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2204      	movs	r2, #4
 8012218:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801221a:	2304      	movs	r3, #4
 801221c:	e003      	b.n	8012226 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	4a05      	ldr	r2, [pc, #20]	; (8012238 <SDMMC_GetCmdResp3+0x74>)
 8012222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bc90      	pop	{r4, r7}
 801222e:	4770      	bx	lr
 8012230:	20000038 	.word	0x20000038
 8012234:	10624dd3 	.word	0x10624dd3
 8012238:	002000c5 	.word	0x002000c5

0801223c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801223c:	b590      	push	{r4, r7, lr}
 801223e:	b087      	sub	sp, #28
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	460b      	mov	r3, r1
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801224a:	4b34      	ldr	r3, [pc, #208]	; (801231c <SDMMC_GetCmdResp6+0xe0>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	4a34      	ldr	r2, [pc, #208]	; (8012320 <SDMMC_GetCmdResp6+0xe4>)
 8012250:	fba2 2303 	umull	r2, r3, r2, r3
 8012254:	0a5b      	lsrs	r3, r3, #9
 8012256:	f241 3288 	movw	r2, #5000	; 0x1388
 801225a:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801225e:	4623      	mov	r3, r4
 8012260:	1e5c      	subs	r4, r3, #1
 8012262:	2b00      	cmp	r3, #0
 8012264:	d102      	bne.n	801226c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801226a:	e052      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012270:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012278:	2b00      	cmp	r3, #0
 801227a:	d0f0      	beq.n	801225e <SDMMC_GetCmdResp6+0x22>
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1eb      	bne.n	801225e <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801228a:	f003 0304 	and.w	r3, r3, #4
 801228e:	2b00      	cmp	r3, #0
 8012290:	d004      	beq.n	801229c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2204      	movs	r2, #4
 8012296:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012298:	2304      	movs	r3, #4
 801229a:	e03a      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122a0:	f003 0301 	and.w	r3, r3, #1
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2201      	movs	r2, #1
 80122ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122ae:	2301      	movs	r3, #1
 80122b0:	e02f      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122b2:	68f8      	ldr	r0, [r7, #12]
 80122b4:	f7ff fb40 	bl	8011938 <SDMMC_GetCommandResponse>
 80122b8:	4603      	mov	r3, r0
 80122ba:	461a      	mov	r2, r3
 80122bc:	7afb      	ldrb	r3, [r7, #11]
 80122be:	4293      	cmp	r3, r2
 80122c0:	d001      	beq.n	80122c6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e025      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	4a16      	ldr	r2, [pc, #88]	; (8012324 <SDMMC_GetCmdResp6+0xe8>)
 80122ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122cc:	2100      	movs	r1, #0
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f7ff fb3f 	bl	8011952 <SDMMC_GetResponse>
 80122d4:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	0c1b      	lsrs	r3, r3, #16
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80122ea:	2300      	movs	r3, #0
 80122ec:	e011      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122fc:	e009      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d002      	beq.n	801230e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801230c:	e001      	b.n	8012312 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012312:	4618      	mov	r0, r3
 8012314:	371c      	adds	r7, #28
 8012316:	46bd      	mov	sp, r7
 8012318:	bd90      	pop	{r4, r7, pc}
 801231a:	bf00      	nop
 801231c:	20000038 	.word	0x20000038
 8012320:	10624dd3 	.word	0x10624dd3
 8012324:	002000c5 	.word	0x002000c5

08012328 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012328:	b490      	push	{r4, r7}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012330:	4b21      	ldr	r3, [pc, #132]	; (80123b8 <SDMMC_GetCmdResp7+0x90>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a21      	ldr	r2, [pc, #132]	; (80123bc <SDMMC_GetCmdResp7+0x94>)
 8012336:	fba2 2303 	umull	r2, r3, r2, r3
 801233a:	0a5b      	lsrs	r3, r3, #9
 801233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012340:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8012344:	4623      	mov	r3, r4
 8012346:	1e5c      	subs	r4, r3, #1
 8012348:	2b00      	cmp	r3, #0
 801234a:	d102      	bne.n	8012352 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801234c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012350:	e02c      	b.n	80123ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012356:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801235e:	2b00      	cmp	r3, #0
 8012360:	d0f0      	beq.n	8012344 <SDMMC_GetCmdResp7+0x1c>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1eb      	bne.n	8012344 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012370:	f003 0304 	and.w	r3, r3, #4
 8012374:	2b00      	cmp	r3, #0
 8012376:	d004      	beq.n	8012382 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2204      	movs	r2, #4
 801237c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801237e:	2304      	movs	r3, #4
 8012380:	e014      	b.n	80123ac <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012386:	f003 0301 	and.w	r3, r3, #1
 801238a:	2b00      	cmp	r3, #0
 801238c:	d004      	beq.n	8012398 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2201      	movs	r2, #1
 8012392:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012394:	2301      	movs	r3, #1
 8012396:	e009      	b.n	80123ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d002      	beq.n	80123aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2240      	movs	r2, #64	; 0x40
 80123a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80123aa:	2300      	movs	r3, #0

}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bc90      	pop	{r4, r7}
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	20000038 	.word	0x20000038
 80123bc:	10624dd3 	.word	0x10624dd3

080123c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80123c0:	b084      	sub	sp, #16
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b084      	sub	sp, #16
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	f107 001c 	add.w	r0, r7, #28
 80123ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80123d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d122      	bne.n	801241e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80123ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012402:	2b01      	cmp	r3, #1
 8012404:	d105      	bne.n	8012412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f001 f9c8 	bl	80137a8 <USB_CoreReset>
 8012418:	4603      	mov	r3, r0
 801241a:	73fb      	strb	r3, [r7, #15]
 801241c:	e01a      	b.n	8012454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f001 f9bc 	bl	80137a8 <USB_CoreReset>
 8012430:	4603      	mov	r3, r0
 8012432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801243e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	639a      	str	r2, [r3, #56]	; 0x38
 8012446:	e005      	b.n	8012454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801244c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8012454:	7bfb      	ldrb	r3, [r7, #15]
}
 8012456:	4618      	mov	r0, r3
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012460:	b004      	add	sp, #16
 8012462:	4770      	bx	lr

08012464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012464:	b480      	push	{r7}
 8012466:	b087      	sub	sp, #28
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	4613      	mov	r3, r2
 8012470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012472:	79fb      	ldrb	r3, [r7, #7]
 8012474:	2b02      	cmp	r3, #2
 8012476:	d165      	bne.n	8012544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	4a3e      	ldr	r2, [pc, #248]	; (8012574 <USB_SetTurnaroundTime+0x110>)
 801247c:	4293      	cmp	r3, r2
 801247e:	d906      	bls.n	801248e <USB_SetTurnaroundTime+0x2a>
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	4a3d      	ldr	r2, [pc, #244]	; (8012578 <USB_SetTurnaroundTime+0x114>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d202      	bcs.n	801248e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012488:	230f      	movs	r3, #15
 801248a:	617b      	str	r3, [r7, #20]
 801248c:	e05c      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	4a39      	ldr	r2, [pc, #228]	; (8012578 <USB_SetTurnaroundTime+0x114>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d306      	bcc.n	80124a4 <USB_SetTurnaroundTime+0x40>
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	4a38      	ldr	r2, [pc, #224]	; (801257c <USB_SetTurnaroundTime+0x118>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d202      	bcs.n	80124a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801249e:	230e      	movs	r3, #14
 80124a0:	617b      	str	r3, [r7, #20]
 80124a2:	e051      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	4a35      	ldr	r2, [pc, #212]	; (801257c <USB_SetTurnaroundTime+0x118>)
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d306      	bcc.n	80124ba <USB_SetTurnaroundTime+0x56>
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	4a34      	ldr	r2, [pc, #208]	; (8012580 <USB_SetTurnaroundTime+0x11c>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d202      	bcs.n	80124ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80124b4:	230d      	movs	r3, #13
 80124b6:	617b      	str	r3, [r7, #20]
 80124b8:	e046      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4a30      	ldr	r2, [pc, #192]	; (8012580 <USB_SetTurnaroundTime+0x11c>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d306      	bcc.n	80124d0 <USB_SetTurnaroundTime+0x6c>
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	4a2f      	ldr	r2, [pc, #188]	; (8012584 <USB_SetTurnaroundTime+0x120>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d802      	bhi.n	80124d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80124ca:	230c      	movs	r3, #12
 80124cc:	617b      	str	r3, [r7, #20]
 80124ce:	e03b      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	4a2c      	ldr	r2, [pc, #176]	; (8012584 <USB_SetTurnaroundTime+0x120>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d906      	bls.n	80124e6 <USB_SetTurnaroundTime+0x82>
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	4a2b      	ldr	r2, [pc, #172]	; (8012588 <USB_SetTurnaroundTime+0x124>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d802      	bhi.n	80124e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80124e0:	230b      	movs	r3, #11
 80124e2:	617b      	str	r3, [r7, #20]
 80124e4:	e030      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	4a27      	ldr	r2, [pc, #156]	; (8012588 <USB_SetTurnaroundTime+0x124>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d906      	bls.n	80124fc <USB_SetTurnaroundTime+0x98>
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	4a26      	ldr	r2, [pc, #152]	; (801258c <USB_SetTurnaroundTime+0x128>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d802      	bhi.n	80124fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80124f6:	230a      	movs	r3, #10
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e025      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	4a23      	ldr	r2, [pc, #140]	; (801258c <USB_SetTurnaroundTime+0x128>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d906      	bls.n	8012512 <USB_SetTurnaroundTime+0xae>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	4a22      	ldr	r2, [pc, #136]	; (8012590 <USB_SetTurnaroundTime+0x12c>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d202      	bcs.n	8012512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801250c:	2309      	movs	r3, #9
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	e01a      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	4a1e      	ldr	r2, [pc, #120]	; (8012590 <USB_SetTurnaroundTime+0x12c>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d306      	bcc.n	8012528 <USB_SetTurnaroundTime+0xc4>
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	4a1d      	ldr	r2, [pc, #116]	; (8012594 <USB_SetTurnaroundTime+0x130>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d802      	bhi.n	8012528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012522:	2308      	movs	r3, #8
 8012524:	617b      	str	r3, [r7, #20]
 8012526:	e00f      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	4a1a      	ldr	r2, [pc, #104]	; (8012594 <USB_SetTurnaroundTime+0x130>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d906      	bls.n	801253e <USB_SetTurnaroundTime+0xda>
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	4a19      	ldr	r2, [pc, #100]	; (8012598 <USB_SetTurnaroundTime+0x134>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d202      	bcs.n	801253e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012538:	2307      	movs	r3, #7
 801253a:	617b      	str	r3, [r7, #20]
 801253c:	e004      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801253e:	2306      	movs	r3, #6
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	e001      	b.n	8012548 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012544:	2309      	movs	r3, #9
 8012546:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68da      	ldr	r2, [r3, #12]
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	029b      	lsls	r3, r3, #10
 801255c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012560:	431a      	orrs	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	371c      	adds	r7, #28
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	00d8acbf 	.word	0x00d8acbf
 8012578:	00e4e1c0 	.word	0x00e4e1c0
 801257c:	00f42400 	.word	0x00f42400
 8012580:	01067380 	.word	0x01067380
 8012584:	011a499f 	.word	0x011a499f
 8012588:	01312cff 	.word	0x01312cff
 801258c:	014ca43f 	.word	0x014ca43f
 8012590:	016e3600 	.word	0x016e3600
 8012594:	01a6ab1f 	.word	0x01a6ab1f
 8012598:	01e84800 	.word	0x01e84800

0801259c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	f043 0201 	orr.w	r2, r3, #1
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	f023 0201 	bic.w	r2, r3, #1
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	370c      	adds	r7, #12
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	460b      	mov	r3, r1
 80125ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80125f8:	78fb      	ldrb	r3, [r7, #3]
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d106      	bne.n	801260c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	60da      	str	r2, [r3, #12]
 801260a:	e00b      	b.n	8012624 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801260c:	78fb      	ldrb	r3, [r7, #3]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d106      	bne.n	8012620 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	60da      	str	r2, [r3, #12]
 801261e:	e001      	b.n	8012624 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012620:	2301      	movs	r3, #1
 8012622:	e003      	b.n	801262c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012624:	2032      	movs	r0, #50	; 0x32
 8012626:	f7f5 fc6d 	bl	8007f04 <HAL_Delay>

  return HAL_OK;
 801262a:	2300      	movs	r3, #0
}
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012634:	b084      	sub	sp, #16
 8012636:	b580      	push	{r7, lr}
 8012638:	b086      	sub	sp, #24
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
 801263e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012646:	2300      	movs	r3, #0
 8012648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801264e:	2300      	movs	r3, #0
 8012650:	613b      	str	r3, [r7, #16]
 8012652:	e009      	b.n	8012668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	3340      	adds	r3, #64	; 0x40
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	4413      	add	r3, r2
 801265e:	2200      	movs	r2, #0
 8012660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	3301      	adds	r3, #1
 8012666:	613b      	str	r3, [r7, #16]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	2b0e      	cmp	r3, #14
 801266c:	d9f2      	bls.n	8012654 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012670:	2b00      	cmp	r3, #0
 8012672:	d11c      	bne.n	80126ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012682:	f043 0302 	orr.w	r3, r3, #2
 8012686:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801268c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	601a      	str	r2, [r3, #0]
 80126ac:	e005      	b.n	80126ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80126c0:	461a      	mov	r2, r3
 80126c2:	2300      	movs	r3, #0
 80126c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126cc:	4619      	mov	r1, r3
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126d4:	461a      	mov	r2, r3
 80126d6:	680b      	ldr	r3, [r1, #0]
 80126d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80126da:	2103      	movs	r1, #3
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 f93d 	bl	801295c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80126e2:	2110      	movs	r1, #16
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 f8f1 	bl	80128cc <USB_FlushTxFifo>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d001      	beq.n	80126f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80126f0:	2301      	movs	r3, #1
 80126f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 f90f 	bl	8012918 <USB_FlushRxFifo>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801270a:	461a      	mov	r2, r3
 801270c:	2300      	movs	r3, #0
 801270e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012716:	461a      	mov	r2, r3
 8012718:	2300      	movs	r3, #0
 801271a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012722:	461a      	mov	r2, r3
 8012724:	2300      	movs	r3, #0
 8012726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012728:	2300      	movs	r3, #0
 801272a:	613b      	str	r3, [r7, #16]
 801272c:	e043      	b.n	80127b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	015a      	lsls	r2, r3, #5
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	4413      	add	r3, r2
 8012736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012744:	d118      	bne.n	8012778 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d10a      	bne.n	8012762 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	015a      	lsls	r2, r3, #5
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4413      	add	r3, r2
 8012754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012758:	461a      	mov	r2, r3
 801275a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801275e:	6013      	str	r3, [r2, #0]
 8012760:	e013      	b.n	801278a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	015a      	lsls	r2, r3, #5
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	4413      	add	r3, r2
 801276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276e:	461a      	mov	r2, r3
 8012770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	e008      	b.n	801278a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	015a      	lsls	r2, r3, #5
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	4413      	add	r3, r2
 8012780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012784:	461a      	mov	r2, r3
 8012786:	2300      	movs	r3, #0
 8012788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	015a      	lsls	r2, r3, #5
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	4413      	add	r3, r2
 8012792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012796:	461a      	mov	r2, r3
 8012798:	2300      	movs	r3, #0
 801279a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	015a      	lsls	r2, r3, #5
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	4413      	add	r3, r2
 80127a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127a8:	461a      	mov	r2, r3
 80127aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80127ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	3301      	adds	r3, #1
 80127b4:	613b      	str	r3, [r7, #16]
 80127b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b8:	693a      	ldr	r2, [r7, #16]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d3b7      	bcc.n	801272e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127be:	2300      	movs	r3, #0
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	e043      	b.n	801284c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	015a      	lsls	r2, r3, #5
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	4413      	add	r3, r2
 80127cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127da:	d118      	bne.n	801280e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d10a      	bne.n	80127f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	015a      	lsls	r2, r3, #5
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	4413      	add	r3, r2
 80127ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ee:	461a      	mov	r2, r3
 80127f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80127f4:	6013      	str	r3, [r2, #0]
 80127f6:	e013      	b.n	8012820 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	015a      	lsls	r2, r3, #5
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	4413      	add	r3, r2
 8012800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012804:	461a      	mov	r2, r3
 8012806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801280a:	6013      	str	r3, [r2, #0]
 801280c:	e008      	b.n	8012820 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	015a      	lsls	r2, r3, #5
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	4413      	add	r3, r2
 8012816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801281a:	461a      	mov	r2, r3
 801281c:	2300      	movs	r3, #0
 801281e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	015a      	lsls	r2, r3, #5
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	4413      	add	r3, r2
 8012828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801282c:	461a      	mov	r2, r3
 801282e:	2300      	movs	r3, #0
 8012830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	015a      	lsls	r2, r3, #5
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	4413      	add	r3, r2
 801283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801283e:	461a      	mov	r2, r3
 8012840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	3301      	adds	r3, #1
 801284a:	613b      	str	r3, [r7, #16]
 801284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284e:	693a      	ldr	r2, [r7, #16]
 8012850:	429a      	cmp	r2, r3
 8012852:	d3b7      	bcc.n	80127c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2200      	movs	r2, #0
 801286c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	699b      	ldr	r3, [r3, #24]
 801287a:	f043 0210 	orr.w	r2, r3, #16
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	699a      	ldr	r2, [r3, #24]
 8012886:	4b10      	ldr	r3, [pc, #64]	; (80128c8 <USB_DevInit+0x294>)
 8012888:	4313      	orrs	r3, r2
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012890:	2b00      	cmp	r3, #0
 8012892:	d005      	beq.n	80128a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	f043 0208 	orr.w	r2, r3, #8
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80128a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d107      	bne.n	80128b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	699b      	ldr	r3, [r3, #24]
 80128aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80128ae:	f043 0304 	orr.w	r3, r3, #4
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80128b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3718      	adds	r7, #24
 80128bc:	46bd      	mov	sp, r7
 80128be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80128c2:	b004      	add	sp, #16
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	803c3800 	.word	0x803c3800

080128cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80128d6:	2300      	movs	r3, #0
 80128d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	019b      	lsls	r3, r3, #6
 80128de:	f043 0220 	orr.w	r2, r3, #32
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	3301      	adds	r3, #1
 80128ea:	60fb      	str	r3, [r7, #12]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	4a09      	ldr	r2, [pc, #36]	; (8012914 <USB_FlushTxFifo+0x48>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d901      	bls.n	80128f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80128f4:	2303      	movs	r3, #3
 80128f6:	e006      	b.n	8012906 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	691b      	ldr	r3, [r3, #16]
 80128fc:	f003 0320 	and.w	r3, r3, #32
 8012900:	2b20      	cmp	r3, #32
 8012902:	d0f0      	beq.n	80128e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	00030d40 	.word	0x00030d40

08012918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012920:	2300      	movs	r3, #0
 8012922:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2210      	movs	r2, #16
 8012928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	3301      	adds	r3, #1
 801292e:	60fb      	str	r3, [r7, #12]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	4a09      	ldr	r2, [pc, #36]	; (8012958 <USB_FlushRxFifo+0x40>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d901      	bls.n	801293c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012938:	2303      	movs	r3, #3
 801293a:	e006      	b.n	801294a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	691b      	ldr	r3, [r3, #16]
 8012940:	f003 0310 	and.w	r3, r3, #16
 8012944:	2b10      	cmp	r3, #16
 8012946:	d0f0      	beq.n	801292a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	00030d40 	.word	0x00030d40

0801295c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801295c:	b480      	push	{r7}
 801295e:	b085      	sub	sp, #20
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	460b      	mov	r3, r1
 8012966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	78fb      	ldrb	r3, [r7, #3]
 8012976:	68f9      	ldr	r1, [r7, #12]
 8012978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801297c:	4313      	orrs	r3, r2
 801297e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	3714      	adds	r7, #20
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr

0801298e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801298e:	b480      	push	{r7}
 8012990:	b087      	sub	sp, #28
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a0:	689b      	ldr	r3, [r3, #8]
 80129a2:	f003 0306 	and.w	r3, r3, #6
 80129a6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b02      	cmp	r3, #2
 80129ac:	d002      	beq.n	80129b4 <USB_GetDevSpeed+0x26>
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b06      	cmp	r3, #6
 80129b2:	d102      	bne.n	80129ba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80129b4:	2302      	movs	r3, #2
 80129b6:	75fb      	strb	r3, [r7, #23]
 80129b8:	e001      	b.n	80129be <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80129ba:	230f      	movs	r3, #15
 80129bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80129be:	7dfb      	ldrb	r3, [r7, #23]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	371c      	adds	r7, #28
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	785b      	ldrb	r3, [r3, #1]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d13a      	bne.n	8012a5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129ee:	69da      	ldr	r2, [r3, #28]
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	f003 030f 	and.w	r3, r3, #15
 80129f8:	2101      	movs	r1, #1
 80129fa:	fa01 f303 	lsl.w	r3, r1, r3
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	68f9      	ldr	r1, [r7, #12]
 8012a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a06:	4313      	orrs	r3, r2
 8012a08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	015a      	lsls	r2, r3, #5
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	4413      	add	r3, r2
 8012a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d155      	bne.n	8012acc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	015a      	lsls	r2, r3, #5
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	78db      	ldrb	r3, [r3, #3]
 8012a3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	059b      	lsls	r3, r3, #22
 8012a42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a44:	4313      	orrs	r3, r2
 8012a46:	68ba      	ldr	r2, [r7, #8]
 8012a48:	0151      	lsls	r1, r2, #5
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	440a      	add	r2, r1
 8012a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a5a:	6013      	str	r3, [r2, #0]
 8012a5c:	e036      	b.n	8012acc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a64:	69da      	ldr	r2, [r3, #28]
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	f003 030f 	and.w	r3, r3, #15
 8012a6e:	2101      	movs	r1, #1
 8012a70:	fa01 f303 	lsl.w	r3, r1, r3
 8012a74:	041b      	lsls	r3, r3, #16
 8012a76:	68f9      	ldr	r1, [r7, #12]
 8012a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	015a      	lsls	r2, r3, #5
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	4413      	add	r3, r2
 8012a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d11a      	bne.n	8012acc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	015a      	lsls	r2, r3, #5
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	689b      	ldr	r3, [r3, #8]
 8012aa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	78db      	ldrb	r3, [r3, #3]
 8012ab0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012ab2:	430b      	orrs	r3, r1
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	68ba      	ldr	r2, [r7, #8]
 8012ab8:	0151      	lsls	r1, r2, #5
 8012aba:	68fa      	ldr	r2, [r7, #12]
 8012abc:	440a      	add	r2, r1
 8012abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012aca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
	...

08012adc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	785b      	ldrb	r3, [r3, #1]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d161      	bne.n	8012bbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	015a      	lsls	r2, r3, #5
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	4413      	add	r3, r2
 8012b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b0e:	d11f      	bne.n	8012b50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	015a      	lsls	r2, r3, #5
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4413      	add	r3, r2
 8012b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	68ba      	ldr	r2, [r7, #8]
 8012b20:	0151      	lsls	r1, r2, #5
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	440a      	add	r2, r1
 8012b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	015a      	lsls	r2, r3, #5
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	4413      	add	r3, r2
 8012b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	0151      	lsls	r1, r2, #5
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	440a      	add	r2, r1
 8012b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	f003 030f 	and.w	r3, r3, #15
 8012b60:	2101      	movs	r1, #1
 8012b62:	fa01 f303 	lsl.w	r3, r1, r3
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	43db      	mvns	r3, r3
 8012b6a:	68f9      	ldr	r1, [r7, #12]
 8012b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b70:	4013      	ands	r3, r2
 8012b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b7a:	69da      	ldr	r2, [r3, #28]
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	f003 030f 	and.w	r3, r3, #15
 8012b84:	2101      	movs	r1, #1
 8012b86:	fa01 f303 	lsl.w	r3, r1, r3
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	43db      	mvns	r3, r3
 8012b8e:	68f9      	ldr	r1, [r7, #12]
 8012b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b94:	4013      	ands	r3, r2
 8012b96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	015a      	lsls	r2, r3, #5
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	4413      	add	r3, r2
 8012ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	0159      	lsls	r1, r3, #5
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	440b      	add	r3, r1
 8012bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	4b35      	ldr	r3, [pc, #212]	; (8012c8c <USB_DeactivateEndpoint+0x1b0>)
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	600b      	str	r3, [r1, #0]
 8012bba:	e060      	b.n	8012c7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	015a      	lsls	r2, r3, #5
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bd2:	d11f      	bne.n	8012c14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	015a      	lsls	r2, r3, #5
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	4413      	add	r3, r2
 8012bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	68ba      	ldr	r2, [r7, #8]
 8012be4:	0151      	lsls	r1, r2, #5
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	440a      	add	r2, r1
 8012bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012bf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	015a      	lsls	r2, r3, #5
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	0151      	lsls	r1, r2, #5
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	440a      	add	r2, r1
 8012c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	f003 030f 	and.w	r3, r3, #15
 8012c24:	2101      	movs	r1, #1
 8012c26:	fa01 f303 	lsl.w	r3, r1, r3
 8012c2a:	041b      	lsls	r3, r3, #16
 8012c2c:	43db      	mvns	r3, r3
 8012c2e:	68f9      	ldr	r1, [r7, #12]
 8012c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c34:	4013      	ands	r3, r2
 8012c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c3e:	69da      	ldr	r2, [r3, #28]
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	f003 030f 	and.w	r3, r3, #15
 8012c48:	2101      	movs	r1, #1
 8012c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c4e:	041b      	lsls	r3, r3, #16
 8012c50:	43db      	mvns	r3, r3
 8012c52:	68f9      	ldr	r1, [r7, #12]
 8012c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c58:	4013      	ands	r3, r2
 8012c5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	015a      	lsls	r2, r3, #5
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	4413      	add	r3, r2
 8012c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	0159      	lsls	r1, r3, #5
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	440b      	add	r3, r1
 8012c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c76:	4619      	mov	r1, r3
 8012c78:	4b05      	ldr	r3, [pc, #20]	; (8012c90 <USB_DeactivateEndpoint+0x1b4>)
 8012c7a:	4013      	ands	r3, r2
 8012c7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012c7e:	2300      	movs	r3, #0
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3714      	adds	r7, #20
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr
 8012c8c:	ec337800 	.word	0xec337800
 8012c90:	eff37800 	.word	0xeff37800

08012c94 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	785b      	ldrb	r3, [r3, #1]
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	f040 810a 	bne.w	8012ec6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	695b      	ldr	r3, [r3, #20]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d132      	bne.n	8012d20 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	015a      	lsls	r2, r3, #5
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	693a      	ldr	r2, [r7, #16]
 8012cca:	0151      	lsls	r1, r2, #5
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	440a      	add	r2, r1
 8012cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	015a      	lsls	r2, r3, #5
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cea:	691b      	ldr	r3, [r3, #16]
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	0151      	lsls	r1, r2, #5
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	440a      	add	r2, r1
 8012cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	015a      	lsls	r2, r3, #5
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	4413      	add	r3, r2
 8012d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d0a:	691b      	ldr	r3, [r3, #16]
 8012d0c:	693a      	ldr	r2, [r7, #16]
 8012d0e:	0151      	lsls	r1, r2, #5
 8012d10:	697a      	ldr	r2, [r7, #20]
 8012d12:	440a      	add	r2, r1
 8012d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d18:	0cdb      	lsrs	r3, r3, #19
 8012d1a:	04db      	lsls	r3, r3, #19
 8012d1c:	6113      	str	r3, [r2, #16]
 8012d1e:	e074      	b.n	8012e0a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	015a      	lsls	r2, r3, #5
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	4413      	add	r3, r2
 8012d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2c:	691b      	ldr	r3, [r3, #16]
 8012d2e:	693a      	ldr	r2, [r7, #16]
 8012d30:	0151      	lsls	r1, r2, #5
 8012d32:	697a      	ldr	r2, [r7, #20]
 8012d34:	440a      	add	r2, r1
 8012d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d3a:	0cdb      	lsrs	r3, r3, #19
 8012d3c:	04db      	lsls	r3, r3, #19
 8012d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	015a      	lsls	r2, r3, #5
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	4413      	add	r3, r2
 8012d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	693a      	ldr	r2, [r7, #16]
 8012d50:	0151      	lsls	r1, r2, #5
 8012d52:	697a      	ldr	r2, [r7, #20]
 8012d54:	440a      	add	r2, r1
 8012d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	015a      	lsls	r2, r3, #5
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d70:	691a      	ldr	r2, [r3, #16]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	6959      	ldr	r1, [r3, #20]
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	440b      	add	r3, r1
 8012d7c:	1e59      	subs	r1, r3, #1
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8012d86:	04d9      	lsls	r1, r3, #19
 8012d88:	4baf      	ldr	r3, [pc, #700]	; (8013048 <USB_EPStartXfer+0x3b4>)
 8012d8a:	400b      	ands	r3, r1
 8012d8c:	6939      	ldr	r1, [r7, #16]
 8012d8e:	0148      	lsls	r0, r1, #5
 8012d90:	6979      	ldr	r1, [r7, #20]
 8012d92:	4401      	add	r1, r0
 8012d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	015a      	lsls	r2, r3, #5
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	4413      	add	r3, r2
 8012da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da8:	691a      	ldr	r2, [r3, #16]
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	695b      	ldr	r3, [r3, #20]
 8012dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012db2:	6939      	ldr	r1, [r7, #16]
 8012db4:	0148      	lsls	r0, r1, #5
 8012db6:	6979      	ldr	r1, [r7, #20]
 8012db8:	4401      	add	r1, r0
 8012dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012dbe:	4313      	orrs	r3, r2
 8012dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	78db      	ldrb	r3, [r3, #3]
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d11f      	bne.n	8012e0a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	015a      	lsls	r2, r3, #5
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dd6:	691b      	ldr	r3, [r3, #16]
 8012dd8:	693a      	ldr	r2, [r7, #16]
 8012dda:	0151      	lsls	r1, r2, #5
 8012ddc:	697a      	ldr	r2, [r7, #20]
 8012dde:	440a      	add	r2, r1
 8012de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	015a      	lsls	r2, r3, #5
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	4413      	add	r3, r2
 8012df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012df6:	691b      	ldr	r3, [r3, #16]
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	0151      	lsls	r1, r2, #5
 8012dfc:	697a      	ldr	r2, [r7, #20]
 8012dfe:	440a      	add	r2, r1
 8012e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e08:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	015a      	lsls	r2, r3, #5
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	4413      	add	r3, r2
 8012e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	0151      	lsls	r1, r2, #5
 8012e1c:	697a      	ldr	r2, [r7, #20]
 8012e1e:	440a      	add	r2, r1
 8012e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e28:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	78db      	ldrb	r3, [r3, #3]
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d015      	beq.n	8012e5e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	695b      	ldr	r3, [r3, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	f000 8100 	beq.w	801303c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	f003 030f 	and.w	r3, r3, #15
 8012e4c:	2101      	movs	r1, #1
 8012e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8012e52:	6979      	ldr	r1, [r7, #20]
 8012e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	634b      	str	r3, [r1, #52]	; 0x34
 8012e5c:	e0ee      	b.n	801303c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e64:	689b      	ldr	r3, [r3, #8]
 8012e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d110      	bne.n	8012e90 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	015a      	lsls	r2, r3, #5
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	693a      	ldr	r2, [r7, #16]
 8012e7e:	0151      	lsls	r1, r2, #5
 8012e80:	697a      	ldr	r2, [r7, #20]
 8012e82:	440a      	add	r2, r1
 8012e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e8c:	6013      	str	r3, [r2, #0]
 8012e8e:	e00f      	b.n	8012eb0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	015a      	lsls	r2, r3, #5
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	4413      	add	r3, r2
 8012e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	693a      	ldr	r2, [r7, #16]
 8012ea0:	0151      	lsls	r1, r2, #5
 8012ea2:	697a      	ldr	r2, [r7, #20]
 8012ea4:	440a      	add	r2, r1
 8012ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012eae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	68d9      	ldr	r1, [r3, #12]
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	781a      	ldrb	r2, [r3, #0]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	695b      	ldr	r3, [r3, #20]
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 f9e2 	bl	8013288 <USB_WritePacket>
 8012ec4:	e0ba      	b.n	801303c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	015a      	lsls	r2, r3, #5
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	4413      	add	r3, r2
 8012ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ed2:	691b      	ldr	r3, [r3, #16]
 8012ed4:	693a      	ldr	r2, [r7, #16]
 8012ed6:	0151      	lsls	r1, r2, #5
 8012ed8:	697a      	ldr	r2, [r7, #20]
 8012eda:	440a      	add	r2, r1
 8012edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ee0:	0cdb      	lsrs	r3, r3, #19
 8012ee2:	04db      	lsls	r3, r3, #19
 8012ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	015a      	lsls	r2, r3, #5
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	4413      	add	r3, r2
 8012eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	693a      	ldr	r2, [r7, #16]
 8012ef6:	0151      	lsls	r1, r2, #5
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	440a      	add	r2, r1
 8012efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012f04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012f08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	695b      	ldr	r3, [r3, #20]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d123      	bne.n	8012f5a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f1e:	691a      	ldr	r2, [r3, #16]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f28:	6939      	ldr	r1, [r7, #16]
 8012f2a:	0148      	lsls	r0, r1, #5
 8012f2c:	6979      	ldr	r1, [r7, #20]
 8012f2e:	4401      	add	r1, r0
 8012f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f34:	4313      	orrs	r3, r2
 8012f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	015a      	lsls	r2, r3, #5
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	4413      	add	r3, r2
 8012f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	693a      	ldr	r2, [r7, #16]
 8012f48:	0151      	lsls	r1, r2, #5
 8012f4a:	697a      	ldr	r2, [r7, #20]
 8012f4c:	440a      	add	r2, r1
 8012f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f56:	6113      	str	r3, [r2, #16]
 8012f58:	e033      	b.n	8012fc2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	695a      	ldr	r2, [r3, #20]
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	689b      	ldr	r3, [r3, #8]
 8012f62:	4413      	add	r3, r2
 8012f64:	1e5a      	subs	r2, r3, #1
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f6e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	015a      	lsls	r2, r3, #5
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	4413      	add	r3, r2
 8012f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f7c:	691a      	ldr	r2, [r3, #16]
 8012f7e:	89fb      	ldrh	r3, [r7, #14]
 8012f80:	04d9      	lsls	r1, r3, #19
 8012f82:	4b31      	ldr	r3, [pc, #196]	; (8013048 <USB_EPStartXfer+0x3b4>)
 8012f84:	400b      	ands	r3, r1
 8012f86:	6939      	ldr	r1, [r7, #16]
 8012f88:	0148      	lsls	r0, r1, #5
 8012f8a:	6979      	ldr	r1, [r7, #20]
 8012f8c:	4401      	add	r1, r0
 8012f8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f92:	4313      	orrs	r3, r2
 8012f94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	015a      	lsls	r2, r3, #5
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fa2:	691a      	ldr	r2, [r3, #16]
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	689b      	ldr	r3, [r3, #8]
 8012fa8:	89f9      	ldrh	r1, [r7, #14]
 8012faa:	fb01 f303 	mul.w	r3, r1, r3
 8012fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012fb2:	6939      	ldr	r1, [r7, #16]
 8012fb4:	0148      	lsls	r0, r1, #5
 8012fb6:	6979      	ldr	r1, [r7, #20]
 8012fb8:	4401      	add	r1, r0
 8012fba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	78db      	ldrb	r3, [r3, #3]
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d128      	bne.n	801301c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d110      	bne.n	8012ffc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	015a      	lsls	r2, r3, #5
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	693a      	ldr	r2, [r7, #16]
 8012fea:	0151      	lsls	r1, r2, #5
 8012fec:	697a      	ldr	r2, [r7, #20]
 8012fee:	440a      	add	r2, r1
 8012ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	e00f      	b.n	801301c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	015a      	lsls	r2, r3, #5
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	4413      	add	r3, r2
 8013004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	693a      	ldr	r2, [r7, #16]
 801300c:	0151      	lsls	r1, r2, #5
 801300e:	697a      	ldr	r2, [r7, #20]
 8013010:	440a      	add	r2, r1
 8013012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801301a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	015a      	lsls	r2, r3, #5
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	4413      	add	r3, r2
 8013024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	693a      	ldr	r2, [r7, #16]
 801302c:	0151      	lsls	r1, r2, #5
 801302e:	697a      	ldr	r2, [r7, #20]
 8013030:	440a      	add	r2, r1
 8013032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801303a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3718      	adds	r7, #24
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	1ff80000 	.word	0x1ff80000

0801304c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801304c:	b480      	push	{r7}
 801304e:	b085      	sub	sp, #20
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	785b      	ldrb	r3, [r3, #1]
 8013064:	2b01      	cmp	r3, #1
 8013066:	f040 80ab 	bne.w	80131c0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	695b      	ldr	r3, [r3, #20]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d132      	bne.n	80130d8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	015a      	lsls	r2, r3, #5
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	4413      	add	r3, r2
 801307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	68ba      	ldr	r2, [r7, #8]
 8013082:	0151      	lsls	r1, r2, #5
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	440a      	add	r2, r1
 8013088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801308c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	015a      	lsls	r2, r3, #5
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	4413      	add	r3, r2
 801309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a2:	691b      	ldr	r3, [r3, #16]
 80130a4:	68ba      	ldr	r2, [r7, #8]
 80130a6:	0151      	lsls	r1, r2, #5
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	440a      	add	r2, r1
 80130ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	015a      	lsls	r2, r3, #5
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	4413      	add	r3, r2
 80130be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c2:	691b      	ldr	r3, [r3, #16]
 80130c4:	68ba      	ldr	r2, [r7, #8]
 80130c6:	0151      	lsls	r1, r2, #5
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	440a      	add	r2, r1
 80130cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130d0:	0cdb      	lsrs	r3, r3, #19
 80130d2:	04db      	lsls	r3, r3, #19
 80130d4:	6113      	str	r3, [r2, #16]
 80130d6:	e04e      	b.n	8013176 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	015a      	lsls	r2, r3, #5
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	4413      	add	r3, r2
 80130e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e4:	691b      	ldr	r3, [r3, #16]
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	0151      	lsls	r1, r2, #5
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	440a      	add	r2, r1
 80130ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130f2:	0cdb      	lsrs	r3, r3, #19
 80130f4:	04db      	lsls	r3, r3, #19
 80130f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	015a      	lsls	r2, r3, #5
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	4413      	add	r3, r2
 8013100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	68ba      	ldr	r2, [r7, #8]
 8013108:	0151      	lsls	r1, r2, #5
 801310a:	68fa      	ldr	r2, [r7, #12]
 801310c:	440a      	add	r2, r1
 801310e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801311a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	695a      	ldr	r2, [r3, #20]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	689b      	ldr	r3, [r3, #8]
 8013124:	429a      	cmp	r2, r3
 8013126:	d903      	bls.n	8013130 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	689a      	ldr	r2, [r3, #8]
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	015a      	lsls	r2, r3, #5
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	4413      	add	r3, r2
 8013138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	68ba      	ldr	r2, [r7, #8]
 8013140:	0151      	lsls	r1, r2, #5
 8013142:	68fa      	ldr	r2, [r7, #12]
 8013144:	440a      	add	r2, r1
 8013146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801314a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801314e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	015a      	lsls	r2, r3, #5
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	4413      	add	r3, r2
 8013158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315c:	691a      	ldr	r2, [r3, #16]
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	695b      	ldr	r3, [r3, #20]
 8013162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013166:	68b9      	ldr	r1, [r7, #8]
 8013168:	0148      	lsls	r0, r1, #5
 801316a:	68f9      	ldr	r1, [r7, #12]
 801316c:	4401      	add	r1, r0
 801316e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013172:	4313      	orrs	r3, r2
 8013174:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	015a      	lsls	r2, r3, #5
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	4413      	add	r3, r2
 801317e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	0151      	lsls	r1, r2, #5
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	440a      	add	r2, r1
 801318c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013194:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	695b      	ldr	r3, [r3, #20]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d06d      	beq.n	801327a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	f003 030f 	and.w	r3, r3, #15
 80131ae:	2101      	movs	r1, #1
 80131b0:	fa01 f303 	lsl.w	r3, r1, r3
 80131b4:	68f9      	ldr	r1, [r7, #12]
 80131b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ba:	4313      	orrs	r3, r2
 80131bc:	634b      	str	r3, [r1, #52]	; 0x34
 80131be:	e05c      	b.n	801327a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	015a      	lsls	r2, r3, #5
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	4413      	add	r3, r2
 80131c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131cc:	691b      	ldr	r3, [r3, #16]
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	0151      	lsls	r1, r2, #5
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	440a      	add	r2, r1
 80131d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131da:	0cdb      	lsrs	r3, r3, #19
 80131dc:	04db      	lsls	r3, r3, #19
 80131de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	015a      	lsls	r2, r3, #5
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4413      	add	r3, r2
 80131e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	68ba      	ldr	r2, [r7, #8]
 80131f0:	0151      	lsls	r1, r2, #5
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	440a      	add	r2, r1
 80131f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80131fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013202:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	695b      	ldr	r3, [r3, #20]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d003      	beq.n	8013214 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	689a      	ldr	r2, [r3, #8]
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	015a      	lsls	r2, r3, #5
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	4413      	add	r3, r2
 801321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	0151      	lsls	r1, r2, #5
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	440a      	add	r2, r1
 801322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801322e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	015a      	lsls	r2, r3, #5
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	4413      	add	r3, r2
 801323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013240:	691a      	ldr	r2, [r3, #16]
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	689b      	ldr	r3, [r3, #8]
 8013246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801324a:	68b9      	ldr	r1, [r7, #8]
 801324c:	0148      	lsls	r0, r1, #5
 801324e:	68f9      	ldr	r1, [r7, #12]
 8013250:	4401      	add	r1, r0
 8013252:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013256:	4313      	orrs	r3, r2
 8013258:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	015a      	lsls	r2, r3, #5
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	0151      	lsls	r1, r2, #5
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	440a      	add	r2, r1
 8013270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8013288:	b480      	push	{r7}
 801328a:	b089      	sub	sp, #36	; 0x24
 801328c:	af00      	add	r7, sp, #0
 801328e:	60f8      	str	r0, [r7, #12]
 8013290:	60b9      	str	r1, [r7, #8]
 8013292:	4611      	mov	r1, r2
 8013294:	461a      	mov	r2, r3
 8013296:	460b      	mov	r3, r1
 8013298:	71fb      	strb	r3, [r7, #7]
 801329a:	4613      	mov	r3, r2
 801329c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80132a6:	88bb      	ldrh	r3, [r7, #4]
 80132a8:	3303      	adds	r3, #3
 80132aa:	089b      	lsrs	r3, r3, #2
 80132ac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80132ae:	2300      	movs	r3, #0
 80132b0:	61bb      	str	r3, [r7, #24]
 80132b2:	e00f      	b.n	80132d4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80132b4:	79fb      	ldrb	r3, [r7, #7]
 80132b6:	031a      	lsls	r2, r3, #12
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132c0:	461a      	mov	r2, r3
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	3304      	adds	r3, #4
 80132cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	3301      	adds	r3, #1
 80132d2:	61bb      	str	r3, [r7, #24]
 80132d4:	69ba      	ldr	r2, [r7, #24]
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d3eb      	bcc.n	80132b4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3724      	adds	r7, #36	; 0x24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr

080132ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80132ea:	b480      	push	{r7}
 80132ec:	b089      	sub	sp, #36	; 0x24
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	60f8      	str	r0, [r7, #12]
 80132f2:	60b9      	str	r1, [r7, #8]
 80132f4:	4613      	mov	r3, r2
 80132f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013300:	88fb      	ldrh	r3, [r7, #6]
 8013302:	3303      	adds	r3, #3
 8013304:	089b      	lsrs	r3, r3, #2
 8013306:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8013308:	2300      	movs	r3, #0
 801330a:	61bb      	str	r3, [r7, #24]
 801330c:	e00b      	b.n	8013326 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	601a      	str	r2, [r3, #0]
    pDest++;
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	3304      	adds	r3, #4
 801331e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	3301      	adds	r3, #1
 8013324:	61bb      	str	r3, [r7, #24]
 8013326:	69ba      	ldr	r2, [r7, #24]
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	429a      	cmp	r2, r3
 801332c:	d3ef      	bcc.n	801330e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801332e:	69fb      	ldr	r3, [r7, #28]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3724      	adds	r7, #36	; 0x24
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801333c:	b480      	push	{r7}
 801333e:	b085      	sub	sp, #20
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	785b      	ldrb	r3, [r3, #1]
 8013354:	2b01      	cmp	r3, #1
 8013356:	d12c      	bne.n	80133b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	015a      	lsls	r2, r3, #5
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	4413      	add	r3, r2
 8013360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2b00      	cmp	r3, #0
 8013368:	db12      	blt.n	8013390 <USB_EPSetStall+0x54>
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d00f      	beq.n	8013390 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	015a      	lsls	r2, r3, #5
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4413      	add	r3, r2
 8013378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	0151      	lsls	r1, r2, #5
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	440a      	add	r2, r1
 8013386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801338a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801338e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	0151      	lsls	r1, r2, #5
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	440a      	add	r2, r1
 80133a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	e02b      	b.n	801340a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	015a      	lsls	r2, r3, #5
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	4413      	add	r3, r2
 80133ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	db12      	blt.n	80133ea <USB_EPSetStall+0xae>
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00f      	beq.n	80133ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	015a      	lsls	r2, r3, #5
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	4413      	add	r3, r2
 80133d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	68ba      	ldr	r2, [r7, #8]
 80133da:	0151      	lsls	r1, r2, #5
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	440a      	add	r2, r1
 80133e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80133e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	015a      	lsls	r2, r3, #5
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	4413      	add	r3, r2
 80133f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	68ba      	ldr	r2, [r7, #8]
 80133fa:	0151      	lsls	r1, r2, #5
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	440a      	add	r2, r1
 8013400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801340a:	2300      	movs	r3, #0
}
 801340c:	4618      	mov	r0, r3
 801340e:	3714      	adds	r7, #20
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr

08013418 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013418:	b480      	push	{r7}
 801341a:	b085      	sub	sp, #20
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	785b      	ldrb	r3, [r3, #1]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d128      	bne.n	8013486 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	015a      	lsls	r2, r3, #5
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	4413      	add	r3, r2
 801343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68ba      	ldr	r2, [r7, #8]
 8013444:	0151      	lsls	r1, r2, #5
 8013446:	68fa      	ldr	r2, [r7, #12]
 8013448:	440a      	add	r2, r1
 801344a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801344e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	78db      	ldrb	r3, [r3, #3]
 8013458:	2b03      	cmp	r3, #3
 801345a:	d003      	beq.n	8013464 <USB_EPClearStall+0x4c>
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	78db      	ldrb	r3, [r3, #3]
 8013460:	2b02      	cmp	r3, #2
 8013462:	d138      	bne.n	80134d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	015a      	lsls	r2, r3, #5
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	4413      	add	r3, r2
 801346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	0151      	lsls	r1, r2, #5
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	440a      	add	r2, r1
 801347a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013482:	6013      	str	r3, [r2, #0]
 8013484:	e027      	b.n	80134d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	015a      	lsls	r2, r3, #5
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	4413      	add	r3, r2
 801348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	0151      	lsls	r1, r2, #5
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	440a      	add	r2, r1
 801349c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80134a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	78db      	ldrb	r3, [r3, #3]
 80134aa:	2b03      	cmp	r3, #3
 80134ac:	d003      	beq.n	80134b6 <USB_EPClearStall+0x9e>
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	78db      	ldrb	r3, [r3, #3]
 80134b2:	2b02      	cmp	r3, #2
 80134b4:	d10f      	bne.n	80134d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	015a      	lsls	r2, r3, #5
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	4413      	add	r3, r2
 80134be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	0151      	lsls	r1, r2, #5
 80134c8:	68fa      	ldr	r2, [r7, #12]
 80134ca:	440a      	add	r2, r1
 80134cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3714      	adds	r7, #20
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b085      	sub	sp, #20
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013502:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013506:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	78fb      	ldrb	r3, [r7, #3]
 8013512:	011b      	lsls	r3, r3, #4
 8013514:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013518:	68f9      	ldr	r1, [r7, #12]
 801351a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801351e:	4313      	orrs	r3, r2
 8013520:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013522:	2300      	movs	r3, #0
}
 8013524:	4618      	mov	r0, r3
 8013526:	3714      	adds	r7, #20
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr

08013530 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801354a:	f023 0302 	bic.w	r3, r3, #2
 801354e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8013550:	2003      	movs	r0, #3
 8013552:	f7f4 fcd7 	bl	8007f04 <HAL_Delay>

  return HAL_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801357a:	f043 0302 	orr.w	r3, r3, #2
 801357e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8013580:	2003      	movs	r0, #3
 8013582:	f7f4 fcbf 	bl	8007f04 <HAL_Delay>

  return HAL_OK;
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	695b      	ldr	r3, [r3, #20]
 801359c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	699b      	ldr	r3, [r3, #24]
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	4013      	ands	r3, r2
 80135a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80135a8:	68fb      	ldr	r3, [r7, #12]
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3714      	adds	r7, #20
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr

080135b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80135b6:	b480      	push	{r7}
 80135b8:	b085      	sub	sp, #20
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135d2:	69db      	ldr	r3, [r3, #28]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	4013      	ands	r3, r2
 80135d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	0c1b      	lsrs	r3, r3, #16
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3714      	adds	r7, #20
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80135ea:	b480      	push	{r7}
 80135ec:	b085      	sub	sp, #20
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135fc:	699b      	ldr	r3, [r3, #24]
 80135fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013606:	69db      	ldr	r3, [r3, #28]
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	4013      	ands	r3, r2
 801360c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	b29b      	uxth	r3, r3
}
 8013612:	4618      	mov	r0, r3
 8013614:	3714      	adds	r7, #20
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr

0801361e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801361e:	b480      	push	{r7}
 8013620:	b085      	sub	sp, #20
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
 8013626:	460b      	mov	r3, r1
 8013628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801362e:	78fb      	ldrb	r3, [r7, #3]
 8013630:	015a      	lsls	r2, r3, #5
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	4413      	add	r3, r2
 8013636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013644:	695b      	ldr	r3, [r3, #20]
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	4013      	ands	r3, r2
 801364a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801364c:	68bb      	ldr	r3, [r7, #8]
}
 801364e:	4618      	mov	r0, r3
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801365a:	b480      	push	{r7}
 801365c:	b087      	sub	sp, #28
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	460b      	mov	r3, r1
 8013664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801367c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801367e:	78fb      	ldrb	r3, [r7, #3]
 8013680:	f003 030f 	and.w	r3, r3, #15
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	fa22 f303 	lsr.w	r3, r2, r3
 801368a:	01db      	lsls	r3, r3, #7
 801368c:	b2db      	uxtb	r3, r3
 801368e:	693a      	ldr	r2, [r7, #16]
 8013690:	4313      	orrs	r3, r2
 8013692:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013694:	78fb      	ldrb	r3, [r7, #3]
 8013696:	015a      	lsls	r2, r3, #5
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	4413      	add	r3, r2
 801369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	693a      	ldr	r2, [r7, #16]
 80136a4:	4013      	ands	r3, r2
 80136a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80136a8:	68bb      	ldr	r3, [r7, #8]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	371c      	adds	r7, #28
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr

080136b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80136b6:	b480      	push	{r7}
 80136b8:	b083      	sub	sp, #12
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	695b      	ldr	r3, [r3, #20]
 80136c2:	f003 0301 	and.w	r3, r3, #1
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr

080136d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80136d2:	b480      	push	{r7}
 80136d4:	b085      	sub	sp, #20
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	68fa      	ldr	r2, [r7, #12]
 80136e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80136f0:	f023 0307 	bic.w	r3, r3, #7
 80136f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	68fa      	ldr	r2, [r7, #12]
 8013700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801370a:	2300      	movs	r3, #0
}
 801370c:	4618      	mov	r0, r3
 801370e:	3714      	adds	r7, #20
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8013718:	b480      	push	{r7}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	333c      	adds	r3, #60	; 0x3c
 801372a:	3304      	adds	r3, #4
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	4a1c      	ldr	r2, [pc, #112]	; (80137a4 <USB_EP0_OutStart+0x8c>)
 8013734:	4293      	cmp	r3, r2
 8013736:	d90a      	bls.n	801374e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013748:	d101      	bne.n	801374e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 801374a:	2300      	movs	r3, #0
 801374c:	e024      	b.n	8013798 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013754:	461a      	mov	r2, r3
 8013756:	2300      	movs	r3, #0
 8013758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013760:	691b      	ldr	r3, [r3, #16]
 8013762:	68fa      	ldr	r2, [r7, #12]
 8013764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801376c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013774:	691b      	ldr	r3, [r3, #16]
 8013776:	68fa      	ldr	r2, [r7, #12]
 8013778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801377c:	f043 0318 	orr.w	r3, r3, #24
 8013780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013788:	691b      	ldr	r3, [r3, #16]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013790:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013794:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8013796:	2300      	movs	r3, #0
}
 8013798:	4618      	mov	r0, r3
 801379a:	3714      	adds	r7, #20
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr
 80137a4:	4f54300a 	.word	0x4f54300a

080137a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b085      	sub	sp, #20
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80137b0:	2300      	movs	r3, #0
 80137b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3301      	adds	r3, #1
 80137b8:	60fb      	str	r3, [r7, #12]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	4a13      	ldr	r2, [pc, #76]	; (801380c <USB_CoreReset+0x64>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d901      	bls.n	80137c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e01b      	b.n	80137fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	691b      	ldr	r3, [r3, #16]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	daf2      	bge.n	80137b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80137ce:	2300      	movs	r3, #0
 80137d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	f043 0201 	orr.w	r2, r3, #1
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	3301      	adds	r3, #1
 80137e2:	60fb      	str	r3, [r7, #12]
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	4a09      	ldr	r2, [pc, #36]	; (801380c <USB_CoreReset+0x64>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d901      	bls.n	80137f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80137ec:	2303      	movs	r3, #3
 80137ee:	e006      	b.n	80137fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	691b      	ldr	r3, [r3, #16]
 80137f4:	f003 0301 	and.w	r3, r3, #1
 80137f8:	2b01      	cmp	r3, #1
 80137fa:	d0f0      	beq.n	80137de <USB_CoreReset+0x36>

  return HAL_OK;
 80137fc:	2300      	movs	r3, #0
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3714      	adds	r7, #20
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	00030d40 	.word	0x00030d40

08013810 <USBD_WCID_STREAMING_Init>:
* @retval status
*/
/* USBD_WCID_STREAMING_HandleTypeDef USBTEST; */
static uint8_t  USBD_WCID_STREAMING_Init (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b084      	sub	sp, #16
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	460b      	mov	r3, r1
 801381a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 801381c:	2300      	movs	r3, #0
 801381e:	73fb      	strb	r3, [r7, #15]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid;    
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8013820:	2340      	movs	r3, #64	; 0x40
 8013822:	2202      	movs	r2, #2
 8013824:	2181      	movs	r1, #129	; 0x81
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7f2 fce3 	bl	80061f2 <USBD_LL_OpenEP>
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
  
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 801382c:	2340      	movs	r3, #64	; 0x40
 801382e:	2202      	movs	r2, #2
 8013830:	2182      	movs	r1, #130	; 0x82
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7f2 fcdd 	bl	80061f2 <USBD_LL_OpenEP>
                 DATA_IN_EP2,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8013838:	2340      	movs	r3, #64	; 0x40
 801383a:	2202      	movs	r2, #2
 801383c:	2183      	movs	r1, #131	; 0x83
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7f2 fcd7 	bl	80061f2 <USBD_LL_OpenEP>
                 DATA_IN_EP3,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8013844:	2340      	movs	r3, #64	; 0x40
 8013846:	2202      	movs	r2, #2
 8013848:	2184      	movs	r1, #132	; 0x84
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7f2 fcd1 	bl	80061f2 <USBD_LL_OpenEP>
                 DATA_IN_EP4,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8013850:	2340      	movs	r3, #64	; 0x40
 8013852:	2202      	movs	r2, #2
 8013854:	2185      	movs	r1, #133	; 0x85
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f7f2 fccb 	bl	80061f2 <USBD_LL_OpenEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 801385c:	2340      	movs	r3, #64	; 0x40
 801385e:	2202      	movs	r2, #2
 8013860:	2101      	movs	r1, #1
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f7f2 fcc5 	bl	80061f2 <USBD_LL_OpenEP>
                 DATA_OUT_EP1,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_OUT_PACKET_SIZE);
  
  
  pdev->pClassData = (USBD_WCID_STREAMING_HandleTypeDef *)USBD_malloc(sizeof (USBD_WCID_STREAMING_HandleTypeDef));/* &USBTEST; */
 8013868:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 801386c:	f00c fa22 	bl	801fcb4 <malloc>
 8013870:	4603      	mov	r3, r0
 8013872:	461a      	mov	r2, r3
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  memset((void *)pdev->pClassData, 0, sizeof (USBD_WCID_STREAMING_HandleTypeDef));
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013880:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8013884:	2100      	movs	r1, #0
 8013886:	4618      	mov	r0, r3
 8013888:	f00c fa4c 	bl	801fd24 <memset>

  if(pdev->pClassData == NULL)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <USBD_WCID_STREAMING_Init+0x8c>
  {
    ret = 1; 
 8013896:	2301      	movs	r3, #1
 8013898:	73fb      	strb	r3, [r7, #15]
 801389a:	e02b      	b.n	80138f4 <USBD_WCID_STREAMING_Init+0xe4>
  }
  else
  {
    hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138a2:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Init();
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	4798      	blx	r3
    
    /* Init Xfer states */
    hwcid->RxState =0;
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	2200      	movs	r2, #0
 80138b2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    
    uint8_t i = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 80138ba:	2300      	movs	r3, #0
 80138bc:	73bb      	strb	r3, [r7, #14]
 80138be:	e00e      	b.n	80138de <USBD_WCID_STREAMING_Init+0xce>
    {
      hwcid->TXStates[i] = 0;
 80138c0:	7bba      	ldrb	r2, [r7, #14]
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	3246      	adds	r2, #70	; 0x46
 80138c6:	2100      	movs	r1, #0
 80138c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hwcid->TxBuffStatus[i] = 0;
 80138cc:	7bbb      	ldrb	r3, [r7, #14]
 80138ce:	68ba      	ldr	r2, [r7, #8]
 80138d0:	4413      	add	r3, r2
 80138d2:	2200      	movs	r2, #0
 80138d4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 80138d8:	7bbb      	ldrb	r3, [r7, #14]
 80138da:	3301      	adds	r3, #1
 80138dc:	73bb      	strb	r3, [r7, #14]
 80138de:	7bbb      	ldrb	r3, [r7, #14]
 80138e0:	2b04      	cmp	r3, #4
 80138e2:	d9ed      	bls.n	80138c0 <USBD_WCID_STREAMING_Init+0xb0>
    }
    
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80138ea:	2340      	movs	r3, #64	; 0x40
 80138ec:	2101      	movs	r1, #1
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7f2 fd28 	bl	8006344 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);    
  }
  return ret;
 80138f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <USBD_WCID_STREAMING_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DeInit (USBD_HandleTypeDef *pdev, 
                                     uint8_t cfgidx)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b084      	sub	sp, #16
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
 8013906:	460b      	mov	r3, r1
 8013908:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;  
 801390a:	2300      	movs	r3, #0
 801390c:	73fb      	strb	r3, [r7, #15]
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP1);  
 801390e:	2181      	movs	r1, #129	; 0x81
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7f2 fc88 	bl	8006226 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP2);
 8013916:	2182      	movs	r1, #130	; 0x82
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7f2 fc84 	bl	8006226 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP3);
 801391e:	2183      	movs	r1, #131	; 0x83
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7f2 fc80 	bl	8006226 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP4);
 8013926:	2184      	movs	r1, #132	; 0x84
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7f2 fc7c 	bl	8006226 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP5);
 801392e:	2185      	movs	r1, #133	; 0x85
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7f2 fc78 	bl	8006226 <USBD_LL_CloseEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8013936:	2101      	movs	r1, #1
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7f2 fc74 	bl	8006226 <USBD_LL_CloseEP>
                  DATA_OUT_EP1);
  
  pdev->pClassData = NULL;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  /* DeInit  physical Interface components */
    if(pdev->pClassData != NULL)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00e      	beq.n	801396e <USBD_WCID_STREAMING_DeInit+0x70>
    {
      ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	4798      	blx	r3
      USBD_free(pdev->pClassData);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013960:	4618      	mov	r0, r3
 8013962:	f00c f9af 	bl	801fcc4 <free>
      pdev->pClassData = NULL;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    }  
  return ret;
 801396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <USBD_WCID_STREAMING_SOF>:
*         Handles start of frame
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SOF (USBD_HandleTypeDef *pdev)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b08a      	sub	sp, #40	; 0x28
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
    int i = 0; 
 8013980:	2300      	movs	r3, #0
 8013982:	627b      	str	r3, [r7, #36]	; 0x24
   __IO uint32_t * TX_States = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TXStates;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801398a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801398e:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffStatus = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffStatus;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013996:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801399a:	61bb      	str	r3, [r7, #24]
   uint8_t ** TxBuffer = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffer;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80139a6:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->USB_DataSizePerEp;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139ae:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80139b2:	613b      	str	r3, [r7, #16]
   __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139ba:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80139be:	60fb      	str	r3, [r7, #12]
   uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139c6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80139ca:	60bb      	str	r3, [r7, #8]
   
  if(*status == STREAMING_STATUS_STARTED)
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	f040 80e3 	bne.w	8013b9c <USBD_WCID_STREAMING_SOF+0x224>
  {  
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 80139d6:	2300      	movs	r3, #0
 80139d8:	627b      	str	r3, [r7, #36]	; 0x24
 80139da:	e075      	b.n	8013ac8 <USBD_WCID_STREAMING_SOF+0x150>
  {    
    if(!TX_States[i])
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	69fa      	ldr	r2, [r7, #28]
 80139e2:	4413      	add	r3, r2
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d16b      	bne.n	8013ac2 <USBD_WCID_STREAMING_SOF+0x14a>
    {       
      if( TxBuffStatus[i] == 1)
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	69ba      	ldr	r2, [r7, #24]
 80139ee:	4413      	add	r3, r2
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d12a      	bne.n	8013a4e <USBD_WCID_STREAMING_SOF+0xd6>
      {  
         lastPacketSent[i] = 0;
 80139f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fa:	68fa      	ldr	r2, [r7, #12]
 80139fc:	4413      	add	r3, r2
 80139fe:	2200      	movs	r2, #0
 8013a00:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	69ba      	ldr	r2, [r7, #24]
 8013a06:	4413      	add	r3, r2
 8013a08:	2200      	movs	r2, #0
 8013a0a:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	697a      	ldr	r2, [r7, #20]
 8013a12:	4413      	add	r3, r2
 8013a14:	6819      	ldr	r1, [r3, #0]
 8013a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	693a      	ldr	r2, [r7, #16]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	881b      	ldrh	r3, [r3, #0]
 8013a20:	085b      	lsrs	r3, r3, #1
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	461a      	mov	r2, r3
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f000 fa7a 	bl	8013f20 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (i + 1)|0x80) == USBD_OK)
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	3301      	adds	r3, #1
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	b25b      	sxtb	r3, r3
 8013a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a3a:	b25b      	sxtb	r3, r3
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	4619      	mov	r1, r3
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f000 fa9b 	bl	8013f7c <USBD_WCID_STREAMING_TransmitPacket>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d03a      	beq.n	8013ac2 <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        } 
        else
        {
          while(1);
 8013a4c:	e7fe      	b.n	8013a4c <USBD_WCID_STREAMING_SOF+0xd4>
        }
      }
      else if (TxBuffStatus[i] == 2)
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a50:	69ba      	ldr	r2, [r7, #24]
 8013a52:	4413      	add	r3, r2
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	2b02      	cmp	r3, #2
 8013a5a:	d132      	bne.n	8013ac2 <USBD_WCID_STREAMING_SOF+0x14a>
      {
         lastPacketSent[i] = 0;
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	4413      	add	r3, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 8013a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a68:	69ba      	ldr	r2, [r7, #24]
 8013a6a:	4413      	add	r3, r2
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	009b      	lsls	r3, r3, #2
 8013a74:	697a      	ldr	r2, [r7, #20]
 8013a76:	4413      	add	r3, r2
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a7c:	0052      	lsls	r2, r2, #1
 8013a7e:	6939      	ldr	r1, [r7, #16]
 8013a80:	440a      	add	r2, r1
 8013a82:	8812      	ldrh	r2, [r2, #0]
 8013a84:	0852      	lsrs	r2, r2, #1
 8013a86:	b292      	uxth	r2, r2
 8013a88:	1899      	adds	r1, r3, r2
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	693a      	ldr	r2, [r7, #16]
 8013a90:	4413      	add	r3, r2
 8013a92:	881b      	ldrh	r3, [r3, #0]
 8013a94:	085b      	lsrs	r3, r3, #1
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	461a      	mov	r2, r3
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 fa40 	bl	8013f20 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	b25b      	sxtb	r3, r3
 8013aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013aae:	b25b      	sxtb	r3, r3
 8013ab0:	b2db      	uxtb	r3, r3
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fa61 	bl	8013f7c <USBD_WCID_STREAMING_TransmitPacket>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d000      	beq.n	8013ac2 <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        }  
        else
        {
          while(1);
 8013ac0:	e7fe      	b.n	8013ac0 <USBD_WCID_STREAMING_SOF+0x148>
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	2b03      	cmp	r3, #3
 8013acc:	dd86      	ble.n	80139dc <USBD_WCID_STREAMING_SOF+0x64>
    } 
       

  }
  
  if(!TX_States[N_IN_ENDPOINTS-1]) /* Todo: check logic */
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	3310      	adds	r3, #16
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	f040 80b8 	bne.w	8013c4a <USBD_WCID_STREAMING_SOF+0x2d2>
  {
    for (; i < N_CHANNELS_MAX; i++)
 8013ada:	e05b      	b.n	8013b94 <USBD_WCID_STREAMING_SOF+0x21c>
    {       
      if( TxBuffStatus[i] == 1)
 8013adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ade:	69ba      	ldr	r2, [r7, #24]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d121      	bne.n	8013b2e <USBD_WCID_STREAMING_SOF+0x1b6>
      {          
        /*send*/
        lastPacketSent[i] = 0;
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	2200      	movs	r2, #0
 8013af2:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	009b      	lsls	r3, r3, #2
 8013af8:	697a      	ldr	r2, [r7, #20]
 8013afa:	4413      	add	r3, r2
 8013afc:	6819      	ldr	r1, [r3, #0]
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	693a      	ldr	r2, [r7, #16]
 8013b04:	4413      	add	r3, r2
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	085b      	lsrs	r3, r3, #1
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f000 fa06 	bl	8013f20 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 8013b14:	2185      	movs	r1, #133	; 0x85
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 fa30 	bl	8013f7c <USBD_WCID_STREAMING_TransmitPacket>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d135      	bne.n	8013b8e <USBD_WCID_STREAMING_SOF+0x216>
        {  
          TxBuffStatus[i] = 0;
 8013b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b24:	69ba      	ldr	r2, [r7, #24]
 8013b26:	4413      	add	r3, r2
 8013b28:	2200      	movs	r2, #0
 8013b2a:	701a      	strb	r2, [r3, #0]
 8013b2c:	e02f      	b.n	8013b8e <USBD_WCID_STREAMING_SOF+0x216>
        } 
      }
      else if (TxBuffStatus[i] == 2)
 8013b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b30:	69ba      	ldr	r2, [r7, #24]
 8013b32:	4413      	add	r3, r2
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d128      	bne.n	8013b8e <USBD_WCID_STREAMING_SOF+0x216>
      {       
        /*send*/
        lastPacketSent[i] = 0;
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3e:	68fa      	ldr	r2, [r7, #12]
 8013b40:	4413      	add	r3, r2
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	697a      	ldr	r2, [r7, #20]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b52:	0052      	lsls	r2, r2, #1
 8013b54:	6939      	ldr	r1, [r7, #16]
 8013b56:	440a      	add	r2, r1
 8013b58:	8812      	ldrh	r2, [r2, #0]
 8013b5a:	0852      	lsrs	r2, r2, #1
 8013b5c:	b292      	uxth	r2, r2
 8013b5e:	1899      	adds	r1, r3, r2
 8013b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b62:	005b      	lsls	r3, r3, #1
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	4413      	add	r3, r2
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	085b      	lsrs	r3, r3, #1
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	461a      	mov	r2, r3
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 f9d5 	bl	8013f20 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 8013b76:	2185      	movs	r1, #133	; 0x85
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 f9ff 	bl	8013f7c <USBD_WCID_STREAMING_TransmitPacket>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d104      	bne.n	8013b8e <USBD_WCID_STREAMING_SOF+0x216>
        {      
          TxBuffStatus[i] = 0;
 8013b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b86:	69ba      	ldr	r2, [r7, #24]
 8013b88:	4413      	add	r3, r2
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	701a      	strb	r2, [r3, #0]
    for (; i < N_CHANNELS_MAX; i++)
 8013b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b90:	3301      	adds	r3, #1
 8013b92:	627b      	str	r3, [r7, #36]	; 0x24
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	2b08      	cmp	r3, #8
 8013b98:	dda0      	ble.n	8013adc <USBD_WCID_STREAMING_SOF+0x164>
 8013b9a:	e056      	b.n	8013c4a <USBD_WCID_STREAMING_SOF+0x2d2>
      }     
    }  
  }  
  }
  
  else if(*status == STREAMING_STATUS_STOPPING)
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b02      	cmp	r3, #2
 8013ba2:	d152      	bne.n	8013c4a <USBD_WCID_STREAMING_SOF+0x2d2>
  {
        int sum = 0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	623b      	str	r3, [r7, #32]

   for (i = 0; i < N_IN_ENDPOINTS; i++)
 8013ba8:	2300      	movs	r3, #0
 8013baa:	627b      	str	r3, [r7, #36]	; 0x24
 8013bac:	e04a      	b.n	8013c44 <USBD_WCID_STREAMING_SOF+0x2cc>
  {  
    if(/*!TX_States[i] && */!lastPacketSent[i])
 8013bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d131      	bne.n	8013c20 <USBD_WCID_STREAMING_SOF+0x2a8>
    {  
      lastPacketSent[i] = 1;
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	701a      	strb	r2, [r3, #0]
      
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	697a      	ldr	r2, [r7, #20]
 8013bcc:	4413      	add	r3, r2
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bd2:	0052      	lsls	r2, r2, #1
 8013bd4:	6939      	ldr	r1, [r7, #16]
 8013bd6:	440a      	add	r2, r1
 8013bd8:	8812      	ldrh	r2, [r2, #0]
 8013bda:	0852      	lsrs	r2, r2, #1
 8013bdc:	b292      	uxth	r2, r2
 8013bde:	1899      	adds	r1, r3, r2
 8013be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be2:	005b      	lsls	r3, r3, #1
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	4413      	add	r3, r2
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	085b      	lsrs	r3, r3, #1
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	461a      	mov	r2, r3
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 f995 	bl	8013f20 <USBD_WCID_STREAMING_SetTxBuffer>
      if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	b25b      	sxtb	r3, r3
 8013c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c04:	b25b      	sxtb	r3, r3
 8013c06:	b2db      	uxtb	r3, r3
 8013c08:	4619      	mov	r1, r3
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f9b6 	bl	8013f7c <USBD_WCID_STREAMING_TransmitPacket>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d104      	bne.n	8013c20 <USBD_WCID_STREAMING_SOF+0x2a8>
        {      
          TxBuffStatus[i] = 0;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c18:	69ba      	ldr	r2, [r7, #24]
 8013c1a:	4413      	add	r3, r2
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	701a      	strb	r2, [r3, #0]
        } 
    }  
    
    sum += lastPacketSent[i];
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	68fa      	ldr	r2, [r7, #12]
 8013c24:	4413      	add	r3, r2
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	6a3b      	ldr	r3, [r7, #32]
 8013c2e:	4413      	add	r3, r2
 8013c30:	623b      	str	r3, [r7, #32]
    if(sum == N_IN_ENDPOINTS)
 8013c32:	6a3b      	ldr	r3, [r7, #32]
 8013c34:	2b05      	cmp	r3, #5
 8013c36:	d102      	bne.n	8013c3e <USBD_WCID_STREAMING_SOF+0x2c6>
    {
      *status = STREAMING_STATUS_IDLE;
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < N_IN_ENDPOINTS; i++)
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	3301      	adds	r3, #1
 8013c42:	627b      	str	r3, [r7, #36]	; 0x24
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	2b04      	cmp	r3, #4
 8013c48:	ddb1      	ble.n	8013bae <USBD_WCID_STREAMING_SOF+0x236>
    }
    
  }
  }

  return USBD_OK; 
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3728      	adds	r7, #40	; 0x28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <USBD_WCID_STREAMING_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_Setup (USBD_HandleTypeDef *pdev, 
                                    USBD_SetupReqTypedef *req)
{
 8013c54:	b5b0      	push	{r4, r5, r7, lr}
 8013c56:	b086      	sub	sp, #24
 8013c58:	af02      	add	r7, sp, #8
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c64:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c6e:	2b40      	cmp	r3, #64	; 0x40
 8013c70:	d051      	beq.n	8013d16 <USBD_WCID_STREAMING_Setup+0xc2>
 8013c72:	2b40      	cmp	r3, #64	; 0x40
 8013c74:	d854      	bhi.n	8013d20 <USBD_WCID_STREAMING_Setup+0xcc>
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d041      	beq.n	8013cfe <USBD_WCID_STREAMING_Setup+0xaa>
 8013c7a:	2b20      	cmp	r3, #32
 8013c7c:	d150      	bne.n	8013d20 <USBD_WCID_STREAMING_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	88db      	ldrh	r3, [r3, #6]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d04e      	beq.n	8013d24 <USBD_WCID_STREAMING_Setup+0xd0>
    {
      if (req->bmRequest & 0x80) /* GET */
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	b25b      	sxtb	r3, r3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	da1a      	bge.n	8013cc6 <USBD_WCID_STREAMING_Setup+0x72>
      {
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c96:	689c      	ldr	r4, [r3, #8]
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	7859      	ldrb	r1, [r3, #1]
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	8858      	ldrh	r0, [r3, #2]
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	889d      	ldrh	r5, [r3, #4]
                                                              (uint8_t *)hwcid->data,
 8013ca4:	68fb      	ldr	r3, [r7, #12]
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	88d2      	ldrh	r2, [r2, #6]
 8013caa:	9201      	str	r2, [sp, #4]
 8013cac:	9300      	str	r3, [sp, #0]
 8013cae:	462b      	mov	r3, r5
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	47a0      	blx	r4
                                                              req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hwcid->data,
 8013cb6:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	88db      	ldrh	r3, [r3, #6]
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f001 fc21 	bl	8015506 <USBD_CtlSendData>
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hwcid->data,
                           req->wLength);
      }      
    }
    break;
 8013cc4:	e02e      	b.n	8013d24 <USBD_WCID_STREAMING_Setup+0xd0>
        hwcid->CmdOpCode = req->bRequest;
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	785a      	ldrb	r2, [r3, #1]
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        hwcid->CmdLength = req->wLength;
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	88da      	ldrh	r2, [r3, #6]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        hwcid->wValue = req->wValue;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	885a      	ldrh	r2, [r3, #2]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
        hwcid->wIndex = req->wIndex;
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	889a      	ldrh	r2, [r3, #4]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                           (uint8_t *)hwcid->data,
 8013cee:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	88db      	ldrh	r3, [r3, #6]
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f001 fc33 	bl	8015562 <USBD_CtlPrepareRx>
    break;
 8013cfc:	e012      	b.n	8013d24 <USBD_WCID_STREAMING_Setup+0xd0>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	785b      	ldrb	r3, [r3, #1]
 8013d02:	2b0a      	cmp	r3, #10
 8013d04:	d001      	beq.n	8013d0a <USBD_WCID_STREAMING_Setup+0xb6>
 8013d06:	2b0b      	cmp	r3, #11
      USBD_CtlSendData (pdev,
                        &ifalt,
                        1);
      break;      
    case USB_REQ_SET_INTERFACE :
      break;
 8013d08:	e005      	b.n	8013d16 <USBD_WCID_STREAMING_Setup+0xc2>
      USBD_CtlSendData (pdev,
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	4908      	ldr	r1, [pc, #32]	; (8013d30 <USBD_WCID_STREAMING_Setup+0xdc>)
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f001 fbf9 	bl	8015506 <USBD_CtlSendData>
      break;      
 8013d14:	bf00      	nop
    }  
  case USB_REQ_TYPE_VENDOR:    
    
    USBD_VendDevReq (pdev ,req);
 8013d16:	6839      	ldr	r1, [r7, #0]
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f000 f981 	bl	8014020 <USBD_VendDevReq>
    break;
 8013d1e:	e002      	b.n	8013d26 <USBD_WCID_STREAMING_Setup+0xd2>
  default: 
    break;    
 8013d20:	bf00      	nop
 8013d22:	e000      	b.n	8013d26 <USBD_WCID_STREAMING_Setup+0xd2>
    break;
 8013d24:	bf00      	nop
  }
  return USBD_OK;
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8013d30:	20000d78 	.word	0x20000d78

08013d34 <USBD_WCID_STREAMING_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b085      	sub	sp, #20
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d46:	60fb      	str	r3, [r7, #12]
  hwcid->TXStates[(epnum & 0x7F) - 1] = 0;
 8013d48:	78fb      	ldrb	r3, [r7, #3]
 8013d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d4e:	1e5a      	subs	r2, r3, #1
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	3246      	adds	r2, #70	; 0x46
 8013d54:	2100      	movs	r1, #0
 8013d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return USBD_OK;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <USBD_WCID_STREAMING_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	460b      	mov	r3, r1
 8013d72:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d7a:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hwcid->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8013d7c:	78fb      	ldrb	r3, [r7, #3]
 8013d7e:	4619      	mov	r1, r3
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7f2 faf6 	bl	8006372 <USBD_LL_GetRxDataSize>
 8013d86:	4602      	mov	r2, r0
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  if(pdev->pClassData != NULL)  
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d010      	beq.n	8013dba <USBD_WCID_STREAMING_DataOut+0x52>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Receive(hwcid->RxBuffer, hwcid->RxLength);    
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
 8013da6:	68fa      	ldr	r2, [r7, #12]
 8013da8:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8013dac:	4611      	mov	r1, r2
 8013dae:	4798      	blx	r3
    USBD_WCID_STREAMING_ReceivePacket(pdev);
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f000 f919 	bl	8013fe8 <USBD_WCID_STREAMING_ReceivePacket>
    return USBD_OK;
 8013db6:	2300      	movs	r3, #0
 8013db8:	e000      	b.n	8013dbc <USBD_WCID_STREAMING_DataOut+0x54>
  }
  else
  {
    return USBD_FAIL;
 8013dba:	2302      	movs	r3, #2
  }
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3710      	adds	r7, #16
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <USBD_WCID_STREAMING_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_WCID_STREAMING_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8013dc4:	b5b0      	push	{r4, r5, r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af02      	add	r7, sp, #8
 8013dca:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dd2:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d01f      	beq.n	8013e1e <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013de4:	2bff      	cmp	r3, #255	; 0xff
 8013de6:	d01a      	beq.n	8013e1e <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013dee:	689c      	ldr	r4, [r3, #8]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f8b3 5106 	ldrh.w	r5, [r3, #262]	; 0x106
                                                          (uint8_t *)hwcid->data,
 8013e02:	68fb      	ldr	r3, [r7, #12]
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 8013e0a:	9201      	str	r2, [sp, #4]
 8013e0c:	9300      	str	r3, [sp, #0]
 8013e0e:	462b      	mov	r3, r5
 8013e10:	4602      	mov	r2, r0
 8013e12:	2001      	movs	r0, #1
 8013e14:	47a0      	blx	r4
                                                          hwcid->CmdLength);
      hwcid->CmdOpCode = 0xFF;     
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	22ff      	movs	r2, #255	; 0xff
 8013e1a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
  return USBD_OK;
 8013e1e:	2300      	movs	r3, #0
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3710      	adds	r7, #16
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bdb0      	pop	{r4, r5, r7, pc}

08013e28 <USBD_WCID_STREAMING_GetFSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetFSCfgDesc (uint16_t *length)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgFSDesc);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	223c      	movs	r2, #60	; 0x3c
 8013e34:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgFSDesc;
 8013e36:	4b03      	ldr	r3, [pc, #12]	; (8013e44 <USBD_WCID_STREAMING_GetFSCfgDesc+0x1c>)
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	370c      	adds	r7, #12
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr
 8013e44:	20000234 	.word	0x20000234

08013e48 <USBD_WCID_STREAMING_GetHSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetHSCfgDesc (uint16_t *length)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgHSDesc);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	223c      	movs	r2, #60	; 0x3c
 8013e54:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgHSDesc;
 8013e56:	4b03      	ldr	r3, [pc, #12]	; (8013e64 <USBD_WCID_STREAMING_GetHSCfgDesc+0x1c>)
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr
 8013e64:	200001f8 	.word	0x200001f8

08013e68 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b083      	sub	sp, #12
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_OtherSpeedCfgDesc);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	223c      	movs	r2, #60	; 0x3c
 8013e74:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_OtherSpeedCfgDesc;
 8013e76:	4b03      	ldr	r3, [pc, #12]	; (8013e84 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc+0x1c>)
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr
 8013e84:	20000270 	.word	0x20000270

08013e88 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_WCID_STREAMING_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b083      	sub	sp, #12
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_DeviceQualifierDesc);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	220a      	movs	r2, #10
 8013e94:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_DeviceQualifierDesc;
 8013e96:	4b03      	ldr	r3, [pc, #12]	; (8013ea4 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor+0x1c>)
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	370c      	adds	r7, #12
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	20000188 	.word	0x20000188

08013ea8 <USBD_WCID_STREAMING_GetUsrStrDescriptor>:
* @param  length : pointer data length
* @param  index : index
* @retval pointer to descriptor buffer
*/
uint8_t  * USBD_WCID_STREAMING_GetUsrStrDescriptor(USBD_HandleTypeDef *pdev ,uint8_t index,  uint16_t *length)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	607a      	str	r2, [r7, #4]
 8013eb4:	72fb      	strb	r3, [r7, #11]
  if ((index) == 0xEE)
 8013eb6:	7afb      	ldrb	r3, [r7, #11]
 8013eb8:	2bee      	cmp	r3, #238	; 0xee
 8013eba:	d104      	bne.n	8013ec6 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x1e>
  {    
    *length = sizeof (USBD_OSStringDesc);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2212      	movs	r2, #18
 8013ec0:	801a      	strh	r2, [r3, #0]
    return USBD_OSStringDesc;
 8013ec2:	4b04      	ldr	r3, [pc, #16]	; (8013ed4 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x2c>)
 8013ec4:	e000      	b.n	8013ec8 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x20>
  }
  
  return 0;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3714      	adds	r7, #20
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr
 8013ed4:	20000174 	.word	0x20000174

08013ed8 <USBD_WCID_STREAMING_OSCompIDDescriptor>:
* @param  length : pointer data length
* @param  speed: Current device speed
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSCompIDDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	4603      	mov	r3, r0
 8013ee0:	6039      	str	r1, [r7, #0]
 8013ee2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(OS_IDFeatureDescriptor);
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2228      	movs	r2, #40	; 0x28
 8013ee8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)OS_IDFeatureDescriptor;
 8013eea:	4b03      	ldr	r3, [pc, #12]	; (8013ef8 <USBD_WCID_STREAMING_OSCompIDDescriptor+0x20>)
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	370c      	adds	r7, #12
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr
 8013ef8:	20000194 	.word	0x20000194

08013efc <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>:
* @param  speed: Current device speed
* @param  length: Pointer to data length variable
* @retval Pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	4603      	mov	r3, r0
 8013f04:	6039      	str	r1, [r7, #0]
 8013f06:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_ExtPropertiesDescStruct);
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	2294      	movs	r2, #148	; 0x94
 8013f0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)&USBD_ExtPropertiesDesc;
 8013f0e:	4b03      	ldr	r3, [pc, #12]	; (8013f1c <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor+0x20>)
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	200000e0 	.word	0x200000e0

08013f20 <USBD_WCID_STREAMING_SetTxBuffer>:
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *pbuff,
                                    uint16_t length)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b087      	sub	sp, #28
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	80fb      	strh	r3, [r7, #6]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f34:	617b      	str	r3, [r7, #20]
  
  hwcid->CurrentTxBuffer = pbuff;
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	68ba      	ldr	r2, [r7, #8]
 8013f3a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  hwcid->TxLength = length;    
 8013f3e:	88fa      	ldrh	r2, [r7, #6]
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  return USBD_OK;  
 8013f46:	2300      	movs	r3, #0
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	371c      	adds	r7, #28
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr

08013f54 <USBD_WCID_STREAMING_SetRxDataBuffer>:
* @param  ptr: Rx Buffer
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_SetRxDataBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *ptr)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f64:	60fb      	str	r3, [r7, #12]
  
  hwcid->RxBuffer = ptr;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  
  return USBD_OK;
 8013f6e:	2300      	movs	r3, #0
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3714      	adds	r7, #20
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr

08013f7c <USBD_WCID_STREAMING_TransmitPacket>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t epNumber)
{      
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	460b      	mov	r3, r1
 8013f86:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f8e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d021      	beq.n	8013fde <USBD_WCID_STREAMING_TransmitPacket+0x62>
  {
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 8013f9a:	78fb      	ldrb	r3, [r7, #3]
 8013f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fa0:	1e5a      	subs	r2, r3, #1
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	3246      	adds	r2, #70	; 0x46
 8013fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d115      	bne.n	8013fda <USBD_WCID_STREAMING_TransmitPacket+0x5e>
    {
      /* Tx Transfer in progress */
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 8013fae:	78fb      	ldrb	r3, [r7, #3]
 8013fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fb4:	1e5a      	subs	r2, r3, #1
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	3246      	adds	r2, #70	; 0x46
 8013fba:	2101      	movs	r1, #1
 8013fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
                       (epNumber),
                       hwcid->CurrentTxBuffer,
                       hwcid->TxLength);
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
      USBD_LL_Transmit(pdev,
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	78f9      	ldrb	r1, [r7, #3]
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7f2 f9a0 	bl	8006316 <USBD_LL_Transmit>
      
      return USBD_OK;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	e002      	b.n	8013fe0 <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
    else
    {
      return USBD_BUSY;
 8013fda:	2301      	movs	r3, #1
 8013fdc:	e000      	b.n	8013fe0 <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
  }
  else
  {
    return USBD_FAIL;
 8013fde:	2302      	movs	r3, #2
  }
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <USBD_WCID_STREAMING_ReceivePacket>:
*         prepare OUT Endpoint for reception
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_WCID_STREAMING_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ff6:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d009      	beq.n	8014016 <USBD_WCID_STREAMING_ReceivePacket+0x2e>
  {
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8014008:	2340      	movs	r3, #64	; 0x40
 801400a:	2101      	movs	r1, #1
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7f2 f999 	bl	8006344 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);
    
    return USBD_OK;
 8014012:	2300      	movs	r3, #0
 8014014:	e000      	b.n	8014018 <USBD_WCID_STREAMING_ReceivePacket+0x30>
  }
  else
  {
    return USBD_FAIL;
 8014016:	2302      	movs	r3, #2
  }
}
 8014018:	4618      	mov	r0, r3
 801401a:	3710      	adds	r7, #16
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <USBD_VendDevReq>:
* @param  pdev: instance
* @param  req: usb requests
* @retval status
*/
static USBD_StatusTypeDef  USBD_VendDevReq (USBD_HandleTypeDef *pdev ,USBD_SetupReqTypedef *req)
{
 8014020:	b5b0      	push	{r4, r5, r7, lr}
 8014022:	b088      	sub	sp, #32
 8014024:	af02      	add	r7, sp, #8
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wIndex) 
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	889b      	ldrh	r3, [r3, #4]
 801402e:	2b05      	cmp	r3, #5
 8014030:	d026      	beq.n	8014080 <USBD_VendDevReq+0x60>
 8014032:	2b05      	cmp	r3, #5
 8014034:	f300 8087 	bgt.w	8014146 <USBD_VendDevReq+0x126>
 8014038:	2b00      	cmp	r3, #0
 801403a:	d040      	beq.n	80140be <USBD_VendDevReq+0x9e>
 801403c:	2b04      	cmp	r3, #4
 801403e:	f040 8082 	bne.w	8014146 <USBD_VendDevReq+0x126>
  {
  case USB_DESC_TYPE_OS_FEATURE_EXT_PROPERTIES:
    {
      pbuf = USBD_WCID_STREAMING_OSCompIDDescriptor(pdev->dev_speed, &len);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	7c1b      	ldrb	r3, [r3, #16]
 8014046:	f107 020e 	add.w	r2, r7, #14
 801404a:	4611      	mov	r1, r2
 801404c:	4618      	mov	r0, r3
 801404e:	f7ff ff43 	bl	8013ed8 <USBD_WCID_STREAMING_OSCompIDDescriptor>
 8014052:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 8014054:	89fb      	ldrh	r3, [r7, #14]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d077      	beq.n	801414a <USBD_VendDevReq+0x12a>
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	88db      	ldrh	r3, [r3, #6]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d073      	beq.n	801414a <USBD_VendDevReq+0x12a>
      {
        
        len = MIN(len , req->wLength);
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	88da      	ldrh	r2, [r3, #6]
 8014066:	89fb      	ldrh	r3, [r7, #14]
 8014068:	4293      	cmp	r3, r2
 801406a:	bf28      	it	cs
 801406c:	4613      	movcs	r3, r2
 801406e:	b29b      	uxth	r3, r3
 8014070:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 8014072:	89fb      	ldrh	r3, [r7, #14]
 8014074:	461a      	mov	r2, r3
 8014076:	6979      	ldr	r1, [r7, #20]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f001 fa44 	bl	8015506 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;
 801407e:	e064      	b.n	801414a <USBD_VendDevReq+0x12a>
  case USB_DESC_TYPE_OS_FEATURE_EXT_COMPAT_ID:
    {
      pbuf = USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(pdev->dev_speed, &len);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	7c1b      	ldrb	r3, [r3, #16]
 8014084:	f107 020e 	add.w	r2, r7, #14
 8014088:	4611      	mov	r1, r2
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff ff36 	bl	8013efc <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>
 8014090:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 8014092:	89fb      	ldrh	r3, [r7, #14]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d05a      	beq.n	801414e <USBD_VendDevReq+0x12e>
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	88db      	ldrh	r3, [r3, #6]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d056      	beq.n	801414e <USBD_VendDevReq+0x12e>
      {
        
        len = MIN(len , req->wLength);
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	88da      	ldrh	r2, [r3, #6]
 80140a4:	89fb      	ldrh	r3, [r7, #14]
 80140a6:	4293      	cmp	r3, r2
 80140a8:	bf28      	it	cs
 80140aa:	4613      	movcs	r3, r2
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 80140b0:	89fb      	ldrh	r3, [r7, #14]
 80140b2:	461a      	mov	r2, r3
 80140b4:	6979      	ldr	r1, [r7, #20]
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f001 fa25 	bl	8015506 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;  
 80140bc:	e047      	b.n	801414e <USBD_VendDevReq+0x12e>
  case USB_DESC_TYPE_USER_CONTROL_ID:
    {
      USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140c4:	613b      	str	r3, [r7, #16]
      if (req->wLength)
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	88db      	ldrh	r3, [r3, #6]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d041      	beq.n	8014152 <USBD_VendDevReq+0x132>
      {
        if (req->bmRequest & 0x80)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	b25b      	sxtb	r3, r3
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	da1a      	bge.n	801410e <USBD_VendDevReq+0xee>
        {
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140de:	689c      	ldr	r4, [r3, #8]
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	7859      	ldrb	r1, [r3, #1]
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	8858      	ldrh	r0, [r3, #2]
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	889d      	ldrh	r5, [r3, #4]
                                                                (uint8_t *)hwcid->data,
 80140ec:	693b      	ldr	r3, [r7, #16]
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 80140ee:	683a      	ldr	r2, [r7, #0]
 80140f0:	88d2      	ldrh	r2, [r2, #6]
 80140f2:	9201      	str	r2, [sp, #4]
 80140f4:	9300      	str	r3, [sp, #0]
 80140f6:	462b      	mov	r3, r5
 80140f8:	4602      	mov	r2, r0
 80140fa:	2000      	movs	r0, #0
 80140fc:	47a0      	blx	r4
                                                                req->wLength);
            
            USBD_CtlSendData (pdev, 
                              (uint8_t *)hwcid->data,
 80140fe:	6939      	ldr	r1, [r7, #16]
            USBD_CtlSendData (pdev, 
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	88db      	ldrh	r3, [r3, #6]
 8014104:	461a      	mov	r2, r3
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f001 f9fd 	bl	8015506 <USBD_CtlSendData>
                             (uint8_t *)hwcid->data,
                             req->wLength);
        }      
      }  
    }
    break;    
 801410c:	e021      	b.n	8014152 <USBD_VendDevReq+0x132>
          hwcid->CmdOpCode = req->bRequest;
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	785a      	ldrb	r2, [r3, #1]
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          hwcid->CmdLength = req->wLength;
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	88da      	ldrh	r2, [r3, #6]
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
          hwcid->wValue = req->wValue;
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	885a      	ldrh	r2, [r3, #2]
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
          hwcid->wIndex = req->wIndex;
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	889a      	ldrh	r2, [r3, #4]
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                             (uint8_t *)hwcid->data,
 8014136:	6939      	ldr	r1, [r7, #16]
          USBD_CtlPrepareRx (pdev, 
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	88db      	ldrh	r3, [r3, #6]
 801413c:	461a      	mov	r2, r3
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f001 fa0f 	bl	8015562 <USBD_CtlPrepareRx>
    break;    
 8014144:	e005      	b.n	8014152 <USBD_VendDevReq+0x132>
  default :      
    break;    
 8014146:	bf00      	nop
 8014148:	e004      	b.n	8014154 <USBD_VendDevReq+0x134>
    break;
 801414a:	bf00      	nop
 801414c:	e002      	b.n	8014154 <USBD_VendDevReq+0x134>
    break;  
 801414e:	bf00      	nop
 8014150:	e000      	b.n	8014154 <USBD_VendDevReq+0x134>
    break;    
 8014152:	bf00      	nop
  }  
  return USBD_OK;
 8014154:	2300      	movs	r3, #0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3718      	adds	r7, #24
 801415a:	46bd      	mov	sp, r7
 801415c:	bdb0      	pop	{r4, r5, r7, pc}

0801415e <USBD_WCID_STREAMING_RegisterInterface>:
* @param  fops: WCID Interface callback structure
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                          USBD_WCID_STREAMING_ItfTypeDef *fops)
{
 801415e:	b480      	push	{r7}
 8014160:	b085      	sub	sp, #20
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;  
 8014168:	2302      	movs	r3, #2
 801416a:	73fb      	strb	r3, [r7, #15]
  if(fops != NULL)
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d005      	beq.n	801417e <USBD_WCID_STREAMING_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	683a      	ldr	r2, [r7, #0]
 8014176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 801417a:	2300      	movs	r3, #0
 801417c:	73fb      	strb	r3, [r7, #15]
  }  
  return ret;
 801417e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3714      	adds	r7, #20
 8014184:	46bd      	mov	sp, r7
 8014186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418a:	4770      	bx	lr

0801418c <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 801418c:	b480      	push	{r7}
 801418e:	b08f      	sub	sp, #60	; 0x3c
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	607a      	str	r2, [r7, #4]
 8014196:	603b      	str	r3, [r7, #0]
 8014198:	460b      	mov	r3, r1
 801419a:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141a2:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80141a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80141aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80141ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ae:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80141b2:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80141ba:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80141c2:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	f203 1365 	addw	r3, r3, #357	; 0x165
 80141ca:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 80141cc:	7afb      	ldrb	r3, [r7, #11]
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141d2:	4413      	add	r3, r2
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 80141d8:	7afb      	ldrb	r3, [r7, #11]
 80141da:	69ba      	ldr	r2, [r7, #24]
 80141dc:	4413      	add	r3, r2
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d121      	bne.n	801422a <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 80141e6:	7afb      	ldrb	r3, [r7, #11]
 80141e8:	2b03      	cmp	r3, #3
 80141ea:	d90e      	bls.n	801420a <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	7afa      	ldrb	r2, [r7, #11]
 80141f0:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 80141f2:	7afb      	ldrb	r3, [r7, #11]
 80141f4:	009b      	lsls	r3, r3, #2
 80141f6:	6a3a      	ldr	r2, [r7, #32]
 80141f8:	4413      	add	r3, r2
 80141fa:	2201      	movs	r2, #1
 80141fc:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 80141fe:	7afb      	ldrb	r3, [r7, #11]
 8014200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014202:	4413      	add	r3, r2
 8014204:	2200      	movs	r2, #0
 8014206:	701a      	strb	r2, [r3, #0]
 8014208:	e00a      	b.n	8014220 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 801420a:	7afb      	ldrb	r3, [r7, #11]
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	6a3a      	ldr	r2, [r7, #32]
 8014210:	4413      	add	r3, r2
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8014216:	7afb      	ldrb	r3, [r7, #11]
 8014218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421a:	4413      	add	r3, r2
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 8014220:	7afb      	ldrb	r3, [r7, #11]
 8014222:	69ba      	ldr	r2, [r7, #24]
 8014224:	4413      	add	r3, r2
 8014226:	2200      	movs	r2, #0
 8014228:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 801422a:	7afb      	ldrb	r3, [r7, #11]
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	6a3a      	ldr	r2, [r7, #32]
 8014230:	4413      	add	r3, r2
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 8014236:	2300      	movs	r3, #0
 8014238:	637b      	str	r3, [r7, #52]	; 0x34
 801423a:	e046      	b.n	80142ca <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014240:	441a      	add	r2, r3
 8014242:	6979      	ldr	r1, [r7, #20]
 8014244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014246:	440b      	add	r3, r1
 8014248:	7812      	ldrb	r2, [r2, #0]
 801424a:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 801424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424e:	3301      	adds	r3, #1
 8014250:	7afa      	ldrb	r2, [r7, #11]
 8014252:	0052      	lsls	r2, r2, #1
 8014254:	69f9      	ldr	r1, [r7, #28]
 8014256:	440a      	add	r2, r1
 8014258:	8812      	ldrh	r2, [r2, #0]
 801425a:	fbb3 f1f2 	udiv	r1, r3, r2
 801425e:	fb02 f201 	mul.w	r2, r2, r1
 8014262:	1a9b      	subs	r3, r3, r2
 8014264:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 8014266:	7afb      	ldrb	r3, [r7, #11]
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	69fa      	ldr	r2, [r7, #28]
 801426c:	4413      	add	r3, r2
 801426e:	881b      	ldrh	r3, [r3, #0]
 8014270:	085b      	lsrs	r3, r3, #1
 8014272:	b29b      	uxth	r3, r3
 8014274:	461a      	mov	r2, r3
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	4293      	cmp	r3, r2
 801427a:	d110      	bne.n	801429e <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 801427c:	7afb      	ldrb	r3, [r7, #11]
 801427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014280:	4413      	add	r3, r2
 8014282:	2201      	movs	r2, #1
 8014284:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 8014286:	7afb      	ldrb	r3, [r7, #11]
 8014288:	2b03      	cmp	r3, #3
 801428a:	d91b      	bls.n	80142c4 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 801428c:	697a      	ldr	r2, [r7, #20]
 801428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014290:	4413      	add	r3, r2
 8014292:	7afa      	ldrb	r2, [r7, #11]
 8014294:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 8014296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014298:	3301      	adds	r3, #1
 801429a:	633b      	str	r3, [r7, #48]	; 0x30
 801429c:	e012      	b.n	80142c4 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 801429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d10f      	bne.n	80142c4 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 80142a4:	7afb      	ldrb	r3, [r7, #11]
 80142a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142a8:	4413      	add	r3, r2
 80142aa:	2202      	movs	r2, #2
 80142ac:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80142ae:	7afb      	ldrb	r3, [r7, #11]
 80142b0:	2b03      	cmp	r3, #3
 80142b2:	d907      	bls.n	80142c4 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80142b4:	697a      	ldr	r2, [r7, #20]
 80142b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b8:	4413      	add	r3, r2
 80142ba:	7afa      	ldrb	r2, [r7, #11]
 80142bc:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	3301      	adds	r3, #1
 80142c2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 80142c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c6:	3301      	adds	r3, #1
 80142c8:	637b      	str	r3, [r7, #52]	; 0x34
 80142ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d3b4      	bcc.n	801423c <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 80142d2:	7afb      	ldrb	r3, [r7, #11]
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	6a3a      	ldr	r2, [r7, #32]
 80142d8:	4413      	add	r3, r2
 80142da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142dc:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 80142de:	2300      	movs	r3, #0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	373c      	adds	r7, #60	; 0x3c
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <USBD_WCID_STREAMING_CleanTxDataBuffer>:
*         discard remaining data in the buffer of the specified ch
* @param  ch_number: channel number
* @retval status
*/
uint8_t USBD_WCID_STREAMING_CleanTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	460b      	mov	r3, r1
 80142f6:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142fe:	60fb      	str	r3, [r7, #12]
  __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f203 1365 	addw	r3, r3, #357	; 0x165
 8014306:	60bb      	str	r3, [r7, #8]
   
  TxBuffReset[ch_number] = 1;  
 8014308:	78fb      	ldrb	r3, [r7, #3]
 801430a:	68ba      	ldr	r2, [r7, #8]
 801430c:	4413      	add	r3, r2
 801430e:	2201      	movs	r2, #1
 8014310:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8014312:	2300      	movs	r3, #0
}
 8014314:	4618      	mov	r0, r3
 8014316:	3714      	adds	r7, #20
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <USBD_WCID_STREAMING_SetTxDataBuffer>:
*              NOTE! Memory allocated must be at least equal to (size * 2) + 2;
* @param  size: length of each packet in bytes
* @retval status
*/
uint8_t USBD_WCID_STREAMING_SetTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t * ptr, uint16_t size)
{
 8014320:	b480      	push	{r7}
 8014322:	b089      	sub	sp, #36	; 0x24
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	607a      	str	r2, [r7, #4]
 801432a:	461a      	mov	r2, r3
 801432c:	460b      	mov	r3, r1
 801432e:	72fb      	strb	r3, [r7, #11]
 8014330:	4613      	mov	r3, r2
 8014332:	813b      	strh	r3, [r7, #8]
   USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801433a:	61fb      	str	r3, [r7, #28]

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014342:	61bb      	str	r3, [r7, #24]
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801434a:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8014352:	613b      	str	r3, [r7, #16]
   
  if(ch_number >= (N_IN_ENDPOINTS-1))
 8014354:	7afb      	ldrb	r3, [r7, #11]
 8014356:	2b03      	cmp	r3, #3
 8014358:	d919      	bls.n	801438e <USBD_WCID_STREAMING_SetTxDataBuffer+0x6e>
  {
    TxBuffer[ch_number] = ptr;
 801435a:	7afb      	ldrb	r3, [r7, #11]
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	69ba      	ldr	r2, [r7, #24]
 8014360:	4413      	add	r3, r2
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 8014366:	893b      	ldrh	r3, [r7, #8]
 8014368:	3301      	adds	r3, #1
 801436a:	b29a      	uxth	r2, r3
 801436c:	7afb      	ldrb	r3, [r7, #11]
 801436e:	005b      	lsls	r3, r3, #1
 8014370:	6939      	ldr	r1, [r7, #16]
 8014372:	440b      	add	r3, r1
 8014374:	0052      	lsls	r2, r2, #1
 8014376:	b292      	uxth	r2, r2
 8014378:	801a      	strh	r2, [r3, #0]
    ptr[0] = ch_number;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	7afa      	ldrb	r2, [r7, #11]
 801437e:	701a      	strb	r2, [r3, #0]
    TxBuffIdx[ch_number] = 1;
 8014380:	7afb      	ldrb	r3, [r7, #11]
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	697a      	ldr	r2, [r7, #20]
 8014386:	4413      	add	r3, r2
 8014388:	2201      	movs	r2, #1
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	e00d      	b.n	80143aa <USBD_WCID_STREAMING_SetTxDataBuffer+0x8a>
  }
  else
  {
    TxBuffer[ch_number] = ptr;
 801438e:	7afb      	ldrb	r3, [r7, #11]
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	69ba      	ldr	r2, [r7, #24]
 8014394:	4413      	add	r3, r2
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
 801439a:	7afb      	ldrb	r3, [r7, #11]
 801439c:	005b      	lsls	r3, r3, #1
 801439e:	693a      	ldr	r2, [r7, #16]
 80143a0:	4413      	add	r3, r2
 80143a2:	893a      	ldrh	r2, [r7, #8]
 80143a4:	0052      	lsls	r2, r2, #1
 80143a6:	b292      	uxth	r2, r2
 80143a8:	801a      	strh	r2, [r3, #0]
  }
  return USBD_OK;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3724      	adds	r7, #36	; 0x24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr

080143b8 <USBD_WCID_STREAMING_StartStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StartStreaming(USBD_HandleTypeDef *pdev)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b087      	sub	sp, #28
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143c6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80143ca:	613b      	str	r3, [r7, #16]
  
  __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143d2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80143d6:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 80143d8:	2300      	movs	r3, #0
 80143da:	617b      	str	r3, [r7, #20]
 80143dc:	e007      	b.n	80143ee <USBD_WCID_STREAMING_StartStreaming+0x36>
  {
    lastPacketSent[i] = 1;
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	68fa      	ldr	r2, [r7, #12]
 80143e2:	4413      	add	r3, r2
 80143e4:	2201      	movs	r2, #1
 80143e6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	3301      	adds	r3, #1
 80143ec:	617b      	str	r3, [r7, #20]
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	2b03      	cmp	r3, #3
 80143f2:	ddf4      	ble.n	80143de <USBD_WCID_STREAMING_StartStreaming+0x26>
  }
    
    
  *status = STREAMING_STATUS_STARTED;
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	2201      	movs	r2, #1
 80143f8:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 80143fa:	2300      	movs	r3, #0
  
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	371c      	adds	r7, #28
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <USBD_WCID_STREAMING_StopStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StopStreaming(USBD_HandleTypeDef *pdev)
{
 8014408:	b480      	push	{r7}
 801440a:	b085      	sub	sp, #20
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014416:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801441a:	60fb      	str	r3, [r7, #12]
  *status = STREAMING_STATUS_STOPPING;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2202      	movs	r2, #2
 8014420:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8014422:	2300      	movs	r3, #0
}
 8014424:	4618      	mov	r0, r3
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr

08014430 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	4613      	mov	r3, r2
 801443c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014444:	2302      	movs	r3, #2
 8014446:	e01a      	b.n	801447e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801444e:	2b00      	cmp	r3, #0
 8014450:	d003      	beq.n	801445a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2200      	movs	r2, #0
 8014456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d003      	beq.n	8014468 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	68ba      	ldr	r2, [r7, #8]
 8014464:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2201      	movs	r2, #1
 801446c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	79fa      	ldrb	r2, [r7, #7]
 8014474:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8014476:	68f8      	ldr	r0, [r7, #12]
 8014478:	f7f1 fe48 	bl	800610c <USBD_LL_Init>

  return USBD_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	3710      	adds	r7, #16
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}

08014486 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014486:	b480      	push	{r7}
 8014488:	b085      	sub	sp, #20
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
 801448e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8014490:	2300      	movs	r3, #0
 8014492:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d006      	beq.n	80144a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	683a      	ldr	r2, [r7, #0]
 801449e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80144a2:	2300      	movs	r3, #0
 80144a4:	73fb      	strb	r3, [r7, #15]
 80144a6:	e001      	b.n	80144ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80144a8:	2302      	movs	r3, #2
 80144aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80144ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3714      	adds	r7, #20
 80144b2:	46bd      	mov	sp, r7
 80144b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b8:	4770      	bx	lr

080144ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b082      	sub	sp, #8
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7f1 fe86 	bl	80061d4 <USBD_LL_Start>

  return USBD_OK;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	370c      	adds	r7, #12
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	460b      	mov	r3, r1
 80144f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80144f4:	2302      	movs	r3, #2
 80144f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00c      	beq.n	801451c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	78fa      	ldrb	r2, [r7, #3]
 801450c:	4611      	mov	r1, r2
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	4798      	blx	r3
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d101      	bne.n	801451c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8014518:	2300      	movs	r3, #0
 801451a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801451c:	7bfb      	ldrb	r3, [r7, #15]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3710      	adds	r7, #16
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
 801452e:	460b      	mov	r3, r1
 8014530:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	78fa      	ldrb	r2, [r7, #3]
 801453c:	4611      	mov	r1, r2
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	4798      	blx	r3

  return USBD_OK;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801455c:	6839      	ldr	r1, [r7, #0]
 801455e:	4618      	mov	r0, r3
 8014560:	f000 ff29 	bl	80153b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2201      	movs	r2, #1
 8014568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014572:	461a      	mov	r2, r3
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8014580:	f003 031f 	and.w	r3, r3, #31
 8014584:	2b02      	cmp	r3, #2
 8014586:	d016      	beq.n	80145b6 <USBD_LL_SetupStage+0x6a>
 8014588:	2b02      	cmp	r3, #2
 801458a:	d81c      	bhi.n	80145c6 <USBD_LL_SetupStage+0x7a>
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <USBD_LL_SetupStage+0x4a>
 8014590:	2b01      	cmp	r3, #1
 8014592:	d008      	beq.n	80145a6 <USBD_LL_SetupStage+0x5a>
 8014594:	e017      	b.n	80145c6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fa0a 	bl	80149b8 <USBD_StdDevReq>
      break;
 80145a4:	e01a      	b.n	80145dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80145ac:	4619      	mov	r1, r3
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f000 fa6c 	bl	8014a8c <USBD_StdItfReq>
      break;
 80145b4:	e012      	b.n	80145dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80145bc:	4619      	mov	r1, r3
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 faac 	bl	8014b1c <USBD_StdEPReq>
      break;
 80145c4:	e00a      	b.n	80145dc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80145cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	4619      	mov	r1, r3
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7f1 fe39 	bl	800624c <USBD_LL_StallEP>
      break;
 80145da:	bf00      	nop
  }

  return USBD_OK;
 80145dc:	2300      	movs	r3, #0
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b086      	sub	sp, #24
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	60f8      	str	r0, [r7, #12]
 80145ee:	460b      	mov	r3, r1
 80145f0:	607a      	str	r2, [r7, #4]
 80145f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80145f4:	7afb      	ldrb	r3, [r7, #11]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d14b      	bne.n	8014692 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014600:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014608:	2b03      	cmp	r3, #3
 801460a:	d134      	bne.n	8014676 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	68da      	ldr	r2, [r3, #12]
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	429a      	cmp	r2, r3
 8014616:	d919      	bls.n	801464c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	68da      	ldr	r2, [r3, #12]
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	1ad2      	subs	r2, r2, r3
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	68da      	ldr	r2, [r3, #12]
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801462e:	429a      	cmp	r2, r3
 8014630:	d203      	bcs.n	801463a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8014636:	b29b      	uxth	r3, r3
 8014638:	e002      	b.n	8014640 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801463e:	b29b      	uxth	r3, r3
 8014640:	461a      	mov	r2, r3
 8014642:	6879      	ldr	r1, [r7, #4]
 8014644:	68f8      	ldr	r0, [r7, #12]
 8014646:	f000 ffaa 	bl	801559e <USBD_CtlContinueRx>
 801464a:	e038      	b.n	80146be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014652:	691b      	ldr	r3, [r3, #16]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d00a      	beq.n	801466e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801465e:	2b03      	cmp	r3, #3
 8014660:	d105      	bne.n	801466e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014668:	691b      	ldr	r3, [r3, #16]
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f000 ffa7 	bl	80155c2 <USBD_CtlSendStatus>
 8014674:	e023      	b.n	80146be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801467c:	2b05      	cmp	r3, #5
 801467e:	d11e      	bne.n	80146be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2200      	movs	r2, #0
 8014684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8014688:	2100      	movs	r1, #0
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f7f1 fdde 	bl	800624c <USBD_LL_StallEP>
 8014690:	e015      	b.n	80146be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014698:	699b      	ldr	r3, [r3, #24]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00d      	beq.n	80146ba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80146a4:	2b03      	cmp	r3, #3
 80146a6:	d108      	bne.n	80146ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ae:	699b      	ldr	r3, [r3, #24]
 80146b0:	7afa      	ldrb	r2, [r7, #11]
 80146b2:	4611      	mov	r1, r2
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	4798      	blx	r3
 80146b8:	e001      	b.n	80146be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80146ba:	2302      	movs	r3, #2
 80146bc:	e000      	b.n	80146c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80146be:	2300      	movs	r3, #0
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	3718      	adds	r7, #24
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b086      	sub	sp, #24
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	460b      	mov	r3, r1
 80146d2:	607a      	str	r2, [r7, #4]
 80146d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80146d6:	7afb      	ldrb	r3, [r7, #11]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d17f      	bne.n	80147dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	3314      	adds	r3, #20
 80146e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80146e8:	2b02      	cmp	r3, #2
 80146ea:	d15c      	bne.n	80147a6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	68da      	ldr	r2, [r3, #12]
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d915      	bls.n	8014724 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	68da      	ldr	r2, [r3, #12]
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	1ad2      	subs	r2, r2, r3
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	b29b      	uxth	r3, r3
 801470c:	461a      	mov	r2, r3
 801470e:	6879      	ldr	r1, [r7, #4]
 8014710:	68f8      	ldr	r0, [r7, #12]
 8014712:	f000 ff14 	bl	801553e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014716:	2300      	movs	r3, #0
 8014718:	2200      	movs	r2, #0
 801471a:	2100      	movs	r1, #0
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f7f1 fe11 	bl	8006344 <USBD_LL_PrepareReceive>
 8014722:	e04e      	b.n	80147c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	697a      	ldr	r2, [r7, #20]
 801472a:	6912      	ldr	r2, [r2, #16]
 801472c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014730:	fb02 f201 	mul.w	r2, r2, r1
 8014734:	1a9b      	subs	r3, r3, r2
 8014736:	2b00      	cmp	r3, #0
 8014738:	d11c      	bne.n	8014774 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	689a      	ldr	r2, [r3, #8]
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014742:	429a      	cmp	r2, r3
 8014744:	d316      	bcc.n	8014774 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	689a      	ldr	r2, [r3, #8]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014750:	429a      	cmp	r2, r3
 8014752:	d20f      	bcs.n	8014774 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014754:	2200      	movs	r2, #0
 8014756:	2100      	movs	r1, #0
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 fef0 	bl	801553e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014766:	2300      	movs	r3, #0
 8014768:	2200      	movs	r2, #0
 801476a:	2100      	movs	r1, #0
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f7f1 fde9 	bl	8006344 <USBD_LL_PrepareReceive>
 8014772:	e026      	b.n	80147c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00a      	beq.n	8014796 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014786:	2b03      	cmp	r3, #3
 8014788:	d105      	bne.n	8014796 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014790:	68db      	ldr	r3, [r3, #12]
 8014792:	68f8      	ldr	r0, [r7, #12]
 8014794:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8014796:	2180      	movs	r1, #128	; 0x80
 8014798:	68f8      	ldr	r0, [r7, #12]
 801479a:	f7f1 fd57 	bl	800624c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801479e:	68f8      	ldr	r0, [r7, #12]
 80147a0:	f000 ff22 	bl	80155e8 <USBD_CtlReceiveStatus>
 80147a4:	e00d      	b.n	80147c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80147ac:	2b04      	cmp	r3, #4
 80147ae:	d004      	beq.n	80147ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d103      	bne.n	80147c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80147ba:	2180      	movs	r1, #128	; 0x80
 80147bc:	68f8      	ldr	r0, [r7, #12]
 80147be:	f7f1 fd45 	bl	800624c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d11d      	bne.n	8014808 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f7ff fe80 	bl	80144d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2200      	movs	r2, #0
 80147d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80147da:	e015      	b.n	8014808 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147e2:	695b      	ldr	r3, [r3, #20]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00d      	beq.n	8014804 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80147ee:	2b03      	cmp	r3, #3
 80147f0:	d108      	bne.n	8014804 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147f8:	695b      	ldr	r3, [r3, #20]
 80147fa:	7afa      	ldrb	r2, [r7, #11]
 80147fc:	4611      	mov	r1, r2
 80147fe:	68f8      	ldr	r0, [r7, #12]
 8014800:	4798      	blx	r3
 8014802:	e001      	b.n	8014808 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014804:	2302      	movs	r3, #2
 8014806:	e000      	b.n	801480a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	3718      	adds	r7, #24
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}

08014812 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014812:	b580      	push	{r7, lr}
 8014814:	b082      	sub	sp, #8
 8014816:	af00      	add	r7, sp, #0
 8014818:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801481a:	2340      	movs	r3, #64	; 0x40
 801481c:	2200      	movs	r2, #0
 801481e:	2100      	movs	r1, #0
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7f1 fce6 	bl	80061f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2201      	movs	r2, #1
 801482a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2240      	movs	r2, #64	; 0x40
 8014832:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014836:	2340      	movs	r3, #64	; 0x40
 8014838:	2200      	movs	r2, #0
 801483a:	2180      	movs	r1, #128	; 0x80
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7f1 fcd8 	bl	80061f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2201      	movs	r2, #1
 8014846:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2240      	movs	r2, #64	; 0x40
 801484c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2201      	movs	r2, #1
 8014852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2200      	movs	r2, #0
 8014862:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014872:	2b00      	cmp	r3, #0
 8014874:	d009      	beq.n	801488a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	6852      	ldr	r2, [r2, #4]
 8014882:	b2d2      	uxtb	r2, r2
 8014884:	4611      	mov	r1, r2
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	4798      	blx	r3
  }

  return USBD_OK;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	460b      	mov	r3, r1
 801489e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	78fa      	ldrb	r2, [r7, #3]
 80148a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80148a6:	2300      	movs	r3, #0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2204      	movs	r2, #4
 80148cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	370c      	adds	r7, #12
 80148d6:	46bd      	mov	sp, r7
 80148d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148dc:	4770      	bx	lr

080148de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80148de:	b480      	push	{r7}
 80148e0:	b083      	sub	sp, #12
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ec:	2b04      	cmp	r3, #4
 80148ee:	d105      	bne.n	80148fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	370c      	adds	r7, #12
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr

0801490a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801490a:	b580      	push	{r7, lr}
 801490c:	b082      	sub	sp, #8
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014918:	2b03      	cmp	r3, #3
 801491a:	d10b      	bne.n	8014934 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014922:	69db      	ldr	r3, [r3, #28]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d005      	beq.n	8014934 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801492e:	69db      	ldr	r3, [r3, #28]
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014934:	2300      	movs	r3, #0
}
 8014936:	4618      	mov	r0, r3
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801493e:	b480      	push	{r7}
 8014940:	b083      	sub	sp, #12
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
 8014946:	460b      	mov	r3, r1
 8014948:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801494a:	2300      	movs	r3, #0
}
 801494c:	4618      	mov	r0, r3
 801494e:	370c      	adds	r7, #12
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr

08014958 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014958:	b480      	push	{r7}
 801495a:	b083      	sub	sp, #12
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	460b      	mov	r3, r1
 8014962:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014964:	2300      	movs	r3, #0
}
 8014966:	4618      	mov	r0, r3
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014972:	b480      	push	{r7}
 8014974:	b083      	sub	sp, #12
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2201      	movs	r2, #1
 8014994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	6852      	ldr	r2, [r2, #4]
 80149a4:	b2d2      	uxtb	r2, r2
 80149a6:	4611      	mov	r1, r2
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	4798      	blx	r3

  return USBD_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
	...

080149b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80149c2:	2300      	movs	r3, #0
 80149c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80149ce:	2b40      	cmp	r3, #64	; 0x40
 80149d0:	d005      	beq.n	80149de <USBD_StdDevReq+0x26>
 80149d2:	2b40      	cmp	r3, #64	; 0x40
 80149d4:	d84f      	bhi.n	8014a76 <USBD_StdDevReq+0xbe>
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d009      	beq.n	80149ee <USBD_StdDevReq+0x36>
 80149da:	2b20      	cmp	r3, #32
 80149dc:	d14b      	bne.n	8014a76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149e4:	689b      	ldr	r3, [r3, #8]
 80149e6:	6839      	ldr	r1, [r7, #0]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	4798      	blx	r3
      break;
 80149ec:	e048      	b.n	8014a80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	785b      	ldrb	r3, [r3, #1]
 80149f2:	2b09      	cmp	r3, #9
 80149f4:	d839      	bhi.n	8014a6a <USBD_StdDevReq+0xb2>
 80149f6:	a201      	add	r2, pc, #4	; (adr r2, 80149fc <USBD_StdDevReq+0x44>)
 80149f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149fc:	08014a4d 	.word	0x08014a4d
 8014a00:	08014a61 	.word	0x08014a61
 8014a04:	08014a6b 	.word	0x08014a6b
 8014a08:	08014a57 	.word	0x08014a57
 8014a0c:	08014a6b 	.word	0x08014a6b
 8014a10:	08014a2f 	.word	0x08014a2f
 8014a14:	08014a25 	.word	0x08014a25
 8014a18:	08014a6b 	.word	0x08014a6b
 8014a1c:	08014a43 	.word	0x08014a43
 8014a20:	08014a39 	.word	0x08014a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014a24:	6839      	ldr	r1, [r7, #0]
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f000 f9dc 	bl	8014de4 <USBD_GetDescriptor>
          break;
 8014a2c:	e022      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014a2e:	6839      	ldr	r1, [r7, #0]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fb51 	bl	80150d8 <USBD_SetAddress>
          break;
 8014a36:	e01d      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014a38:	6839      	ldr	r1, [r7, #0]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 fb90 	bl	8015160 <USBD_SetConfig>
          break;
 8014a40:	e018      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014a42:	6839      	ldr	r1, [r7, #0]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 fc19 	bl	801527c <USBD_GetConfig>
          break;
 8014a4a:	e013      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 fc49 	bl	80152e6 <USBD_GetStatus>
          break;
 8014a54:	e00e      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014a56:	6839      	ldr	r1, [r7, #0]
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f000 fc77 	bl	801534c <USBD_SetFeature>
          break;
 8014a5e:	e009      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014a60:	6839      	ldr	r1, [r7, #0]
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 fc86 	bl	8015374 <USBD_ClrFeature>
          break;
 8014a68:	e004      	b.n	8014a74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8014a6a:	6839      	ldr	r1, [r7, #0]
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f000 fcdf 	bl	8015430 <USBD_CtlError>
          break;
 8014a72:	bf00      	nop
      }
      break;
 8014a74:	e004      	b.n	8014a80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 fcd9 	bl	8015430 <USBD_CtlError>
      break;
 8014a7e:	bf00      	nop
  }

  return ret;
 8014a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3710      	adds	r7, #16
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop

08014a8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a96:	2300      	movs	r3, #0
 8014a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014aa2:	2b40      	cmp	r3, #64	; 0x40
 8014aa4:	d005      	beq.n	8014ab2 <USBD_StdItfReq+0x26>
 8014aa6:	2b40      	cmp	r3, #64	; 0x40
 8014aa8:	d82e      	bhi.n	8014b08 <USBD_StdItfReq+0x7c>
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d001      	beq.n	8014ab2 <USBD_StdItfReq+0x26>
 8014aae:	2b20      	cmp	r3, #32
 8014ab0:	d12a      	bne.n	8014b08 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	d81d      	bhi.n	8014afa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	889b      	ldrh	r3, [r3, #4]
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d813      	bhi.n	8014af0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	4798      	blx	r3
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	88db      	ldrh	r3, [r3, #6]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d110      	bne.n	8014b04 <USBD_StdItfReq+0x78>
 8014ae2:	7bfb      	ldrb	r3, [r7, #15]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d10d      	bne.n	8014b04 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 fd6a 	bl	80155c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014aee:	e009      	b.n	8014b04 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014af0:	6839      	ldr	r1, [r7, #0]
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f000 fc9c 	bl	8015430 <USBD_CtlError>
          break;
 8014af8:	e004      	b.n	8014b04 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8014afa:	6839      	ldr	r1, [r7, #0]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f000 fc97 	bl	8015430 <USBD_CtlError>
          break;
 8014b02:	e000      	b.n	8014b06 <USBD_StdItfReq+0x7a>
          break;
 8014b04:	bf00      	nop
      }
      break;
 8014b06:	e004      	b.n	8014b12 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 fc90 	bl	8015430 <USBD_CtlError>
      break;
 8014b10:	bf00      	nop
  }

  return USBD_OK;
 8014b12:	2300      	movs	r3, #0
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3710      	adds	r7, #16
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	889b      	ldrh	r3, [r3, #4]
 8014b2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b38:	2b40      	cmp	r3, #64	; 0x40
 8014b3a:	d007      	beq.n	8014b4c <USBD_StdEPReq+0x30>
 8014b3c:	2b40      	cmp	r3, #64	; 0x40
 8014b3e:	f200 8146 	bhi.w	8014dce <USBD_StdEPReq+0x2b2>
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00a      	beq.n	8014b5c <USBD_StdEPReq+0x40>
 8014b46:	2b20      	cmp	r3, #32
 8014b48:	f040 8141 	bne.w	8014dce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b52:	689b      	ldr	r3, [r3, #8]
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	4798      	blx	r3
      break;
 8014b5a:	e13d      	b.n	8014dd8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b64:	2b20      	cmp	r3, #32
 8014b66:	d10a      	bne.n	8014b7e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	4798      	blx	r3
 8014b76:	4603      	mov	r3, r0
 8014b78:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014b7a:	7bfb      	ldrb	r3, [r7, #15]
 8014b7c:	e12d      	b.n	8014dda <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	785b      	ldrb	r3, [r3, #1]
 8014b82:	2b03      	cmp	r3, #3
 8014b84:	d007      	beq.n	8014b96 <USBD_StdEPReq+0x7a>
 8014b86:	2b03      	cmp	r3, #3
 8014b88:	f300 811b 	bgt.w	8014dc2 <USBD_StdEPReq+0x2a6>
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d072      	beq.n	8014c76 <USBD_StdEPReq+0x15a>
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d03a      	beq.n	8014c0a <USBD_StdEPReq+0xee>
 8014b94:	e115      	b.n	8014dc2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d002      	beq.n	8014ba6 <USBD_StdEPReq+0x8a>
 8014ba0:	2b03      	cmp	r3, #3
 8014ba2:	d015      	beq.n	8014bd0 <USBD_StdEPReq+0xb4>
 8014ba4:	e02b      	b.n	8014bfe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ba6:	7bbb      	ldrb	r3, [r7, #14]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00c      	beq.n	8014bc6 <USBD_StdEPReq+0xaa>
 8014bac:	7bbb      	ldrb	r3, [r7, #14]
 8014bae:	2b80      	cmp	r3, #128	; 0x80
 8014bb0:	d009      	beq.n	8014bc6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7f1 fb48 	bl	800624c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014bbc:	2180      	movs	r1, #128	; 0x80
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f7f1 fb44 	bl	800624c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014bc4:	e020      	b.n	8014c08 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 fc31 	bl	8015430 <USBD_CtlError>
              break;
 8014bce:	e01b      	b.n	8014c08 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	885b      	ldrh	r3, [r3, #2]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d10e      	bne.n	8014bf6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8014bd8:	7bbb      	ldrb	r3, [r7, #14]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d00b      	beq.n	8014bf6 <USBD_StdEPReq+0xda>
 8014bde:	7bbb      	ldrb	r3, [r7, #14]
 8014be0:	2b80      	cmp	r3, #128	; 0x80
 8014be2:	d008      	beq.n	8014bf6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	88db      	ldrh	r3, [r3, #6]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d104      	bne.n	8014bf6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014bec:	7bbb      	ldrb	r3, [r7, #14]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7f1 fb2b 	bl	800624c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 fce3 	bl	80155c2 <USBD_CtlSendStatus>

              break;
 8014bfc:	e004      	b.n	8014c08 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014bfe:	6839      	ldr	r1, [r7, #0]
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f000 fc15 	bl	8015430 <USBD_CtlError>
              break;
 8014c06:	bf00      	nop
          }
          break;
 8014c08:	e0e0      	b.n	8014dcc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c10:	2b02      	cmp	r3, #2
 8014c12:	d002      	beq.n	8014c1a <USBD_StdEPReq+0xfe>
 8014c14:	2b03      	cmp	r3, #3
 8014c16:	d015      	beq.n	8014c44 <USBD_StdEPReq+0x128>
 8014c18:	e026      	b.n	8014c68 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c1a:	7bbb      	ldrb	r3, [r7, #14]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d00c      	beq.n	8014c3a <USBD_StdEPReq+0x11e>
 8014c20:	7bbb      	ldrb	r3, [r7, #14]
 8014c22:	2b80      	cmp	r3, #128	; 0x80
 8014c24:	d009      	beq.n	8014c3a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014c26:	7bbb      	ldrb	r3, [r7, #14]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7f1 fb0e 	bl	800624c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014c30:	2180      	movs	r1, #128	; 0x80
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7f1 fb0a 	bl	800624c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c38:	e01c      	b.n	8014c74 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 fbf7 	bl	8015430 <USBD_CtlError>
              break;
 8014c42:	e017      	b.n	8014c74 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	885b      	ldrh	r3, [r3, #2]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d112      	bne.n	8014c72 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014c4c:	7bbb      	ldrb	r3, [r7, #14]
 8014c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d004      	beq.n	8014c60 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014c56:	7bbb      	ldrb	r3, [r7, #14]
 8014c58:	4619      	mov	r1, r3
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f7f1 fb09 	bl	8006272 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 fcae 	bl	80155c2 <USBD_CtlSendStatus>
              }
              break;
 8014c66:	e004      	b.n	8014c72 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014c68:	6839      	ldr	r1, [r7, #0]
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 fbe0 	bl	8015430 <USBD_CtlError>
              break;
 8014c70:	e000      	b.n	8014c74 <USBD_StdEPReq+0x158>
              break;
 8014c72:	bf00      	nop
          }
          break;
 8014c74:	e0aa      	b.n	8014dcc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	d002      	beq.n	8014c86 <USBD_StdEPReq+0x16a>
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d032      	beq.n	8014cea <USBD_StdEPReq+0x1ce>
 8014c84:	e097      	b.n	8014db6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c86:	7bbb      	ldrb	r3, [r7, #14]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d007      	beq.n	8014c9c <USBD_StdEPReq+0x180>
 8014c8c:	7bbb      	ldrb	r3, [r7, #14]
 8014c8e:	2b80      	cmp	r3, #128	; 0x80
 8014c90:	d004      	beq.n	8014c9c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8014c92:	6839      	ldr	r1, [r7, #0]
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 fbcb 	bl	8015430 <USBD_CtlError>
                break;
 8014c9a:	e091      	b.n	8014dc0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	da0b      	bge.n	8014cbc <USBD_StdEPReq+0x1a0>
 8014ca4:	7bbb      	ldrb	r3, [r7, #14]
 8014ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014caa:	4613      	mov	r3, r2
 8014cac:	009b      	lsls	r3, r3, #2
 8014cae:	4413      	add	r3, r2
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	3310      	adds	r3, #16
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	3304      	adds	r3, #4
 8014cba:	e00b      	b.n	8014cd4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014cbc:	7bbb      	ldrb	r3, [r7, #14]
 8014cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	009b      	lsls	r3, r3, #2
 8014cc6:	4413      	add	r3, r2
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	3304      	adds	r3, #4
 8014cd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	2202      	movs	r2, #2
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fc0f 	bl	8015506 <USBD_CtlSendData>
              break;
 8014ce8:	e06a      	b.n	8014dc0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	da11      	bge.n	8014d16 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014cf2:	7bbb      	ldrb	r3, [r7, #14]
 8014cf4:	f003 020f 	and.w	r2, r3, #15
 8014cf8:	6879      	ldr	r1, [r7, #4]
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	4413      	add	r3, r2
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	440b      	add	r3, r1
 8014d04:	3318      	adds	r3, #24
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d117      	bne.n	8014d3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014d0c:	6839      	ldr	r1, [r7, #0]
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f000 fb8e 	bl	8015430 <USBD_CtlError>
                  break;
 8014d14:	e054      	b.n	8014dc0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014d16:	7bbb      	ldrb	r3, [r7, #14]
 8014d18:	f003 020f 	and.w	r2, r3, #15
 8014d1c:	6879      	ldr	r1, [r7, #4]
 8014d1e:	4613      	mov	r3, r2
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	4413      	add	r3, r2
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	440b      	add	r3, r1
 8014d28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d104      	bne.n	8014d3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fb7b 	bl	8015430 <USBD_CtlError>
                  break;
 8014d3a:	e041      	b.n	8014dc0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da0b      	bge.n	8014d5c <USBD_StdEPReq+0x240>
 8014d44:	7bbb      	ldrb	r3, [r7, #14]
 8014d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d4a:	4613      	mov	r3, r2
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	4413      	add	r3, r2
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	3310      	adds	r3, #16
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	4413      	add	r3, r2
 8014d58:	3304      	adds	r3, #4
 8014d5a:	e00b      	b.n	8014d74 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d5c:	7bbb      	ldrb	r3, [r7, #14]
 8014d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d62:	4613      	mov	r3, r2
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	4413      	add	r3, r2
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	4413      	add	r3, r2
 8014d72:	3304      	adds	r3, #4
 8014d74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014d76:	7bbb      	ldrb	r3, [r7, #14]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <USBD_StdEPReq+0x266>
 8014d7c:	7bbb      	ldrb	r3, [r7, #14]
 8014d7e:	2b80      	cmp	r3, #128	; 0x80
 8014d80:	d103      	bne.n	8014d8a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2200      	movs	r2, #0
 8014d86:	601a      	str	r2, [r3, #0]
 8014d88:	e00e      	b.n	8014da8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014d8a:	7bbb      	ldrb	r3, [r7, #14]
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7f1 fa82 	bl	8006298 <USBD_LL_IsStallEP>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d003      	beq.n	8014da2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	2201      	movs	r2, #1
 8014d9e:	601a      	str	r2, [r3, #0]
 8014da0:	e002      	b.n	8014da8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	2200      	movs	r2, #0
 8014da6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	2202      	movs	r2, #2
 8014dac:	4619      	mov	r1, r3
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 fba9 	bl	8015506 <USBD_CtlSendData>
              break;
 8014db4:	e004      	b.n	8014dc0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8014db6:	6839      	ldr	r1, [r7, #0]
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 fb39 	bl	8015430 <USBD_CtlError>
              break;
 8014dbe:	bf00      	nop
          }
          break;
 8014dc0:	e004      	b.n	8014dcc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f000 fb33 	bl	8015430 <USBD_CtlError>
          break;
 8014dca:	bf00      	nop
      }
      break;
 8014dcc:	e004      	b.n	8014dd8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8014dce:	6839      	ldr	r1, [r7, #0]
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f000 fb2d 	bl	8015430 <USBD_CtlError>
      break;
 8014dd6:	bf00      	nop
  }

  return ret;
 8014dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3710      	adds	r7, #16
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
	...

08014de4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014dee:	2300      	movs	r3, #0
 8014df0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014df2:	2300      	movs	r3, #0
 8014df4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014df6:	2300      	movs	r3, #0
 8014df8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	885b      	ldrh	r3, [r3, #2]
 8014dfe:	0a1b      	lsrs	r3, r3, #8
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	3b01      	subs	r3, #1
 8014e04:	2b06      	cmp	r3, #6
 8014e06:	f200 813b 	bhi.w	8015080 <USBD_GetDescriptor+0x29c>
 8014e0a:	a201      	add	r2, pc, #4	; (adr r2, 8014e10 <USBD_GetDescriptor+0x2c>)
 8014e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e10:	08014e2d 	.word	0x08014e2d
 8014e14:	08014e45 	.word	0x08014e45
 8014e18:	08014e85 	.word	0x08014e85
 8014e1c:	08015081 	.word	0x08015081
 8014e20:	08015081 	.word	0x08015081
 8014e24:	08015021 	.word	0x08015021
 8014e28:	0801504d 	.word	0x0801504d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	7c12      	ldrb	r2, [r2, #16]
 8014e38:	f107 0108 	add.w	r1, r7, #8
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	4798      	blx	r3
 8014e40:	60f8      	str	r0, [r7, #12]
      break;
 8014e42:	e125      	b.n	8015090 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	7c1b      	ldrb	r3, [r3, #16]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10d      	bne.n	8014e68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e54:	f107 0208 	add.w	r2, r7, #8
 8014e58:	4610      	mov	r0, r2
 8014e5a:	4798      	blx	r3
 8014e5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	3301      	adds	r3, #1
 8014e62:	2202      	movs	r2, #2
 8014e64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014e66:	e113      	b.n	8015090 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e70:	f107 0208 	add.w	r2, r7, #8
 8014e74:	4610      	mov	r0, r2
 8014e76:	4798      	blx	r3
 8014e78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	3301      	adds	r3, #1
 8014e7e:	2202      	movs	r2, #2
 8014e80:	701a      	strb	r2, [r3, #0]
      break;
 8014e82:	e105      	b.n	8015090 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	885b      	ldrh	r3, [r3, #2]
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	2b05      	cmp	r3, #5
 8014e8c:	f200 80ac 	bhi.w	8014fe8 <USBD_GetDescriptor+0x204>
 8014e90:	a201      	add	r2, pc, #4	; (adr r2, 8014e98 <USBD_GetDescriptor+0xb4>)
 8014e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e96:	bf00      	nop
 8014e98:	08014eb1 	.word	0x08014eb1
 8014e9c:	08014ee5 	.word	0x08014ee5
 8014ea0:	08014f19 	.word	0x08014f19
 8014ea4:	08014f4d 	.word	0x08014f4d
 8014ea8:	08014f81 	.word	0x08014f81
 8014eac:	08014fb5 	.word	0x08014fb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014eb6:	685b      	ldr	r3, [r3, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00b      	beq.n	8014ed4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	7c12      	ldrb	r2, [r2, #16]
 8014ec8:	f107 0108 	add.w	r1, r7, #8
 8014ecc:	4610      	mov	r0, r2
 8014ece:	4798      	blx	r3
 8014ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ed2:	e0a4      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014ed4:	6839      	ldr	r1, [r7, #0]
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f000 faaa 	bl	8015430 <USBD_CtlError>
            err++;
 8014edc:	7afb      	ldrb	r3, [r7, #11]
 8014ede:	3301      	adds	r3, #1
 8014ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8014ee2:	e09c      	b.n	801501e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00b      	beq.n	8014f08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ef6:	689b      	ldr	r3, [r3, #8]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	7c12      	ldrb	r2, [r2, #16]
 8014efc:	f107 0108 	add.w	r1, r7, #8
 8014f00:	4610      	mov	r0, r2
 8014f02:	4798      	blx	r3
 8014f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f06:	e08a      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014f08:	6839      	ldr	r1, [r7, #0]
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 fa90 	bl	8015430 <USBD_CtlError>
            err++;
 8014f10:	7afb      	ldrb	r3, [r7, #11]
 8014f12:	3301      	adds	r3, #1
 8014f14:	72fb      	strb	r3, [r7, #11]
          break;
 8014f16:	e082      	b.n	801501e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d00b      	beq.n	8014f3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f2a:	68db      	ldr	r3, [r3, #12]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	7c12      	ldrb	r2, [r2, #16]
 8014f30:	f107 0108 	add.w	r1, r7, #8
 8014f34:	4610      	mov	r0, r2
 8014f36:	4798      	blx	r3
 8014f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f3a:	e070      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014f3c:	6839      	ldr	r1, [r7, #0]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f000 fa76 	bl	8015430 <USBD_CtlError>
            err++;
 8014f44:	7afb      	ldrb	r3, [r7, #11]
 8014f46:	3301      	adds	r3, #1
 8014f48:	72fb      	strb	r3, [r7, #11]
          break;
 8014f4a:	e068      	b.n	801501e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f52:	691b      	ldr	r3, [r3, #16]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00b      	beq.n	8014f70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f5e:	691b      	ldr	r3, [r3, #16]
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	7c12      	ldrb	r2, [r2, #16]
 8014f64:	f107 0108 	add.w	r1, r7, #8
 8014f68:	4610      	mov	r0, r2
 8014f6a:	4798      	blx	r3
 8014f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f6e:	e056      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014f70:	6839      	ldr	r1, [r7, #0]
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 fa5c 	bl	8015430 <USBD_CtlError>
            err++;
 8014f78:	7afb      	ldrb	r3, [r7, #11]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8014f7e:	e04e      	b.n	801501e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f86:	695b      	ldr	r3, [r3, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d00b      	beq.n	8014fa4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f92:	695b      	ldr	r3, [r3, #20]
 8014f94:	687a      	ldr	r2, [r7, #4]
 8014f96:	7c12      	ldrb	r2, [r2, #16]
 8014f98:	f107 0108 	add.w	r1, r7, #8
 8014f9c:	4610      	mov	r0, r2
 8014f9e:	4798      	blx	r3
 8014fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fa2:	e03c      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014fa4:	6839      	ldr	r1, [r7, #0]
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 fa42 	bl	8015430 <USBD_CtlError>
            err++;
 8014fac:	7afb      	ldrb	r3, [r7, #11]
 8014fae:	3301      	adds	r3, #1
 8014fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8014fb2:	e034      	b.n	801501e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014fba:	699b      	ldr	r3, [r3, #24]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d00b      	beq.n	8014fd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014fc6:	699b      	ldr	r3, [r3, #24]
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	7c12      	ldrb	r2, [r2, #16]
 8014fcc:	f107 0108 	add.w	r1, r7, #8
 8014fd0:	4610      	mov	r0, r2
 8014fd2:	4798      	blx	r3
 8014fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fd6:	e022      	b.n	801501e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014fd8:	6839      	ldr	r1, [r7, #0]
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f000 fa28 	bl	8015430 <USBD_CtlError>
            err++;
 8014fe0:	7afb      	ldrb	r3, [r7, #11]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8014fe6:	e01a      	b.n	801501e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00c      	beq.n	801500e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ffc:	683a      	ldr	r2, [r7, #0]
 8014ffe:	8852      	ldrh	r2, [r2, #2]
 8015000:	b2d1      	uxtb	r1, r2
 8015002:	f107 0208 	add.w	r2, r7, #8
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	4798      	blx	r3
 801500a:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801500c:	e006      	b.n	801501c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801500e:	6839      	ldr	r1, [r7, #0]
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 fa0d 	bl	8015430 <USBD_CtlError>
            err++;
 8015016:	7afb      	ldrb	r3, [r7, #11]
 8015018:	3301      	adds	r3, #1
 801501a:	72fb      	strb	r3, [r7, #11]
          break;
 801501c:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801501e:	e037      	b.n	8015090 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	7c1b      	ldrb	r3, [r3, #16]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d109      	bne.n	801503c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015030:	f107 0208 	add.w	r2, r7, #8
 8015034:	4610      	mov	r0, r2
 8015036:	4798      	blx	r3
 8015038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801503a:	e029      	b.n	8015090 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 801503c:	6839      	ldr	r1, [r7, #0]
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f000 f9f6 	bl	8015430 <USBD_CtlError>
        err++;
 8015044:	7afb      	ldrb	r3, [r7, #11]
 8015046:	3301      	adds	r3, #1
 8015048:	72fb      	strb	r3, [r7, #11]
      break;
 801504a:	e021      	b.n	8015090 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	7c1b      	ldrb	r3, [r3, #16]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d10d      	bne.n	8015070 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801505c:	f107 0208 	add.w	r2, r7, #8
 8015060:	4610      	mov	r0, r2
 8015062:	4798      	blx	r3
 8015064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	3301      	adds	r3, #1
 801506a:	2207      	movs	r2, #7
 801506c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801506e:	e00f      	b.n	8015090 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f9dc 	bl	8015430 <USBD_CtlError>
        err++;
 8015078:	7afb      	ldrb	r3, [r7, #11]
 801507a:	3301      	adds	r3, #1
 801507c:	72fb      	strb	r3, [r7, #11]
      break;
 801507e:	e007      	b.n	8015090 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8015080:	6839      	ldr	r1, [r7, #0]
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f000 f9d4 	bl	8015430 <USBD_CtlError>
      err++;
 8015088:	7afb      	ldrb	r3, [r7, #11]
 801508a:	3301      	adds	r3, #1
 801508c:	72fb      	strb	r3, [r7, #11]
      break;
 801508e:	bf00      	nop
  }

  if (err != 0U)
 8015090:	7afb      	ldrb	r3, [r7, #11]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d11c      	bne.n	80150d0 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8015096:	893b      	ldrh	r3, [r7, #8]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d011      	beq.n	80150c0 <USBD_GetDescriptor+0x2dc>
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	88db      	ldrh	r3, [r3, #6]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d00d      	beq.n	80150c0 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	88da      	ldrh	r2, [r3, #6]
 80150a8:	893b      	ldrh	r3, [r7, #8]
 80150aa:	4293      	cmp	r3, r2
 80150ac:	bf28      	it	cs
 80150ae:	4613      	movcs	r3, r2
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80150b4:	893b      	ldrh	r3, [r7, #8]
 80150b6:	461a      	mov	r2, r3
 80150b8:	68f9      	ldr	r1, [r7, #12]
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f000 fa23 	bl	8015506 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	88db      	ldrh	r3, [r3, #6]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d104      	bne.n	80150d2 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 fa7a 	bl	80155c2 <USBD_CtlSendStatus>
 80150ce:	e000      	b.n	80150d2 <USBD_GetDescriptor+0x2ee>
    return;
 80150d0:	bf00      	nop
    }
  }
}
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	889b      	ldrh	r3, [r3, #4]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d130      	bne.n	801514c <USBD_SetAddress+0x74>
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	88db      	ldrh	r3, [r3, #6]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d12c      	bne.n	801514c <USBD_SetAddress+0x74>
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	885b      	ldrh	r3, [r3, #2]
 80150f6:	2b7f      	cmp	r3, #127	; 0x7f
 80150f8:	d828      	bhi.n	801514c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	885b      	ldrh	r3, [r3, #2]
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801510c:	2b03      	cmp	r3, #3
 801510e:	d104      	bne.n	801511a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015110:	6839      	ldr	r1, [r7, #0]
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 f98c 	bl	8015430 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015118:	e01d      	b.n	8015156 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	7bfa      	ldrb	r2, [r7, #15]
 801511e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015122:	7bfb      	ldrb	r3, [r7, #15]
 8015124:	4619      	mov	r1, r3
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7f1 f8e2 	bl	80062f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f000 fa48 	bl	80155c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015132:	7bfb      	ldrb	r3, [r7, #15]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2202      	movs	r2, #2
 801513c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015140:	e009      	b.n	8015156 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2201      	movs	r2, #1
 8015146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801514a:	e004      	b.n	8015156 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801514c:	6839      	ldr	r1, [r7, #0]
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f000 f96e 	bl	8015430 <USBD_CtlError>
  }
}
 8015154:	bf00      	nop
 8015156:	bf00      	nop
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
	...

08015160 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	885b      	ldrh	r3, [r3, #2]
 801516e:	b2da      	uxtb	r2, r3
 8015170:	4b41      	ldr	r3, [pc, #260]	; (8015278 <USBD_SetConfig+0x118>)
 8015172:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015174:	4b40      	ldr	r3, [pc, #256]	; (8015278 <USBD_SetConfig+0x118>)
 8015176:	781b      	ldrb	r3, [r3, #0]
 8015178:	2b01      	cmp	r3, #1
 801517a:	d904      	bls.n	8015186 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801517c:	6839      	ldr	r1, [r7, #0]
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f000 f956 	bl	8015430 <USBD_CtlError>
 8015184:	e075      	b.n	8015272 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518c:	2b02      	cmp	r3, #2
 801518e:	d002      	beq.n	8015196 <USBD_SetConfig+0x36>
 8015190:	2b03      	cmp	r3, #3
 8015192:	d023      	beq.n	80151dc <USBD_SetConfig+0x7c>
 8015194:	e062      	b.n	801525c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8015196:	4b38      	ldr	r3, [pc, #224]	; (8015278 <USBD_SetConfig+0x118>)
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d01a      	beq.n	80151d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801519e:	4b36      	ldr	r3, [pc, #216]	; (8015278 <USBD_SetConfig+0x118>)
 80151a0:	781b      	ldrb	r3, [r3, #0]
 80151a2:	461a      	mov	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2203      	movs	r2, #3
 80151ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80151b0:	4b31      	ldr	r3, [pc, #196]	; (8015278 <USBD_SetConfig+0x118>)
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	4619      	mov	r1, r3
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f7ff f996 	bl	80144e8 <USBD_SetClassConfig>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b02      	cmp	r3, #2
 80151c0:	d104      	bne.n	80151cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80151c2:	6839      	ldr	r1, [r7, #0]
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f933 	bl	8015430 <USBD_CtlError>
            return;
 80151ca:	e052      	b.n	8015272 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f9f8 	bl	80155c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80151d2:	e04e      	b.n	8015272 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f000 f9f4 	bl	80155c2 <USBD_CtlSendStatus>
        break;
 80151da:	e04a      	b.n	8015272 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80151dc:	4b26      	ldr	r3, [pc, #152]	; (8015278 <USBD_SetConfig+0x118>)
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d112      	bne.n	801520a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2202      	movs	r2, #2
 80151e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80151ec:	4b22      	ldr	r3, [pc, #136]	; (8015278 <USBD_SetConfig+0x118>)
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	461a      	mov	r2, r3
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80151f6:	4b20      	ldr	r3, [pc, #128]	; (8015278 <USBD_SetConfig+0x118>)
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	4619      	mov	r1, r3
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f7ff f992 	bl	8014526 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 f9dd 	bl	80155c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8015208:	e033      	b.n	8015272 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801520a:	4b1b      	ldr	r3, [pc, #108]	; (8015278 <USBD_SetConfig+0x118>)
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	461a      	mov	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	429a      	cmp	r2, r3
 8015216:	d01d      	beq.n	8015254 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	b2db      	uxtb	r3, r3
 801521e:	4619      	mov	r1, r3
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff f980 	bl	8014526 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8015226:	4b14      	ldr	r3, [pc, #80]	; (8015278 <USBD_SetConfig+0x118>)
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	461a      	mov	r2, r3
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8015230:	4b11      	ldr	r3, [pc, #68]	; (8015278 <USBD_SetConfig+0x118>)
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	4619      	mov	r1, r3
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7ff f956 	bl	80144e8 <USBD_SetClassConfig>
 801523c:	4603      	mov	r3, r0
 801523e:	2b02      	cmp	r3, #2
 8015240:	d104      	bne.n	801524c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8015242:	6839      	ldr	r1, [r7, #0]
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f000 f8f3 	bl	8015430 <USBD_CtlError>
            return;
 801524a:	e012      	b.n	8015272 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f000 f9b8 	bl	80155c2 <USBD_CtlSendStatus>
        break;
 8015252:	e00e      	b.n	8015272 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f000 f9b4 	bl	80155c2 <USBD_CtlSendStatus>
        break;
 801525a:	e00a      	b.n	8015272 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801525c:	6839      	ldr	r1, [r7, #0]
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f000 f8e6 	bl	8015430 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8015264:	4b04      	ldr	r3, [pc, #16]	; (8015278 <USBD_SetConfig+0x118>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	4619      	mov	r1, r3
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7ff f95b 	bl	8014526 <USBD_ClrClassConfig>
        break;
 8015270:	bf00      	nop
    }
  }
}
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	20000d79 	.word	0x20000d79

0801527c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	88db      	ldrh	r3, [r3, #6]
 801528a:	2b01      	cmp	r3, #1
 801528c:	d004      	beq.n	8015298 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801528e:	6839      	ldr	r1, [r7, #0]
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f000 f8cd 	bl	8015430 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015296:	e022      	b.n	80152de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801529e:	2b02      	cmp	r3, #2
 80152a0:	dc02      	bgt.n	80152a8 <USBD_GetConfig+0x2c>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	dc03      	bgt.n	80152ae <USBD_GetConfig+0x32>
 80152a6:	e015      	b.n	80152d4 <USBD_GetConfig+0x58>
 80152a8:	2b03      	cmp	r3, #3
 80152aa:	d00b      	beq.n	80152c4 <USBD_GetConfig+0x48>
 80152ac:	e012      	b.n	80152d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2200      	movs	r2, #0
 80152b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	3308      	adds	r3, #8
 80152b8:	2201      	movs	r2, #1
 80152ba:	4619      	mov	r1, r3
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f000 f922 	bl	8015506 <USBD_CtlSendData>
        break;
 80152c2:	e00c      	b.n	80152de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	3304      	adds	r3, #4
 80152c8:	2201      	movs	r2, #1
 80152ca:	4619      	mov	r1, r3
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f000 f91a 	bl	8015506 <USBD_CtlSendData>
        break;
 80152d2:	e004      	b.n	80152de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80152d4:	6839      	ldr	r1, [r7, #0]
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f8aa 	bl	8015430 <USBD_CtlError>
        break;
 80152dc:	bf00      	nop
}
 80152de:	bf00      	nop
 80152e0:	3708      	adds	r7, #8
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}

080152e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152e6:	b580      	push	{r7, lr}
 80152e8:	b082      	sub	sp, #8
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	6078      	str	r0, [r7, #4]
 80152ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152f6:	3b01      	subs	r3, #1
 80152f8:	2b02      	cmp	r3, #2
 80152fa:	d81e      	bhi.n	801533a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	88db      	ldrh	r3, [r3, #6]
 8015300:	2b02      	cmp	r3, #2
 8015302:	d004      	beq.n	801530e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8015304:	6839      	ldr	r1, [r7, #0]
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f000 f892 	bl	8015430 <USBD_CtlError>
        break;
 801530c:	e01a      	b.n	8015344 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2201      	movs	r2, #1
 8015312:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801531a:	2b00      	cmp	r3, #0
 801531c:	d005      	beq.n	801532a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	f043 0202 	orr.w	r2, r3, #2
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	330c      	adds	r3, #12
 801532e:	2202      	movs	r2, #2
 8015330:	4619      	mov	r1, r3
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f000 f8e7 	bl	8015506 <USBD_CtlSendData>
      break;
 8015338:	e004      	b.n	8015344 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801533a:	6839      	ldr	r1, [r7, #0]
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f000 f877 	bl	8015430 <USBD_CtlError>
      break;
 8015342:	bf00      	nop
  }
}
 8015344:	bf00      	nop
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b082      	sub	sp, #8
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	885b      	ldrh	r3, [r3, #2]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d106      	bne.n	801536c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	2201      	movs	r2, #1
 8015362:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f000 f92b 	bl	80155c2 <USBD_CtlSendStatus>
  }
}
 801536c:	bf00      	nop
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015384:	3b01      	subs	r3, #1
 8015386:	2b02      	cmp	r3, #2
 8015388:	d80b      	bhi.n	80153a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	885b      	ldrh	r3, [r3, #2]
 801538e:	2b01      	cmp	r3, #1
 8015390:	d10c      	bne.n	80153ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2200      	movs	r2, #0
 8015396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 f911 	bl	80155c2 <USBD_CtlSendStatus>
      }
      break;
 80153a0:	e004      	b.n	80153ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80153a2:	6839      	ldr	r1, [r7, #0]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f000 f843 	bl	8015430 <USBD_CtlError>
      break;
 80153aa:	e000      	b.n	80153ae <USBD_ClrFeature+0x3a>
      break;
 80153ac:	bf00      	nop
  }
}
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80153b6:	b480      	push	{r7}
 80153b8:	b083      	sub	sp, #12
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	781a      	ldrb	r2, [r3, #0]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	785a      	ldrb	r2, [r3, #1]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	3302      	adds	r3, #2
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	3303      	adds	r3, #3
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	021b      	lsls	r3, r3, #8
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	4413      	add	r3, r2
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	3304      	adds	r3, #4
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	3305      	adds	r3, #5
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	021b      	lsls	r3, r3, #8
 80153fe:	b29b      	uxth	r3, r3
 8015400:	4413      	add	r3, r2
 8015402:	b29a      	uxth	r2, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	3306      	adds	r3, #6
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	b29a      	uxth	r2, r3
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	3307      	adds	r3, #7
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	b29b      	uxth	r3, r3
 8015418:	021b      	lsls	r3, r3, #8
 801541a:	b29b      	uxth	r3, r3
 801541c:	4413      	add	r3, r2
 801541e:	b29a      	uxth	r2, r3
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	80da      	strh	r2, [r3, #6]

}
 8015424:	bf00      	nop
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801543a:	2180      	movs	r1, #128	; 0x80
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7f0 ff05 	bl	800624c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8015442:	2100      	movs	r1, #0
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7f0 ff01 	bl	800624c <USBD_LL_StallEP>
}
 801544a:	bf00      	nop
 801544c:	3708      	adds	r7, #8
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b086      	sub	sp, #24
 8015456:	af00      	add	r7, sp, #0
 8015458:	60f8      	str	r0, [r7, #12]
 801545a:	60b9      	str	r1, [r7, #8]
 801545c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801545e:	2300      	movs	r3, #0
 8015460:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d032      	beq.n	80154ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f000 f834 	bl	80154d6 <USBD_GetLen>
 801546e:	4603      	mov	r3, r0
 8015470:	3301      	adds	r3, #1
 8015472:	b29b      	uxth	r3, r3
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	b29a      	uxth	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801547c:	7dfb      	ldrb	r3, [r7, #23]
 801547e:	1c5a      	adds	r2, r3, #1
 8015480:	75fa      	strb	r2, [r7, #23]
 8015482:	461a      	mov	r2, r3
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	4413      	add	r3, r2
 8015488:	687a      	ldr	r2, [r7, #4]
 801548a:	7812      	ldrb	r2, [r2, #0]
 801548c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801548e:	7dfb      	ldrb	r3, [r7, #23]
 8015490:	1c5a      	adds	r2, r3, #1
 8015492:	75fa      	strb	r2, [r7, #23]
 8015494:	461a      	mov	r2, r3
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	4413      	add	r3, r2
 801549a:	2203      	movs	r2, #3
 801549c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801549e:	e012      	b.n	80154c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	1c5a      	adds	r2, r3, #1
 80154a4:	60fa      	str	r2, [r7, #12]
 80154a6:	7dfa      	ldrb	r2, [r7, #23]
 80154a8:	1c51      	adds	r1, r2, #1
 80154aa:	75f9      	strb	r1, [r7, #23]
 80154ac:	4611      	mov	r1, r2
 80154ae:	68ba      	ldr	r2, [r7, #8]
 80154b0:	440a      	add	r2, r1
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80154b6:	7dfb      	ldrb	r3, [r7, #23]
 80154b8:	1c5a      	adds	r2, r3, #1
 80154ba:	75fa      	strb	r2, [r7, #23]
 80154bc:	461a      	mov	r2, r3
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	4413      	add	r3, r2
 80154c2:	2200      	movs	r2, #0
 80154c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d1e8      	bne.n	80154a0 <USBD_GetString+0x4e>
    }
  }
}
 80154ce:	bf00      	nop
 80154d0:	3718      	adds	r7, #24
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b085      	sub	sp, #20
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80154de:	2300      	movs	r3, #0
 80154e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80154e2:	e005      	b.n	80154f0 <USBD_GetLen+0x1a>
  {
    len++;
 80154e4:	7bfb      	ldrb	r3, [r7, #15]
 80154e6:	3301      	adds	r3, #1
 80154e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	3301      	adds	r3, #1
 80154ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1f5      	bne.n	80154e4 <USBD_GetLen+0xe>
  }

  return len;
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3714      	adds	r7, #20
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr

08015506 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8015506:	b580      	push	{r7, lr}
 8015508:	b084      	sub	sp, #16
 801550a:	af00      	add	r7, sp, #0
 801550c:	60f8      	str	r0, [r7, #12]
 801550e:	60b9      	str	r1, [r7, #8]
 8015510:	4613      	mov	r3, r2
 8015512:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	2202      	movs	r2, #2
 8015518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801551c:	88fa      	ldrh	r2, [r7, #6]
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8015522:	88fa      	ldrh	r2, [r7, #6]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015528:	88fb      	ldrh	r3, [r7, #6]
 801552a:	68ba      	ldr	r2, [r7, #8]
 801552c:	2100      	movs	r1, #0
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f7f0 fef1 	bl	8006316 <USBD_LL_Transmit>

  return USBD_OK;
 8015534:	2300      	movs	r3, #0
}
 8015536:	4618      	mov	r0, r3
 8015538:	3710      	adds	r7, #16
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}

0801553e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801553e:	b580      	push	{r7, lr}
 8015540:	b084      	sub	sp, #16
 8015542:	af00      	add	r7, sp, #0
 8015544:	60f8      	str	r0, [r7, #12]
 8015546:	60b9      	str	r1, [r7, #8]
 8015548:	4613      	mov	r3, r2
 801554a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801554c:	88fb      	ldrh	r3, [r7, #6]
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	2100      	movs	r1, #0
 8015552:	68f8      	ldr	r0, [r7, #12]
 8015554:	f7f0 fedf 	bl	8006316 <USBD_LL_Transmit>

  return USBD_OK;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	3710      	adds	r7, #16
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}

08015562 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015562:	b580      	push	{r7, lr}
 8015564:	b084      	sub	sp, #16
 8015566:	af00      	add	r7, sp, #0
 8015568:	60f8      	str	r0, [r7, #12]
 801556a:	60b9      	str	r1, [r7, #8]
 801556c:	4613      	mov	r3, r2
 801556e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2203      	movs	r2, #3
 8015574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015578:	88fa      	ldrh	r2, [r7, #6]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8015580:	88fa      	ldrh	r2, [r7, #6]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015588:	88fb      	ldrh	r3, [r7, #6]
 801558a:	68ba      	ldr	r2, [r7, #8]
 801558c:	2100      	movs	r1, #0
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f7f0 fed8 	bl	8006344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015594:	2300      	movs	r3, #0
}
 8015596:	4618      	mov	r0, r3
 8015598:	3710      	adds	r7, #16
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}

0801559e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801559e:	b580      	push	{r7, lr}
 80155a0:	b084      	sub	sp, #16
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	60f8      	str	r0, [r7, #12]
 80155a6:	60b9      	str	r1, [r7, #8]
 80155a8:	4613      	mov	r3, r2
 80155aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80155ac:	88fb      	ldrh	r3, [r7, #6]
 80155ae:	68ba      	ldr	r2, [r7, #8]
 80155b0:	2100      	movs	r1, #0
 80155b2:	68f8      	ldr	r0, [r7, #12]
 80155b4:	f7f0 fec6 	bl	8006344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155b8:	2300      	movs	r3, #0
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3710      	adds	r7, #16
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b082      	sub	sp, #8
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2204      	movs	r2, #4
 80155ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80155d2:	2300      	movs	r3, #0
 80155d4:	2200      	movs	r2, #0
 80155d6:	2100      	movs	r1, #0
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7f0 fe9c 	bl	8006316 <USBD_LL_Transmit>

  return USBD_OK;
 80155de:	2300      	movs	r3, #0
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}

080155e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2205      	movs	r2, #5
 80155f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155f8:	2300      	movs	r3, #0
 80155fa:	2200      	movs	r2, #0
 80155fc:	2100      	movs	r1, #0
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7f0 fea0 	bl	8006344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
	...

08015610 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b084      	sub	sp, #16
 8015614:	af00      	add	r7, sp, #0
 8015616:	4603      	mov	r3, r0
 8015618:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801561a:	79fb      	ldrb	r3, [r7, #7]
 801561c:	4a08      	ldr	r2, [pc, #32]	; (8015640 <disk_status+0x30>)
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	4413      	add	r3, r2
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	79fa      	ldrb	r2, [r7, #7]
 8015628:	4905      	ldr	r1, [pc, #20]	; (8015640 <disk_status+0x30>)
 801562a:	440a      	add	r2, r1
 801562c:	7a12      	ldrb	r2, [r2, #8]
 801562e:	4610      	mov	r0, r2
 8015630:	4798      	blx	r3
 8015632:	4603      	mov	r3, r0
 8015634:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015636:	7bfb      	ldrb	r3, [r7, #15]
}
 8015638:	4618      	mov	r0, r3
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	200010c4 	.word	0x200010c4

08015644 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b084      	sub	sp, #16
 8015648:	af00      	add	r7, sp, #0
 801564a:	4603      	mov	r3, r0
 801564c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801564e:	2300      	movs	r3, #0
 8015650:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015652:	79fb      	ldrb	r3, [r7, #7]
 8015654:	4a0d      	ldr	r2, [pc, #52]	; (801568c <disk_initialize+0x48>)
 8015656:	5cd3      	ldrb	r3, [r2, r3]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d111      	bne.n	8015680 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801565c:	79fb      	ldrb	r3, [r7, #7]
 801565e:	4a0b      	ldr	r2, [pc, #44]	; (801568c <disk_initialize+0x48>)
 8015660:	2101      	movs	r1, #1
 8015662:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015664:	79fb      	ldrb	r3, [r7, #7]
 8015666:	4a09      	ldr	r2, [pc, #36]	; (801568c <disk_initialize+0x48>)
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	4413      	add	r3, r2
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	79fa      	ldrb	r2, [r7, #7]
 8015672:	4906      	ldr	r1, [pc, #24]	; (801568c <disk_initialize+0x48>)
 8015674:	440a      	add	r2, r1
 8015676:	7a12      	ldrb	r2, [r2, #8]
 8015678:	4610      	mov	r0, r2
 801567a:	4798      	blx	r3
 801567c:	4603      	mov	r3, r0
 801567e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015680:	7bfb      	ldrb	r3, [r7, #15]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3710      	adds	r7, #16
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	200010c4 	.word	0x200010c4

08015690 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015690:	b590      	push	{r4, r7, lr}
 8015692:	b087      	sub	sp, #28
 8015694:	af00      	add	r7, sp, #0
 8015696:	60b9      	str	r1, [r7, #8]
 8015698:	607a      	str	r2, [r7, #4]
 801569a:	603b      	str	r3, [r7, #0]
 801569c:	4603      	mov	r3, r0
 801569e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80156a0:	7bfb      	ldrb	r3, [r7, #15]
 80156a2:	4a0a      	ldr	r2, [pc, #40]	; (80156cc <disk_read+0x3c>)
 80156a4:	009b      	lsls	r3, r3, #2
 80156a6:	4413      	add	r3, r2
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	689c      	ldr	r4, [r3, #8]
 80156ac:	7bfb      	ldrb	r3, [r7, #15]
 80156ae:	4a07      	ldr	r2, [pc, #28]	; (80156cc <disk_read+0x3c>)
 80156b0:	4413      	add	r3, r2
 80156b2:	7a18      	ldrb	r0, [r3, #8]
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	687a      	ldr	r2, [r7, #4]
 80156b8:	68b9      	ldr	r1, [r7, #8]
 80156ba:	47a0      	blx	r4
 80156bc:	4603      	mov	r3, r0
 80156be:	75fb      	strb	r3, [r7, #23]
  return res;
 80156c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	371c      	adds	r7, #28
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd90      	pop	{r4, r7, pc}
 80156ca:	bf00      	nop
 80156cc:	200010c4 	.word	0x200010c4

080156d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80156d0:	b590      	push	{r4, r7, lr}
 80156d2:	b087      	sub	sp, #28
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60b9      	str	r1, [r7, #8]
 80156d8:	607a      	str	r2, [r7, #4]
 80156da:	603b      	str	r3, [r7, #0]
 80156dc:	4603      	mov	r3, r0
 80156de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
 80156e2:	4a0a      	ldr	r2, [pc, #40]	; (801570c <disk_write+0x3c>)
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	4413      	add	r3, r2
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	68dc      	ldr	r4, [r3, #12]
 80156ec:	7bfb      	ldrb	r3, [r7, #15]
 80156ee:	4a07      	ldr	r2, [pc, #28]	; (801570c <disk_write+0x3c>)
 80156f0:	4413      	add	r3, r2
 80156f2:	7a18      	ldrb	r0, [r3, #8]
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	68b9      	ldr	r1, [r7, #8]
 80156fa:	47a0      	blx	r4
 80156fc:	4603      	mov	r3, r0
 80156fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8015700:	7dfb      	ldrb	r3, [r7, #23]
}
 8015702:	4618      	mov	r0, r3
 8015704:	371c      	adds	r7, #28
 8015706:	46bd      	mov	sp, r7
 8015708:	bd90      	pop	{r4, r7, pc}
 801570a:	bf00      	nop
 801570c:	200010c4 	.word	0x200010c4

08015710 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	4603      	mov	r3, r0
 8015718:	603a      	str	r2, [r7, #0]
 801571a:	71fb      	strb	r3, [r7, #7]
 801571c:	460b      	mov	r3, r1
 801571e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015720:	79fb      	ldrb	r3, [r7, #7]
 8015722:	4a09      	ldr	r2, [pc, #36]	; (8015748 <disk_ioctl+0x38>)
 8015724:	009b      	lsls	r3, r3, #2
 8015726:	4413      	add	r3, r2
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	691b      	ldr	r3, [r3, #16]
 801572c:	79fa      	ldrb	r2, [r7, #7]
 801572e:	4906      	ldr	r1, [pc, #24]	; (8015748 <disk_ioctl+0x38>)
 8015730:	440a      	add	r2, r1
 8015732:	7a10      	ldrb	r0, [r2, #8]
 8015734:	79b9      	ldrb	r1, [r7, #6]
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	4798      	blx	r3
 801573a:	4603      	mov	r3, r0
 801573c:	73fb      	strb	r3, [r7, #15]
  return res;
 801573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3710      	adds	r7, #16
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	200010c4 	.word	0x200010c4

0801574c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 801574c:	b480      	push	{r7}
 801574e:	af00      	add	r7, sp, #0
  return 0;
 8015750:	2300      	movs	r3, #0
}
 8015752:	4618      	mov	r0, r3
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801575c:	b480      	push	{r7}
 801575e:	b085      	sub	sp, #20
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	3301      	adds	r3, #1
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801576c:	89fb      	ldrh	r3, [r7, #14]
 801576e:	021b      	lsls	r3, r3, #8
 8015770:	b21a      	sxth	r2, r3
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	b21b      	sxth	r3, r3
 8015778:	4313      	orrs	r3, r2
 801577a:	b21b      	sxth	r3, r3
 801577c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801577e:	89fb      	ldrh	r3, [r7, #14]
}
 8015780:	4618      	mov	r0, r3
 8015782:	3714      	adds	r7, #20
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr

0801578c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	3303      	adds	r3, #3
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	021b      	lsls	r3, r3, #8
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	3202      	adds	r2, #2
 80157a4:	7812      	ldrb	r2, [r2, #0]
 80157a6:	4313      	orrs	r3, r2
 80157a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	021b      	lsls	r3, r3, #8
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	3201      	adds	r2, #1
 80157b2:	7812      	ldrb	r2, [r2, #0]
 80157b4:	4313      	orrs	r3, r2
 80157b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	021b      	lsls	r3, r3, #8
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	7812      	ldrb	r2, [r2, #0]
 80157c0:	4313      	orrs	r3, r2
 80157c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80157c4:	68fb      	ldr	r3, [r7, #12]
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3714      	adds	r7, #20
 80157ca:	46bd      	mov	sp, r7
 80157cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d0:	4770      	bx	lr

080157d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80157d2:	b480      	push	{r7}
 80157d4:	b083      	sub	sp, #12
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
 80157da:	460b      	mov	r3, r1
 80157dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	1c5a      	adds	r2, r3, #1
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	887a      	ldrh	r2, [r7, #2]
 80157e6:	b2d2      	uxtb	r2, r2
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	887b      	ldrh	r3, [r7, #2]
 80157ec:	0a1b      	lsrs	r3, r3, #8
 80157ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	1c5a      	adds	r2, r3, #1
 80157f4:	607a      	str	r2, [r7, #4]
 80157f6:	887a      	ldrh	r2, [r7, #2]
 80157f8:	b2d2      	uxtb	r2, r2
 80157fa:	701a      	strb	r2, [r3, #0]
}
 80157fc:	bf00      	nop
 80157fe:	370c      	adds	r7, #12
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	1c5a      	adds	r2, r3, #1
 8015816:	607a      	str	r2, [r7, #4]
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	b2d2      	uxtb	r2, r2
 801581c:	701a      	strb	r2, [r3, #0]
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	0a1b      	lsrs	r3, r3, #8
 8015822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	1c5a      	adds	r2, r3, #1
 8015828:	607a      	str	r2, [r7, #4]
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	b2d2      	uxtb	r2, r2
 801582e:	701a      	strb	r2, [r3, #0]
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	0a1b      	lsrs	r3, r3, #8
 8015834:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	1c5a      	adds	r2, r3, #1
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	683a      	ldr	r2, [r7, #0]
 801583e:	b2d2      	uxtb	r2, r2
 8015840:	701a      	strb	r2, [r3, #0]
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	0a1b      	lsrs	r3, r3, #8
 8015846:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	1c5a      	adds	r2, r3, #1
 801584c:	607a      	str	r2, [r7, #4]
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	b2d2      	uxtb	r2, r2
 8015852:	701a      	strb	r2, [r3, #0]
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015860:	b480      	push	{r7}
 8015862:	b087      	sub	sp, #28
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00d      	beq.n	8015896 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801587a:	693a      	ldr	r2, [r7, #16]
 801587c:	1c53      	adds	r3, r2, #1
 801587e:	613b      	str	r3, [r7, #16]
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	1c59      	adds	r1, r3, #1
 8015884:	6179      	str	r1, [r7, #20]
 8015886:	7812      	ldrb	r2, [r2, #0]
 8015888:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	3b01      	subs	r3, #1
 801588e:	607b      	str	r3, [r7, #4]
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1f1      	bne.n	801587a <mem_cpy+0x1a>
	}
}
 8015896:	bf00      	nop
 8015898:	371c      	adds	r7, #28
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr

080158a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80158a2:	b480      	push	{r7}
 80158a4:	b087      	sub	sp, #28
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	60f8      	str	r0, [r7, #12]
 80158aa:	60b9      	str	r1, [r7, #8]
 80158ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	1c5a      	adds	r2, r3, #1
 80158b6:	617a      	str	r2, [r7, #20]
 80158b8:	68ba      	ldr	r2, [r7, #8]
 80158ba:	b2d2      	uxtb	r2, r2
 80158bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	3b01      	subs	r3, #1
 80158c2:	607b      	str	r3, [r7, #4]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1f3      	bne.n	80158b2 <mem_set+0x10>
}
 80158ca:	bf00      	nop
 80158cc:	bf00      	nop
 80158ce:	371c      	adds	r7, #28
 80158d0:	46bd      	mov	sp, r7
 80158d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d6:	4770      	bx	lr

080158d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80158d8:	b480      	push	{r7}
 80158da:	b089      	sub	sp, #36	; 0x24
 80158dc:	af00      	add	r7, sp, #0
 80158de:	60f8      	str	r0, [r7, #12]
 80158e0:	60b9      	str	r1, [r7, #8]
 80158e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	61fb      	str	r3, [r7, #28]
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80158ec:	2300      	movs	r3, #0
 80158ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	1c5a      	adds	r2, r3, #1
 80158f4:	61fa      	str	r2, [r7, #28]
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	4619      	mov	r1, r3
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	1c5a      	adds	r2, r3, #1
 80158fe:	61ba      	str	r2, [r7, #24]
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	1acb      	subs	r3, r1, r3
 8015904:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	3b01      	subs	r3, #1
 801590a:	607b      	str	r3, [r7, #4]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d002      	beq.n	8015918 <mem_cmp+0x40>
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d0eb      	beq.n	80158f0 <mem_cmp+0x18>

	return r;
 8015918:	697b      	ldr	r3, [r7, #20]
}
 801591a:	4618      	mov	r0, r3
 801591c:	3724      	adds	r7, #36	; 0x24
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr

08015926 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015926:	b480      	push	{r7}
 8015928:	b083      	sub	sp, #12
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
 801592e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015930:	e002      	b.n	8015938 <chk_chr+0x12>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	3301      	adds	r3, #1
 8015936:	607b      	str	r3, [r7, #4]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d005      	beq.n	801594c <chk_chr+0x26>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	461a      	mov	r2, r3
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	4293      	cmp	r3, r2
 801594a:	d1f2      	bne.n	8015932 <chk_chr+0xc>
	return *str;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	781b      	ldrb	r3, [r3, #0]
}
 8015950:	4618      	mov	r0, r3
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr

0801595c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801595c:	b480      	push	{r7}
 801595e:	b085      	sub	sp, #20
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015966:	2300      	movs	r3, #0
 8015968:	60bb      	str	r3, [r7, #8]
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	60fb      	str	r3, [r7, #12]
 801596e:	e029      	b.n	80159c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015970:	4a27      	ldr	r2, [pc, #156]	; (8015a10 <chk_lock+0xb4>)
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	011b      	lsls	r3, r3, #4
 8015976:	4413      	add	r3, r2
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d01d      	beq.n	80159ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801597e:	4a24      	ldr	r2, [pc, #144]	; (8015a10 <chk_lock+0xb4>)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	011b      	lsls	r3, r3, #4
 8015984:	4413      	add	r3, r2
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	429a      	cmp	r2, r3
 801598e:	d116      	bne.n	80159be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015990:	4a1f      	ldr	r2, [pc, #124]	; (8015a10 <chk_lock+0xb4>)
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	011b      	lsls	r3, r3, #4
 8015996:	4413      	add	r3, r2
 8015998:	3304      	adds	r3, #4
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d10c      	bne.n	80159be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80159a4:	4a1a      	ldr	r2, [pc, #104]	; (8015a10 <chk_lock+0xb4>)
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	011b      	lsls	r3, r3, #4
 80159aa:	4413      	add	r3, r2
 80159ac:	3308      	adds	r3, #8
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d102      	bne.n	80159be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80159b8:	e007      	b.n	80159ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80159ba:	2301      	movs	r3, #1
 80159bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	3301      	adds	r3, #1
 80159c2:	60fb      	str	r3, [r7, #12]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	2b13      	cmp	r3, #19
 80159c8:	d9d2      	bls.n	8015970 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2b14      	cmp	r3, #20
 80159ce:	d109      	bne.n	80159e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d102      	bne.n	80159dc <chk_lock+0x80>
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d101      	bne.n	80159e0 <chk_lock+0x84>
 80159dc:	2300      	movs	r3, #0
 80159de:	e010      	b.n	8015a02 <chk_lock+0xa6>
 80159e0:	2312      	movs	r3, #18
 80159e2:	e00e      	b.n	8015a02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d108      	bne.n	80159fc <chk_lock+0xa0>
 80159ea:	4a09      	ldr	r2, [pc, #36]	; (8015a10 <chk_lock+0xb4>)
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	011b      	lsls	r3, r3, #4
 80159f0:	4413      	add	r3, r2
 80159f2:	330c      	adds	r3, #12
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159fa:	d101      	bne.n	8015a00 <chk_lock+0xa4>
 80159fc:	2310      	movs	r3, #16
 80159fe:	e000      	b.n	8015a02 <chk_lock+0xa6>
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3714      	adds	r7, #20
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop
 8015a10:	20000d84 	.word	0x20000d84

08015a14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	607b      	str	r3, [r7, #4]
 8015a1e:	e002      	b.n	8015a26 <enq_lock+0x12>
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	3301      	adds	r3, #1
 8015a24:	607b      	str	r3, [r7, #4]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2b13      	cmp	r3, #19
 8015a2a:	d806      	bhi.n	8015a3a <enq_lock+0x26>
 8015a2c:	4a09      	ldr	r2, [pc, #36]	; (8015a54 <enq_lock+0x40>)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	011b      	lsls	r3, r3, #4
 8015a32:	4413      	add	r3, r2
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d1f2      	bne.n	8015a20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2b14      	cmp	r3, #20
 8015a3e:	bf14      	ite	ne
 8015a40:	2301      	movne	r3, #1
 8015a42:	2300      	moveq	r3, #0
 8015a44:	b2db      	uxtb	r3, r3
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	370c      	adds	r7, #12
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
 8015a52:	bf00      	nop
 8015a54:	20000d84 	.word	0x20000d84

08015a58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015a62:	2300      	movs	r3, #0
 8015a64:	60fb      	str	r3, [r7, #12]
 8015a66:	e01f      	b.n	8015aa8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015a68:	4a41      	ldr	r2, [pc, #260]	; (8015b70 <inc_lock+0x118>)
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	011b      	lsls	r3, r3, #4
 8015a6e:	4413      	add	r3, r2
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d113      	bne.n	8015aa2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015a7a:	4a3d      	ldr	r2, [pc, #244]	; (8015b70 <inc_lock+0x118>)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	011b      	lsls	r3, r3, #4
 8015a80:	4413      	add	r3, r2
 8015a82:	3304      	adds	r3, #4
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d109      	bne.n	8015aa2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015a8e:	4a38      	ldr	r2, [pc, #224]	; (8015b70 <inc_lock+0x118>)
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	011b      	lsls	r3, r3, #4
 8015a94:	4413      	add	r3, r2
 8015a96:	3308      	adds	r3, #8
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d006      	beq.n	8015ab0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	60fb      	str	r3, [r7, #12]
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b13      	cmp	r3, #19
 8015aac:	d9dc      	bls.n	8015a68 <inc_lock+0x10>
 8015aae:	e000      	b.n	8015ab2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015ab0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	2b14      	cmp	r3, #20
 8015ab6:	d132      	bne.n	8015b1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	60fb      	str	r3, [r7, #12]
 8015abc:	e002      	b.n	8015ac4 <inc_lock+0x6c>
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	60fb      	str	r3, [r7, #12]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2b13      	cmp	r3, #19
 8015ac8:	d806      	bhi.n	8015ad8 <inc_lock+0x80>
 8015aca:	4a29      	ldr	r2, [pc, #164]	; (8015b70 <inc_lock+0x118>)
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	011b      	lsls	r3, r3, #4
 8015ad0:	4413      	add	r3, r2
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d1f2      	bne.n	8015abe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	2b14      	cmp	r3, #20
 8015adc:	d101      	bne.n	8015ae2 <inc_lock+0x8a>
 8015ade:	2300      	movs	r3, #0
 8015ae0:	e040      	b.n	8015b64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	4922      	ldr	r1, [pc, #136]	; (8015b70 <inc_lock+0x118>)
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	011b      	lsls	r3, r3, #4
 8015aec:	440b      	add	r3, r1
 8015aee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	689a      	ldr	r2, [r3, #8]
 8015af4:	491e      	ldr	r1, [pc, #120]	; (8015b70 <inc_lock+0x118>)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	011b      	lsls	r3, r3, #4
 8015afa:	440b      	add	r3, r1
 8015afc:	3304      	adds	r3, #4
 8015afe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	695a      	ldr	r2, [r3, #20]
 8015b04:	491a      	ldr	r1, [pc, #104]	; (8015b70 <inc_lock+0x118>)
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	011b      	lsls	r3, r3, #4
 8015b0a:	440b      	add	r3, r1
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015b10:	4a17      	ldr	r2, [pc, #92]	; (8015b70 <inc_lock+0x118>)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	011b      	lsls	r3, r3, #4
 8015b16:	4413      	add	r3, r2
 8015b18:	330c      	adds	r3, #12
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d009      	beq.n	8015b38 <inc_lock+0xe0>
 8015b24:	4a12      	ldr	r2, [pc, #72]	; (8015b70 <inc_lock+0x118>)
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	011b      	lsls	r3, r3, #4
 8015b2a:	4413      	add	r3, r2
 8015b2c:	330c      	adds	r3, #12
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d001      	beq.n	8015b38 <inc_lock+0xe0>
 8015b34:	2300      	movs	r3, #0
 8015b36:	e015      	b.n	8015b64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d108      	bne.n	8015b50 <inc_lock+0xf8>
 8015b3e:	4a0c      	ldr	r2, [pc, #48]	; (8015b70 <inc_lock+0x118>)
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	011b      	lsls	r3, r3, #4
 8015b44:	4413      	add	r3, r2
 8015b46:	330c      	adds	r3, #12
 8015b48:	881b      	ldrh	r3, [r3, #0]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	b29a      	uxth	r2, r3
 8015b4e:	e001      	b.n	8015b54 <inc_lock+0xfc>
 8015b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015b54:	4906      	ldr	r1, [pc, #24]	; (8015b70 <inc_lock+0x118>)
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	011b      	lsls	r3, r3, #4
 8015b5a:	440b      	add	r3, r1
 8015b5c:	330c      	adds	r3, #12
 8015b5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	3301      	adds	r3, #1
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3714      	adds	r7, #20
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr
 8015b70:	20000d84 	.word	0x20000d84

08015b74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015b74:	b480      	push	{r7}
 8015b76:	b085      	sub	sp, #20
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	3b01      	subs	r3, #1
 8015b80:	607b      	str	r3, [r7, #4]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2b13      	cmp	r3, #19
 8015b86:	d825      	bhi.n	8015bd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8015b88:	4a17      	ldr	r2, [pc, #92]	; (8015be8 <dec_lock+0x74>)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	011b      	lsls	r3, r3, #4
 8015b8e:	4413      	add	r3, r2
 8015b90:	330c      	adds	r3, #12
 8015b92:	881b      	ldrh	r3, [r3, #0]
 8015b94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015b96:	89fb      	ldrh	r3, [r7, #14]
 8015b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b9c:	d101      	bne.n	8015ba2 <dec_lock+0x2e>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015ba2:	89fb      	ldrh	r3, [r7, #14]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d002      	beq.n	8015bae <dec_lock+0x3a>
 8015ba8:	89fb      	ldrh	r3, [r7, #14]
 8015baa:	3b01      	subs	r3, #1
 8015bac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015bae:	4a0e      	ldr	r2, [pc, #56]	; (8015be8 <dec_lock+0x74>)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	011b      	lsls	r3, r3, #4
 8015bb4:	4413      	add	r3, r2
 8015bb6:	330c      	adds	r3, #12
 8015bb8:	89fa      	ldrh	r2, [r7, #14]
 8015bba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015bbc:	89fb      	ldrh	r3, [r7, #14]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d105      	bne.n	8015bce <dec_lock+0x5a>
 8015bc2:	4a09      	ldr	r2, [pc, #36]	; (8015be8 <dec_lock+0x74>)
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	011b      	lsls	r3, r3, #4
 8015bc8:	4413      	add	r3, r2
 8015bca:	2200      	movs	r2, #0
 8015bcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	737b      	strb	r3, [r7, #13]
 8015bd2:	e001      	b.n	8015bd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015bd4:	2302      	movs	r3, #2
 8015bd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015bd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3714      	adds	r7, #20
 8015bde:	46bd      	mov	sp, r7
 8015be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be4:	4770      	bx	lr
 8015be6:	bf00      	nop
 8015be8:	20000d84 	.word	0x20000d84

08015bec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b085      	sub	sp, #20
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	60fb      	str	r3, [r7, #12]
 8015bf8:	e010      	b.n	8015c1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015bfa:	4a0d      	ldr	r2, [pc, #52]	; (8015c30 <clear_lock+0x44>)
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	011b      	lsls	r3, r3, #4
 8015c00:	4413      	add	r3, r2
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d105      	bne.n	8015c16 <clear_lock+0x2a>
 8015c0a:	4a09      	ldr	r2, [pc, #36]	; (8015c30 <clear_lock+0x44>)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	011b      	lsls	r3, r3, #4
 8015c10:	4413      	add	r3, r2
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	3301      	adds	r3, #1
 8015c1a:	60fb      	str	r3, [r7, #12]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2b13      	cmp	r3, #19
 8015c20:	d9eb      	bls.n	8015bfa <clear_lock+0xe>
	}
}
 8015c22:	bf00      	nop
 8015c24:	bf00      	nop
 8015c26:	3714      	adds	r7, #20
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2e:	4770      	bx	lr
 8015c30:	20000d84 	.word	0x20000d84

08015c34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b086      	sub	sp, #24
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	78db      	ldrb	r3, [r3, #3]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d034      	beq.n	8015cb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	7858      	ldrb	r0, [r3, #1]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015c58:	2301      	movs	r3, #1
 8015c5a:	697a      	ldr	r2, [r7, #20]
 8015c5c:	f7ff fd38 	bl	80156d0 <disk_write>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d002      	beq.n	8015c6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015c66:	2301      	movs	r3, #1
 8015c68:	73fb      	strb	r3, [r7, #15]
 8015c6a:	e022      	b.n	8015cb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c76:	697a      	ldr	r2, [r7, #20]
 8015c78:	1ad2      	subs	r2, r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	69db      	ldr	r3, [r3, #28]
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d217      	bcs.n	8015cb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	789b      	ldrb	r3, [r3, #2]
 8015c86:	613b      	str	r3, [r7, #16]
 8015c88:	e010      	b.n	8015cac <sync_window+0x78>
					wsect += fs->fsize;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	69db      	ldr	r3, [r3, #28]
 8015c8e:	697a      	ldr	r2, [r7, #20]
 8015c90:	4413      	add	r3, r2
 8015c92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	7858      	ldrb	r0, [r3, #1]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	697a      	ldr	r2, [r7, #20]
 8015ca2:	f7ff fd15 	bl	80156d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	3b01      	subs	r3, #1
 8015caa:	613b      	str	r3, [r7, #16]
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	2b01      	cmp	r3, #1
 8015cb0:	d8eb      	bhi.n	8015c8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3718      	adds	r7, #24
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b084      	sub	sp, #16
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cce:	683a      	ldr	r2, [r7, #0]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d01b      	beq.n	8015d0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff ffad 	bl	8015c34 <sync_window>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d113      	bne.n	8015d0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	7858      	ldrb	r0, [r3, #1]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015cee:	2301      	movs	r3, #1
 8015cf0:	683a      	ldr	r2, [r7, #0]
 8015cf2:	f7ff fccd 	bl	8015690 <disk_read>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d004      	beq.n	8015d06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015d00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015d02:	2301      	movs	r3, #1
 8015d04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	683a      	ldr	r2, [r7, #0]
 8015d0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8015d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3710      	adds	r7, #16
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}
	...

08015d18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7ff ff87 	bl	8015c34 <sync_window>
 8015d26:	4603      	mov	r3, r0
 8015d28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015d2a:	7bfb      	ldrb	r3, [r7, #15]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d158      	bne.n	8015de2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	2b03      	cmp	r3, #3
 8015d36:	d148      	bne.n	8015dca <sync_fs+0xb2>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	791b      	ldrb	r3, [r3, #4]
 8015d3c:	2b01      	cmp	r3, #1
 8015d3e:	d144      	bne.n	8015dca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	3334      	adds	r3, #52	; 0x34
 8015d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d48:	2100      	movs	r1, #0
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f7ff fda9 	bl	80158a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	3334      	adds	r3, #52	; 0x34
 8015d54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015d58:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7ff fd38 	bl	80157d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	3334      	adds	r3, #52	; 0x34
 8015d66:	4921      	ldr	r1, [pc, #132]	; (8015dec <sync_fs+0xd4>)
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7ff fd4d 	bl	8015808 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	3334      	adds	r3, #52	; 0x34
 8015d72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015d76:	491e      	ldr	r1, [pc, #120]	; (8015df0 <sync_fs+0xd8>)
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ff fd45 	bl	8015808 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	3334      	adds	r3, #52	; 0x34
 8015d82:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	695b      	ldr	r3, [r3, #20]
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	4610      	mov	r0, r2
 8015d8e:	f7ff fd3b 	bl	8015808 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	3334      	adds	r3, #52	; 0x34
 8015d96:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	691b      	ldr	r3, [r3, #16]
 8015d9e:	4619      	mov	r1, r3
 8015da0:	4610      	mov	r0, r2
 8015da2:	f7ff fd31 	bl	8015808 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6a1b      	ldr	r3, [r3, #32]
 8015daa:	1c5a      	adds	r2, r3, #1
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	7858      	ldrb	r0, [r3, #1]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	f7ff fc86 	bl	80156d0 <disk_write>
			fs->fsi_flag = 0;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	785b      	ldrb	r3, [r3, #1]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7ff fc9c 	bl	8015710 <disk_ioctl>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d001      	beq.n	8015de2 <sync_fs+0xca>
 8015dde:	2301      	movs	r3, #1
 8015de0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3710      	adds	r7, #16
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	41615252 	.word	0x41615252
 8015df0:	61417272 	.word	0x61417272

08015df4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015df4:	b480      	push	{r7}
 8015df6:	b083      	sub	sp, #12
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	3b02      	subs	r3, #2
 8015e02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	699b      	ldr	r3, [r3, #24]
 8015e08:	3b02      	subs	r3, #2
 8015e0a:	683a      	ldr	r2, [r7, #0]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d301      	bcc.n	8015e14 <clust2sect+0x20>
 8015e10:	2300      	movs	r3, #0
 8015e12:	e008      	b.n	8015e26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	895b      	ldrh	r3, [r3, #10]
 8015e18:	461a      	mov	r2, r3
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	fb03 f202 	mul.w	r2, r3, r2
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e24:	4413      	add	r3, r2
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	370c      	adds	r7, #12
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr

08015e32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b086      	sub	sp, #24
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
 8015e3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d904      	bls.n	8015e52 <get_fat+0x20>
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	699b      	ldr	r3, [r3, #24]
 8015e4c:	683a      	ldr	r2, [r7, #0]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d302      	bcc.n	8015e58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015e52:	2301      	movs	r3, #1
 8015e54:	617b      	str	r3, [r7, #20]
 8015e56:	e08f      	b.n	8015f78 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015e58:	f04f 33ff 	mov.w	r3, #4294967295
 8015e5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	2b03      	cmp	r3, #3
 8015e64:	d062      	beq.n	8015f2c <get_fat+0xfa>
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	dc7c      	bgt.n	8015f64 <get_fat+0x132>
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	d002      	beq.n	8015e74 <get_fat+0x42>
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	d042      	beq.n	8015ef8 <get_fat+0xc6>
 8015e72:	e077      	b.n	8015f64 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	60fb      	str	r3, [r7, #12]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	085b      	lsrs	r3, r3, #1
 8015e7c:	68fa      	ldr	r2, [r7, #12]
 8015e7e:	4413      	add	r3, r2
 8015e80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	0a5b      	lsrs	r3, r3, #9
 8015e8a:	4413      	add	r3, r2
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	6938      	ldr	r0, [r7, #16]
 8015e90:	f7ff ff14 	bl	8015cbc <move_window>
 8015e94:	4603      	mov	r3, r0
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d167      	bne.n	8015f6a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	1c5a      	adds	r2, r3, #1
 8015e9e:	60fa      	str	r2, [r7, #12]
 8015ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ea4:	693a      	ldr	r2, [r7, #16]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015eac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	0a5b      	lsrs	r3, r3, #9
 8015eb6:	4413      	add	r3, r2
 8015eb8:	4619      	mov	r1, r3
 8015eba:	6938      	ldr	r0, [r7, #16]
 8015ebc:	f7ff fefe 	bl	8015cbc <move_window>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d153      	bne.n	8015f6e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ecc:	693a      	ldr	r2, [r7, #16]
 8015ece:	4413      	add	r3, r2
 8015ed0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015ed4:	021b      	lsls	r3, r3, #8
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	4313      	orrs	r3, r2
 8015edc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	f003 0301 	and.w	r3, r3, #1
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d002      	beq.n	8015eee <get_fat+0xbc>
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	091b      	lsrs	r3, r3, #4
 8015eec:	e002      	b.n	8015ef4 <get_fat+0xc2>
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015ef4:	617b      	str	r3, [r7, #20]
			break;
 8015ef6:	e03f      	b.n	8015f78 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	0a1b      	lsrs	r3, r3, #8
 8015f00:	4413      	add	r3, r2
 8015f02:	4619      	mov	r1, r3
 8015f04:	6938      	ldr	r0, [r7, #16]
 8015f06:	f7ff fed9 	bl	8015cbc <move_window>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d130      	bne.n	8015f72 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	005b      	lsls	r3, r3, #1
 8015f1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015f1e:	4413      	add	r3, r2
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7ff fc1b 	bl	801575c <ld_word>
 8015f26:	4603      	mov	r3, r0
 8015f28:	617b      	str	r3, [r7, #20]
			break;
 8015f2a:	e025      	b.n	8015f78 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	09db      	lsrs	r3, r3, #7
 8015f34:	4413      	add	r3, r2
 8015f36:	4619      	mov	r1, r3
 8015f38:	6938      	ldr	r0, [r7, #16]
 8015f3a:	f7ff febf 	bl	8015cbc <move_window>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d118      	bne.n	8015f76 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015f52:	4413      	add	r3, r2
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7ff fc19 	bl	801578c <ld_dword>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015f60:	617b      	str	r3, [r7, #20]
			break;
 8015f62:	e009      	b.n	8015f78 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015f64:	2301      	movs	r3, #1
 8015f66:	617b      	str	r3, [r7, #20]
 8015f68:	e006      	b.n	8015f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015f6a:	bf00      	nop
 8015f6c:	e004      	b.n	8015f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015f6e:	bf00      	nop
 8015f70:	e002      	b.n	8015f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015f72:	bf00      	nop
 8015f74:	e000      	b.n	8015f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015f76:	bf00      	nop
		}
	}

	return val;
 8015f78:	697b      	ldr	r3, [r7, #20]
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3718      	adds	r7, #24
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}

08015f82 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015f82:	b590      	push	{r4, r7, lr}
 8015f84:	b089      	sub	sp, #36	; 0x24
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	60f8      	str	r0, [r7, #12]
 8015f8a:	60b9      	str	r1, [r7, #8]
 8015f8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015f8e:	2302      	movs	r3, #2
 8015f90:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	2b01      	cmp	r3, #1
 8015f96:	f240 80d2 	bls.w	801613e <put_fat+0x1bc>
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	699b      	ldr	r3, [r3, #24]
 8015f9e:	68ba      	ldr	r2, [r7, #8]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	f080 80cc 	bcs.w	801613e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	2b03      	cmp	r3, #3
 8015fac:	f000 8096 	beq.w	80160dc <put_fat+0x15a>
 8015fb0:	2b03      	cmp	r3, #3
 8015fb2:	f300 80cd 	bgt.w	8016150 <put_fat+0x1ce>
 8015fb6:	2b01      	cmp	r3, #1
 8015fb8:	d002      	beq.n	8015fc0 <put_fat+0x3e>
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	d06e      	beq.n	801609c <put_fat+0x11a>
 8015fbe:	e0c7      	b.n	8016150 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	61bb      	str	r3, [r7, #24]
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	085b      	lsrs	r3, r3, #1
 8015fc8:	69ba      	ldr	r2, [r7, #24]
 8015fca:	4413      	add	r3, r2
 8015fcc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	0a5b      	lsrs	r3, r3, #9
 8015fd6:	4413      	add	r3, r2
 8015fd8:	4619      	mov	r1, r3
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f7ff fe6e 	bl	8015cbc <move_window>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fe4:	7ffb      	ldrb	r3, [r7, #31]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f040 80ab 	bne.w	8016142 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015ff2:	69bb      	ldr	r3, [r7, #24]
 8015ff4:	1c59      	adds	r1, r3, #1
 8015ff6:	61b9      	str	r1, [r7, #24]
 8015ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ffc:	4413      	add	r3, r2
 8015ffe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	f003 0301 	and.w	r3, r3, #1
 8016006:	2b00      	cmp	r3, #0
 8016008:	d00d      	beq.n	8016026 <put_fat+0xa4>
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	781b      	ldrb	r3, [r3, #0]
 801600e:	b25b      	sxtb	r3, r3
 8016010:	f003 030f 	and.w	r3, r3, #15
 8016014:	b25a      	sxtb	r2, r3
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	b2db      	uxtb	r3, r3
 801601a:	011b      	lsls	r3, r3, #4
 801601c:	b25b      	sxtb	r3, r3
 801601e:	4313      	orrs	r3, r2
 8016020:	b25b      	sxtb	r3, r3
 8016022:	b2db      	uxtb	r3, r3
 8016024:	e001      	b.n	801602a <put_fat+0xa8>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	b2db      	uxtb	r3, r3
 801602a:	697a      	ldr	r2, [r7, #20]
 801602c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2201      	movs	r2, #1
 8016032:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	0a5b      	lsrs	r3, r3, #9
 801603c:	4413      	add	r3, r2
 801603e:	4619      	mov	r1, r3
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f7ff fe3b 	bl	8015cbc <move_window>
 8016046:	4603      	mov	r3, r0
 8016048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801604a:	7ffb      	ldrb	r3, [r7, #31]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d17a      	bne.n	8016146 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801605c:	4413      	add	r3, r2
 801605e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	f003 0301 	and.w	r3, r3, #1
 8016066:	2b00      	cmp	r3, #0
 8016068:	d003      	beq.n	8016072 <put_fat+0xf0>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	091b      	lsrs	r3, r3, #4
 801606e:	b2db      	uxtb	r3, r3
 8016070:	e00e      	b.n	8016090 <put_fat+0x10e>
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	b25b      	sxtb	r3, r3
 8016078:	f023 030f 	bic.w	r3, r3, #15
 801607c:	b25a      	sxtb	r2, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	0a1b      	lsrs	r3, r3, #8
 8016082:	b25b      	sxtb	r3, r3
 8016084:	f003 030f 	and.w	r3, r3, #15
 8016088:	b25b      	sxtb	r3, r3
 801608a:	4313      	orrs	r3, r2
 801608c:	b25b      	sxtb	r3, r3
 801608e:	b2db      	uxtb	r3, r3
 8016090:	697a      	ldr	r2, [r7, #20]
 8016092:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	2201      	movs	r2, #1
 8016098:	70da      	strb	r2, [r3, #3]
			break;
 801609a:	e059      	b.n	8016150 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	0a1b      	lsrs	r3, r3, #8
 80160a4:	4413      	add	r3, r2
 80160a6:	4619      	mov	r1, r3
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f7ff fe07 	bl	8015cbc <move_window>
 80160ae:	4603      	mov	r3, r0
 80160b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160b2:	7ffb      	ldrb	r3, [r7, #31]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d148      	bne.n	801614a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	005b      	lsls	r3, r3, #1
 80160c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80160c6:	4413      	add	r3, r2
 80160c8:	687a      	ldr	r2, [r7, #4]
 80160ca:	b292      	uxth	r2, r2
 80160cc:	4611      	mov	r1, r2
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ff fb7f 	bl	80157d2 <st_word>
			fs->wflag = 1;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	2201      	movs	r2, #1
 80160d8:	70da      	strb	r2, [r3, #3]
			break;
 80160da:	e039      	b.n	8016150 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	09db      	lsrs	r3, r3, #7
 80160e4:	4413      	add	r3, r2
 80160e6:	4619      	mov	r1, r3
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f7ff fde7 	bl	8015cbc <move_window>
 80160ee:	4603      	mov	r3, r0
 80160f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160f2:	7ffb      	ldrb	r3, [r7, #31]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d12a      	bne.n	801614e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801610c:	4413      	add	r3, r2
 801610e:	4618      	mov	r0, r3
 8016110:	f7ff fb3c 	bl	801578c <ld_dword>
 8016114:	4603      	mov	r3, r0
 8016116:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801611a:	4323      	orrs	r3, r4
 801611c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801612c:	4413      	add	r3, r2
 801612e:	6879      	ldr	r1, [r7, #4]
 8016130:	4618      	mov	r0, r3
 8016132:	f7ff fb69 	bl	8015808 <st_dword>
			fs->wflag = 1;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2201      	movs	r2, #1
 801613a:	70da      	strb	r2, [r3, #3]
			break;
 801613c:	e008      	b.n	8016150 <put_fat+0x1ce>
		}
	}
 801613e:	bf00      	nop
 8016140:	e006      	b.n	8016150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016142:	bf00      	nop
 8016144:	e004      	b.n	8016150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016146:	bf00      	nop
 8016148:	e002      	b.n	8016150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801614a:	bf00      	nop
 801614c:	e000      	b.n	8016150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801614e:	bf00      	nop
	return res;
 8016150:	7ffb      	ldrb	r3, [r7, #31]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3724      	adds	r7, #36	; 0x24
 8016156:	46bd      	mov	sp, r7
 8016158:	bd90      	pop	{r4, r7, pc}

0801615a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b088      	sub	sp, #32
 801615e:	af00      	add	r7, sp, #0
 8016160:	60f8      	str	r0, [r7, #12]
 8016162:	60b9      	str	r1, [r7, #8]
 8016164:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016166:	2300      	movs	r3, #0
 8016168:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	2b01      	cmp	r3, #1
 8016174:	d904      	bls.n	8016180 <remove_chain+0x26>
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	699b      	ldr	r3, [r3, #24]
 801617a:	68ba      	ldr	r2, [r7, #8]
 801617c:	429a      	cmp	r2, r3
 801617e:	d301      	bcc.n	8016184 <remove_chain+0x2a>
 8016180:	2302      	movs	r3, #2
 8016182:	e04b      	b.n	801621c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00c      	beq.n	80161a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801618a:	f04f 32ff 	mov.w	r2, #4294967295
 801618e:	6879      	ldr	r1, [r7, #4]
 8016190:	69b8      	ldr	r0, [r7, #24]
 8016192:	f7ff fef6 	bl	8015f82 <put_fat>
 8016196:	4603      	mov	r3, r0
 8016198:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801619a:	7ffb      	ldrb	r3, [r7, #31]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d001      	beq.n	80161a4 <remove_chain+0x4a>
 80161a0:	7ffb      	ldrb	r3, [r7, #31]
 80161a2:	e03b      	b.n	801621c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80161a4:	68b9      	ldr	r1, [r7, #8]
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f7ff fe43 	bl	8015e32 <get_fat>
 80161ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d031      	beq.n	8016218 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d101      	bne.n	80161be <remove_chain+0x64>
 80161ba:	2302      	movs	r3, #2
 80161bc:	e02e      	b.n	801621c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c4:	d101      	bne.n	80161ca <remove_chain+0x70>
 80161c6:	2301      	movs	r3, #1
 80161c8:	e028      	b.n	801621c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80161ca:	2200      	movs	r2, #0
 80161cc:	68b9      	ldr	r1, [r7, #8]
 80161ce:	69b8      	ldr	r0, [r7, #24]
 80161d0:	f7ff fed7 	bl	8015f82 <put_fat>
 80161d4:	4603      	mov	r3, r0
 80161d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80161d8:	7ffb      	ldrb	r3, [r7, #31]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <remove_chain+0x88>
 80161de:	7ffb      	ldrb	r3, [r7, #31]
 80161e0:	e01c      	b.n	801621c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80161e2:	69bb      	ldr	r3, [r7, #24]
 80161e4:	695a      	ldr	r2, [r3, #20]
 80161e6:	69bb      	ldr	r3, [r7, #24]
 80161e8:	699b      	ldr	r3, [r3, #24]
 80161ea:	3b02      	subs	r3, #2
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d20b      	bcs.n	8016208 <remove_chain+0xae>
			fs->free_clst++;
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	695b      	ldr	r3, [r3, #20]
 80161f4:	1c5a      	adds	r2, r3, #1
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80161fa:	69bb      	ldr	r3, [r7, #24]
 80161fc:	791b      	ldrb	r3, [r3, #4]
 80161fe:	f043 0301 	orr.w	r3, r3, #1
 8016202:	b2da      	uxtb	r2, r3
 8016204:	69bb      	ldr	r3, [r7, #24]
 8016206:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801620c:	69bb      	ldr	r3, [r7, #24]
 801620e:	699b      	ldr	r3, [r3, #24]
 8016210:	68ba      	ldr	r2, [r7, #8]
 8016212:	429a      	cmp	r2, r3
 8016214:	d3c6      	bcc.n	80161a4 <remove_chain+0x4a>
 8016216:	e000      	b.n	801621a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016218:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801621a:	2300      	movs	r3, #0
}
 801621c:	4618      	mov	r0, r3
 801621e:	3720      	adds	r7, #32
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b088      	sub	sp, #32
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d10d      	bne.n	8016256 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	691b      	ldr	r3, [r3, #16]
 801623e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016240:	69bb      	ldr	r3, [r7, #24]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d004      	beq.n	8016250 <create_chain+0x2c>
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	699b      	ldr	r3, [r3, #24]
 801624a:	69ba      	ldr	r2, [r7, #24]
 801624c:	429a      	cmp	r2, r3
 801624e:	d31b      	bcc.n	8016288 <create_chain+0x64>
 8016250:	2301      	movs	r3, #1
 8016252:	61bb      	str	r3, [r7, #24]
 8016254:	e018      	b.n	8016288 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016256:	6839      	ldr	r1, [r7, #0]
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7ff fdea 	bl	8015e32 <get_fat>
 801625e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2b01      	cmp	r3, #1
 8016264:	d801      	bhi.n	801626a <create_chain+0x46>
 8016266:	2301      	movs	r3, #1
 8016268:	e070      	b.n	801634c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016270:	d101      	bne.n	8016276 <create_chain+0x52>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	e06a      	b.n	801634c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	699b      	ldr	r3, [r3, #24]
 801627a:	68fa      	ldr	r2, [r7, #12]
 801627c:	429a      	cmp	r2, r3
 801627e:	d201      	bcs.n	8016284 <create_chain+0x60>
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	e063      	b.n	801634c <create_chain+0x128>
		scl = clst;
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	3301      	adds	r3, #1
 8016290:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	699b      	ldr	r3, [r3, #24]
 8016296:	69fa      	ldr	r2, [r7, #28]
 8016298:	429a      	cmp	r2, r3
 801629a:	d307      	bcc.n	80162ac <create_chain+0x88>
				ncl = 2;
 801629c:	2302      	movs	r3, #2
 801629e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80162a0:	69fa      	ldr	r2, [r7, #28]
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d901      	bls.n	80162ac <create_chain+0x88>
 80162a8:	2300      	movs	r3, #0
 80162aa:	e04f      	b.n	801634c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80162ac:	69f9      	ldr	r1, [r7, #28]
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f7ff fdbf 	bl	8015e32 <get_fat>
 80162b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00e      	beq.n	80162da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d003      	beq.n	80162ca <create_chain+0xa6>
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162c8:	d101      	bne.n	80162ce <create_chain+0xaa>
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	e03e      	b.n	801634c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80162ce:	69fa      	ldr	r2, [r7, #28]
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d1da      	bne.n	801628c <create_chain+0x68>
 80162d6:	2300      	movs	r3, #0
 80162d8:	e038      	b.n	801634c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80162da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80162dc:	f04f 32ff 	mov.w	r2, #4294967295
 80162e0:	69f9      	ldr	r1, [r7, #28]
 80162e2:	6938      	ldr	r0, [r7, #16]
 80162e4:	f7ff fe4d 	bl	8015f82 <put_fat>
 80162e8:	4603      	mov	r3, r0
 80162ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80162ec:	7dfb      	ldrb	r3, [r7, #23]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d109      	bne.n	8016306 <create_chain+0xe2>
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d006      	beq.n	8016306 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80162f8:	69fa      	ldr	r2, [r7, #28]
 80162fa:	6839      	ldr	r1, [r7, #0]
 80162fc:	6938      	ldr	r0, [r7, #16]
 80162fe:	f7ff fe40 	bl	8015f82 <put_fat>
 8016302:	4603      	mov	r3, r0
 8016304:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016306:	7dfb      	ldrb	r3, [r7, #23]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d116      	bne.n	801633a <create_chain+0x116>
		fs->last_clst = ncl;
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	69fa      	ldr	r2, [r7, #28]
 8016310:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	695a      	ldr	r2, [r3, #20]
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	699b      	ldr	r3, [r3, #24]
 801631a:	3b02      	subs	r3, #2
 801631c:	429a      	cmp	r2, r3
 801631e:	d804      	bhi.n	801632a <create_chain+0x106>
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	695b      	ldr	r3, [r3, #20]
 8016324:	1e5a      	subs	r2, r3, #1
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	791b      	ldrb	r3, [r3, #4]
 801632e:	f043 0301 	orr.w	r3, r3, #1
 8016332:	b2da      	uxtb	r2, r3
 8016334:	693b      	ldr	r3, [r7, #16]
 8016336:	711a      	strb	r2, [r3, #4]
 8016338:	e007      	b.n	801634a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801633a:	7dfb      	ldrb	r3, [r7, #23]
 801633c:	2b01      	cmp	r3, #1
 801633e:	d102      	bne.n	8016346 <create_chain+0x122>
 8016340:	f04f 33ff 	mov.w	r3, #4294967295
 8016344:	e000      	b.n	8016348 <create_chain+0x124>
 8016346:	2301      	movs	r3, #1
 8016348:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801634a:	69fb      	ldr	r3, [r7, #28]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3720      	adds	r7, #32
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016354:	b480      	push	{r7}
 8016356:	b087      	sub	sp, #28
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016368:	3304      	adds	r3, #4
 801636a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	0a5b      	lsrs	r3, r3, #9
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	8952      	ldrh	r2, [r2, #10]
 8016374:	fbb3 f3f2 	udiv	r3, r3, r2
 8016378:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	1d1a      	adds	r2, r3, #4
 801637e:	613a      	str	r2, [r7, #16]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <clmt_clust+0x3a>
 801638a:	2300      	movs	r3, #0
 801638c:	e010      	b.n	80163b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801638e:	697a      	ldr	r2, [r7, #20]
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	429a      	cmp	r2, r3
 8016394:	d307      	bcc.n	80163a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016396:	697a      	ldr	r2, [r7, #20]
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	617b      	str	r3, [r7, #20]
 801639e:	693b      	ldr	r3, [r7, #16]
 80163a0:	3304      	adds	r3, #4
 80163a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80163a4:	e7e9      	b.n	801637a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80163a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	4413      	add	r3, r2
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	371c      	adds	r7, #28
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr

080163bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b086      	sub	sp, #24
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
 80163c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80163d2:	d204      	bcs.n	80163de <dir_sdi+0x22>
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	f003 031f 	and.w	r3, r3, #31
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d001      	beq.n	80163e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80163de:	2302      	movs	r3, #2
 80163e0:	e063      	b.n	80164aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	683a      	ldr	r2, [r7, #0]
 80163e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d106      	bne.n	8016402 <dir_sdi+0x46>
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	2b02      	cmp	r3, #2
 80163fa:	d902      	bls.n	8016402 <dir_sdi+0x46>
		clst = fs->dirbase;
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016400:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016402:	697b      	ldr	r3, [r7, #20]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d10c      	bne.n	8016422 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016408:	683b      	ldr	r3, [r7, #0]
 801640a:	095b      	lsrs	r3, r3, #5
 801640c:	693a      	ldr	r2, [r7, #16]
 801640e:	8912      	ldrh	r2, [r2, #8]
 8016410:	4293      	cmp	r3, r2
 8016412:	d301      	bcc.n	8016418 <dir_sdi+0x5c>
 8016414:	2302      	movs	r3, #2
 8016416:	e048      	b.n	80164aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	61da      	str	r2, [r3, #28]
 8016420:	e029      	b.n	8016476 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	895b      	ldrh	r3, [r3, #10]
 8016426:	025b      	lsls	r3, r3, #9
 8016428:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801642a:	e019      	b.n	8016460 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	6979      	ldr	r1, [r7, #20]
 8016430:	4618      	mov	r0, r3
 8016432:	f7ff fcfe 	bl	8015e32 <get_fat>
 8016436:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016438:	697b      	ldr	r3, [r7, #20]
 801643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801643e:	d101      	bne.n	8016444 <dir_sdi+0x88>
 8016440:	2301      	movs	r3, #1
 8016442:	e032      	b.n	80164aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016444:	697b      	ldr	r3, [r7, #20]
 8016446:	2b01      	cmp	r3, #1
 8016448:	d904      	bls.n	8016454 <dir_sdi+0x98>
 801644a:	693b      	ldr	r3, [r7, #16]
 801644c:	699b      	ldr	r3, [r3, #24]
 801644e:	697a      	ldr	r2, [r7, #20]
 8016450:	429a      	cmp	r2, r3
 8016452:	d301      	bcc.n	8016458 <dir_sdi+0x9c>
 8016454:	2302      	movs	r3, #2
 8016456:	e028      	b.n	80164aa <dir_sdi+0xee>
			ofs -= csz;
 8016458:	683a      	ldr	r2, [r7, #0]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	1ad3      	subs	r3, r2, r3
 801645e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016460:	683a      	ldr	r2, [r7, #0]
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	429a      	cmp	r2, r3
 8016466:	d2e1      	bcs.n	801642c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016468:	6979      	ldr	r1, [r7, #20]
 801646a:	6938      	ldr	r0, [r7, #16]
 801646c:	f7ff fcc2 	bl	8015df4 <clust2sect>
 8016470:	4602      	mov	r2, r0
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	697a      	ldr	r2, [r7, #20]
 801647a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	69db      	ldr	r3, [r3, #28]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d101      	bne.n	8016488 <dir_sdi+0xcc>
 8016484:	2302      	movs	r3, #2
 8016486:	e010      	b.n	80164aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	69da      	ldr	r2, [r3, #28]
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	0a5b      	lsrs	r3, r3, #9
 8016490:	441a      	add	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164a2:	441a      	add	r2, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}

080164b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	b086      	sub	sp, #24
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	6078      	str	r0, [r7, #4]
 80164ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	695b      	ldr	r3, [r3, #20]
 80164c6:	3320      	adds	r3, #32
 80164c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	69db      	ldr	r3, [r3, #28]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d003      	beq.n	80164da <dir_next+0x28>
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80164d8:	d301      	bcc.n	80164de <dir_next+0x2c>
 80164da:	2304      	movs	r3, #4
 80164dc:	e0aa      	b.n	8016634 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	f040 8098 	bne.w	801661a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	69db      	ldr	r3, [r3, #28]
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	699b      	ldr	r3, [r3, #24]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d10b      	bne.n	8016514 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	095b      	lsrs	r3, r3, #5
 8016500:	68fa      	ldr	r2, [r7, #12]
 8016502:	8912      	ldrh	r2, [r2, #8]
 8016504:	4293      	cmp	r3, r2
 8016506:	f0c0 8088 	bcc.w	801661a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2200      	movs	r2, #0
 801650e:	61da      	str	r2, [r3, #28]
 8016510:	2304      	movs	r3, #4
 8016512:	e08f      	b.n	8016634 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	0a5b      	lsrs	r3, r3, #9
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	8952      	ldrh	r2, [r2, #10]
 801651c:	3a01      	subs	r2, #1
 801651e:	4013      	ands	r3, r2
 8016520:	2b00      	cmp	r3, #0
 8016522:	d17a      	bne.n	801661a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	699b      	ldr	r3, [r3, #24]
 801652a:	4619      	mov	r1, r3
 801652c:	4610      	mov	r0, r2
 801652e:	f7ff fc80 	bl	8015e32 <get_fat>
 8016532:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016534:	697b      	ldr	r3, [r7, #20]
 8016536:	2b01      	cmp	r3, #1
 8016538:	d801      	bhi.n	801653e <dir_next+0x8c>
 801653a:	2302      	movs	r3, #2
 801653c:	e07a      	b.n	8016634 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016544:	d101      	bne.n	801654a <dir_next+0x98>
 8016546:	2301      	movs	r3, #1
 8016548:	e074      	b.n	8016634 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	699b      	ldr	r3, [r3, #24]
 801654e:	697a      	ldr	r2, [r7, #20]
 8016550:	429a      	cmp	r2, r3
 8016552:	d358      	bcc.n	8016606 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d104      	bne.n	8016564 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2200      	movs	r2, #0
 801655e:	61da      	str	r2, [r3, #28]
 8016560:	2304      	movs	r3, #4
 8016562:	e067      	b.n	8016634 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	699b      	ldr	r3, [r3, #24]
 801656a:	4619      	mov	r1, r3
 801656c:	4610      	mov	r0, r2
 801656e:	f7ff fe59 	bl	8016224 <create_chain>
 8016572:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d101      	bne.n	801657e <dir_next+0xcc>
 801657a:	2307      	movs	r3, #7
 801657c:	e05a      	b.n	8016634 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	2b01      	cmp	r3, #1
 8016582:	d101      	bne.n	8016588 <dir_next+0xd6>
 8016584:	2302      	movs	r3, #2
 8016586:	e055      	b.n	8016634 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801658e:	d101      	bne.n	8016594 <dir_next+0xe2>
 8016590:	2301      	movs	r3, #1
 8016592:	e04f      	b.n	8016634 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016594:	68f8      	ldr	r0, [r7, #12]
 8016596:	f7ff fb4d 	bl	8015c34 <sync_window>
 801659a:	4603      	mov	r3, r0
 801659c:	2b00      	cmp	r3, #0
 801659e:	d001      	beq.n	80165a4 <dir_next+0xf2>
 80165a0:	2301      	movs	r3, #1
 80165a2:	e047      	b.n	8016634 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	3334      	adds	r3, #52	; 0x34
 80165a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80165ac:	2100      	movs	r1, #0
 80165ae:	4618      	mov	r0, r3
 80165b0:	f7ff f977 	bl	80158a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80165b4:	2300      	movs	r3, #0
 80165b6:	613b      	str	r3, [r7, #16]
 80165b8:	6979      	ldr	r1, [r7, #20]
 80165ba:	68f8      	ldr	r0, [r7, #12]
 80165bc:	f7ff fc1a 	bl	8015df4 <clust2sect>
 80165c0:	4602      	mov	r2, r0
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	631a      	str	r2, [r3, #48]	; 0x30
 80165c6:	e012      	b.n	80165ee <dir_next+0x13c>
						fs->wflag = 1;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2201      	movs	r2, #1
 80165cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80165ce:	68f8      	ldr	r0, [r7, #12]
 80165d0:	f7ff fb30 	bl	8015c34 <sync_window>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d001      	beq.n	80165de <dir_next+0x12c>
 80165da:	2301      	movs	r3, #1
 80165dc:	e02a      	b.n	8016634 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	3301      	adds	r3, #1
 80165e2:	613b      	str	r3, [r7, #16]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165e8:	1c5a      	adds	r2, r3, #1
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	631a      	str	r2, [r3, #48]	; 0x30
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	895b      	ldrh	r3, [r3, #10]
 80165f2:	461a      	mov	r2, r3
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	4293      	cmp	r3, r2
 80165f8:	d3e6      	bcc.n	80165c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	1ad2      	subs	r2, r2, r3
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	697a      	ldr	r2, [r7, #20]
 801660a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801660c:	6979      	ldr	r1, [r7, #20]
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7ff fbf0 	bl	8015df4 <clust2sect>
 8016614:	4602      	mov	r2, r0
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	68ba      	ldr	r2, [r7, #8]
 801661e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801662c:	441a      	add	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016632:	2300      	movs	r3, #0
}
 8016634:	4618      	mov	r0, r3
 8016636:	3718      	adds	r7, #24
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}

0801663c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b086      	sub	sp, #24
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801664c:	2100      	movs	r1, #0
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7ff feb4 	bl	80163bc <dir_sdi>
 8016654:	4603      	mov	r3, r0
 8016656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016658:	7dfb      	ldrb	r3, [r7, #23]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d12b      	bne.n	80166b6 <dir_alloc+0x7a>
		n = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	69db      	ldr	r3, [r3, #28]
 8016666:	4619      	mov	r1, r3
 8016668:	68f8      	ldr	r0, [r7, #12]
 801666a:	f7ff fb27 	bl	8015cbc <move_window>
 801666e:	4603      	mov	r3, r0
 8016670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016672:	7dfb      	ldrb	r3, [r7, #23]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d11d      	bne.n	80166b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6a1b      	ldr	r3, [r3, #32]
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	2be5      	cmp	r3, #229	; 0xe5
 8016680:	d004      	beq.n	801668c <dir_alloc+0x50>
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6a1b      	ldr	r3, [r3, #32]
 8016686:	781b      	ldrb	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d107      	bne.n	801669c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	3301      	adds	r3, #1
 8016690:	613b      	str	r3, [r7, #16]
 8016692:	693a      	ldr	r2, [r7, #16]
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	429a      	cmp	r2, r3
 8016698:	d102      	bne.n	80166a0 <dir_alloc+0x64>
 801669a:	e00c      	b.n	80166b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801669c:	2300      	movs	r3, #0
 801669e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80166a0:	2101      	movs	r1, #1
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f7ff ff05 	bl	80164b2 <dir_next>
 80166a8:	4603      	mov	r3, r0
 80166aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80166ac:	7dfb      	ldrb	r3, [r7, #23]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d0d7      	beq.n	8016662 <dir_alloc+0x26>
 80166b2:	e000      	b.n	80166b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80166b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80166b6:	7dfb      	ldrb	r3, [r7, #23]
 80166b8:	2b04      	cmp	r3, #4
 80166ba:	d101      	bne.n	80166c0 <dir_alloc+0x84>
 80166bc:	2307      	movs	r3, #7
 80166be:	75fb      	strb	r3, [r7, #23]
	return res;
 80166c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}

080166ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b084      	sub	sp, #16
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	6078      	str	r0, [r7, #4]
 80166d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	331a      	adds	r3, #26
 80166d8:	4618      	mov	r0, r3
 80166da:	f7ff f83f 	bl	801575c <ld_word>
 80166de:	4603      	mov	r3, r0
 80166e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	2b03      	cmp	r3, #3
 80166e8:	d109      	bne.n	80166fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	3314      	adds	r3, #20
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7ff f834 	bl	801575c <ld_word>
 80166f4:	4603      	mov	r3, r0
 80166f6:	041b      	lsls	r3, r3, #16
 80166f8:	68fa      	ldr	r2, [r7, #12]
 80166fa:	4313      	orrs	r3, r2
 80166fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80166fe:	68fb      	ldr	r3, [r7, #12]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3710      	adds	r7, #16
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	331a      	adds	r3, #26
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	b292      	uxth	r2, r2
 801671c:	4611      	mov	r1, r2
 801671e:	4618      	mov	r0, r3
 8016720:	f7ff f857 	bl	80157d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	2b03      	cmp	r3, #3
 801672a:	d109      	bne.n	8016740 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	f103 0214 	add.w	r2, r3, #20
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	0c1b      	lsrs	r3, r3, #16
 8016736:	b29b      	uxth	r3, r3
 8016738:	4619      	mov	r1, r3
 801673a:	4610      	mov	r0, r2
 801673c:	f7ff f849 	bl	80157d2 <st_word>
	}
}
 8016740:	bf00      	nop
 8016742:	3710      	adds	r7, #16
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016748:	b590      	push	{r4, r7, lr}
 801674a:	b087      	sub	sp, #28
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	331a      	adds	r3, #26
 8016756:	4618      	mov	r0, r3
 8016758:	f7ff f800 	bl	801575c <ld_word>
 801675c:	4603      	mov	r3, r0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d001      	beq.n	8016766 <cmp_lfn+0x1e>
 8016762:	2300      	movs	r3, #0
 8016764:	e059      	b.n	801681a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801676e:	1e5a      	subs	r2, r3, #1
 8016770:	4613      	mov	r3, r2
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	4413      	add	r3, r2
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	4413      	add	r3, r2
 801677a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801677c:	2301      	movs	r3, #1
 801677e:	81fb      	strh	r3, [r7, #14]
 8016780:	2300      	movs	r3, #0
 8016782:	613b      	str	r3, [r7, #16]
 8016784:	e033      	b.n	80167ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016786:	4a27      	ldr	r2, [pc, #156]	; (8016824 <cmp_lfn+0xdc>)
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	4413      	add	r3, r2
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	461a      	mov	r2, r3
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	4413      	add	r3, r2
 8016794:	4618      	mov	r0, r3
 8016796:	f7fe ffe1 	bl	801575c <ld_word>
 801679a:	4603      	mov	r3, r0
 801679c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801679e:	89fb      	ldrh	r3, [r7, #14]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d01a      	beq.n	80167da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	2bfe      	cmp	r3, #254	; 0xfe
 80167a8:	d812      	bhi.n	80167d0 <cmp_lfn+0x88>
 80167aa:	89bb      	ldrh	r3, [r7, #12]
 80167ac:	4618      	mov	r0, r3
 80167ae:	f002 fb45 	bl	8018e3c <ff_wtoupper>
 80167b2:	4603      	mov	r3, r0
 80167b4:	461c      	mov	r4, r3
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	1c5a      	adds	r2, r3, #1
 80167ba:	617a      	str	r2, [r7, #20]
 80167bc:	005b      	lsls	r3, r3, #1
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	4413      	add	r3, r2
 80167c2:	881b      	ldrh	r3, [r3, #0]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f002 fb39 	bl	8018e3c <ff_wtoupper>
 80167ca:	4603      	mov	r3, r0
 80167cc:	429c      	cmp	r4, r3
 80167ce:	d001      	beq.n	80167d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80167d0:	2300      	movs	r3, #0
 80167d2:	e022      	b.n	801681a <cmp_lfn+0xd2>
			}
			wc = uc;
 80167d4:	89bb      	ldrh	r3, [r7, #12]
 80167d6:	81fb      	strh	r3, [r7, #14]
 80167d8:	e006      	b.n	80167e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80167da:	89bb      	ldrh	r3, [r7, #12]
 80167dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d001      	beq.n	80167e8 <cmp_lfn+0xa0>
 80167e4:	2300      	movs	r3, #0
 80167e6:	e018      	b.n	801681a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	3301      	adds	r3, #1
 80167ec:	613b      	str	r3, [r7, #16]
 80167ee:	693b      	ldr	r3, [r7, #16]
 80167f0:	2b0c      	cmp	r3, #12
 80167f2:	d9c8      	bls.n	8016786 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00b      	beq.n	8016818 <cmp_lfn+0xd0>
 8016800:	89fb      	ldrh	r3, [r7, #14]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d008      	beq.n	8016818 <cmp_lfn+0xd0>
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	687a      	ldr	r2, [r7, #4]
 801680c:	4413      	add	r3, r2
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <cmp_lfn+0xd0>
 8016814:	2300      	movs	r3, #0
 8016816:	e000      	b.n	801681a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016818:	2301      	movs	r3, #1
}
 801681a:	4618      	mov	r0, r3
 801681c:	371c      	adds	r7, #28
 801681e:	46bd      	mov	sp, r7
 8016820:	bd90      	pop	{r4, r7, pc}
 8016822:	bf00      	nop
 8016824:	08023334 	.word	0x08023334

08016828 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b086      	sub	sp, #24
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
 8016830:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	331a      	adds	r3, #26
 8016836:	4618      	mov	r0, r3
 8016838:	f7fe ff90 	bl	801575c <ld_word>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	d001      	beq.n	8016846 <pick_lfn+0x1e>
 8016842:	2300      	movs	r3, #0
 8016844:	e04d      	b.n	80168e2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801684e:	1e5a      	subs	r2, r3, #1
 8016850:	4613      	mov	r3, r2
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	4413      	add	r3, r2
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	4413      	add	r3, r2
 801685a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801685c:	2301      	movs	r3, #1
 801685e:	81fb      	strh	r3, [r7, #14]
 8016860:	2300      	movs	r3, #0
 8016862:	613b      	str	r3, [r7, #16]
 8016864:	e028      	b.n	80168b8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016866:	4a21      	ldr	r2, [pc, #132]	; (80168ec <pick_lfn+0xc4>)
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	4413      	add	r3, r2
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	461a      	mov	r2, r3
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	4413      	add	r3, r2
 8016874:	4618      	mov	r0, r3
 8016876:	f7fe ff71 	bl	801575c <ld_word>
 801687a:	4603      	mov	r3, r0
 801687c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801687e:	89fb      	ldrh	r3, [r7, #14]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d00f      	beq.n	80168a4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	2bfe      	cmp	r3, #254	; 0xfe
 8016888:	d901      	bls.n	801688e <pick_lfn+0x66>
 801688a:	2300      	movs	r3, #0
 801688c:	e029      	b.n	80168e2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801688e:	89bb      	ldrh	r3, [r7, #12]
 8016890:	81fb      	strh	r3, [r7, #14]
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	1c5a      	adds	r2, r3, #1
 8016896:	617a      	str	r2, [r7, #20]
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	687a      	ldr	r2, [r7, #4]
 801689c:	4413      	add	r3, r2
 801689e:	89fa      	ldrh	r2, [r7, #14]
 80168a0:	801a      	strh	r2, [r3, #0]
 80168a2:	e006      	b.n	80168b2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80168a4:	89bb      	ldrh	r3, [r7, #12]
 80168a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168aa:	4293      	cmp	r3, r2
 80168ac:	d001      	beq.n	80168b2 <pick_lfn+0x8a>
 80168ae:	2300      	movs	r3, #0
 80168b0:	e017      	b.n	80168e2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	3301      	adds	r3, #1
 80168b6:	613b      	str	r3, [r7, #16]
 80168b8:	693b      	ldr	r3, [r7, #16]
 80168ba:	2b0c      	cmp	r3, #12
 80168bc:	d9d3      	bls.n	8016866 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d00a      	beq.n	80168e0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	2bfe      	cmp	r3, #254	; 0xfe
 80168ce:	d901      	bls.n	80168d4 <pick_lfn+0xac>
 80168d0:	2300      	movs	r3, #0
 80168d2:	e006      	b.n	80168e2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	4413      	add	r3, r2
 80168dc:	2200      	movs	r2, #0
 80168de:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80168e0:	2301      	movs	r3, #1
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3718      	adds	r7, #24
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	08023334 	.word	0x08023334

080168f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b088      	sub	sp, #32
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	4611      	mov	r1, r2
 80168fc:	461a      	mov	r2, r3
 80168fe:	460b      	mov	r3, r1
 8016900:	71fb      	strb	r3, [r7, #7]
 8016902:	4613      	mov	r3, r2
 8016904:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	330d      	adds	r3, #13
 801690a:	79ba      	ldrb	r2, [r7, #6]
 801690c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	330b      	adds	r3, #11
 8016912:	220f      	movs	r2, #15
 8016914:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	330c      	adds	r3, #12
 801691a:	2200      	movs	r2, #0
 801691c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	331a      	adds	r3, #26
 8016922:	2100      	movs	r1, #0
 8016924:	4618      	mov	r0, r3
 8016926:	f7fe ff54 	bl	80157d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801692a:	79fb      	ldrb	r3, [r7, #7]
 801692c:	1e5a      	subs	r2, r3, #1
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	009b      	lsls	r3, r3, #2
 8016936:	4413      	add	r3, r2
 8016938:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801693a:	2300      	movs	r3, #0
 801693c:	82fb      	strh	r3, [r7, #22]
 801693e:	2300      	movs	r3, #0
 8016940:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016942:	8afb      	ldrh	r3, [r7, #22]
 8016944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016948:	4293      	cmp	r3, r2
 801694a:	d007      	beq.n	801695c <put_lfn+0x6c>
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	1c5a      	adds	r2, r3, #1
 8016950:	61fa      	str	r2, [r7, #28]
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	68fa      	ldr	r2, [r7, #12]
 8016956:	4413      	add	r3, r2
 8016958:	881b      	ldrh	r3, [r3, #0]
 801695a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801695c:	4a17      	ldr	r2, [pc, #92]	; (80169bc <put_lfn+0xcc>)
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	4413      	add	r3, r2
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	461a      	mov	r2, r3
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	4413      	add	r3, r2
 801696a:	8afa      	ldrh	r2, [r7, #22]
 801696c:	4611      	mov	r1, r2
 801696e:	4618      	mov	r0, r3
 8016970:	f7fe ff2f 	bl	80157d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016974:	8afb      	ldrh	r3, [r7, #22]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d102      	bne.n	8016980 <put_lfn+0x90>
 801697a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801697e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016980:	69bb      	ldr	r3, [r7, #24]
 8016982:	3301      	adds	r3, #1
 8016984:	61bb      	str	r3, [r7, #24]
 8016986:	69bb      	ldr	r3, [r7, #24]
 8016988:	2b0c      	cmp	r3, #12
 801698a:	d9da      	bls.n	8016942 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801698c:	8afb      	ldrh	r3, [r7, #22]
 801698e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016992:	4293      	cmp	r3, r2
 8016994:	d006      	beq.n	80169a4 <put_lfn+0xb4>
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	005b      	lsls	r3, r3, #1
 801699a:	68fa      	ldr	r2, [r7, #12]
 801699c:	4413      	add	r3, r2
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d103      	bne.n	80169ac <put_lfn+0xbc>
 80169a4:	79fb      	ldrb	r3, [r7, #7]
 80169a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	79fa      	ldrb	r2, [r7, #7]
 80169b0:	701a      	strb	r2, [r3, #0]
}
 80169b2:	bf00      	nop
 80169b4:	3720      	adds	r7, #32
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	08023334 	.word	0x08023334

080169c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b08c      	sub	sp, #48	; 0x30
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	60b9      	str	r1, [r7, #8]
 80169ca:	607a      	str	r2, [r7, #4]
 80169cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80169ce:	220b      	movs	r2, #11
 80169d0:	68b9      	ldr	r1, [r7, #8]
 80169d2:	68f8      	ldr	r0, [r7, #12]
 80169d4:	f7fe ff44 	bl	8015860 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	2b05      	cmp	r3, #5
 80169dc:	d92b      	bls.n	8016a36 <gen_numname+0x76>
		sr = seq;
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80169e2:	e022      	b.n	8016a2a <gen_numname+0x6a>
			wc = *lfn++;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	1c9a      	adds	r2, r3, #2
 80169e8:	607a      	str	r2, [r7, #4]
 80169ea:	881b      	ldrh	r3, [r3, #0]
 80169ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80169ee:	2300      	movs	r3, #0
 80169f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80169f2:	e017      	b.n	8016a24 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	005a      	lsls	r2, r3, #1
 80169f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169fa:	f003 0301 	and.w	r3, r3, #1
 80169fe:	4413      	add	r3, r2
 8016a00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a04:	085b      	lsrs	r3, r3, #1
 8016a06:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d005      	beq.n	8016a1e <gen_numname+0x5e>
 8016a12:	69fb      	ldr	r3, [r7, #28]
 8016a14:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016a18:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016a1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a20:	3301      	adds	r3, #1
 8016a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a26:	2b0f      	cmp	r3, #15
 8016a28:	d9e4      	bls.n	80169f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	881b      	ldrh	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d1d8      	bne.n	80169e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016a36:	2307      	movs	r3, #7
 8016a38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	f003 030f 	and.w	r3, r3, #15
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	3330      	adds	r3, #48	; 0x30
 8016a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a4e:	2b39      	cmp	r3, #57	; 0x39
 8016a50:	d904      	bls.n	8016a5c <gen_numname+0x9c>
 8016a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a56:	3307      	adds	r3, #7
 8016a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5e:	1e5a      	subs	r2, r3, #1
 8016a60:	62ba      	str	r2, [r7, #40]	; 0x28
 8016a62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016a66:	4413      	add	r3, r2
 8016a68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016a6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	091b      	lsrs	r3, r3, #4
 8016a74:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1de      	bne.n	8016a3a <gen_numname+0x7a>
	ns[i] = '~';
 8016a7c:	f107 0214 	add.w	r2, r7, #20
 8016a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a82:	4413      	add	r3, r2
 8016a84:	227e      	movs	r2, #126	; 0x7e
 8016a86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016a88:	2300      	movs	r3, #0
 8016a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a8c:	e002      	b.n	8016a94 <gen_numname+0xd4>
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a90:	3301      	adds	r3, #1
 8016a92:	627b      	str	r3, [r7, #36]	; 0x24
 8016a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d205      	bcs.n	8016aa8 <gen_numname+0xe8>
 8016a9c:	68fa      	ldr	r2, [r7, #12]
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa0:	4413      	add	r3, r2
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	2b20      	cmp	r3, #32
 8016aa6:	d1f2      	bne.n	8016a8e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aaa:	2b07      	cmp	r3, #7
 8016aac:	d808      	bhi.n	8016ac0 <gen_numname+0x100>
 8016aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab0:	1c5a      	adds	r2, r3, #1
 8016ab2:	62ba      	str	r2, [r7, #40]	; 0x28
 8016ab4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016ab8:	4413      	add	r3, r2
 8016aba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8016abe:	e000      	b.n	8016ac2 <gen_numname+0x102>
 8016ac0:	2120      	movs	r1, #32
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	1c5a      	adds	r2, r3, #1
 8016ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8016ac8:	68fa      	ldr	r2, [r7, #12]
 8016aca:	4413      	add	r3, r2
 8016acc:	460a      	mov	r2, r1
 8016ace:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad2:	2b07      	cmp	r3, #7
 8016ad4:	d9e8      	bls.n	8016aa8 <gen_numname+0xe8>
}
 8016ad6:	bf00      	nop
 8016ad8:	bf00      	nop
 8016ada:	3730      	adds	r7, #48	; 0x30
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016aec:	230b      	movs	r3, #11
 8016aee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016af0:	7bfb      	ldrb	r3, [r7, #15]
 8016af2:	b2da      	uxtb	r2, r3
 8016af4:	0852      	lsrs	r2, r2, #1
 8016af6:	01db      	lsls	r3, r3, #7
 8016af8:	4313      	orrs	r3, r2
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	1c59      	adds	r1, r3, #1
 8016b00:	6079      	str	r1, [r7, #4]
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	4413      	add	r3, r2
 8016b06:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	60bb      	str	r3, [r7, #8]
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d1ed      	bne.n	8016af0 <sum_sfn+0x10>
	return sum;
 8016b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3714      	adds	r7, #20
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b20:	4770      	bx	lr

08016b22 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b086      	sub	sp, #24
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8016b2c:	2304      	movs	r3, #4
 8016b2e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8016b36:	23ff      	movs	r3, #255	; 0xff
 8016b38:	757b      	strb	r3, [r7, #21]
 8016b3a:	23ff      	movs	r3, #255	; 0xff
 8016b3c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8016b3e:	e081      	b.n	8016c44 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	69db      	ldr	r3, [r3, #28]
 8016b44:	4619      	mov	r1, r3
 8016b46:	6938      	ldr	r0, [r7, #16]
 8016b48:	f7ff f8b8 	bl	8015cbc <move_window>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016b50:	7dfb      	ldrb	r3, [r7, #23]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d17c      	bne.n	8016c50 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6a1b      	ldr	r3, [r3, #32]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8016b5e:	7dbb      	ldrb	r3, [r7, #22]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d102      	bne.n	8016b6a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8016b64:	2304      	movs	r3, #4
 8016b66:	75fb      	strb	r3, [r7, #23]
 8016b68:	e077      	b.n	8016c5a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6a1b      	ldr	r3, [r3, #32]
 8016b6e:	330b      	adds	r3, #11
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b76:	73fb      	strb	r3, [r7, #15]
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	7bfa      	ldrb	r2, [r7, #15]
 8016b7c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8016b7e:	7dbb      	ldrb	r3, [r7, #22]
 8016b80:	2be5      	cmp	r3, #229	; 0xe5
 8016b82:	d00e      	beq.n	8016ba2 <dir_read+0x80>
 8016b84:	7dbb      	ldrb	r3, [r7, #22]
 8016b86:	2b2e      	cmp	r3, #46	; 0x2e
 8016b88:	d00b      	beq.n	8016ba2 <dir_read+0x80>
 8016b8a:	7bfb      	ldrb	r3, [r7, #15]
 8016b8c:	f023 0320 	bic.w	r3, r3, #32
 8016b90:	2b08      	cmp	r3, #8
 8016b92:	bf0c      	ite	eq
 8016b94:	2301      	moveq	r3, #1
 8016b96:	2300      	movne	r3, #0
 8016b98:	b2db      	uxtb	r3, r3
 8016b9a:	461a      	mov	r2, r3
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	4293      	cmp	r3, r2
 8016ba0:	d002      	beq.n	8016ba8 <dir_read+0x86>
				ord = 0xFF;
 8016ba2:	23ff      	movs	r3, #255	; 0xff
 8016ba4:	757b      	strb	r3, [r7, #21]
 8016ba6:	e044      	b.n	8016c32 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8016ba8:	7bfb      	ldrb	r3, [r7, #15]
 8016baa:	2b0f      	cmp	r3, #15
 8016bac:	d12f      	bne.n	8016c0e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8016bae:	7dbb      	ldrb	r3, [r7, #22]
 8016bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d00d      	beq.n	8016bd4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6a1b      	ldr	r3, [r3, #32]
 8016bbc:	7b5b      	ldrb	r3, [r3, #13]
 8016bbe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8016bc0:	7dbb      	ldrb	r3, [r7, #22]
 8016bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016bc6:	75bb      	strb	r3, [r7, #22]
 8016bc8:	7dbb      	ldrb	r3, [r7, #22]
 8016bca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	695a      	ldr	r2, [r3, #20]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016bd4:	7dba      	ldrb	r2, [r7, #22]
 8016bd6:	7d7b      	ldrb	r3, [r7, #21]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d115      	bne.n	8016c08 <dir_read+0xe6>
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	6a1b      	ldr	r3, [r3, #32]
 8016be0:	330d      	adds	r3, #13
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	7d3a      	ldrb	r2, [r7, #20]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d10e      	bne.n	8016c08 <dir_read+0xe6>
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	68da      	ldr	r2, [r3, #12]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6a1b      	ldr	r3, [r3, #32]
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	f7ff fe17 	bl	8016828 <pick_lfn>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d003      	beq.n	8016c08 <dir_read+0xe6>
 8016c00:	7d7b      	ldrb	r3, [r7, #21]
 8016c02:	3b01      	subs	r3, #1
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	e000      	b.n	8016c0a <dir_read+0xe8>
 8016c08:	23ff      	movs	r3, #255	; 0xff
 8016c0a:	757b      	strb	r3, [r7, #21]
 8016c0c:	e011      	b.n	8016c32 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8016c0e:	7d7b      	ldrb	r3, [r7, #21]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d109      	bne.n	8016c28 <dir_read+0x106>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6a1b      	ldr	r3, [r3, #32]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7ff ff61 	bl	8016ae0 <sum_sfn>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	461a      	mov	r2, r3
 8016c22:	7d3b      	ldrb	r3, [r7, #20]
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d015      	beq.n	8016c54 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c2e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8016c30:	e010      	b.n	8016c54 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8016c32:	2100      	movs	r1, #0
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f7ff fc3c 	bl	80164b2 <dir_next>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016c3e:	7dfb      	ldrb	r3, [r7, #23]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d109      	bne.n	8016c58 <dir_read+0x136>
	while (dp->sect) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	69db      	ldr	r3, [r3, #28]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f47f af79 	bne.w	8016b40 <dir_read+0x1e>
 8016c4e:	e004      	b.n	8016c5a <dir_read+0x138>
		if (res != FR_OK) break;
 8016c50:	bf00      	nop
 8016c52:	e002      	b.n	8016c5a <dir_read+0x138>
					break;
 8016c54:	bf00      	nop
 8016c56:	e000      	b.n	8016c5a <dir_read+0x138>
		if (res != FR_OK) break;
 8016c58:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8016c5a:	7dfb      	ldrb	r3, [r7, #23]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d002      	beq.n	8016c66 <dir_read+0x144>
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2200      	movs	r2, #0
 8016c64:	61da      	str	r2, [r3, #28]
	return res;
 8016c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b086      	sub	sp, #24
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016c7e:	2100      	movs	r1, #0
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7ff fb9b 	bl	80163bc <dir_sdi>
 8016c86:	4603      	mov	r3, r0
 8016c88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016c8a:	7dfb      	ldrb	r3, [r7, #23]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d001      	beq.n	8016c94 <dir_find+0x24>
 8016c90:	7dfb      	ldrb	r3, [r7, #23]
 8016c92:	e0a9      	b.n	8016de8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016c94:	23ff      	movs	r3, #255	; 0xff
 8016c96:	753b      	strb	r3, [r7, #20]
 8016c98:	7d3b      	ldrb	r3, [r7, #20]
 8016c9a:	757b      	strb	r3, [r7, #21]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8016ca2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	69db      	ldr	r3, [r3, #28]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	6938      	ldr	r0, [r7, #16]
 8016cac:	f7ff f806 	bl	8015cbc <move_window>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016cb4:	7dfb      	ldrb	r3, [r7, #23]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	f040 8090 	bne.w	8016ddc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6a1b      	ldr	r3, [r3, #32]
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016cc4:	7dbb      	ldrb	r3, [r7, #22]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d102      	bne.n	8016cd0 <dir_find+0x60>
 8016cca:	2304      	movs	r3, #4
 8016ccc:	75fb      	strb	r3, [r7, #23]
 8016cce:	e08a      	b.n	8016de6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6a1b      	ldr	r3, [r3, #32]
 8016cd4:	330b      	adds	r3, #11
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cdc:	73fb      	strb	r3, [r7, #15]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	7bfa      	ldrb	r2, [r7, #15]
 8016ce2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8016ce4:	7dbb      	ldrb	r3, [r7, #22]
 8016ce6:	2be5      	cmp	r3, #229	; 0xe5
 8016ce8:	d007      	beq.n	8016cfa <dir_find+0x8a>
 8016cea:	7bfb      	ldrb	r3, [r7, #15]
 8016cec:	f003 0308 	and.w	r3, r3, #8
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d009      	beq.n	8016d08 <dir_find+0x98>
 8016cf4:	7bfb      	ldrb	r3, [r7, #15]
 8016cf6:	2b0f      	cmp	r3, #15
 8016cf8:	d006      	beq.n	8016d08 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016cfa:	23ff      	movs	r3, #255	; 0xff
 8016cfc:	757b      	strb	r3, [r7, #21]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f04f 32ff 	mov.w	r2, #4294967295
 8016d04:	631a      	str	r2, [r3, #48]	; 0x30
 8016d06:	e05e      	b.n	8016dc6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8016d08:	7bfb      	ldrb	r3, [r7, #15]
 8016d0a:	2b0f      	cmp	r3, #15
 8016d0c:	d136      	bne.n	8016d7c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d154      	bne.n	8016dc6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8016d1c:	7dbb      	ldrb	r3, [r7, #22]
 8016d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d00d      	beq.n	8016d42 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	6a1b      	ldr	r3, [r3, #32]
 8016d2a:	7b5b      	ldrb	r3, [r3, #13]
 8016d2c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016d2e:	7dbb      	ldrb	r3, [r7, #22]
 8016d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d34:	75bb      	strb	r3, [r7, #22]
 8016d36:	7dbb      	ldrb	r3, [r7, #22]
 8016d38:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	695a      	ldr	r2, [r3, #20]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016d42:	7dba      	ldrb	r2, [r7, #22]
 8016d44:	7d7b      	ldrb	r3, [r7, #21]
 8016d46:	429a      	cmp	r2, r3
 8016d48:	d115      	bne.n	8016d76 <dir_find+0x106>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6a1b      	ldr	r3, [r3, #32]
 8016d4e:	330d      	adds	r3, #13
 8016d50:	781b      	ldrb	r3, [r3, #0]
 8016d52:	7d3a      	ldrb	r2, [r7, #20]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d10e      	bne.n	8016d76 <dir_find+0x106>
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	68da      	ldr	r2, [r3, #12]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6a1b      	ldr	r3, [r3, #32]
 8016d60:	4619      	mov	r1, r3
 8016d62:	4610      	mov	r0, r2
 8016d64:	f7ff fcf0 	bl	8016748 <cmp_lfn>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d003      	beq.n	8016d76 <dir_find+0x106>
 8016d6e:	7d7b      	ldrb	r3, [r7, #21]
 8016d70:	3b01      	subs	r3, #1
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	e000      	b.n	8016d78 <dir_find+0x108>
 8016d76:	23ff      	movs	r3, #255	; 0xff
 8016d78:	757b      	strb	r3, [r7, #21]
 8016d7a:	e024      	b.n	8016dc6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016d7c:	7d7b      	ldrb	r3, [r7, #21]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d109      	bne.n	8016d96 <dir_find+0x126>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6a1b      	ldr	r3, [r3, #32]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7ff feaa 	bl	8016ae0 <sum_sfn>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	461a      	mov	r2, r3
 8016d90:	7d3b      	ldrb	r3, [r7, #20]
 8016d92:	4293      	cmp	r3, r2
 8016d94:	d024      	beq.n	8016de0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016d9c:	f003 0301 	and.w	r3, r3, #1
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d10a      	bne.n	8016dba <dir_find+0x14a>
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6a18      	ldr	r0, [r3, #32]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	3324      	adds	r3, #36	; 0x24
 8016dac:	220b      	movs	r2, #11
 8016dae:	4619      	mov	r1, r3
 8016db0:	f7fe fd92 	bl	80158d8 <mem_cmp>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d014      	beq.n	8016de4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016dba:	23ff      	movs	r3, #255	; 0xff
 8016dbc:	757b      	strb	r3, [r7, #21]
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8016dc4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7ff fb72 	bl	80164b2 <dir_next>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016dd2:	7dfb      	ldrb	r3, [r7, #23]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f43f af65 	beq.w	8016ca4 <dir_find+0x34>
 8016dda:	e004      	b.n	8016de6 <dir_find+0x176>
		if (res != FR_OK) break;
 8016ddc:	bf00      	nop
 8016dde:	e002      	b.n	8016de6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016de0:	bf00      	nop
 8016de2:	e000      	b.n	8016de6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016de4:	bf00      	nop

	return res;
 8016de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3718      	adds	r7, #24
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b08c      	sub	sp, #48	; 0x30
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016e04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d001      	beq.n	8016e10 <dir_register+0x20>
 8016e0c:	2306      	movs	r3, #6
 8016e0e:	e0e0      	b.n	8016fd2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016e10:	2300      	movs	r3, #0
 8016e12:	627b      	str	r3, [r7, #36]	; 0x24
 8016e14:	e002      	b.n	8016e1c <dir_register+0x2c>
 8016e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e18:	3301      	adds	r3, #1
 8016e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8016e1c:	69fb      	ldr	r3, [r7, #28]
 8016e1e:	68da      	ldr	r2, [r3, #12]
 8016e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e22:	005b      	lsls	r3, r3, #1
 8016e24:	4413      	add	r3, r2
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d1f4      	bne.n	8016e16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8016e32:	f107 030c 	add.w	r3, r7, #12
 8016e36:	220c      	movs	r2, #12
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7fe fd11 	bl	8015860 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8016e3e:	7dfb      	ldrb	r3, [r7, #23]
 8016e40:	f003 0301 	and.w	r3, r3, #1
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d032      	beq.n	8016eae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2240      	movs	r2, #64	; 0x40
 8016e4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8016e50:	2301      	movs	r3, #1
 8016e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e54:	e016      	b.n	8016e84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016e5c:	69fb      	ldr	r3, [r7, #28]
 8016e5e:	68da      	ldr	r2, [r3, #12]
 8016e60:	f107 010c 	add.w	r1, r7, #12
 8016e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e66:	f7ff fdab 	bl	80169c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f7ff ff00 	bl	8016c70 <dir_find>
 8016e70:	4603      	mov	r3, r0
 8016e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8016e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d106      	bne.n	8016e8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8016e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e80:	3301      	adds	r3, #1
 8016e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e86:	2b63      	cmp	r3, #99	; 0x63
 8016e88:	d9e5      	bls.n	8016e56 <dir_register+0x66>
 8016e8a:	e000      	b.n	8016e8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8016e8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8016e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e90:	2b64      	cmp	r3, #100	; 0x64
 8016e92:	d101      	bne.n	8016e98 <dir_register+0xa8>
 8016e94:	2307      	movs	r3, #7
 8016e96:	e09c      	b.n	8016fd2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8016e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016e9c:	2b04      	cmp	r3, #4
 8016e9e:	d002      	beq.n	8016ea6 <dir_register+0xb6>
 8016ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ea4:	e095      	b.n	8016fd2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8016ea6:	7dfa      	ldrb	r2, [r7, #23]
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
 8016eb0:	f003 0302 	and.w	r3, r3, #2
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d007      	beq.n	8016ec8 <dir_register+0xd8>
 8016eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eba:	330c      	adds	r3, #12
 8016ebc:	4a47      	ldr	r2, [pc, #284]	; (8016fdc <dir_register+0x1ec>)
 8016ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8016ec2:	089b      	lsrs	r3, r3, #2
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	e000      	b.n	8016eca <dir_register+0xda>
 8016ec8:	2301      	movs	r3, #1
 8016eca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016ecc:	6a39      	ldr	r1, [r7, #32]
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f7ff fbb4 	bl	801663c <dir_alloc>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d148      	bne.n	8016f74 <dir_register+0x184>
 8016ee2:	6a3b      	ldr	r3, [r7, #32]
 8016ee4:	3b01      	subs	r3, #1
 8016ee6:	623b      	str	r3, [r7, #32]
 8016ee8:	6a3b      	ldr	r3, [r7, #32]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d042      	beq.n	8016f74 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	695a      	ldr	r2, [r3, #20]
 8016ef2:	6a3b      	ldr	r3, [r7, #32]
 8016ef4:	015b      	lsls	r3, r3, #5
 8016ef6:	1ad3      	subs	r3, r2, r3
 8016ef8:	4619      	mov	r1, r3
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	f7ff fa5e 	bl	80163bc <dir_sdi>
 8016f00:	4603      	mov	r3, r0
 8016f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d132      	bne.n	8016f74 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	3324      	adds	r3, #36	; 0x24
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7ff fde4 	bl	8016ae0 <sum_sfn>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	69db      	ldr	r3, [r3, #28]
 8016f20:	4619      	mov	r1, r3
 8016f22:	69f8      	ldr	r0, [r7, #28]
 8016f24:	f7fe feca 	bl	8015cbc <move_window>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8016f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d11d      	bne.n	8016f72 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	68d8      	ldr	r0, [r3, #12]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6a19      	ldr	r1, [r3, #32]
 8016f3e:	6a3b      	ldr	r3, [r7, #32]
 8016f40:	b2da      	uxtb	r2, r3
 8016f42:	7efb      	ldrb	r3, [r7, #27]
 8016f44:	f7ff fcd4 	bl	80168f0 <put_lfn>
				fs->wflag = 1;
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	2201      	movs	r2, #1
 8016f4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8016f4e:	2100      	movs	r1, #0
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7ff faae 	bl	80164b2 <dir_next>
 8016f56:	4603      	mov	r3, r0
 8016f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d107      	bne.n	8016f74 <dir_register+0x184>
 8016f64:	6a3b      	ldr	r3, [r7, #32]
 8016f66:	3b01      	subs	r3, #1
 8016f68:	623b      	str	r3, [r7, #32]
 8016f6a:	6a3b      	ldr	r3, [r7, #32]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d1d5      	bne.n	8016f1c <dir_register+0x12c>
 8016f70:	e000      	b.n	8016f74 <dir_register+0x184>
				if (res != FR_OK) break;
 8016f72:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d128      	bne.n	8016fce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	69db      	ldr	r3, [r3, #28]
 8016f80:	4619      	mov	r1, r3
 8016f82:	69f8      	ldr	r0, [r7, #28]
 8016f84:	f7fe fe9a 	bl	8015cbc <move_window>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d11b      	bne.n	8016fce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6a1b      	ldr	r3, [r3, #32]
 8016f9a:	2220      	movs	r2, #32
 8016f9c:	2100      	movs	r1, #0
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fe fc7f 	bl	80158a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6a18      	ldr	r0, [r3, #32]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	3324      	adds	r3, #36	; 0x24
 8016fac:	220b      	movs	r2, #11
 8016fae:	4619      	mov	r1, r3
 8016fb0:	f7fe fc56 	bl	8015860 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6a1b      	ldr	r3, [r3, #32]
 8016fbe:	330c      	adds	r3, #12
 8016fc0:	f002 0218 	and.w	r2, r2, #24
 8016fc4:	b2d2      	uxtb	r2, r2
 8016fc6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	2201      	movs	r2, #1
 8016fcc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3730      	adds	r7, #48	; 0x30
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop
 8016fdc:	4ec4ec4f 	.word	0x4ec4ec4f

08016fe0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b088      	sub	sp, #32
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	69db      	ldr	r3, [r3, #28]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	f000 80c9 	beq.w	8017192 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017008:	d032      	beq.n	8017070 <get_fileinfo+0x90>
			i = j = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	61bb      	str	r3, [r7, #24]
 801700e:	69bb      	ldr	r3, [r7, #24]
 8017010:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017012:	e01b      	b.n	801704c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8017014:	89fb      	ldrh	r3, [r7, #14]
 8017016:	2100      	movs	r1, #0
 8017018:	4618      	mov	r0, r3
 801701a:	f001 fed3 	bl	8018dc4 <ff_convert>
 801701e:	4603      	mov	r3, r0
 8017020:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8017022:	89fb      	ldrh	r3, [r7, #14]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d102      	bne.n	801702e <get_fileinfo+0x4e>
 8017028:	2300      	movs	r3, #0
 801702a:	61fb      	str	r3, [r7, #28]
 801702c:	e01a      	b.n	8017064 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801702e:	69fb      	ldr	r3, [r7, #28]
 8017030:	2bfe      	cmp	r3, #254	; 0xfe
 8017032:	d902      	bls.n	801703a <get_fileinfo+0x5a>
 8017034:	2300      	movs	r3, #0
 8017036:	61fb      	str	r3, [r7, #28]
 8017038:	e014      	b.n	8017064 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	1c5a      	adds	r2, r3, #1
 801703e:	61fa      	str	r2, [r7, #28]
 8017040:	89fa      	ldrh	r2, [r7, #14]
 8017042:	b2d1      	uxtb	r1, r2
 8017044:	683a      	ldr	r2, [r7, #0]
 8017046:	4413      	add	r3, r2
 8017048:	460a      	mov	r2, r1
 801704a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	68da      	ldr	r2, [r3, #12]
 8017050:	69bb      	ldr	r3, [r7, #24]
 8017052:	1c59      	adds	r1, r3, #1
 8017054:	61b9      	str	r1, [r7, #24]
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	881b      	ldrh	r3, [r3, #0]
 801705c:	81fb      	strh	r3, [r7, #14]
 801705e:	89fb      	ldrh	r3, [r7, #14]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d1d7      	bne.n	8017014 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8017064:	683a      	ldr	r2, [r7, #0]
 8017066:	69fb      	ldr	r3, [r7, #28]
 8017068:	4413      	add	r3, r2
 801706a:	3316      	adds	r3, #22
 801706c:	2200      	movs	r2, #0
 801706e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8017070:	2300      	movs	r3, #0
 8017072:	61bb      	str	r3, [r7, #24]
 8017074:	69bb      	ldr	r3, [r7, #24]
 8017076:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8017078:	683a      	ldr	r2, [r7, #0]
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	4413      	add	r3, r2
 801707e:	3316      	adds	r3, #22
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8017084:	e04c      	b.n	8017120 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	6a1a      	ldr	r2, [r3, #32]
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	1c59      	adds	r1, r3, #1
 801708e:	61f9      	str	r1, [r7, #28]
 8017090:	4413      	add	r3, r2
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8017096:	7dfb      	ldrb	r3, [r7, #23]
 8017098:	2b20      	cmp	r3, #32
 801709a:	d100      	bne.n	801709e <get_fileinfo+0xbe>
 801709c:	e040      	b.n	8017120 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801709e:	7dfb      	ldrb	r3, [r7, #23]
 80170a0:	2b05      	cmp	r3, #5
 80170a2:	d101      	bne.n	80170a8 <get_fileinfo+0xc8>
 80170a4:	23e5      	movs	r3, #229	; 0xe5
 80170a6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	2b09      	cmp	r3, #9
 80170ac:	d10f      	bne.n	80170ce <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80170ae:	89bb      	ldrh	r3, [r7, #12]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d105      	bne.n	80170c0 <get_fileinfo+0xe0>
 80170b4:	683a      	ldr	r2, [r7, #0]
 80170b6:	69bb      	ldr	r3, [r7, #24]
 80170b8:	4413      	add	r3, r2
 80170ba:	3316      	adds	r3, #22
 80170bc:	222e      	movs	r2, #46	; 0x2e
 80170be:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80170c0:	69bb      	ldr	r3, [r7, #24]
 80170c2:	1c5a      	adds	r2, r3, #1
 80170c4:	61ba      	str	r2, [r7, #24]
 80170c6:	683a      	ldr	r2, [r7, #0]
 80170c8:	4413      	add	r3, r2
 80170ca:	222e      	movs	r2, #46	; 0x2e
 80170cc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80170ce:	683a      	ldr	r2, [r7, #0]
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	4413      	add	r3, r2
 80170d4:	3309      	adds	r3, #9
 80170d6:	7dfa      	ldrb	r2, [r7, #23]
 80170d8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80170da:	89bb      	ldrh	r3, [r7, #12]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d11c      	bne.n	801711a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80170e0:	7dfb      	ldrb	r3, [r7, #23]
 80170e2:	2b40      	cmp	r3, #64	; 0x40
 80170e4:	d913      	bls.n	801710e <get_fileinfo+0x12e>
 80170e6:	7dfb      	ldrb	r3, [r7, #23]
 80170e8:	2b5a      	cmp	r3, #90	; 0x5a
 80170ea:	d810      	bhi.n	801710e <get_fileinfo+0x12e>
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6a1b      	ldr	r3, [r3, #32]
 80170f0:	330c      	adds	r3, #12
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	461a      	mov	r2, r3
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	2b08      	cmp	r3, #8
 80170fa:	d901      	bls.n	8017100 <get_fileinfo+0x120>
 80170fc:	2310      	movs	r3, #16
 80170fe:	e000      	b.n	8017102 <get_fileinfo+0x122>
 8017100:	2308      	movs	r3, #8
 8017102:	4013      	ands	r3, r2
 8017104:	2b00      	cmp	r3, #0
 8017106:	d002      	beq.n	801710e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8017108:	7dfb      	ldrb	r3, [r7, #23]
 801710a:	3320      	adds	r3, #32
 801710c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801710e:	683a      	ldr	r2, [r7, #0]
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	4413      	add	r3, r2
 8017114:	3316      	adds	r3, #22
 8017116:	7dfa      	ldrb	r2, [r7, #23]
 8017118:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801711a:	69bb      	ldr	r3, [r7, #24]
 801711c:	3301      	adds	r3, #1
 801711e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	2b0a      	cmp	r3, #10
 8017124:	d9af      	bls.n	8017086 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8017126:	89bb      	ldrh	r3, [r7, #12]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d10d      	bne.n	8017148 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801712c:	683a      	ldr	r2, [r7, #0]
 801712e:	69bb      	ldr	r3, [r7, #24]
 8017130:	4413      	add	r3, r2
 8017132:	3316      	adds	r3, #22
 8017134:	2200      	movs	r2, #0
 8017136:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6a1b      	ldr	r3, [r3, #32]
 801713c:	330c      	adds	r3, #12
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d101      	bne.n	8017148 <get_fileinfo+0x168>
 8017144:	2300      	movs	r3, #0
 8017146:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8017148:	683a      	ldr	r2, [r7, #0]
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	4413      	add	r3, r2
 801714e:	3309      	adds	r3, #9
 8017150:	2200      	movs	r2, #0
 8017152:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6a1b      	ldr	r3, [r3, #32]
 8017158:	7ada      	ldrb	r2, [r3, #11]
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6a1b      	ldr	r3, [r3, #32]
 8017162:	331c      	adds	r3, #28
 8017164:	4618      	mov	r0, r3
 8017166:	f7fe fb11 	bl	801578c <ld_dword>
 801716a:	4602      	mov	r2, r0
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6a1b      	ldr	r3, [r3, #32]
 8017174:	3316      	adds	r3, #22
 8017176:	4618      	mov	r0, r3
 8017178:	f7fe fb08 	bl	801578c <ld_dword>
 801717c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	b29a      	uxth	r2, r3
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	80da      	strh	r2, [r3, #6]
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	0c1b      	lsrs	r3, r3, #16
 801718a:	b29a      	uxth	r2, r3
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	809a      	strh	r2, [r3, #4]
 8017190:	e000      	b.n	8017194 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017192:	bf00      	nop
}
 8017194:	3720      	adds	r7, #32
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
	...

0801719c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 801719c:	b480      	push	{r7}
 801719e:	b085      	sub	sp, #20
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	1c59      	adds	r1, r3, #1
 80171aa:	687a      	ldr	r2, [r7, #4]
 80171ac:	6011      	str	r1, [r2, #0]
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80171b2:	89fb      	ldrh	r3, [r7, #14]
 80171b4:	2b60      	cmp	r3, #96	; 0x60
 80171b6:	d905      	bls.n	80171c4 <get_achar+0x28>
 80171b8:	89fb      	ldrh	r3, [r7, #14]
 80171ba:	2b7a      	cmp	r3, #122	; 0x7a
 80171bc:	d802      	bhi.n	80171c4 <get_achar+0x28>
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	3b20      	subs	r3, #32
 80171c2:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80171c4:	89fb      	ldrh	r3, [r7, #14]
 80171c6:	2b7f      	cmp	r3, #127	; 0x7f
 80171c8:	d904      	bls.n	80171d4 <get_achar+0x38>
 80171ca:	89fb      	ldrh	r3, [r7, #14]
 80171cc:	3b80      	subs	r3, #128	; 0x80
 80171ce:	4a05      	ldr	r2, [pc, #20]	; (80171e4 <get_achar+0x48>)
 80171d0:	5cd3      	ldrb	r3, [r2, r3]
 80171d2:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80171d4:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3714      	adds	r7, #20
 80171da:	46bd      	mov	sp, r7
 80171dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e0:	4770      	bx	lr
 80171e2:	bf00      	nop
 80171e4:	080232b4 	.word	0x080232b4

080171e8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b08a      	sub	sp, #40	; 0x28
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	60f8      	str	r0, [r7, #12]
 80171f0:	60b9      	str	r1, [r7, #8]
 80171f2:	607a      	str	r2, [r7, #4]
 80171f4:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80171f6:	e009      	b.n	801720c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80171f8:	f107 0308 	add.w	r3, r7, #8
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7ff ffcd 	bl	801719c <get_achar>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d101      	bne.n	801720c <pattern_matching+0x24>
 8017208:	2300      	movs	r3, #0
 801720a:	e064      	b.n	80172d6 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	1e5a      	subs	r2, r3, #1
 8017210:	607a      	str	r2, [r7, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1f0      	bne.n	80171f8 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d104      	bne.n	8017228 <pattern_matching+0x40>
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d001      	beq.n	8017228 <pattern_matching+0x40>
 8017224:	2301      	movs	r3, #1
 8017226:	e056      	b.n	80172d6 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	617b      	str	r3, [r7, #20]
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	2b3f      	cmp	r3, #63	; 0x3f
 8017236:	d003      	beq.n	8017240 <pattern_matching+0x58>
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	2b2a      	cmp	r3, #42	; 0x2a
 801723e:	d126      	bne.n	801728e <pattern_matching+0xa6>
				nm = nx = 0;
 8017240:	2300      	movs	r3, #0
 8017242:	61fb      	str	r3, [r7, #28]
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	1c5a      	adds	r2, r3, #1
 801724c:	617a      	str	r2, [r7, #20]
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	2b3f      	cmp	r3, #63	; 0x3f
 8017252:	d103      	bne.n	801725c <pattern_matching+0x74>
 8017254:	6a3b      	ldr	r3, [r7, #32]
 8017256:	3301      	adds	r3, #1
 8017258:	623b      	str	r3, [r7, #32]
 801725a:	e001      	b.n	8017260 <pattern_matching+0x78>
 801725c:	2301      	movs	r3, #1
 801725e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	2b3f      	cmp	r3, #63	; 0x3f
 8017266:	d0ef      	beq.n	8017248 <pattern_matching+0x60>
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	2b2a      	cmp	r3, #42	; 0x2a
 801726e:	d0eb      	beq.n	8017248 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8017270:	6978      	ldr	r0, [r7, #20]
 8017272:	6939      	ldr	r1, [r7, #16]
 8017274:	69fb      	ldr	r3, [r7, #28]
 8017276:	6a3a      	ldr	r2, [r7, #32]
 8017278:	f7ff ffb6 	bl	80171e8 <pattern_matching>
 801727c:	4603      	mov	r3, r0
 801727e:	2b00      	cmp	r3, #0
 8017280:	d001      	beq.n	8017286 <pattern_matching+0x9e>
 8017282:	2301      	movs	r3, #1
 8017284:	e027      	b.n	80172d6 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801728c:	e017      	b.n	80172be <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801728e:	f107 0314 	add.w	r3, r7, #20
 8017292:	4618      	mov	r0, r3
 8017294:	f7ff ff82 	bl	801719c <get_achar>
 8017298:	4603      	mov	r3, r0
 801729a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801729c:	f107 0310 	add.w	r3, r7, #16
 80172a0:	4618      	mov	r0, r3
 80172a2:	f7ff ff7b 	bl	801719c <get_achar>
 80172a6:	4603      	mov	r3, r0
 80172a8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80172aa:	8b7a      	ldrh	r2, [r7, #26]
 80172ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d104      	bne.n	80172bc <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80172b2:	8b7b      	ldrh	r3, [r7, #26]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d1bb      	bne.n	8017230 <pattern_matching+0x48>
 80172b8:	2301      	movs	r3, #1
 80172ba:	e00c      	b.n	80172d6 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80172bc:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80172be:	f107 0308 	add.w	r3, r7, #8
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7ff ff6a 	bl	801719c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d002      	beq.n	80172d4 <pattern_matching+0xec>
 80172ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1a9      	bne.n	8017228 <pattern_matching+0x40>

	return 0;
 80172d4:	2300      	movs	r3, #0
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3728      	adds	r7, #40	; 0x28
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
	...

080172e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b08a      	sub	sp, #40	; 0x28
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	613b      	str	r3, [r7, #16]
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	68db      	ldr	r3, [r3, #12]
 80172f6:	60fb      	str	r3, [r7, #12]
 80172f8:	2300      	movs	r3, #0
 80172fa:	617b      	str	r3, [r7, #20]
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017300:	69bb      	ldr	r3, [r7, #24]
 8017302:	1c5a      	adds	r2, r3, #1
 8017304:	61ba      	str	r2, [r7, #24]
 8017306:	693a      	ldr	r2, [r7, #16]
 8017308:	4413      	add	r3, r2
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801730e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017310:	2b1f      	cmp	r3, #31
 8017312:	d940      	bls.n	8017396 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017316:	2b2f      	cmp	r3, #47	; 0x2f
 8017318:	d006      	beq.n	8017328 <create_name+0x48>
 801731a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801731c:	2b5c      	cmp	r3, #92	; 0x5c
 801731e:	d110      	bne.n	8017342 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017320:	e002      	b.n	8017328 <create_name+0x48>
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	3301      	adds	r3, #1
 8017326:	61bb      	str	r3, [r7, #24]
 8017328:	693a      	ldr	r2, [r7, #16]
 801732a:	69bb      	ldr	r3, [r7, #24]
 801732c:	4413      	add	r3, r2
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2b2f      	cmp	r3, #47	; 0x2f
 8017332:	d0f6      	beq.n	8017322 <create_name+0x42>
 8017334:	693a      	ldr	r2, [r7, #16]
 8017336:	69bb      	ldr	r3, [r7, #24]
 8017338:	4413      	add	r3, r2
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	2b5c      	cmp	r3, #92	; 0x5c
 801733e:	d0f0      	beq.n	8017322 <create_name+0x42>
			break;
 8017340:	e02a      	b.n	8017398 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	2bfe      	cmp	r3, #254	; 0xfe
 8017346:	d901      	bls.n	801734c <create_name+0x6c>
 8017348:	2306      	movs	r3, #6
 801734a:	e177      	b.n	801763c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801734c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801734e:	b2db      	uxtb	r3, r3
 8017350:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017354:	2101      	movs	r1, #1
 8017356:	4618      	mov	r0, r3
 8017358:	f001 fd34 	bl	8018dc4 <ff_convert>
 801735c:	4603      	mov	r3, r0
 801735e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017362:	2b00      	cmp	r3, #0
 8017364:	d101      	bne.n	801736a <create_name+0x8a>
 8017366:	2306      	movs	r3, #6
 8017368:	e168      	b.n	801763c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801736a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801736c:	2b7f      	cmp	r3, #127	; 0x7f
 801736e:	d809      	bhi.n	8017384 <create_name+0xa4>
 8017370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017372:	4619      	mov	r1, r3
 8017374:	48b3      	ldr	r0, [pc, #716]	; (8017644 <create_name+0x364>)
 8017376:	f7fe fad6 	bl	8015926 <chk_chr>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d001      	beq.n	8017384 <create_name+0xa4>
 8017380:	2306      	movs	r3, #6
 8017382:	e15b      	b.n	801763c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	1c5a      	adds	r2, r3, #1
 8017388:	617a      	str	r2, [r7, #20]
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	68fa      	ldr	r2, [r7, #12]
 801738e:	4413      	add	r3, r2
 8017390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017392:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017394:	e7b4      	b.n	8017300 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017396:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017398:	693a      	ldr	r2, [r7, #16]
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	441a      	add	r2, r3
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80173a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173a4:	2b1f      	cmp	r3, #31
 80173a6:	d801      	bhi.n	80173ac <create_name+0xcc>
 80173a8:	2304      	movs	r3, #4
 80173aa:	e000      	b.n	80173ae <create_name+0xce>
 80173ac:	2300      	movs	r3, #0
 80173ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80173b2:	e011      	b.n	80173d8 <create_name+0xf8>
		w = lfn[di - 1];
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80173ba:	3b01      	subs	r3, #1
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	68fa      	ldr	r2, [r7, #12]
 80173c0:	4413      	add	r3, r2
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80173c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173c8:	2b20      	cmp	r3, #32
 80173ca:	d002      	beq.n	80173d2 <create_name+0xf2>
 80173cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173ce:	2b2e      	cmp	r3, #46	; 0x2e
 80173d0:	d106      	bne.n	80173e0 <create_name+0x100>
		di--;
 80173d2:	697b      	ldr	r3, [r7, #20]
 80173d4:	3b01      	subs	r3, #1
 80173d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d1ea      	bne.n	80173b4 <create_name+0xd4>
 80173de:	e000      	b.n	80173e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80173e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	4413      	add	r3, r2
 80173ea:	2200      	movs	r2, #0
 80173ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80173ee:	697b      	ldr	r3, [r7, #20]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d101      	bne.n	80173f8 <create_name+0x118>
 80173f4:	2306      	movs	r3, #6
 80173f6:	e121      	b.n	801763c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	3324      	adds	r3, #36	; 0x24
 80173fc:	220b      	movs	r2, #11
 80173fe:	2120      	movs	r1, #32
 8017400:	4618      	mov	r0, r3
 8017402:	f7fe fa4e 	bl	80158a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017406:	2300      	movs	r3, #0
 8017408:	61bb      	str	r3, [r7, #24]
 801740a:	e002      	b.n	8017412 <create_name+0x132>
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	3301      	adds	r3, #1
 8017410:	61bb      	str	r3, [r7, #24]
 8017412:	69bb      	ldr	r3, [r7, #24]
 8017414:	005b      	lsls	r3, r3, #1
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	4413      	add	r3, r2
 801741a:	881b      	ldrh	r3, [r3, #0]
 801741c:	2b20      	cmp	r3, #32
 801741e:	d0f5      	beq.n	801740c <create_name+0x12c>
 8017420:	69bb      	ldr	r3, [r7, #24]
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	68fa      	ldr	r2, [r7, #12]
 8017426:	4413      	add	r3, r2
 8017428:	881b      	ldrh	r3, [r3, #0]
 801742a:	2b2e      	cmp	r3, #46	; 0x2e
 801742c:	d0ee      	beq.n	801740c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d009      	beq.n	8017448 <create_name+0x168>
 8017434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017438:	f043 0303 	orr.w	r3, r3, #3
 801743c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017440:	e002      	b.n	8017448 <create_name+0x168>
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	3b01      	subs	r3, #1
 8017446:	617b      	str	r3, [r7, #20]
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d009      	beq.n	8017462 <create_name+0x182>
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017454:	3b01      	subs	r3, #1
 8017456:	005b      	lsls	r3, r3, #1
 8017458:	68fa      	ldr	r2, [r7, #12]
 801745a:	4413      	add	r3, r2
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	2b2e      	cmp	r3, #46	; 0x2e
 8017460:	d1ef      	bne.n	8017442 <create_name+0x162>

	i = b = 0; ni = 8;
 8017462:	2300      	movs	r3, #0
 8017464:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017468:	2300      	movs	r3, #0
 801746a:	623b      	str	r3, [r7, #32]
 801746c:	2308      	movs	r3, #8
 801746e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	1c5a      	adds	r2, r3, #1
 8017474:	61ba      	str	r2, [r7, #24]
 8017476:	005b      	lsls	r3, r3, #1
 8017478:	68fa      	ldr	r2, [r7, #12]
 801747a:	4413      	add	r3, r2
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017482:	2b00      	cmp	r3, #0
 8017484:	f000 8090 	beq.w	80175a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801748a:	2b20      	cmp	r3, #32
 801748c:	d006      	beq.n	801749c <create_name+0x1bc>
 801748e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017490:	2b2e      	cmp	r3, #46	; 0x2e
 8017492:	d10a      	bne.n	80174aa <create_name+0x1ca>
 8017494:	69ba      	ldr	r2, [r7, #24]
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	429a      	cmp	r2, r3
 801749a:	d006      	beq.n	80174aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801749c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174a0:	f043 0303 	orr.w	r3, r3, #3
 80174a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174a8:	e07d      	b.n	80175a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80174aa:	6a3a      	ldr	r2, [r7, #32]
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d203      	bcs.n	80174ba <create_name+0x1da>
 80174b2:	69ba      	ldr	r2, [r7, #24]
 80174b4:	697b      	ldr	r3, [r7, #20]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d123      	bne.n	8017502 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	2b0b      	cmp	r3, #11
 80174be:	d106      	bne.n	80174ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80174c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174c4:	f043 0303 	orr.w	r3, r3, #3
 80174c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174cc:	e06f      	b.n	80175ae <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80174ce:	69ba      	ldr	r2, [r7, #24]
 80174d0:	697b      	ldr	r3, [r7, #20]
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d005      	beq.n	80174e2 <create_name+0x202>
 80174d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174da:	f043 0303 	orr.w	r3, r3, #3
 80174de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80174e2:	69ba      	ldr	r2, [r7, #24]
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d860      	bhi.n	80175ac <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	61bb      	str	r3, [r7, #24]
 80174ee:	2308      	movs	r3, #8
 80174f0:	623b      	str	r3, [r7, #32]
 80174f2:	230b      	movs	r3, #11
 80174f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80174f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174fa:	009b      	lsls	r3, r3, #2
 80174fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017500:	e051      	b.n	80175a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017504:	2b7f      	cmp	r3, #127	; 0x7f
 8017506:	d914      	bls.n	8017532 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801750a:	2100      	movs	r1, #0
 801750c:	4618      	mov	r0, r3
 801750e:	f001 fc59 	bl	8018dc4 <ff_convert>
 8017512:	4603      	mov	r3, r0
 8017514:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017518:	2b00      	cmp	r3, #0
 801751a:	d004      	beq.n	8017526 <create_name+0x246>
 801751c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801751e:	3b80      	subs	r3, #128	; 0x80
 8017520:	4a49      	ldr	r2, [pc, #292]	; (8017648 <create_name+0x368>)
 8017522:	5cd3      	ldrb	r3, [r2, r3]
 8017524:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801752a:	f043 0302 	orr.w	r3, r3, #2
 801752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017534:	2b00      	cmp	r3, #0
 8017536:	d007      	beq.n	8017548 <create_name+0x268>
 8017538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801753a:	4619      	mov	r1, r3
 801753c:	4843      	ldr	r0, [pc, #268]	; (801764c <create_name+0x36c>)
 801753e:	f7fe f9f2 	bl	8015926 <chk_chr>
 8017542:	4603      	mov	r3, r0
 8017544:	2b00      	cmp	r3, #0
 8017546:	d008      	beq.n	801755a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017548:	235f      	movs	r3, #95	; 0x5f
 801754a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017550:	f043 0303 	orr.w	r3, r3, #3
 8017554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017558:	e01b      	b.n	8017592 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801755a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801755c:	2b40      	cmp	r3, #64	; 0x40
 801755e:	d909      	bls.n	8017574 <create_name+0x294>
 8017560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017562:	2b5a      	cmp	r3, #90	; 0x5a
 8017564:	d806      	bhi.n	8017574 <create_name+0x294>
					b |= 2;
 8017566:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801756a:	f043 0302 	orr.w	r3, r3, #2
 801756e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017572:	e00e      	b.n	8017592 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017576:	2b60      	cmp	r3, #96	; 0x60
 8017578:	d90b      	bls.n	8017592 <create_name+0x2b2>
 801757a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801757c:	2b7a      	cmp	r3, #122	; 0x7a
 801757e:	d808      	bhi.n	8017592 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017580:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017584:	f043 0301 	orr.w	r3, r3, #1
 8017588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801758c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801758e:	3b20      	subs	r3, #32
 8017590:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	1c5a      	adds	r2, r3, #1
 8017596:	623a      	str	r2, [r7, #32]
 8017598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801759a:	b2d1      	uxtb	r1, r2
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	4413      	add	r3, r2
 80175a0:	460a      	mov	r2, r1
 80175a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80175a6:	e763      	b.n	8017470 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80175a8:	bf00      	nop
 80175aa:	e000      	b.n	80175ae <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80175ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80175b4:	2be5      	cmp	r3, #229	; 0xe5
 80175b6:	d103      	bne.n	80175c0 <create_name+0x2e0>
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2205      	movs	r2, #5
 80175bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	2b08      	cmp	r3, #8
 80175c4:	d104      	bne.n	80175d0 <create_name+0x2f0>
 80175c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175ca:	009b      	lsls	r3, r3, #2
 80175cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80175d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175d4:	f003 030c 	and.w	r3, r3, #12
 80175d8:	2b0c      	cmp	r3, #12
 80175da:	d005      	beq.n	80175e8 <create_name+0x308>
 80175dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175e0:	f003 0303 	and.w	r3, r3, #3
 80175e4:	2b03      	cmp	r3, #3
 80175e6:	d105      	bne.n	80175f4 <create_name+0x314>
 80175e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175ec:	f043 0302 	orr.w	r3, r3, #2
 80175f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80175f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175f8:	f003 0302 	and.w	r3, r3, #2
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d117      	bne.n	8017630 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017604:	f003 0303 	and.w	r3, r3, #3
 8017608:	2b01      	cmp	r3, #1
 801760a:	d105      	bne.n	8017618 <create_name+0x338>
 801760c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017610:	f043 0310 	orr.w	r3, r3, #16
 8017614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017618:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801761c:	f003 030c 	and.w	r3, r3, #12
 8017620:	2b04      	cmp	r3, #4
 8017622:	d105      	bne.n	8017630 <create_name+0x350>
 8017624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017628:	f043 0308 	orr.w	r3, r3, #8
 801762c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017636:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801763a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801763c:	4618      	mov	r0, r3
 801763e:	3728      	adds	r7, #40	; 0x28
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	08023034 	.word	0x08023034
 8017648:	080232b4 	.word	0x080232b4
 801764c:	08023040 	.word	0x08023040

08017650 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b086      	sub	sp, #24
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
 8017658:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017664:	e002      	b.n	801766c <follow_path+0x1c>
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	3301      	adds	r3, #1
 801766a:	603b      	str	r3, [r7, #0]
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	2b2f      	cmp	r3, #47	; 0x2f
 8017672:	d0f8      	beq.n	8017666 <follow_path+0x16>
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	2b5c      	cmp	r3, #92	; 0x5c
 801767a:	d0f4      	beq.n	8017666 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	2200      	movs	r2, #0
 8017680:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b1f      	cmp	r3, #31
 8017688:	d80a      	bhi.n	80176a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2280      	movs	r2, #128	; 0x80
 801768e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017692:	2100      	movs	r1, #0
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f7fe fe91 	bl	80163bc <dir_sdi>
 801769a:	4603      	mov	r3, r0
 801769c:	75fb      	strb	r3, [r7, #23]
 801769e:	e043      	b.n	8017728 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80176a0:	463b      	mov	r3, r7
 80176a2:	4619      	mov	r1, r3
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ff fe1b 	bl	80172e0 <create_name>
 80176aa:	4603      	mov	r3, r0
 80176ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80176ae:	7dfb      	ldrb	r3, [r7, #23]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d134      	bne.n	801771e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f7ff fadb 	bl	8016c70 <dir_find>
 80176ba:	4603      	mov	r3, r0
 80176bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80176c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80176c6:	7dfb      	ldrb	r3, [r7, #23]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00a      	beq.n	80176e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80176cc:	7dfb      	ldrb	r3, [r7, #23]
 80176ce:	2b04      	cmp	r3, #4
 80176d0:	d127      	bne.n	8017722 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80176d2:	7afb      	ldrb	r3, [r7, #11]
 80176d4:	f003 0304 	and.w	r3, r3, #4
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d122      	bne.n	8017722 <follow_path+0xd2>
 80176dc:	2305      	movs	r3, #5
 80176de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80176e0:	e01f      	b.n	8017722 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80176e2:	7afb      	ldrb	r3, [r7, #11]
 80176e4:	f003 0304 	and.w	r3, r3, #4
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d11c      	bne.n	8017726 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	799b      	ldrb	r3, [r3, #6]
 80176f0:	f003 0310 	and.w	r3, r3, #16
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d102      	bne.n	80176fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80176f8:	2305      	movs	r3, #5
 80176fa:	75fb      	strb	r3, [r7, #23]
 80176fc:	e014      	b.n	8017728 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	695b      	ldr	r3, [r3, #20]
 8017708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801770c:	4413      	add	r3, r2
 801770e:	4619      	mov	r1, r3
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	f7fe ffda 	bl	80166ca <ld_clust>
 8017716:	4602      	mov	r2, r0
 8017718:	693b      	ldr	r3, [r7, #16]
 801771a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801771c:	e7c0      	b.n	80176a0 <follow_path+0x50>
			if (res != FR_OK) break;
 801771e:	bf00      	nop
 8017720:	e002      	b.n	8017728 <follow_path+0xd8>
				break;
 8017722:	bf00      	nop
 8017724:	e000      	b.n	8017728 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017726:	bf00      	nop
			}
		}
	}

	return res;
 8017728:	7dfb      	ldrb	r3, [r7, #23]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3718      	adds	r7, #24
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}

08017732 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017732:	b480      	push	{r7}
 8017734:	b087      	sub	sp, #28
 8017736:	af00      	add	r7, sp, #0
 8017738:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801773a:	f04f 33ff 	mov.w	r3, #4294967295
 801773e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d031      	beq.n	80177ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	617b      	str	r3, [r7, #20]
 801774e:	e002      	b.n	8017756 <get_ldnumber+0x24>
 8017750:	697b      	ldr	r3, [r7, #20]
 8017752:	3301      	adds	r3, #1
 8017754:	617b      	str	r3, [r7, #20]
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	2b1f      	cmp	r3, #31
 801775c:	d903      	bls.n	8017766 <get_ldnumber+0x34>
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	2b3a      	cmp	r3, #58	; 0x3a
 8017764:	d1f4      	bne.n	8017750 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	2b3a      	cmp	r3, #58	; 0x3a
 801776c:	d11c      	bne.n	80177a8 <get_ldnumber+0x76>
			tp = *path;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	1c5a      	adds	r2, r3, #1
 8017778:	60fa      	str	r2, [r7, #12]
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	3b30      	subs	r3, #48	; 0x30
 801777e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	2b09      	cmp	r3, #9
 8017784:	d80e      	bhi.n	80177a4 <get_ldnumber+0x72>
 8017786:	68fa      	ldr	r2, [r7, #12]
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	429a      	cmp	r2, r3
 801778c:	d10a      	bne.n	80177a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d107      	bne.n	80177a4 <get_ldnumber+0x72>
					vol = (int)i;
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	3301      	adds	r3, #1
 801779c:	617b      	str	r3, [r7, #20]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	697a      	ldr	r2, [r7, #20]
 80177a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80177a4:	693b      	ldr	r3, [r7, #16]
 80177a6:	e002      	b.n	80177ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80177a8:	2300      	movs	r3, #0
 80177aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80177ac:	693b      	ldr	r3, [r7, #16]
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	371c      	adds	r7, #28
 80177b2:	46bd      	mov	sp, r7
 80177b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b8:	4770      	bx	lr
	...

080177bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b082      	sub	sp, #8
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2200      	movs	r2, #0
 80177ca:	70da      	strb	r2, [r3, #3]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f04f 32ff 	mov.w	r2, #4294967295
 80177d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80177d4:	6839      	ldr	r1, [r7, #0]
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f7fe fa70 	bl	8015cbc <move_window>
 80177dc:	4603      	mov	r3, r0
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d001      	beq.n	80177e6 <check_fs+0x2a>
 80177e2:	2304      	movs	r3, #4
 80177e4:	e038      	b.n	8017858 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	3334      	adds	r3, #52	; 0x34
 80177ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80177ee:	4618      	mov	r0, r3
 80177f0:	f7fd ffb4 	bl	801575c <ld_word>
 80177f4:	4603      	mov	r3, r0
 80177f6:	461a      	mov	r2, r3
 80177f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d001      	beq.n	8017804 <check_fs+0x48>
 8017800:	2303      	movs	r3, #3
 8017802:	e029      	b.n	8017858 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801780a:	2be9      	cmp	r3, #233	; 0xe9
 801780c:	d009      	beq.n	8017822 <check_fs+0x66>
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017814:	2beb      	cmp	r3, #235	; 0xeb
 8017816:	d11e      	bne.n	8017856 <check_fs+0x9a>
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801781e:	2b90      	cmp	r3, #144	; 0x90
 8017820:	d119      	bne.n	8017856 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3334      	adds	r3, #52	; 0x34
 8017826:	3336      	adds	r3, #54	; 0x36
 8017828:	4618      	mov	r0, r3
 801782a:	f7fd ffaf 	bl	801578c <ld_dword>
 801782e:	4603      	mov	r3, r0
 8017830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017834:	4a0a      	ldr	r2, [pc, #40]	; (8017860 <check_fs+0xa4>)
 8017836:	4293      	cmp	r3, r2
 8017838:	d101      	bne.n	801783e <check_fs+0x82>
 801783a:	2300      	movs	r3, #0
 801783c:	e00c      	b.n	8017858 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	3334      	adds	r3, #52	; 0x34
 8017842:	3352      	adds	r3, #82	; 0x52
 8017844:	4618      	mov	r0, r3
 8017846:	f7fd ffa1 	bl	801578c <ld_dword>
 801784a:	4603      	mov	r3, r0
 801784c:	4a05      	ldr	r2, [pc, #20]	; (8017864 <check_fs+0xa8>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d101      	bne.n	8017856 <check_fs+0x9a>
 8017852:	2300      	movs	r3, #0
 8017854:	e000      	b.n	8017858 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017856:	2302      	movs	r3, #2
}
 8017858:	4618      	mov	r0, r3
 801785a:	3708      	adds	r7, #8
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}
 8017860:	00544146 	.word	0x00544146
 8017864:	33544146 	.word	0x33544146

08017868 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b096      	sub	sp, #88	; 0x58
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	4613      	mov	r3, r2
 8017874:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017876:	68bb      	ldr	r3, [r7, #8]
 8017878:	2200      	movs	r2, #0
 801787a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801787c:	68f8      	ldr	r0, [r7, #12]
 801787e:	f7ff ff58 	bl	8017732 <get_ldnumber>
 8017882:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017886:	2b00      	cmp	r3, #0
 8017888:	da01      	bge.n	801788e <find_volume+0x26>
 801788a:	230b      	movs	r3, #11
 801788c:	e231      	b.n	8017cf2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801788e:	4aa8      	ldr	r2, [pc, #672]	; (8017b30 <find_volume+0x2c8>)
 8017890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017896:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801789a:	2b00      	cmp	r3, #0
 801789c:	d101      	bne.n	80178a2 <find_volume+0x3a>
 801789e:	230c      	movs	r3, #12
 80178a0:	e227      	b.n	8017cf2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80178a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80178a8:	79fb      	ldrb	r3, [r7, #7]
 80178aa:	f023 0301 	bic.w	r3, r3, #1
 80178ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80178b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d01a      	beq.n	80178ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80178b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ba:	785b      	ldrb	r3, [r3, #1]
 80178bc:	4618      	mov	r0, r3
 80178be:	f7fd fea7 	bl	8015610 <disk_status>
 80178c2:	4603      	mov	r3, r0
 80178c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80178c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80178cc:	f003 0301 	and.w	r3, r3, #1
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d10c      	bne.n	80178ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80178d4:	79fb      	ldrb	r3, [r7, #7]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d007      	beq.n	80178ea <find_volume+0x82>
 80178da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80178de:	f003 0304 	and.w	r3, r3, #4
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d001      	beq.n	80178ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80178e6:	230a      	movs	r3, #10
 80178e8:	e203      	b.n	8017cf2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80178ea:	2300      	movs	r3, #0
 80178ec:	e201      	b.n	8017cf2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80178ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178f0:	2200      	movs	r2, #0
 80178f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80178f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178f6:	b2da      	uxtb	r2, r3
 80178f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80178fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178fe:	785b      	ldrb	r3, [r3, #1]
 8017900:	4618      	mov	r0, r3
 8017902:	f7fd fe9f 	bl	8015644 <disk_initialize>
 8017906:	4603      	mov	r3, r0
 8017908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801790c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017910:	f003 0301 	and.w	r3, r3, #1
 8017914:	2b00      	cmp	r3, #0
 8017916:	d001      	beq.n	801791c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017918:	2303      	movs	r3, #3
 801791a:	e1ea      	b.n	8017cf2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801791c:	79fb      	ldrb	r3, [r7, #7]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d007      	beq.n	8017932 <find_volume+0xca>
 8017922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017926:	f003 0304 	and.w	r3, r3, #4
 801792a:	2b00      	cmp	r3, #0
 801792c:	d001      	beq.n	8017932 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801792e:	230a      	movs	r3, #10
 8017930:	e1df      	b.n	8017cf2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017932:	2300      	movs	r3, #0
 8017934:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801793a:	f7ff ff3f 	bl	80177bc <check_fs>
 801793e:	4603      	mov	r3, r0
 8017940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017948:	2b02      	cmp	r3, #2
 801794a:	d14b      	bne.n	80179e4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801794c:	2300      	movs	r3, #0
 801794e:	643b      	str	r3, [r7, #64]	; 0x40
 8017950:	e01f      	b.n	8017992 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801795a:	011b      	lsls	r3, r3, #4
 801795c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017960:	4413      	add	r3, r2
 8017962:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017966:	3304      	adds	r3, #4
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d006      	beq.n	801797c <find_volume+0x114>
 801796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017970:	3308      	adds	r3, #8
 8017972:	4618      	mov	r0, r3
 8017974:	f7fd ff0a 	bl	801578c <ld_dword>
 8017978:	4602      	mov	r2, r0
 801797a:	e000      	b.n	801797e <find_volume+0x116>
 801797c:	2200      	movs	r2, #0
 801797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017980:	009b      	lsls	r3, r3, #2
 8017982:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017986:	440b      	add	r3, r1
 8017988:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801798c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801798e:	3301      	adds	r3, #1
 8017990:	643b      	str	r3, [r7, #64]	; 0x40
 8017992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017994:	2b03      	cmp	r3, #3
 8017996:	d9dc      	bls.n	8017952 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017998:	2300      	movs	r3, #0
 801799a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801799c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d002      	beq.n	80179a8 <find_volume+0x140>
 80179a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179a4:	3b01      	subs	r3, #1
 80179a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80179a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80179b0:	4413      	add	r3, r2
 80179b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80179b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80179b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d005      	beq.n	80179ca <find_volume+0x162>
 80179be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80179c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179c2:	f7ff fefb 	bl	80177bc <check_fs>
 80179c6:	4603      	mov	r3, r0
 80179c8:	e000      	b.n	80179cc <find_volume+0x164>
 80179ca:	2303      	movs	r3, #3
 80179cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80179d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179d4:	2b01      	cmp	r3, #1
 80179d6:	d905      	bls.n	80179e4 <find_volume+0x17c>
 80179d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179da:	3301      	adds	r3, #1
 80179dc:	643b      	str	r3, [r7, #64]	; 0x40
 80179de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179e0:	2b03      	cmp	r3, #3
 80179e2:	d9e1      	bls.n	80179a8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80179e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179e8:	2b04      	cmp	r3, #4
 80179ea:	d101      	bne.n	80179f0 <find_volume+0x188>
 80179ec:	2301      	movs	r3, #1
 80179ee:	e180      	b.n	8017cf2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80179f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d901      	bls.n	80179fc <find_volume+0x194>
 80179f8:	230d      	movs	r3, #13
 80179fa:	e17a      	b.n	8017cf2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80179fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179fe:	3334      	adds	r3, #52	; 0x34
 8017a00:	330b      	adds	r3, #11
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7fd feaa 	bl	801575c <ld_word>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a0e:	d001      	beq.n	8017a14 <find_volume+0x1ac>
 8017a10:	230d      	movs	r3, #13
 8017a12:	e16e      	b.n	8017cf2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a16:	3334      	adds	r3, #52	; 0x34
 8017a18:	3316      	adds	r3, #22
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7fd fe9e 	bl	801575c <ld_word>
 8017a20:	4603      	mov	r3, r0
 8017a22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d106      	bne.n	8017a38 <find_volume+0x1d0>
 8017a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a2c:	3334      	adds	r3, #52	; 0x34
 8017a2e:	3324      	adds	r3, #36	; 0x24
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7fd feab 	bl	801578c <ld_dword>
 8017a36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a3c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a40:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a4a:	789b      	ldrb	r3, [r3, #2]
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	d005      	beq.n	8017a5c <find_volume+0x1f4>
 8017a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a52:	789b      	ldrb	r3, [r3, #2]
 8017a54:	2b02      	cmp	r3, #2
 8017a56:	d001      	beq.n	8017a5c <find_volume+0x1f4>
 8017a58:	230d      	movs	r3, #13
 8017a5a:	e14a      	b.n	8017cf2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a5e:	789b      	ldrb	r3, [r3, #2]
 8017a60:	461a      	mov	r2, r3
 8017a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a64:	fb02 f303 	mul.w	r3, r2, r3
 8017a68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a78:	895b      	ldrh	r3, [r3, #10]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d008      	beq.n	8017a90 <find_volume+0x228>
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	895b      	ldrh	r3, [r3, #10]
 8017a82:	461a      	mov	r2, r3
 8017a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a86:	895b      	ldrh	r3, [r3, #10]
 8017a88:	3b01      	subs	r3, #1
 8017a8a:	4013      	ands	r3, r2
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d001      	beq.n	8017a94 <find_volume+0x22c>
 8017a90:	230d      	movs	r3, #13
 8017a92:	e12e      	b.n	8017cf2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a96:	3334      	adds	r3, #52	; 0x34
 8017a98:	3311      	adds	r3, #17
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7fd fe5e 	bl	801575c <ld_word>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aaa:	891b      	ldrh	r3, [r3, #8]
 8017aac:	f003 030f 	and.w	r3, r3, #15
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d001      	beq.n	8017aba <find_volume+0x252>
 8017ab6:	230d      	movs	r3, #13
 8017ab8:	e11b      	b.n	8017cf2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017abc:	3334      	adds	r3, #52	; 0x34
 8017abe:	3313      	adds	r3, #19
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7fd fe4b 	bl	801575c <ld_word>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d106      	bne.n	8017ade <find_volume+0x276>
 8017ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad2:	3334      	adds	r3, #52	; 0x34
 8017ad4:	3320      	adds	r3, #32
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7fd fe58 	bl	801578c <ld_dword>
 8017adc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae0:	3334      	adds	r3, #52	; 0x34
 8017ae2:	330e      	adds	r3, #14
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f7fd fe39 	bl	801575c <ld_word>
 8017aea:	4603      	mov	r3, r0
 8017aec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d101      	bne.n	8017af8 <find_volume+0x290>
 8017af4:	230d      	movs	r3, #13
 8017af6:	e0fc      	b.n	8017cf2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017af8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017afc:	4413      	add	r3, r2
 8017afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b00:	8912      	ldrh	r2, [r2, #8]
 8017b02:	0912      	lsrs	r2, r2, #4
 8017b04:	b292      	uxth	r2, r2
 8017b06:	4413      	add	r3, r2
 8017b08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	d201      	bcs.n	8017b16 <find_volume+0x2ae>
 8017b12:	230d      	movs	r3, #13
 8017b14:	e0ed      	b.n	8017cf2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b1a:	1ad3      	subs	r3, r2, r3
 8017b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b1e:	8952      	ldrh	r2, [r2, #10]
 8017b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d103      	bne.n	8017b34 <find_volume+0x2cc>
 8017b2c:	230d      	movs	r3, #13
 8017b2e:	e0e0      	b.n	8017cf2 <find_volume+0x48a>
 8017b30:	20000d7c 	.word	0x20000d7c
		fmt = FS_FAT32;
 8017b34:	2303      	movs	r3, #3
 8017b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d802      	bhi.n	8017b4a <find_volume+0x2e2>
 8017b44:	2302      	movs	r3, #2
 8017b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017b50:	4293      	cmp	r3, r2
 8017b52:	d802      	bhi.n	8017b5a <find_volume+0x2f2>
 8017b54:	2301      	movs	r3, #1
 8017b56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5c:	1c9a      	adds	r2, r3, #2
 8017b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b60:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8017b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017b66:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017b68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b6c:	441a      	add	r2, r3
 8017b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b70:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8017b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b76:	441a      	add	r2, r3
 8017b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8017b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b80:	2b03      	cmp	r3, #3
 8017b82:	d11e      	bne.n	8017bc2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b86:	3334      	adds	r3, #52	; 0x34
 8017b88:	332a      	adds	r3, #42	; 0x2a
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7fd fde6 	bl	801575c <ld_word>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d001      	beq.n	8017b9a <find_volume+0x332>
 8017b96:	230d      	movs	r3, #13
 8017b98:	e0ab      	b.n	8017cf2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9c:	891b      	ldrh	r3, [r3, #8]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d001      	beq.n	8017ba6 <find_volume+0x33e>
 8017ba2:	230d      	movs	r3, #13
 8017ba4:	e0a5      	b.n	8017cf2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba8:	3334      	adds	r3, #52	; 0x34
 8017baa:	332c      	adds	r3, #44	; 0x2c
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7fd fded 	bl	801578c <ld_dword>
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	699b      	ldr	r3, [r3, #24]
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8017bc0:	e01f      	b.n	8017c02 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc4:	891b      	ldrh	r3, [r3, #8]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d101      	bne.n	8017bce <find_volume+0x366>
 8017bca:	230d      	movs	r3, #13
 8017bcc:	e091      	b.n	8017cf2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bd4:	441a      	add	r2, r3
 8017bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bde:	2b02      	cmp	r3, #2
 8017be0:	d103      	bne.n	8017bea <find_volume+0x382>
 8017be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be4:	699b      	ldr	r3, [r3, #24]
 8017be6:	005b      	lsls	r3, r3, #1
 8017be8:	e00a      	b.n	8017c00 <find_volume+0x398>
 8017bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bec:	699a      	ldr	r2, [r3, #24]
 8017bee:	4613      	mov	r3, r2
 8017bf0:	005b      	lsls	r3, r3, #1
 8017bf2:	4413      	add	r3, r2
 8017bf4:	085a      	lsrs	r2, r3, #1
 8017bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf8:	699b      	ldr	r3, [r3, #24]
 8017bfa:	f003 0301 	and.w	r3, r3, #1
 8017bfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017c00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c04:	69da      	ldr	r2, [r3, #28]
 8017c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017c0c:	0a5b      	lsrs	r3, r3, #9
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d201      	bcs.n	8017c16 <find_volume+0x3ae>
 8017c12:	230d      	movs	r3, #13
 8017c14:	e06d      	b.n	8017cf2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c18:	f04f 32ff 	mov.w	r2, #4294967295
 8017c1c:	615a      	str	r2, [r3, #20]
 8017c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c20:	695a      	ldr	r2, [r3, #20]
 8017c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c24:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8017c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c28:	2280      	movs	r2, #128	; 0x80
 8017c2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c30:	2b03      	cmp	r3, #3
 8017c32:	d149      	bne.n	8017cc8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c36:	3334      	adds	r3, #52	; 0x34
 8017c38:	3330      	adds	r3, #48	; 0x30
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7fd fd8e 	bl	801575c <ld_word>
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b01      	cmp	r3, #1
 8017c44:	d140      	bne.n	8017cc8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c48:	3301      	adds	r3, #1
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c4e:	f7fe f835 	bl	8015cbc <move_window>
 8017c52:	4603      	mov	r3, r0
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d137      	bne.n	8017cc8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c60:	3334      	adds	r3, #52	; 0x34
 8017c62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7fd fd78 	bl	801575c <ld_word>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	461a      	mov	r2, r3
 8017c70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d127      	bne.n	8017cc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c7a:	3334      	adds	r3, #52	; 0x34
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7fd fd85 	bl	801578c <ld_dword>
 8017c82:	4603      	mov	r3, r0
 8017c84:	4a1d      	ldr	r2, [pc, #116]	; (8017cfc <find_volume+0x494>)
 8017c86:	4293      	cmp	r3, r2
 8017c88:	d11e      	bne.n	8017cc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8c:	3334      	adds	r3, #52	; 0x34
 8017c8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017c92:	4618      	mov	r0, r3
 8017c94:	f7fd fd7a 	bl	801578c <ld_dword>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	4a19      	ldr	r2, [pc, #100]	; (8017d00 <find_volume+0x498>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d113      	bne.n	8017cc8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca2:	3334      	adds	r3, #52	; 0x34
 8017ca4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7fd fd6f 	bl	801578c <ld_dword>
 8017cae:	4602      	mov	r2, r0
 8017cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb6:	3334      	adds	r3, #52	; 0x34
 8017cb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fd fd65 	bl	801578c <ld_dword>
 8017cc2:	4602      	mov	r2, r0
 8017cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017cce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017cd0:	4b0c      	ldr	r3, [pc, #48]	; (8017d04 <find_volume+0x49c>)
 8017cd2:	881b      	ldrh	r3, [r3, #0]
 8017cd4:	3301      	adds	r3, #1
 8017cd6:	b29a      	uxth	r2, r3
 8017cd8:	4b0a      	ldr	r3, [pc, #40]	; (8017d04 <find_volume+0x49c>)
 8017cda:	801a      	strh	r2, [r3, #0]
 8017cdc:	4b09      	ldr	r3, [pc, #36]	; (8017d04 <find_volume+0x49c>)
 8017cde:	881a      	ldrh	r2, [r3, #0]
 8017ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8017ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce6:	4a08      	ldr	r2, [pc, #32]	; (8017d08 <find_volume+0x4a0>)
 8017ce8:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017cea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017cec:	f7fd ff7e 	bl	8015bec <clear_lock>
#endif
	return FR_OK;
 8017cf0:	2300      	movs	r3, #0
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3758      	adds	r7, #88	; 0x58
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	41615252 	.word	0x41615252
 8017d00:	61417272 	.word	0x61417272
 8017d04:	20000d80 	.word	0x20000d80
 8017d08:	20000ec4 	.word	0x20000ec4

08017d0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017d16:	2309      	movs	r3, #9
 8017d18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d01c      	beq.n	8017d5a <validate+0x4e>
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d018      	beq.n	8017d5a <validate+0x4e>
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d013      	beq.n	8017d5a <validate+0x4e>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	889a      	ldrh	r2, [r3, #4]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	88db      	ldrh	r3, [r3, #6]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d10c      	bne.n	8017d5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	785b      	ldrb	r3, [r3, #1]
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7fd fc62 	bl	8015610 <disk_status>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	f003 0301 	and.w	r3, r3, #1
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d101      	bne.n	8017d5a <validate+0x4e>
			res = FR_OK;
 8017d56:	2300      	movs	r3, #0
 8017d58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017d5a:	7bfb      	ldrb	r3, [r7, #15]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d102      	bne.n	8017d66 <validate+0x5a>
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	e000      	b.n	8017d68 <validate+0x5c>
 8017d66:	2300      	movs	r3, #0
 8017d68:	683a      	ldr	r2, [r7, #0]
 8017d6a:	6013      	str	r3, [r2, #0]
	return res;
 8017d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3710      	adds	r7, #16
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
	...

08017d78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b088      	sub	sp, #32
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	4613      	mov	r3, r2
 8017d84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017d8a:	f107 0310 	add.w	r3, r7, #16
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7ff fccf 	bl	8017732 <get_ldnumber>
 8017d94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017d96:	69fb      	ldr	r3, [r7, #28]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	da01      	bge.n	8017da0 <f_mount+0x28>
 8017d9c:	230b      	movs	r3, #11
 8017d9e:	e02b      	b.n	8017df8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017da0:	4a17      	ldr	r2, [pc, #92]	; (8017e00 <f_mount+0x88>)
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017da8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017daa:	69bb      	ldr	r3, [r7, #24]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d005      	beq.n	8017dbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017db0:	69b8      	ldr	r0, [r7, #24]
 8017db2:	f7fd ff1b 	bl	8015bec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	2200      	movs	r2, #0
 8017dba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d002      	beq.n	8017dc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017dc8:	68fa      	ldr	r2, [r7, #12]
 8017dca:	490d      	ldr	r1, [pc, #52]	; (8017e00 <f_mount+0x88>)
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d002      	beq.n	8017dde <f_mount+0x66>
 8017dd8:	79fb      	ldrb	r3, [r7, #7]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d001      	beq.n	8017de2 <f_mount+0x6a>
 8017dde:	2300      	movs	r3, #0
 8017de0:	e00a      	b.n	8017df8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017de2:	f107 010c 	add.w	r1, r7, #12
 8017de6:	f107 0308 	add.w	r3, r7, #8
 8017dea:	2200      	movs	r2, #0
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7ff fd3b 	bl	8017868 <find_volume>
 8017df2:	4603      	mov	r3, r0
 8017df4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3720      	adds	r7, #32
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}
 8017e00:	20000d7c 	.word	0x20000d7c

08017e04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b09a      	sub	sp, #104	; 0x68
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	4613      	mov	r3, r2
 8017e10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d101      	bne.n	8017e1c <f_open+0x18>
 8017e18:	2309      	movs	r3, #9
 8017e1a:	e1ad      	b.n	8018178 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017e1c:	79fb      	ldrb	r3, [r7, #7]
 8017e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017e24:	79fa      	ldrb	r2, [r7, #7]
 8017e26:	f107 0110 	add.w	r1, r7, #16
 8017e2a:	f107 0308 	add.w	r3, r7, #8
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7ff fd1a 	bl	8017868 <find_volume>
 8017e34:	4603      	mov	r3, r0
 8017e36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8017e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	f040 8191 	bne.w	8018166 <f_open+0x362>
		dj.obj.fs = fs;
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017e48:	68ba      	ldr	r2, [r7, #8]
 8017e4a:	f107 0314 	add.w	r3, r7, #20
 8017e4e:	4611      	mov	r1, r2
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7ff fbfd 	bl	8017650 <follow_path>
 8017e56:	4603      	mov	r3, r0
 8017e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d11a      	bne.n	8017e9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017e68:	b25b      	sxtb	r3, r3
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	da03      	bge.n	8017e76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8017e6e:	2306      	movs	r3, #6
 8017e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017e74:	e011      	b.n	8017e9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017e76:	79fb      	ldrb	r3, [r7, #7]
 8017e78:	f023 0301 	bic.w	r3, r3, #1
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	bf14      	ite	ne
 8017e80:	2301      	movne	r3, #1
 8017e82:	2300      	moveq	r3, #0
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	461a      	mov	r2, r3
 8017e88:	f107 0314 	add.w	r3, r7, #20
 8017e8c:	4611      	mov	r1, r2
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fd fd64 	bl	801595c <chk_lock>
 8017e94:	4603      	mov	r3, r0
 8017e96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017e9a:	79fb      	ldrb	r3, [r7, #7]
 8017e9c:	f003 031c 	and.w	r3, r3, #28
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d07f      	beq.n	8017fa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d017      	beq.n	8017edc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017eac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017eb0:	2b04      	cmp	r3, #4
 8017eb2:	d10e      	bne.n	8017ed2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017eb4:	f7fd fdae 	bl	8015a14 <enq_lock>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d006      	beq.n	8017ecc <f_open+0xc8>
 8017ebe:	f107 0314 	add.w	r3, r7, #20
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f7fe ff94 	bl	8016df0 <dir_register>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	e000      	b.n	8017ece <f_open+0xca>
 8017ecc:	2312      	movs	r3, #18
 8017ece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017ed2:	79fb      	ldrb	r3, [r7, #7]
 8017ed4:	f043 0308 	orr.w	r3, r3, #8
 8017ed8:	71fb      	strb	r3, [r7, #7]
 8017eda:	e010      	b.n	8017efe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017edc:	7ebb      	ldrb	r3, [r7, #26]
 8017ede:	f003 0311 	and.w	r3, r3, #17
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d003      	beq.n	8017eee <f_open+0xea>
					res = FR_DENIED;
 8017ee6:	2307      	movs	r3, #7
 8017ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017eec:	e007      	b.n	8017efe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017eee:	79fb      	ldrb	r3, [r7, #7]
 8017ef0:	f003 0304 	and.w	r3, r3, #4
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d002      	beq.n	8017efe <f_open+0xfa>
 8017ef8:	2308      	movs	r3, #8
 8017efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d168      	bne.n	8017fd8 <f_open+0x1d4>
 8017f06:	79fb      	ldrb	r3, [r7, #7]
 8017f08:	f003 0308 	and.w	r3, r3, #8
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d063      	beq.n	8017fd8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8017f10:	f7fd fc1c 	bl	801574c <get_fattime>
 8017f14:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f18:	330e      	adds	r3, #14
 8017f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f7fd fc73 	bl	8015808 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f24:	3316      	adds	r3, #22
 8017f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7fd fc6d 	bl	8015808 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f30:	330b      	adds	r3, #11
 8017f32:	2220      	movs	r2, #32
 8017f34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017f36:	693b      	ldr	r3, [r7, #16]
 8017f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f3a:	4611      	mov	r1, r2
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7fe fbc4 	bl	80166ca <ld_clust>
 8017f42:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017f48:	2200      	movs	r2, #0
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7fe fbdc 	bl	8016708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f52:	331c      	adds	r3, #28
 8017f54:	2100      	movs	r1, #0
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7fd fc56 	bl	8015808 <st_dword>
					fs->wflag = 1;
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	2201      	movs	r2, #1
 8017f60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d037      	beq.n	8017fd8 <f_open+0x1d4>
						dw = fs->winsect;
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f6c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8017f6e:	f107 0314 	add.w	r3, r7, #20
 8017f72:	2200      	movs	r2, #0
 8017f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7fe f8ef 	bl	801615a <remove_chain>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8017f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d126      	bne.n	8017fd8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8017f8a:	693b      	ldr	r3, [r7, #16]
 8017f8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f7fd fe94 	bl	8015cbc <move_window>
 8017f94:	4603      	mov	r3, r0
 8017f96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017f9a:	693b      	ldr	r3, [r7, #16]
 8017f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017f9e:	3a01      	subs	r2, #1
 8017fa0:	611a      	str	r2, [r3, #16]
 8017fa2:	e019      	b.n	8017fd8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d115      	bne.n	8017fd8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017fac:	7ebb      	ldrb	r3, [r7, #26]
 8017fae:	f003 0310 	and.w	r3, r3, #16
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d003      	beq.n	8017fbe <f_open+0x1ba>
					res = FR_NO_FILE;
 8017fb6:	2304      	movs	r3, #4
 8017fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017fbc:	e00c      	b.n	8017fd8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017fbe:	79fb      	ldrb	r3, [r7, #7]
 8017fc0:	f003 0302 	and.w	r3, r3, #2
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d007      	beq.n	8017fd8 <f_open+0x1d4>
 8017fc8:	7ebb      	ldrb	r3, [r7, #26]
 8017fca:	f003 0301 	and.w	r3, r3, #1
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d002      	beq.n	8017fd8 <f_open+0x1d4>
						res = FR_DENIED;
 8017fd2:	2307      	movs	r3, #7
 8017fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8017fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d128      	bne.n	8018032 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017fe0:	79fb      	ldrb	r3, [r7, #7]
 8017fe2:	f003 0308 	and.w	r3, r3, #8
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d003      	beq.n	8017ff2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8017fea:	79fb      	ldrb	r3, [r7, #7]
 8017fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018000:	79fb      	ldrb	r3, [r7, #7]
 8018002:	f023 0301 	bic.w	r3, r3, #1
 8018006:	2b00      	cmp	r3, #0
 8018008:	bf14      	ite	ne
 801800a:	2301      	movne	r3, #1
 801800c:	2300      	moveq	r3, #0
 801800e:	b2db      	uxtb	r3, r3
 8018010:	461a      	mov	r2, r3
 8018012:	f107 0314 	add.w	r3, r7, #20
 8018016:	4611      	mov	r1, r2
 8018018:	4618      	mov	r0, r3
 801801a:	f7fd fd1d 	bl	8015a58 <inc_lock>
 801801e:	4602      	mov	r2, r0
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	691b      	ldr	r3, [r3, #16]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d102      	bne.n	8018032 <f_open+0x22e>
 801802c:	2302      	movs	r3, #2
 801802e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018036:	2b00      	cmp	r3, #0
 8018038:	f040 8095 	bne.w	8018166 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018040:	4611      	mov	r1, r2
 8018042:	4618      	mov	r0, r3
 8018044:	f7fe fb41 	bl	80166ca <ld_clust>
 8018048:	4602      	mov	r2, r0
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801804e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018050:	331c      	adds	r3, #28
 8018052:	4618      	mov	r0, r3
 8018054:	f7fd fb9a 	bl	801578c <ld_dword>
 8018058:	4602      	mov	r2, r0
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2200      	movs	r2, #0
 8018062:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018064:	693a      	ldr	r2, [r7, #16]
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	88da      	ldrh	r2, [r3, #6]
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	79fa      	ldrb	r2, [r7, #7]
 8018076:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	2200      	movs	r2, #0
 801807c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	2200      	movs	r2, #0
 8018082:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	2200      	movs	r2, #0
 8018088:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	3330      	adds	r3, #48	; 0x30
 801808e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018092:	2100      	movs	r1, #0
 8018094:	4618      	mov	r0, r3
 8018096:	f7fd fc04 	bl	80158a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801809a:	79fb      	ldrb	r3, [r7, #7]
 801809c:	f003 0320 	and.w	r3, r3, #32
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d060      	beq.n	8018166 <f_open+0x362>
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d05c      	beq.n	8018166 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	68da      	ldr	r2, [r3, #12]
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80180b4:	693b      	ldr	r3, [r7, #16]
 80180b6:	895b      	ldrh	r3, [r3, #10]
 80180b8:	025b      	lsls	r3, r3, #9
 80180ba:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	689b      	ldr	r3, [r3, #8]
 80180c0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80180c8:	e016      	b.n	80180f8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7fd feaf 	bl	8015e32 <get_fat>
 80180d4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80180d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80180d8:	2b01      	cmp	r3, #1
 80180da:	d802      	bhi.n	80180e2 <f_open+0x2de>
 80180dc:	2302      	movs	r3, #2
 80180de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80180e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80180e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180e8:	d102      	bne.n	80180f0 <f_open+0x2ec>
 80180ea:	2301      	movs	r3, #1
 80180ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80180f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80180f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180f4:	1ad3      	subs	r3, r2, r3
 80180f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80180f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d103      	bne.n	8018108 <f_open+0x304>
 8018100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018104:	429a      	cmp	r2, r3
 8018106:	d8e0      	bhi.n	80180ca <f_open+0x2c6>
				}
				fp->clust = clst;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801810c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801810e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018112:	2b00      	cmp	r3, #0
 8018114:	d127      	bne.n	8018166 <f_open+0x362>
 8018116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801811c:	2b00      	cmp	r3, #0
 801811e:	d022      	beq.n	8018166 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018124:	4618      	mov	r0, r3
 8018126:	f7fd fe65 	bl	8015df4 <clust2sect>
 801812a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801812e:	2b00      	cmp	r3, #0
 8018130:	d103      	bne.n	801813a <f_open+0x336>
						res = FR_INT_ERR;
 8018132:	2302      	movs	r3, #2
 8018134:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018138:	e015      	b.n	8018166 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801813a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801813c:	0a5a      	lsrs	r2, r3, #9
 801813e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018140:	441a      	add	r2, r3
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	7858      	ldrb	r0, [r3, #1]
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	6a1a      	ldr	r2, [r3, #32]
 8018154:	2301      	movs	r3, #1
 8018156:	f7fd fa9b 	bl	8015690 <disk_read>
 801815a:	4603      	mov	r3, r0
 801815c:	2b00      	cmp	r3, #0
 801815e:	d002      	beq.n	8018166 <f_open+0x362>
 8018160:	2301      	movs	r3, #1
 8018162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801816a:	2b00      	cmp	r3, #0
 801816c:	d002      	beq.n	8018174 <f_open+0x370>
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2200      	movs	r2, #0
 8018172:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018174:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8018178:	4618      	mov	r0, r3
 801817a:	3768      	adds	r7, #104	; 0x68
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}

08018180 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b08e      	sub	sp, #56	; 0x38
 8018184:	af00      	add	r7, sp, #0
 8018186:	60f8      	str	r0, [r7, #12]
 8018188:	60b9      	str	r1, [r7, #8]
 801818a:	607a      	str	r2, [r7, #4]
 801818c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	2200      	movs	r2, #0
 8018196:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	f107 0214 	add.w	r2, r7, #20
 801819e:	4611      	mov	r1, r2
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7ff fdb3 	bl	8017d0c <validate>
 80181a6:	4603      	mov	r3, r0
 80181a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80181ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d107      	bne.n	80181c4 <f_read+0x44>
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	7d5b      	ldrb	r3, [r3, #21]
 80181b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80181bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <f_read+0x4a>
 80181c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181c8:	e115      	b.n	80183f6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	7d1b      	ldrb	r3, [r3, #20]
 80181ce:	f003 0301 	and.w	r3, r3, #1
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d101      	bne.n	80181da <f_read+0x5a>
 80181d6:	2307      	movs	r3, #7
 80181d8:	e10d      	b.n	80183f6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	68da      	ldr	r2, [r3, #12]
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	699b      	ldr	r3, [r3, #24]
 80181e2:	1ad3      	subs	r3, r2, r3
 80181e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80181e6:	687a      	ldr	r2, [r7, #4]
 80181e8:	6a3b      	ldr	r3, [r7, #32]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	f240 80fe 	bls.w	80183ec <f_read+0x26c>
 80181f0:	6a3b      	ldr	r3, [r7, #32]
 80181f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80181f4:	e0fa      	b.n	80183ec <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	699b      	ldr	r3, [r3, #24]
 80181fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f040 80c6 	bne.w	8018390 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	699b      	ldr	r3, [r3, #24]
 8018208:	0a5b      	lsrs	r3, r3, #9
 801820a:	697a      	ldr	r2, [r7, #20]
 801820c:	8952      	ldrh	r2, [r2, #10]
 801820e:	3a01      	subs	r2, #1
 8018210:	4013      	ands	r3, r2
 8018212:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018214:	69fb      	ldr	r3, [r7, #28]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d12f      	bne.n	801827a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	699b      	ldr	r3, [r3, #24]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d103      	bne.n	801822a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	689b      	ldr	r3, [r3, #8]
 8018226:	633b      	str	r3, [r7, #48]	; 0x30
 8018228:	e013      	b.n	8018252 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801822e:	2b00      	cmp	r3, #0
 8018230:	d007      	beq.n	8018242 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	699b      	ldr	r3, [r3, #24]
 8018236:	4619      	mov	r1, r3
 8018238:	68f8      	ldr	r0, [r7, #12]
 801823a:	f7fe f88b 	bl	8016354 <clmt_clust>
 801823e:	6338      	str	r0, [r7, #48]	; 0x30
 8018240:	e007      	b.n	8018252 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018242:	68fa      	ldr	r2, [r7, #12]
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	69db      	ldr	r3, [r3, #28]
 8018248:	4619      	mov	r1, r3
 801824a:	4610      	mov	r0, r2
 801824c:	f7fd fdf1 	bl	8015e32 <get_fat>
 8018250:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018254:	2b01      	cmp	r3, #1
 8018256:	d804      	bhi.n	8018262 <f_read+0xe2>
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	2202      	movs	r2, #2
 801825c:	755a      	strb	r2, [r3, #21]
 801825e:	2302      	movs	r3, #2
 8018260:	e0c9      	b.n	80183f6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018268:	d104      	bne.n	8018274 <f_read+0xf4>
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	2201      	movs	r2, #1
 801826e:	755a      	strb	r2, [r3, #21]
 8018270:	2301      	movs	r3, #1
 8018272:	e0c0      	b.n	80183f6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018278:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801827a:	697a      	ldr	r2, [r7, #20]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	69db      	ldr	r3, [r3, #28]
 8018280:	4619      	mov	r1, r3
 8018282:	4610      	mov	r0, r2
 8018284:	f7fd fdb6 	bl	8015df4 <clust2sect>
 8018288:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d104      	bne.n	801829a <f_read+0x11a>
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2202      	movs	r2, #2
 8018294:	755a      	strb	r2, [r3, #21]
 8018296:	2302      	movs	r3, #2
 8018298:	e0ad      	b.n	80183f6 <f_read+0x276>
			sect += csect;
 801829a:	69ba      	ldr	r2, [r7, #24]
 801829c:	69fb      	ldr	r3, [r7, #28]
 801829e:	4413      	add	r3, r2
 80182a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	0a5b      	lsrs	r3, r3, #9
 80182a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80182a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d039      	beq.n	8018322 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80182ae:	69fa      	ldr	r2, [r7, #28]
 80182b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b2:	4413      	add	r3, r2
 80182b4:	697a      	ldr	r2, [r7, #20]
 80182b6:	8952      	ldrh	r2, [r2, #10]
 80182b8:	4293      	cmp	r3, r2
 80182ba:	d905      	bls.n	80182c8 <f_read+0x148>
					cc = fs->csize - csect;
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	895b      	ldrh	r3, [r3, #10]
 80182c0:	461a      	mov	r2, r3
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	1ad3      	subs	r3, r2, r3
 80182c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	7858      	ldrb	r0, [r3, #1]
 80182cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ce:	69ba      	ldr	r2, [r7, #24]
 80182d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182d2:	f7fd f9dd 	bl	8015690 <disk_read>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d004      	beq.n	80182e6 <f_read+0x166>
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	2201      	movs	r2, #1
 80182e0:	755a      	strb	r2, [r3, #21]
 80182e2:	2301      	movs	r3, #1
 80182e4:	e087      	b.n	80183f6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	7d1b      	ldrb	r3, [r3, #20]
 80182ea:	b25b      	sxtb	r3, r3
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	da14      	bge.n	801831a <f_read+0x19a>
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	6a1a      	ldr	r2, [r3, #32]
 80182f4:	69bb      	ldr	r3, [r7, #24]
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182fa:	429a      	cmp	r2, r3
 80182fc:	d90d      	bls.n	801831a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	6a1a      	ldr	r2, [r3, #32]
 8018302:	69bb      	ldr	r3, [r7, #24]
 8018304:	1ad3      	subs	r3, r2, r3
 8018306:	025b      	lsls	r3, r3, #9
 8018308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801830a:	18d0      	adds	r0, r2, r3
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	3330      	adds	r3, #48	; 0x30
 8018310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018314:	4619      	mov	r1, r3
 8018316:	f7fd faa3 	bl	8015860 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801831c:	025b      	lsls	r3, r3, #9
 801831e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018320:	e050      	b.n	80183c4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	6a1b      	ldr	r3, [r3, #32]
 8018326:	69ba      	ldr	r2, [r7, #24]
 8018328:	429a      	cmp	r2, r3
 801832a:	d02e      	beq.n	801838a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	7d1b      	ldrb	r3, [r3, #20]
 8018330:	b25b      	sxtb	r3, r3
 8018332:	2b00      	cmp	r3, #0
 8018334:	da18      	bge.n	8018368 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018336:	697b      	ldr	r3, [r7, #20]
 8018338:	7858      	ldrb	r0, [r3, #1]
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	6a1a      	ldr	r2, [r3, #32]
 8018344:	2301      	movs	r3, #1
 8018346:	f7fd f9c3 	bl	80156d0 <disk_write>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d004      	beq.n	801835a <f_read+0x1da>
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	2201      	movs	r2, #1
 8018354:	755a      	strb	r2, [r3, #21]
 8018356:	2301      	movs	r3, #1
 8018358:	e04d      	b.n	80183f6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	7d1b      	ldrb	r3, [r3, #20]
 801835e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018362:	b2da      	uxtb	r2, r3
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	7858      	ldrb	r0, [r3, #1]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018372:	2301      	movs	r3, #1
 8018374:	69ba      	ldr	r2, [r7, #24]
 8018376:	f7fd f98b 	bl	8015690 <disk_read>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	d004      	beq.n	801838a <f_read+0x20a>
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2201      	movs	r2, #1
 8018384:	755a      	strb	r2, [r3, #21]
 8018386:	2301      	movs	r3, #1
 8018388:	e035      	b.n	80183f6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	69ba      	ldr	r2, [r7, #24]
 801838e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	699b      	ldr	r3, [r3, #24]
 8018394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018398:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801839c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d901      	bls.n	80183aa <f_read+0x22a>
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	699b      	ldr	r3, [r3, #24]
 80183b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80183b8:	4413      	add	r3, r2
 80183ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183bc:	4619      	mov	r1, r3
 80183be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183c0:	f7fd fa4e 	bl	8015860 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80183c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c8:	4413      	add	r3, r2
 80183ca:	627b      	str	r3, [r7, #36]	; 0x24
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	699a      	ldr	r2, [r3, #24]
 80183d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d2:	441a      	add	r2, r3
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	619a      	str	r2, [r3, #24]
 80183d8:	683b      	ldr	r3, [r7, #0]
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183de:	441a      	add	r2, r3
 80183e0:	683b      	ldr	r3, [r7, #0]
 80183e2:	601a      	str	r2, [r3, #0]
 80183e4:	687a      	ldr	r2, [r7, #4]
 80183e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e8:	1ad3      	subs	r3, r2, r3
 80183ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f47f af01 	bne.w	80181f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80183f4:	2300      	movs	r3, #0
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3738      	adds	r7, #56	; 0x38
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}

080183fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80183fe:	b580      	push	{r7, lr}
 8018400:	b08c      	sub	sp, #48	; 0x30
 8018402:	af00      	add	r7, sp, #0
 8018404:	60f8      	str	r0, [r7, #12]
 8018406:	60b9      	str	r1, [r7, #8]
 8018408:	607a      	str	r2, [r7, #4]
 801840a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	2200      	movs	r2, #0
 8018414:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	f107 0210 	add.w	r2, r7, #16
 801841c:	4611      	mov	r1, r2
 801841e:	4618      	mov	r0, r3
 8018420:	f7ff fc74 	bl	8017d0c <validate>
 8018424:	4603      	mov	r3, r0
 8018426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801842a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801842e:	2b00      	cmp	r3, #0
 8018430:	d107      	bne.n	8018442 <f_write+0x44>
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	7d5b      	ldrb	r3, [r3, #21]
 8018436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801843a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801843e:	2b00      	cmp	r3, #0
 8018440:	d002      	beq.n	8018448 <f_write+0x4a>
 8018442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018446:	e14b      	b.n	80186e0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	7d1b      	ldrb	r3, [r3, #20]
 801844c:	f003 0302 	and.w	r3, r3, #2
 8018450:	2b00      	cmp	r3, #0
 8018452:	d101      	bne.n	8018458 <f_write+0x5a>
 8018454:	2307      	movs	r3, #7
 8018456:	e143      	b.n	80186e0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	699a      	ldr	r2, [r3, #24]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	441a      	add	r2, r3
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	699b      	ldr	r3, [r3, #24]
 8018464:	429a      	cmp	r2, r3
 8018466:	f080 812d 	bcs.w	80186c4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	699b      	ldr	r3, [r3, #24]
 801846e:	43db      	mvns	r3, r3
 8018470:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018472:	e127      	b.n	80186c4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	699b      	ldr	r3, [r3, #24]
 8018478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801847c:	2b00      	cmp	r3, #0
 801847e:	f040 80e3 	bne.w	8018648 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	699b      	ldr	r3, [r3, #24]
 8018486:	0a5b      	lsrs	r3, r3, #9
 8018488:	693a      	ldr	r2, [r7, #16]
 801848a:	8952      	ldrh	r2, [r2, #10]
 801848c:	3a01      	subs	r2, #1
 801848e:	4013      	ands	r3, r2
 8018490:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018492:	69bb      	ldr	r3, [r7, #24]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d143      	bne.n	8018520 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	699b      	ldr	r3, [r3, #24]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d10c      	bne.n	80184ba <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	689b      	ldr	r3, [r3, #8]
 80184a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80184a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d11a      	bne.n	80184e2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	2100      	movs	r1, #0
 80184b0:	4618      	mov	r0, r3
 80184b2:	f7fd feb7 	bl	8016224 <create_chain>
 80184b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80184b8:	e013      	b.n	80184e2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d007      	beq.n	80184d2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	699b      	ldr	r3, [r3, #24]
 80184c6:	4619      	mov	r1, r3
 80184c8:	68f8      	ldr	r0, [r7, #12]
 80184ca:	f7fd ff43 	bl	8016354 <clmt_clust>
 80184ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80184d0:	e007      	b.n	80184e2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80184d2:	68fa      	ldr	r2, [r7, #12]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	69db      	ldr	r3, [r3, #28]
 80184d8:	4619      	mov	r1, r3
 80184da:	4610      	mov	r0, r2
 80184dc:	f7fd fea2 	bl	8016224 <create_chain>
 80184e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80184e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f000 80f2 	beq.w	80186ce <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80184ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ec:	2b01      	cmp	r3, #1
 80184ee:	d104      	bne.n	80184fa <f_write+0xfc>
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	2202      	movs	r2, #2
 80184f4:	755a      	strb	r2, [r3, #21]
 80184f6:	2302      	movs	r3, #2
 80184f8:	e0f2      	b.n	80186e0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80184fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018500:	d104      	bne.n	801850c <f_write+0x10e>
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	2201      	movs	r2, #1
 8018506:	755a      	strb	r2, [r3, #21]
 8018508:	2301      	movs	r3, #1
 801850a:	e0e9      	b.n	80186e0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018510:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	689b      	ldr	r3, [r3, #8]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d102      	bne.n	8018520 <f_write+0x122>
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801851e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	7d1b      	ldrb	r3, [r3, #20]
 8018524:	b25b      	sxtb	r3, r3
 8018526:	2b00      	cmp	r3, #0
 8018528:	da18      	bge.n	801855c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	7858      	ldrb	r0, [r3, #1]
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6a1a      	ldr	r2, [r3, #32]
 8018538:	2301      	movs	r3, #1
 801853a:	f7fd f8c9 	bl	80156d0 <disk_write>
 801853e:	4603      	mov	r3, r0
 8018540:	2b00      	cmp	r3, #0
 8018542:	d004      	beq.n	801854e <f_write+0x150>
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	2201      	movs	r2, #1
 8018548:	755a      	strb	r2, [r3, #21]
 801854a:	2301      	movs	r3, #1
 801854c:	e0c8      	b.n	80186e0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	7d1b      	ldrb	r3, [r3, #20]
 8018552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018556:	b2da      	uxtb	r2, r3
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801855c:	693a      	ldr	r2, [r7, #16]
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	69db      	ldr	r3, [r3, #28]
 8018562:	4619      	mov	r1, r3
 8018564:	4610      	mov	r0, r2
 8018566:	f7fd fc45 	bl	8015df4 <clust2sect>
 801856a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d104      	bne.n	801857c <f_write+0x17e>
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2202      	movs	r2, #2
 8018576:	755a      	strb	r2, [r3, #21]
 8018578:	2302      	movs	r3, #2
 801857a:	e0b1      	b.n	80186e0 <f_write+0x2e2>
			sect += csect;
 801857c:	697a      	ldr	r2, [r7, #20]
 801857e:	69bb      	ldr	r3, [r7, #24]
 8018580:	4413      	add	r3, r2
 8018582:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	0a5b      	lsrs	r3, r3, #9
 8018588:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d03c      	beq.n	801860a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018590:	69ba      	ldr	r2, [r7, #24]
 8018592:	6a3b      	ldr	r3, [r7, #32]
 8018594:	4413      	add	r3, r2
 8018596:	693a      	ldr	r2, [r7, #16]
 8018598:	8952      	ldrh	r2, [r2, #10]
 801859a:	4293      	cmp	r3, r2
 801859c:	d905      	bls.n	80185aa <f_write+0x1ac>
					cc = fs->csize - csect;
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	895b      	ldrh	r3, [r3, #10]
 80185a2:	461a      	mov	r2, r3
 80185a4:	69bb      	ldr	r3, [r7, #24]
 80185a6:	1ad3      	subs	r3, r2, r3
 80185a8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80185aa:	693b      	ldr	r3, [r7, #16]
 80185ac:	7858      	ldrb	r0, [r3, #1]
 80185ae:	6a3b      	ldr	r3, [r7, #32]
 80185b0:	697a      	ldr	r2, [r7, #20]
 80185b2:	69f9      	ldr	r1, [r7, #28]
 80185b4:	f7fd f88c 	bl	80156d0 <disk_write>
 80185b8:	4603      	mov	r3, r0
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d004      	beq.n	80185c8 <f_write+0x1ca>
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2201      	movs	r2, #1
 80185c2:	755a      	strb	r2, [r3, #21]
 80185c4:	2301      	movs	r3, #1
 80185c6:	e08b      	b.n	80186e0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	6a1a      	ldr	r2, [r3, #32]
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	1ad3      	subs	r3, r2, r3
 80185d0:	6a3a      	ldr	r2, [r7, #32]
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d915      	bls.n	8018602 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6a1a      	ldr	r2, [r3, #32]
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	1ad3      	subs	r3, r2, r3
 80185e4:	025b      	lsls	r3, r3, #9
 80185e6:	69fa      	ldr	r2, [r7, #28]
 80185e8:	4413      	add	r3, r2
 80185ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80185ee:	4619      	mov	r1, r3
 80185f0:	f7fd f936 	bl	8015860 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	7d1b      	ldrb	r3, [r3, #20]
 80185f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80185fc:	b2da      	uxtb	r2, r3
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018602:	6a3b      	ldr	r3, [r7, #32]
 8018604:	025b      	lsls	r3, r3, #9
 8018606:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018608:	e03f      	b.n	801868a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	6a1b      	ldr	r3, [r3, #32]
 801860e:	697a      	ldr	r2, [r7, #20]
 8018610:	429a      	cmp	r2, r3
 8018612:	d016      	beq.n	8018642 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	699a      	ldr	r2, [r3, #24]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801861c:	429a      	cmp	r2, r3
 801861e:	d210      	bcs.n	8018642 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018620:	693b      	ldr	r3, [r7, #16]
 8018622:	7858      	ldrb	r0, [r3, #1]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801862a:	2301      	movs	r3, #1
 801862c:	697a      	ldr	r2, [r7, #20]
 801862e:	f7fd f82f 	bl	8015690 <disk_read>
 8018632:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018634:	2b00      	cmp	r3, #0
 8018636:	d004      	beq.n	8018642 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2201      	movs	r2, #1
 801863c:	755a      	strb	r2, [r3, #21]
 801863e:	2301      	movs	r3, #1
 8018640:	e04e      	b.n	80186e0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	697a      	ldr	r2, [r7, #20]
 8018646:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	699b      	ldr	r3, [r3, #24]
 801864c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018650:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018654:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	429a      	cmp	r2, r3
 801865c:	d901      	bls.n	8018662 <f_write+0x264>
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	699b      	ldr	r3, [r3, #24]
 801866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018670:	4413      	add	r3, r2
 8018672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018674:	69f9      	ldr	r1, [r7, #28]
 8018676:	4618      	mov	r0, r3
 8018678:	f7fd f8f2 	bl	8015860 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	7d1b      	ldrb	r3, [r3, #20]
 8018680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018684:	b2da      	uxtb	r2, r3
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801868a:	69fa      	ldr	r2, [r7, #28]
 801868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868e:	4413      	add	r3, r2
 8018690:	61fb      	str	r3, [r7, #28]
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	699a      	ldr	r2, [r3, #24]
 8018696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018698:	441a      	add	r2, r3
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	619a      	str	r2, [r3, #24]
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	68da      	ldr	r2, [r3, #12]
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	699b      	ldr	r3, [r3, #24]
 80186a6:	429a      	cmp	r2, r3
 80186a8:	bf38      	it	cc
 80186aa:	461a      	movcc	r2, r3
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	60da      	str	r2, [r3, #12]
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	681a      	ldr	r2, [r3, #0]
 80186b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b6:	441a      	add	r2, r3
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	601a      	str	r2, [r3, #0]
 80186bc:	687a      	ldr	r2, [r7, #4]
 80186be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c0:	1ad3      	subs	r3, r2, r3
 80186c2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	f47f aed4 	bne.w	8018474 <f_write+0x76>
 80186cc:	e000      	b.n	80186d0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80186ce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	7d1b      	ldrb	r3, [r3, #20]
 80186d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186d8:	b2da      	uxtb	r2, r3
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80186de:	2300      	movs	r3, #0
}
 80186e0:	4618      	mov	r0, r3
 80186e2:	3730      	adds	r7, #48	; 0x30
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}

080186e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b086      	sub	sp, #24
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f107 0208 	add.w	r2, r7, #8
 80186f6:	4611      	mov	r1, r2
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7ff fb07 	bl	8017d0c <validate>
 80186fe:	4603      	mov	r3, r0
 8018700:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018702:	7dfb      	ldrb	r3, [r7, #23]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d168      	bne.n	80187da <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	7d1b      	ldrb	r3, [r3, #20]
 801870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018710:	2b00      	cmp	r3, #0
 8018712:	d062      	beq.n	80187da <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	7d1b      	ldrb	r3, [r3, #20]
 8018718:	b25b      	sxtb	r3, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	da15      	bge.n	801874a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801871e:	68bb      	ldr	r3, [r7, #8]
 8018720:	7858      	ldrb	r0, [r3, #1]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	6a1a      	ldr	r2, [r3, #32]
 801872c:	2301      	movs	r3, #1
 801872e:	f7fc ffcf 	bl	80156d0 <disk_write>
 8018732:	4603      	mov	r3, r0
 8018734:	2b00      	cmp	r3, #0
 8018736:	d001      	beq.n	801873c <f_sync+0x54>
 8018738:	2301      	movs	r3, #1
 801873a:	e04f      	b.n	80187dc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	7d1b      	ldrb	r3, [r3, #20]
 8018740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018744:	b2da      	uxtb	r2, r3
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801874a:	f7fc ffff 	bl	801574c <get_fattime>
 801874e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018750:	68ba      	ldr	r2, [r7, #8]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018756:	4619      	mov	r1, r3
 8018758:	4610      	mov	r0, r2
 801875a:	f7fd faaf 	bl	8015cbc <move_window>
 801875e:	4603      	mov	r3, r0
 8018760:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018762:	7dfb      	ldrb	r3, [r7, #23]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d138      	bne.n	80187da <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801876c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	330b      	adds	r3, #11
 8018772:	781a      	ldrb	r2, [r3, #0]
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	330b      	adds	r3, #11
 8018778:	f042 0220 	orr.w	r2, r2, #32
 801877c:	b2d2      	uxtb	r2, r2
 801877e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	6818      	ldr	r0, [r3, #0]
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	689b      	ldr	r3, [r3, #8]
 8018788:	461a      	mov	r2, r3
 801878a:	68f9      	ldr	r1, [r7, #12]
 801878c:	f7fd ffbc 	bl	8016708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	f103 021c 	add.w	r2, r3, #28
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	68db      	ldr	r3, [r3, #12]
 801879a:	4619      	mov	r1, r3
 801879c:	4610      	mov	r0, r2
 801879e:	f7fd f833 	bl	8015808 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	3316      	adds	r3, #22
 80187a6:	6939      	ldr	r1, [r7, #16]
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7fd f82d 	bl	8015808 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	3312      	adds	r3, #18
 80187b2:	2100      	movs	r1, #0
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fd f80c 	bl	80157d2 <st_word>
					fs->wflag = 1;
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	2201      	movs	r2, #1
 80187be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7fd faa8 	bl	8015d18 <sync_fs>
 80187c8:	4603      	mov	r3, r0
 80187ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	7d1b      	ldrb	r3, [r3, #20]
 80187d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80187d4:	b2da      	uxtb	r2, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80187da:	7dfb      	ldrb	r3, [r7, #23]
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3718      	adds	r7, #24
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}

080187e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b084      	sub	sp, #16
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80187ec:	6878      	ldr	r0, [r7, #4]
 80187ee:	f7ff ff7b 	bl	80186e8 <f_sync>
 80187f2:	4603      	mov	r3, r0
 80187f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80187f6:	7bfb      	ldrb	r3, [r7, #15]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d118      	bne.n	801882e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f107 0208 	add.w	r2, r7, #8
 8018802:	4611      	mov	r1, r2
 8018804:	4618      	mov	r0, r3
 8018806:	f7ff fa81 	bl	8017d0c <validate>
 801880a:	4603      	mov	r3, r0
 801880c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801880e:	7bfb      	ldrb	r3, [r7, #15]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d10c      	bne.n	801882e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	691b      	ldr	r3, [r3, #16]
 8018818:	4618      	mov	r0, r3
 801881a:	f7fd f9ab 	bl	8015b74 <dec_lock>
 801881e:	4603      	mov	r3, r0
 8018820:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018822:	7bfb      	ldrb	r3, [r7, #15]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d102      	bne.n	801882e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	2200      	movs	r2, #0
 801882c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018830:	4618      	mov	r0, r3
 8018832:	3710      	adds	r7, #16
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}

08018838 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b086      	sub	sp, #24
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d101      	bne.n	801884c <f_opendir+0x14>
 8018848:	2309      	movs	r3, #9
 801884a:	e064      	b.n	8018916 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8018850:	f107 010c 	add.w	r1, r7, #12
 8018854:	463b      	mov	r3, r7
 8018856:	2200      	movs	r2, #0
 8018858:	4618      	mov	r0, r3
 801885a:	f7ff f805 	bl	8017868 <find_volume>
 801885e:	4603      	mov	r3, r0
 8018860:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018862:	7dfb      	ldrb	r3, [r7, #23]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d14f      	bne.n	8018908 <f_opendir+0xd0>
		obj->fs = fs;
 8018868:	68fa      	ldr	r2, [r7, #12]
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	4619      	mov	r1, r3
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f7fe feec 	bl	8017650 <follow_path>
 8018878:	4603      	mov	r3, r0
 801887a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801887c:	7dfb      	ldrb	r3, [r7, #23]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d13d      	bne.n	80188fe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018888:	b25b      	sxtb	r3, r3
 801888a:	2b00      	cmp	r3, #0
 801888c:	db12      	blt.n	80188b4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801888e:	693b      	ldr	r3, [r7, #16]
 8018890:	799b      	ldrb	r3, [r3, #6]
 8018892:	f003 0310 	and.w	r3, r3, #16
 8018896:	2b00      	cmp	r3, #0
 8018898:	d00a      	beq.n	80188b0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6a1b      	ldr	r3, [r3, #32]
 80188a0:	4619      	mov	r1, r3
 80188a2:	4610      	mov	r0, r2
 80188a4:	f7fd ff11 	bl	80166ca <ld_clust>
 80188a8:	4602      	mov	r2, r0
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	609a      	str	r2, [r3, #8]
 80188ae:	e001      	b.n	80188b4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80188b0:	2305      	movs	r3, #5
 80188b2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80188b4:	7dfb      	ldrb	r3, [r7, #23]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d121      	bne.n	80188fe <f_opendir+0xc6>
				obj->id = fs->id;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	88da      	ldrh	r2, [r3, #6]
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80188c2:	2100      	movs	r1, #0
 80188c4:	6878      	ldr	r0, [r7, #4]
 80188c6:	f7fd fd79 	bl	80163bc <dir_sdi>
 80188ca:	4603      	mov	r3, r0
 80188cc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80188ce:	7dfb      	ldrb	r3, [r7, #23]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d114      	bne.n	80188fe <f_opendir+0xc6>
					if (obj->sclust) {
 80188d4:	693b      	ldr	r3, [r7, #16]
 80188d6:	689b      	ldr	r3, [r3, #8]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d00d      	beq.n	80188f8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80188dc:	2100      	movs	r1, #0
 80188de:	6878      	ldr	r0, [r7, #4]
 80188e0:	f7fd f8ba 	bl	8015a58 <inc_lock>
 80188e4:	4602      	mov	r2, r0
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	691b      	ldr	r3, [r3, #16]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d105      	bne.n	80188fe <f_opendir+0xc6>
 80188f2:	2312      	movs	r3, #18
 80188f4:	75fb      	strb	r3, [r7, #23]
 80188f6:	e002      	b.n	80188fe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80188f8:	693b      	ldr	r3, [r7, #16]
 80188fa:	2200      	movs	r2, #0
 80188fc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80188fe:	7dfb      	ldrb	r3, [r7, #23]
 8018900:	2b04      	cmp	r3, #4
 8018902:	d101      	bne.n	8018908 <f_opendir+0xd0>
 8018904:	2305      	movs	r3, #5
 8018906:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8018908:	7dfb      	ldrb	r3, [r7, #23]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d002      	beq.n	8018914 <f_opendir+0xdc>
 801890e:	693b      	ldr	r3, [r7, #16]
 8018910:	2200      	movs	r2, #0
 8018912:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018914:	7dfb      	ldrb	r3, [r7, #23]
}
 8018916:	4618      	mov	r0, r3
 8018918:	3718      	adds	r7, #24
 801891a:	46bd      	mov	sp, r7
 801891c:	bd80      	pop	{r7, pc}

0801891e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801891e:	b580      	push	{r7, lr}
 8018920:	b084      	sub	sp, #16
 8018922:	af00      	add	r7, sp, #0
 8018924:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f107 0208 	add.w	r2, r7, #8
 801892c:	4611      	mov	r1, r2
 801892e:	4618      	mov	r0, r3
 8018930:	f7ff f9ec 	bl	8017d0c <validate>
 8018934:	4603      	mov	r3, r0
 8018936:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018938:	7bfb      	ldrb	r3, [r7, #15]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d110      	bne.n	8018960 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d006      	beq.n	8018954 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	691b      	ldr	r3, [r3, #16]
 801894a:	4618      	mov	r0, r3
 801894c:	f7fd f912 	bl	8015b74 <dec_lock>
 8018950:	4603      	mov	r3, r0
 8018952:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8018954:	7bfb      	ldrb	r3, [r7, #15]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d102      	bne.n	8018960 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2200      	movs	r2, #0
 801895e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8018960:	7bfb      	ldrb	r3, [r7, #15]
}
 8018962:	4618      	mov	r0, r3
 8018964:	3710      	adds	r7, #16
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}

0801896a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801896a:	b580      	push	{r7, lr}
 801896c:	b084      	sub	sp, #16
 801896e:	af00      	add	r7, sp, #0
 8018970:	6078      	str	r0, [r7, #4]
 8018972:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f107 0208 	add.w	r2, r7, #8
 801897a:	4611      	mov	r1, r2
 801897c:	4618      	mov	r0, r3
 801897e:	f7ff f9c5 	bl	8017d0c <validate>
 8018982:	4603      	mov	r3, r0
 8018984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018986:	7bfb      	ldrb	r3, [r7, #15]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d126      	bne.n	80189da <f_readdir+0x70>
		if (!fno) {
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d106      	bne.n	80189a0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8018992:	2100      	movs	r1, #0
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f7fd fd11 	bl	80163bc <dir_sdi>
 801899a:	4603      	mov	r3, r0
 801899c:	73fb      	strb	r3, [r7, #15]
 801899e:	e01c      	b.n	80189da <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80189a0:	2100      	movs	r1, #0
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f7fe f8bd 	bl	8016b22 <dir_read>
 80189a8:	4603      	mov	r3, r0
 80189aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80189ac:	7bfb      	ldrb	r3, [r7, #15]
 80189ae:	2b04      	cmp	r3, #4
 80189b0:	d101      	bne.n	80189b6 <f_readdir+0x4c>
 80189b2:	2300      	movs	r3, #0
 80189b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80189b6:	7bfb      	ldrb	r3, [r7, #15]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d10e      	bne.n	80189da <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80189bc:	6839      	ldr	r1, [r7, #0]
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f7fe fb0e 	bl	8016fe0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80189c4:	2100      	movs	r1, #0
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f7fd fd73 	bl	80164b2 <dir_next>
 80189cc:	4603      	mov	r3, r0
 80189ce:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80189d0:	7bfb      	ldrb	r3, [r7, #15]
 80189d2:	2b04      	cmp	r3, #4
 80189d4:	d101      	bne.n	80189da <f_readdir+0x70>
 80189d6:	2300      	movs	r3, #0
 80189d8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80189da:	7bfb      	ldrb	r3, [r7, #15]
}
 80189dc:	4618      	mov	r0, r3
 80189de:	3710      	adds	r7, #16
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}

080189e4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b084      	sub	sp, #16
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80189ee:	6839      	ldr	r1, [r7, #0]
 80189f0:	6878      	ldr	r0, [r7, #4]
 80189f2:	f7ff ffba 	bl	801896a <f_readdir>
 80189f6:	4603      	mov	r3, r0
 80189f8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80189fa:	7bfb      	ldrb	r3, [r7, #15]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d114      	bne.n	8018a2a <f_findnext+0x46>
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d011      	beq.n	8018a2a <f_findnext+0x46>
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	7d9b      	ldrb	r3, [r3, #22]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d00d      	beq.n	8018a2a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	f103 0116 	add.w	r1, r3, #22
 8018a18:	2300      	movs	r3, #0
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	f7fe fbe4 	bl	80171e8 <pattern_matching>
 8018a20:	4603      	mov	r3, r0
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d100      	bne.n	8018a28 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8018a26:	e7e2      	b.n	80189ee <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8018a28:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8018a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3710      	adds	r7, #16
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b086      	sub	sp, #24
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	60f8      	str	r0, [r7, #12]
 8018a3c:	60b9      	str	r1, [r7, #8]
 8018a3e:	607a      	str	r2, [r7, #4]
 8018a40:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	683a      	ldr	r2, [r7, #0]
 8018a46:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8018a48:	6879      	ldr	r1, [r7, #4]
 8018a4a:	68f8      	ldr	r0, [r7, #12]
 8018a4c:	f7ff fef4 	bl	8018838 <f_opendir>
 8018a50:	4603      	mov	r3, r0
 8018a52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018a54:	7dfb      	ldrb	r3, [r7, #23]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d105      	bne.n	8018a66 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8018a5a:	68b9      	ldr	r1, [r7, #8]
 8018a5c:	68f8      	ldr	r0, [r7, #12]
 8018a5e:	f7ff ffc1 	bl	80189e4 <f_findnext>
 8018a62:	4603      	mov	r3, r0
 8018a64:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8018a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3718      	adds	r7, #24
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}

08018a70 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b098      	sub	sp, #96	; 0x60
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8018a78:	f107 0108 	add.w	r1, r7, #8
 8018a7c:	1d3b      	adds	r3, r7, #4
 8018a7e:	2202      	movs	r2, #2
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7fe fef1 	bl	8017868 <find_volume>
 8018a86:	4603      	mov	r3, r0
 8018a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8018a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	f040 80ec 	bne.w	8018c72 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8018a9a:	687a      	ldr	r2, [r7, #4]
 8018a9c:	f107 030c 	add.w	r3, r7, #12
 8018aa0:	4611      	mov	r1, r2
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7fe fdd4 	bl	8017650 <follow_path>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8018aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d102      	bne.n	8018abc <f_mkdir+0x4c>
 8018ab6:	2308      	movs	r3, #8
 8018ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8018abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018ac0:	2b04      	cmp	r3, #4
 8018ac2:	f040 80d6 	bne.w	8018c72 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8018ac6:	f107 030c 	add.w	r3, r7, #12
 8018aca:	2100      	movs	r1, #0
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7fd fba9 	bl	8016224 <create_chain>
 8018ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8018ad4:	68bb      	ldr	r3, [r7, #8]
 8018ad6:	895b      	ldrh	r3, [r3, #10]
 8018ad8:	025b      	lsls	r3, r3, #9
 8018ada:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8018adc:	2300      	movs	r3, #0
 8018ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8018ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d102      	bne.n	8018aee <f_mkdir+0x7e>
 8018ae8:	2307      	movs	r3, #7
 8018aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8018aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018af0:	2b01      	cmp	r3, #1
 8018af2:	d102      	bne.n	8018afa <f_mkdir+0x8a>
 8018af4:	2302      	movs	r3, #2
 8018af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b00:	d102      	bne.n	8018b08 <f_mkdir+0x98>
 8018b02:	2301      	movs	r3, #1
 8018b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8018b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d106      	bne.n	8018b1e <f_mkdir+0xae>
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7fd f88e 	bl	8015c34 <sync_window>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8018b1e:	f7fc fe15 	bl	801574c <get_fattime>
 8018b22:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8018b24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d16a      	bne.n	8018c02 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018b30:	4618      	mov	r0, r3
 8018b32:	f7fd f95f 	bl	8015df4 <clust2sect>
 8018b36:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	3334      	adds	r3, #52	; 0x34
 8018b3c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8018b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b42:	2100      	movs	r1, #0
 8018b44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018b46:	f7fc feac 	bl	80158a2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8018b4a:	220b      	movs	r2, #11
 8018b4c:	2120      	movs	r1, #32
 8018b4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018b50:	f7fc fea7 	bl	80158a2 <mem_set>
					dir[DIR_Name] = '.';
 8018b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b56:	222e      	movs	r2, #46	; 0x2e
 8018b58:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8018b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b5c:	330b      	adds	r3, #11
 8018b5e:	2210      	movs	r2, #16
 8018b60:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8018b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b64:	3316      	adds	r3, #22
 8018b66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7fc fe4d 	bl	8015808 <st_dword>
					st_clust(fs, dir, dcl);
 8018b6e:	68bb      	ldr	r3, [r7, #8]
 8018b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7fd fdc7 	bl	8016708 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8018b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b7c:	3320      	adds	r3, #32
 8018b7e:	2220      	movs	r2, #32
 8018b80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7fc fe6c 	bl	8015860 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8018b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b8a:	3321      	adds	r3, #33	; 0x21
 8018b8c:	222e      	movs	r2, #46	; 0x2e
 8018b8e:	701a      	strb	r2, [r3, #0]
 8018b90:	697b      	ldr	r3, [r7, #20]
 8018b92:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8018b94:	68bb      	ldr	r3, [r7, #8]
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	2b03      	cmp	r3, #3
 8018b9a:	d106      	bne.n	8018baa <f_mkdir+0x13a>
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d101      	bne.n	8018baa <f_mkdir+0x13a>
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8018baa:	68b8      	ldr	r0, [r7, #8]
 8018bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018bae:	3320      	adds	r3, #32
 8018bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	f7fd fda8 	bl	8016708 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018bb8:	68bb      	ldr	r3, [r7, #8]
 8018bba:	895b      	ldrh	r3, [r3, #10]
 8018bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8018bbe:	e01b      	b.n	8018bf8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8018bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018bc2:	1c5a      	adds	r2, r3, #1
 8018bc4:	657a      	str	r2, [r7, #84]	; 0x54
 8018bc6:	68ba      	ldr	r2, [r7, #8]
 8018bc8:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	2201      	movs	r2, #1
 8018bce:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7fd f82e 	bl	8015c34 <sync_window>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8018bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d10c      	bne.n	8018c00 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8018be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018bea:	2100      	movs	r1, #0
 8018bec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018bee:	f7fc fe58 	bl	80158a2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018bf4:	3b01      	subs	r3, #1
 8018bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8018bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d1e0      	bne.n	8018bc0 <f_mkdir+0x150>
 8018bfe:	e000      	b.n	8018c02 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8018c00:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8018c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d107      	bne.n	8018c1a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8018c0a:	f107 030c 	add.w	r3, r7, #12
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fe f8ee 	bl	8016df0 <dir_register>
 8018c14:	4603      	mov	r3, r0
 8018c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8018c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d120      	bne.n	8018c64 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8018c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c24:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8018c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c28:	3316      	adds	r3, #22
 8018c2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f7fc fdeb 	bl	8015808 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018c38:	4618      	mov	r0, r3
 8018c3a:	f7fd fd65 	bl	8016708 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8018c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c40:	330b      	adds	r3, #11
 8018c42:	2210      	movs	r2, #16
 8018c44:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	2201      	movs	r2, #1
 8018c4a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8018c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d10e      	bne.n	8018c72 <f_mkdir+0x202>
					res = sync_fs(fs);
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7fd f85e 	bl	8015d18 <sync_fs>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018c62:	e006      	b.n	8018c72 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8018c64:	f107 030c 	add.w	r3, r7, #12
 8018c68:	2200      	movs	r2, #0
 8018c6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7fd fa74 	bl	801615a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8018c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	3760      	adds	r7, #96	; 0x60
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
	...

08018c80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018c80:	b480      	push	{r7}
 8018c82:	b087      	sub	sp, #28
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	60f8      	str	r0, [r7, #12]
 8018c88:	60b9      	str	r1, [r7, #8]
 8018c8a:	4613      	mov	r3, r2
 8018c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018c8e:	2301      	movs	r3, #1
 8018c90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018c92:	2300      	movs	r3, #0
 8018c94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018c96:	4b1f      	ldr	r3, [pc, #124]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018c98:	7a5b      	ldrb	r3, [r3, #9]
 8018c9a:	b2db      	uxtb	r3, r3
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d131      	bne.n	8018d04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018ca0:	4b1c      	ldr	r3, [pc, #112]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018ca2:	7a5b      	ldrb	r3, [r3, #9]
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	461a      	mov	r2, r3
 8018ca8:	4b1a      	ldr	r3, [pc, #104]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018caa:	2100      	movs	r1, #0
 8018cac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018cae:	4b19      	ldr	r3, [pc, #100]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cb0:	7a5b      	ldrb	r3, [r3, #9]
 8018cb2:	b2db      	uxtb	r3, r3
 8018cb4:	4a17      	ldr	r2, [pc, #92]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cb6:	009b      	lsls	r3, r3, #2
 8018cb8:	4413      	add	r3, r2
 8018cba:	68fa      	ldr	r2, [r7, #12]
 8018cbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018cbe:	4b15      	ldr	r3, [pc, #84]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cc0:	7a5b      	ldrb	r3, [r3, #9]
 8018cc2:	b2db      	uxtb	r3, r3
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	4b13      	ldr	r3, [pc, #76]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cc8:	4413      	add	r3, r2
 8018cca:	79fa      	ldrb	r2, [r7, #7]
 8018ccc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018cce:	4b11      	ldr	r3, [pc, #68]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cd0:	7a5b      	ldrb	r3, [r3, #9]
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	1c5a      	adds	r2, r3, #1
 8018cd6:	b2d1      	uxtb	r1, r2
 8018cd8:	4a0e      	ldr	r2, [pc, #56]	; (8018d14 <FATFS_LinkDriverEx+0x94>)
 8018cda:	7251      	strb	r1, [r2, #9]
 8018cdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018cde:	7dbb      	ldrb	r3, [r7, #22]
 8018ce0:	3330      	adds	r3, #48	; 0x30
 8018ce2:	b2da      	uxtb	r2, r3
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	3301      	adds	r3, #1
 8018cec:	223a      	movs	r2, #58	; 0x3a
 8018cee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	3302      	adds	r3, #2
 8018cf4:	222f      	movs	r2, #47	; 0x2f
 8018cf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	3303      	adds	r3, #3
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018d00:	2300      	movs	r3, #0
 8018d02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	371c      	adds	r7, #28
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr
 8018d12:	bf00      	nop
 8018d14:	200010c4 	.word	0x200010c4

08018d18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
 8018d20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018d22:	2200      	movs	r2, #0
 8018d24:	6839      	ldr	r1, [r7, #0]
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f7ff ffaa 	bl	8018c80 <FATFS_LinkDriverEx>
 8018d2c:	4603      	mov	r3, r0
}
 8018d2e:	4618      	mov	r0, r3
 8018d30:	3708      	adds	r7, #8
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
	...

08018d38 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b085      	sub	sp, #20
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
 8018d40:	460b      	mov	r3, r1
 8018d42:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8018d44:	2300      	movs	r3, #0
 8018d46:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8018d4c:	4b15      	ldr	r3, [pc, #84]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d4e:	7a5b      	ldrb	r3, [r3, #9]
 8018d50:	b2db      	uxtb	r3, r3
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d01e      	beq.n	8018d94 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	3b30      	subs	r3, #48	; 0x30
 8018d5c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8018d5e:	7bbb      	ldrb	r3, [r7, #14]
 8018d60:	4a10      	ldr	r2, [pc, #64]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	4413      	add	r3, r2
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d013      	beq.n	8018d94 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8018d6c:	7bbb      	ldrb	r3, [r7, #14]
 8018d6e:	4a0d      	ldr	r2, [pc, #52]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	4413      	add	r3, r2
 8018d74:	2200      	movs	r2, #0
 8018d76:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8018d78:	7bbb      	ldrb	r3, [r7, #14]
 8018d7a:	4a0a      	ldr	r2, [pc, #40]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d7c:	4413      	add	r3, r2
 8018d7e:	2200      	movs	r2, #0
 8018d80:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8018d82:	4b08      	ldr	r3, [pc, #32]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d84:	7a5b      	ldrb	r3, [r3, #9]
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	3b01      	subs	r3, #1
 8018d8a:	b2da      	uxtb	r2, r3
 8018d8c:	4b05      	ldr	r3, [pc, #20]	; (8018da4 <FATFS_UnLinkDriverEx+0x6c>)
 8018d8e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8018d90:	2300      	movs	r3, #0
 8018d92:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8018d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3714      	adds	r7, #20
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr
 8018da2:	bf00      	nop
 8018da4:	200010c4 	.word	0x200010c4

08018da8 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8018db0:	2100      	movs	r1, #0
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f7ff ffc0 	bl	8018d38 <FATFS_UnLinkDriverEx>
 8018db8:	4603      	mov	r3, r0
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3708      	adds	r7, #8
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
	...

08018dc4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018dc4:	b480      	push	{r7}
 8018dc6:	b085      	sub	sp, #20
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	4603      	mov	r3, r0
 8018dcc:	6039      	str	r1, [r7, #0]
 8018dce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018dd0:	88fb      	ldrh	r3, [r7, #6]
 8018dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8018dd4:	d802      	bhi.n	8018ddc <ff_convert+0x18>
		c = chr;
 8018dd6:	88fb      	ldrh	r3, [r7, #6]
 8018dd8:	81fb      	strh	r3, [r7, #14]
 8018dda:	e025      	b.n	8018e28 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d00b      	beq.n	8018dfa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018de2:	88fb      	ldrh	r3, [r7, #6]
 8018de4:	2bff      	cmp	r3, #255	; 0xff
 8018de6:	d805      	bhi.n	8018df4 <ff_convert+0x30>
 8018de8:	88fb      	ldrh	r3, [r7, #6]
 8018dea:	3b80      	subs	r3, #128	; 0x80
 8018dec:	4a12      	ldr	r2, [pc, #72]	; (8018e38 <ff_convert+0x74>)
 8018dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018df2:	e000      	b.n	8018df6 <ff_convert+0x32>
 8018df4:	2300      	movs	r3, #0
 8018df6:	81fb      	strh	r3, [r7, #14]
 8018df8:	e016      	b.n	8018e28 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	81fb      	strh	r3, [r7, #14]
 8018dfe:	e009      	b.n	8018e14 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018e00:	89fb      	ldrh	r3, [r7, #14]
 8018e02:	4a0d      	ldr	r2, [pc, #52]	; (8018e38 <ff_convert+0x74>)
 8018e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e08:	88fa      	ldrh	r2, [r7, #6]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d006      	beq.n	8018e1c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018e0e:	89fb      	ldrh	r3, [r7, #14]
 8018e10:	3301      	adds	r3, #1
 8018e12:	81fb      	strh	r3, [r7, #14]
 8018e14:	89fb      	ldrh	r3, [r7, #14]
 8018e16:	2b7f      	cmp	r3, #127	; 0x7f
 8018e18:	d9f2      	bls.n	8018e00 <ff_convert+0x3c>
 8018e1a:	e000      	b.n	8018e1e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018e1c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018e1e:	89fb      	ldrh	r3, [r7, #14]
 8018e20:	3380      	adds	r3, #128	; 0x80
 8018e22:	b29b      	uxth	r3, r3
 8018e24:	b2db      	uxtb	r3, r3
 8018e26:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018e28:	89fb      	ldrh	r3, [r7, #14]
}
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	3714      	adds	r7, #20
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e34:	4770      	bx	lr
 8018e36:	bf00      	nop
 8018e38:	08023344 	.word	0x08023344

08018e3c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b087      	sub	sp, #28
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	4603      	mov	r3, r0
 8018e44:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018e46:	88fb      	ldrh	r3, [r7, #6]
 8018e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018e4c:	d201      	bcs.n	8018e52 <ff_wtoupper+0x16>
 8018e4e:	4b3e      	ldr	r3, [pc, #248]	; (8018f48 <ff_wtoupper+0x10c>)
 8018e50:	e000      	b.n	8018e54 <ff_wtoupper+0x18>
 8018e52:	4b3e      	ldr	r3, [pc, #248]	; (8018f4c <ff_wtoupper+0x110>)
 8018e54:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	1c9a      	adds	r2, r3, #2
 8018e5a:	617a      	str	r2, [r7, #20]
 8018e5c:	881b      	ldrh	r3, [r3, #0]
 8018e5e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018e60:	8a7b      	ldrh	r3, [r7, #18]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d068      	beq.n	8018f38 <ff_wtoupper+0xfc>
 8018e66:	88fa      	ldrh	r2, [r7, #6]
 8018e68:	8a7b      	ldrh	r3, [r7, #18]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d364      	bcc.n	8018f38 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	1c9a      	adds	r2, r3, #2
 8018e72:	617a      	str	r2, [r7, #20]
 8018e74:	881b      	ldrh	r3, [r3, #0]
 8018e76:	823b      	strh	r3, [r7, #16]
 8018e78:	8a3b      	ldrh	r3, [r7, #16]
 8018e7a:	0a1b      	lsrs	r3, r3, #8
 8018e7c:	81fb      	strh	r3, [r7, #14]
 8018e7e:	8a3b      	ldrh	r3, [r7, #16]
 8018e80:	b2db      	uxtb	r3, r3
 8018e82:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8018e84:	88fa      	ldrh	r2, [r7, #6]
 8018e86:	8a79      	ldrh	r1, [r7, #18]
 8018e88:	8a3b      	ldrh	r3, [r7, #16]
 8018e8a:	440b      	add	r3, r1
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	da49      	bge.n	8018f24 <ff_wtoupper+0xe8>
			switch (cmd) {
 8018e90:	89fb      	ldrh	r3, [r7, #14]
 8018e92:	2b08      	cmp	r3, #8
 8018e94:	d84f      	bhi.n	8018f36 <ff_wtoupper+0xfa>
 8018e96:	a201      	add	r2, pc, #4	; (adr r2, 8018e9c <ff_wtoupper+0x60>)
 8018e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e9c:	08018ec1 	.word	0x08018ec1
 8018ea0:	08018ed3 	.word	0x08018ed3
 8018ea4:	08018ee9 	.word	0x08018ee9
 8018ea8:	08018ef1 	.word	0x08018ef1
 8018eac:	08018ef9 	.word	0x08018ef9
 8018eb0:	08018f01 	.word	0x08018f01
 8018eb4:	08018f09 	.word	0x08018f09
 8018eb8:	08018f11 	.word	0x08018f11
 8018ebc:	08018f19 	.word	0x08018f19
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018ec0:	88fa      	ldrh	r2, [r7, #6]
 8018ec2:	8a7b      	ldrh	r3, [r7, #18]
 8018ec4:	1ad3      	subs	r3, r2, r3
 8018ec6:	005b      	lsls	r3, r3, #1
 8018ec8:	697a      	ldr	r2, [r7, #20]
 8018eca:	4413      	add	r3, r2
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	80fb      	strh	r3, [r7, #6]
 8018ed0:	e027      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018ed2:	88fa      	ldrh	r2, [r7, #6]
 8018ed4:	8a7b      	ldrh	r3, [r7, #18]
 8018ed6:	1ad3      	subs	r3, r2, r3
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	f003 0301 	and.w	r3, r3, #1
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	88fa      	ldrh	r2, [r7, #6]
 8018ee2:	1ad3      	subs	r3, r2, r3
 8018ee4:	80fb      	strh	r3, [r7, #6]
 8018ee6:	e01c      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018ee8:	88fb      	ldrh	r3, [r7, #6]
 8018eea:	3b10      	subs	r3, #16
 8018eec:	80fb      	strh	r3, [r7, #6]
 8018eee:	e018      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018ef0:	88fb      	ldrh	r3, [r7, #6]
 8018ef2:	3b20      	subs	r3, #32
 8018ef4:	80fb      	strh	r3, [r7, #6]
 8018ef6:	e014      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018ef8:	88fb      	ldrh	r3, [r7, #6]
 8018efa:	3b30      	subs	r3, #48	; 0x30
 8018efc:	80fb      	strh	r3, [r7, #6]
 8018efe:	e010      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018f00:	88fb      	ldrh	r3, [r7, #6]
 8018f02:	3b1a      	subs	r3, #26
 8018f04:	80fb      	strh	r3, [r7, #6]
 8018f06:	e00c      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018f08:	88fb      	ldrh	r3, [r7, #6]
 8018f0a:	3308      	adds	r3, #8
 8018f0c:	80fb      	strh	r3, [r7, #6]
 8018f0e:	e008      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018f10:	88fb      	ldrh	r3, [r7, #6]
 8018f12:	3b50      	subs	r3, #80	; 0x50
 8018f14:	80fb      	strh	r3, [r7, #6]
 8018f16:	e004      	b.n	8018f22 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018f18:	88fb      	ldrh	r3, [r7, #6]
 8018f1a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018f1e:	80fb      	strh	r3, [r7, #6]
 8018f20:	bf00      	nop
			}
			break;
 8018f22:	e008      	b.n	8018f36 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018f24:	89fb      	ldrh	r3, [r7, #14]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d195      	bne.n	8018e56 <ff_wtoupper+0x1a>
 8018f2a:	8a3b      	ldrh	r3, [r7, #16]
 8018f2c:	005b      	lsls	r3, r3, #1
 8018f2e:	697a      	ldr	r2, [r7, #20]
 8018f30:	4413      	add	r3, r2
 8018f32:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018f34:	e78f      	b.n	8018e56 <ff_wtoupper+0x1a>
			break;
 8018f36:	bf00      	nop
	}

	return chr;
 8018f38:	88fb      	ldrh	r3, [r7, #6]
}
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	371c      	adds	r7, #28
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop
 8018f48:	08023444 	.word	0x08023444
 8018f4c:	08023638 	.word	0x08023638

08018f50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018f50:	b480      	push	{r7}
 8018f52:	b085      	sub	sp, #20
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	4603      	mov	r3, r0
 8018f58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018f62:	2b84      	cmp	r3, #132	; 0x84
 8018f64:	d005      	beq.n	8018f72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018f66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	4413      	add	r3, r2
 8018f6e:	3303      	adds	r3, #3
 8018f70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018f72:	68fb      	ldr	r3, [r7, #12]
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3714      	adds	r7, #20
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7e:	4770      	bx	lr

08018f80 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8018f80:	b480      	push	{r7}
 8018f82:	b083      	sub	sp, #12
 8018f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f86:	f3ef 8305 	mrs	r3, IPSR
 8018f8a:	607b      	str	r3, [r7, #4]
  return(result);
 8018f8c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	bf14      	ite	ne
 8018f92:	2301      	movne	r3, #1
 8018f94:	2300      	moveq	r3, #0
 8018f96:	b2db      	uxtb	r3, r3
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	370c      	adds	r7, #12
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa2:	4770      	bx	lr

08018fa4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018fa8:	f001 fd6c 	bl	801aa84 <vTaskStartScheduler>
  
  return osOK;
 8018fac:	2300      	movs	r3, #0
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	bd80      	pop	{r7, pc}

08018fb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8018fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fb4:	b087      	sub	sp, #28
 8018fb6:	af02      	add	r7, sp, #8
 8018fb8:	6078      	str	r0, [r7, #4]
 8018fba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	685c      	ldr	r4, [r3, #4]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018fc8:	b29e      	uxth	r6, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7ff ffbd 	bl	8018f50 <makeFreeRtosPriority>
 8018fd6:	4602      	mov	r2, r0
 8018fd8:	f107 030c 	add.w	r3, r7, #12
 8018fdc:	9301      	str	r3, [sp, #4]
 8018fde:	9200      	str	r2, [sp, #0]
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	4632      	mov	r2, r6
 8018fe4:	4629      	mov	r1, r5
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	f001 fa76 	bl	801a4d8 <xTaskCreate>
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b01      	cmp	r3, #1
 8018ff0:	d001      	beq.n	8018ff6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	e000      	b.n	8018ff8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8018ff6:	68fb      	ldr	r3, [r7, #12]
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3714      	adds	r7, #20
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019000 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	2b01      	cmp	r3, #1
 801900e:	d110      	bne.n	8019032 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8019010:	2203      	movs	r2, #3
 8019012:	2100      	movs	r1, #0
 8019014:	2001      	movs	r0, #1
 8019016:	f000 fbb7 	bl	8019788 <xQueueGenericCreate>
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d005      	beq.n	801902e <osSemaphoreCreate+0x2e>
 8019022:	2300      	movs	r3, #0
 8019024:	2200      	movs	r2, #0
 8019026:	2100      	movs	r1, #0
 8019028:	68f8      	ldr	r0, [r7, #12]
 801902a:	f000 fc3f 	bl	80198ac <xQueueGenericSend>
    return sema;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	e006      	b.n	8019040 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	683a      	ldr	r2, [r7, #0]
 8019036:	4611      	mov	r1, r2
 8019038:	4618      	mov	r0, r3
 801903a:	f000 fc04 	bl	8019846 <xQueueCreateCountingSemaphore>
 801903e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8019040:	4618      	mov	r0, r3
 8019042:	3710      	adds	r7, #16
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b084      	sub	sp, #16
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8019052:	2300      	movs	r3, #0
 8019054:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d101      	bne.n	8019060 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801905c:	2380      	movs	r3, #128	; 0x80
 801905e:	e03a      	b.n	80190d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8019060:	2300      	movs	r3, #0
 8019062:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801906a:	d103      	bne.n	8019074 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801906c:	f04f 33ff 	mov.w	r3, #4294967295
 8019070:	60fb      	str	r3, [r7, #12]
 8019072:	e009      	b.n	8019088 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d006      	beq.n	8019088 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d101      	bne.n	8019088 <osSemaphoreWait+0x40>
      ticks = 1;
 8019084:	2301      	movs	r3, #1
 8019086:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8019088:	f7ff ff7a 	bl	8018f80 <inHandlerMode>
 801908c:	4603      	mov	r3, r0
 801908e:	2b00      	cmp	r3, #0
 8019090:	d017      	beq.n	80190c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8019092:	f107 0308 	add.w	r3, r7, #8
 8019096:	461a      	mov	r2, r3
 8019098:	2100      	movs	r1, #0
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f001 f816 	bl	801a0cc <xQueueReceiveFromISR>
 80190a0:	4603      	mov	r3, r0
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d001      	beq.n	80190aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80190a6:	23ff      	movs	r3, #255	; 0xff
 80190a8:	e015      	b.n	80190d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d011      	beq.n	80190d4 <osSemaphoreWait+0x8c>
 80190b0:	4b0b      	ldr	r3, [pc, #44]	; (80190e0 <osSemaphoreWait+0x98>)
 80190b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190b6:	601a      	str	r2, [r3, #0]
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	f3bf 8f6f 	isb	sy
 80190c0:	e008      	b.n	80190d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80190c2:	68f9      	ldr	r1, [r7, #12]
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f000 fef5 	bl	8019eb4 <xQueueSemaphoreTake>
 80190ca:	4603      	mov	r3, r0
 80190cc:	2b01      	cmp	r3, #1
 80190ce:	d001      	beq.n	80190d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80190d0:	23ff      	movs	r3, #255	; 0xff
 80190d2:	e000      	b.n	80190d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80190d4:	2300      	movs	r3, #0
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3710      	adds	r7, #16
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}
 80190de:	bf00      	nop
 80190e0:	e000ed04 	.word	0xe000ed04

080190e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b084      	sub	sp, #16
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80190ec:	2300      	movs	r3, #0
 80190ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80190f0:	2300      	movs	r3, #0
 80190f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80190f4:	f7ff ff44 	bl	8018f80 <inHandlerMode>
 80190f8:	4603      	mov	r3, r0
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d016      	beq.n	801912c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80190fe:	f107 0308 	add.w	r3, r7, #8
 8019102:	4619      	mov	r1, r3
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	f000 fd67 	bl	8019bd8 <xQueueGiveFromISR>
 801910a:	4603      	mov	r3, r0
 801910c:	2b01      	cmp	r3, #1
 801910e:	d001      	beq.n	8019114 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8019110:	23ff      	movs	r3, #255	; 0xff
 8019112:	e017      	b.n	8019144 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d013      	beq.n	8019142 <osSemaphoreRelease+0x5e>
 801911a:	4b0c      	ldr	r3, [pc, #48]	; (801914c <osSemaphoreRelease+0x68>)
 801911c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019120:	601a      	str	r2, [r3, #0]
 8019122:	f3bf 8f4f 	dsb	sy
 8019126:	f3bf 8f6f 	isb	sy
 801912a:	e00a      	b.n	8019142 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801912c:	2300      	movs	r3, #0
 801912e:	2200      	movs	r2, #0
 8019130:	2100      	movs	r1, #0
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f000 fbba 	bl	80198ac <xQueueGenericSend>
 8019138:	4603      	mov	r3, r0
 801913a:	2b01      	cmp	r3, #1
 801913c:	d001      	beq.n	8019142 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801913e:	23ff      	movs	r3, #255	; 0xff
 8019140:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8019142:	68fb      	ldr	r3, [r7, #12]
}
 8019144:	4618      	mov	r0, r3
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}
 801914c:	e000ed04 	.word	0xe000ed04

08019150 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b086      	sub	sp, #24
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	3303      	adds	r3, #3
 801915e:	f023 0303 	bic.w	r3, r3, #3
 8019162:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8019164:	2014      	movs	r0, #20
 8019166:	f003 f85f 	bl	801c228 <pvPortMalloc>
 801916a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d046      	beq.n	8019200 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801917a:	68fa      	ldr	r2, [r7, #12]
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	2200      	movs	r2, #0
 8019184:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4618      	mov	r0, r3
 801918c:	f003 f84c 	bl	801c228 <pvPortMalloc>
 8019190:	4602      	mov	r2, r0
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d02b      	beq.n	80191f6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	68fa      	ldr	r2, [r7, #12]
 80191a4:	fb02 f303 	mul.w	r3, r2, r3
 80191a8:	4618      	mov	r0, r3
 80191aa:	f003 f83d 	bl	801c228 <pvPortMalloc>
 80191ae:	4602      	mov	r2, r0
 80191b0:	697b      	ldr	r3, [r7, #20]
 80191b2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d011      	beq.n	80191e0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80191bc:	2300      	movs	r3, #0
 80191be:	613b      	str	r3, [r7, #16]
 80191c0:	e008      	b.n	80191d4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	685a      	ldr	r2, [r3, #4]
 80191c6:	693b      	ldr	r3, [r7, #16]
 80191c8:	4413      	add	r3, r2
 80191ca:	2200      	movs	r2, #0
 80191cc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80191ce:	693b      	ldr	r3, [r7, #16]
 80191d0:	3301      	adds	r3, #1
 80191d2:	613b      	str	r3, [r7, #16]
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	693a      	ldr	r2, [r7, #16]
 80191da:	429a      	cmp	r2, r3
 80191dc:	d3f1      	bcc.n	80191c2 <osPoolCreate+0x72>
 80191de:	e00f      	b.n	8019200 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80191e0:	697b      	ldr	r3, [r7, #20]
 80191e2:	685b      	ldr	r3, [r3, #4]
 80191e4:	4618      	mov	r0, r3
 80191e6:	f003 f8e3 	bl	801c3b0 <vPortFree>
        vPortFree(thePool);
 80191ea:	6978      	ldr	r0, [r7, #20]
 80191ec:	f003 f8e0 	bl	801c3b0 <vPortFree>
        thePool = NULL;
 80191f0:	2300      	movs	r3, #0
 80191f2:	617b      	str	r3, [r7, #20]
 80191f4:	e004      	b.n	8019200 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80191f6:	6978      	ldr	r0, [r7, #20]
 80191f8:	f003 f8da 	bl	801c3b0 <vPortFree>
      thePool = NULL;
 80191fc:	2300      	movs	r3, #0
 80191fe:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8019200:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8019202:	4618      	mov	r0, r3
 8019204:	3718      	adds	r7, #24
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}

0801920a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801920a:	b580      	push	{r7, lr}
 801920c:	b08a      	sub	sp, #40	; 0x28
 801920e:	af00      	add	r7, sp, #0
 8019210:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8019212:	2300      	movs	r3, #0
 8019214:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8019216:	2300      	movs	r3, #0
 8019218:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801921a:	f7ff feb1 	bl	8018f80 <inHandlerMode>
 801921e:	4603      	mov	r3, r0
 8019220:	2b00      	cmp	r3, #0
 8019222:	d00e      	beq.n	8019242 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019224:	f3ef 8211 	mrs	r2, BASEPRI
 8019228:	f04f 0320 	mov.w	r3, #32
 801922c:	f383 8811 	msr	BASEPRI, r3
 8019230:	f3bf 8f6f 	isb	sy
 8019234:	f3bf 8f4f 	dsb	sy
 8019238:	617a      	str	r2, [r7, #20]
 801923a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801923c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801923e:	627b      	str	r3, [r7, #36]	; 0x24
 8019240:	e001      	b.n	8019246 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8019242:	f002 fecf 	bl	801bfe4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8019246:	2300      	movs	r3, #0
 8019248:	61fb      	str	r3, [r7, #28]
 801924a:	e029      	b.n	80192a0 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	691a      	ldr	r2, [r3, #16]
 8019250:	69fb      	ldr	r3, [r7, #28]
 8019252:	4413      	add	r3, r2
 8019254:	687a      	ldr	r2, [r7, #4]
 8019256:	6892      	ldr	r2, [r2, #8]
 8019258:	fbb3 f1f2 	udiv	r1, r3, r2
 801925c:	fb02 f201 	mul.w	r2, r2, r1
 8019260:	1a9b      	subs	r3, r3, r2
 8019262:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	685a      	ldr	r2, [r3, #4]
 8019268:	69bb      	ldr	r3, [r7, #24]
 801926a:	4413      	add	r3, r2
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d113      	bne.n	801929a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	685a      	ldr	r2, [r3, #4]
 8019276:	69bb      	ldr	r3, [r7, #24]
 8019278:	4413      	add	r3, r2
 801927a:	2201      	movs	r2, #1
 801927c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	4619      	mov	r1, r3
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	68db      	ldr	r3, [r3, #12]
 8019288:	69ba      	ldr	r2, [r7, #24]
 801928a:	fb02 f303 	mul.w	r3, r2, r3
 801928e:	440b      	add	r3, r1
 8019290:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	69ba      	ldr	r2, [r7, #24]
 8019296:	611a      	str	r2, [r3, #16]
      break;
 8019298:	e007      	b.n	80192aa <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801929a:	69fb      	ldr	r3, [r7, #28]
 801929c:	3301      	adds	r3, #1
 801929e:	61fb      	str	r3, [r7, #28]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	689b      	ldr	r3, [r3, #8]
 80192a4:	69fa      	ldr	r2, [r7, #28]
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d3d0      	bcc.n	801924c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80192aa:	f7ff fe69 	bl	8018f80 <inHandlerMode>
 80192ae:	4603      	mov	r3, r0
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d005      	beq.n	80192c0 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80192be:	e001      	b.n	80192c4 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80192c0:	f002 fec0 	bl	801c044 <vPortExitCritical>
  }
  
  return p;
 80192c4:	6a3b      	ldr	r3, [r7, #32]
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3728      	adds	r7, #40	; 0x28
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}

080192ce <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80192ce:	b480      	push	{r7}
 80192d0:	b085      	sub	sp, #20
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	6078      	str	r0, [r7, #4]
 80192d6:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d101      	bne.n	80192e2 <osPoolFree+0x14>
    return osErrorParameter;
 80192de:	2380      	movs	r3, #128	; 0x80
 80192e0:	e030      	b.n	8019344 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d101      	bne.n	80192ec <osPoolFree+0x1e>
    return osErrorParameter;
 80192e8:	2380      	movs	r3, #128	; 0x80
 80192ea:	e02b      	b.n	8019344 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	683a      	ldr	r2, [r7, #0]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d201      	bcs.n	80192fa <osPoolFree+0x2c>
    return osErrorParameter;
 80192f6:	2380      	movs	r3, #128	; 0x80
 80192f8:	e024      	b.n	8019344 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	6812      	ldr	r2, [r2, #0]
 8019300:	1a9b      	subs	r3, r3, r2
 8019302:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	68da      	ldr	r2, [r3, #12]
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	fbb3 f1f2 	udiv	r1, r3, r2
 801930e:	fb02 f201 	mul.w	r2, r2, r1
 8019312:	1a9b      	subs	r3, r3, r2
 8019314:	2b00      	cmp	r3, #0
 8019316:	d001      	beq.n	801931c <osPoolFree+0x4e>
    return osErrorParameter;
 8019318:	2380      	movs	r3, #128	; 0x80
 801931a:	e013      	b.n	8019344 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	68db      	ldr	r3, [r3, #12]
 8019320:	68fa      	ldr	r2, [r7, #12]
 8019322:	fbb2 f3f3 	udiv	r3, r2, r3
 8019326:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	68fa      	ldr	r2, [r7, #12]
 801932e:	429a      	cmp	r2, r3
 8019330:	d301      	bcc.n	8019336 <osPoolFree+0x68>
    return osErrorParameter;
 8019332:	2380      	movs	r3, #128	; 0x80
 8019334:	e006      	b.n	8019344 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	685a      	ldr	r2, [r3, #4]
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	4413      	add	r3, r2
 801933e:	2200      	movs	r2, #0
 8019340:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8019342:	2300      	movs	r3, #0
}
 8019344:	4618      	mov	r0, r3
 8019346:	3714      	adds	r7, #20
 8019348:	46bd      	mov	sp, r7
 801934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934e:	4770      	bx	lr

08019350 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6818      	ldr	r0, [r3, #0]
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	685b      	ldr	r3, [r3, #4]
 8019362:	2200      	movs	r2, #0
 8019364:	4619      	mov	r1, r3
 8019366:	f000 fa0f 	bl	8019788 <xQueueGenericCreate>
 801936a:	4603      	mov	r3, r0
#endif
}
 801936c:	4618      	mov	r0, r3
 801936e:	3708      	adds	r7, #8
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b086      	sub	sp, #24
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	60b9      	str	r1, [r7, #8]
 801937e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8019380:	2300      	movs	r3, #0
 8019382:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8019388:	697b      	ldr	r3, [r7, #20]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d101      	bne.n	8019392 <osMessagePut+0x1e>
    ticks = 1;
 801938e:	2301      	movs	r3, #1
 8019390:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8019392:	f7ff fdf5 	bl	8018f80 <inHandlerMode>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d018      	beq.n	80193ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801939c:	f107 0210 	add.w	r2, r7, #16
 80193a0:	f107 0108 	add.w	r1, r7, #8
 80193a4:	2300      	movs	r3, #0
 80193a6:	68f8      	ldr	r0, [r7, #12]
 80193a8:	f000 fb7e 	bl	8019aa8 <xQueueGenericSendFromISR>
 80193ac:	4603      	mov	r3, r0
 80193ae:	2b01      	cmp	r3, #1
 80193b0:	d001      	beq.n	80193b6 <osMessagePut+0x42>
      return osErrorOS;
 80193b2:	23ff      	movs	r3, #255	; 0xff
 80193b4:	e018      	b.n	80193e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80193b6:	693b      	ldr	r3, [r7, #16]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d014      	beq.n	80193e6 <osMessagePut+0x72>
 80193bc:	4b0c      	ldr	r3, [pc, #48]	; (80193f0 <osMessagePut+0x7c>)
 80193be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193c2:	601a      	str	r2, [r3, #0]
 80193c4:	f3bf 8f4f 	dsb	sy
 80193c8:	f3bf 8f6f 	isb	sy
 80193cc:	e00b      	b.n	80193e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80193ce:	f107 0108 	add.w	r1, r7, #8
 80193d2:	2300      	movs	r3, #0
 80193d4:	697a      	ldr	r2, [r7, #20]
 80193d6:	68f8      	ldr	r0, [r7, #12]
 80193d8:	f000 fa68 	bl	80198ac <xQueueGenericSend>
 80193dc:	4603      	mov	r3, r0
 80193de:	2b01      	cmp	r3, #1
 80193e0:	d001      	beq.n	80193e6 <osMessagePut+0x72>
      return osErrorOS;
 80193e2:	23ff      	movs	r3, #255	; 0xff
 80193e4:	e000      	b.n	80193e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80193e6:	2300      	movs	r3, #0
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3718      	adds	r7, #24
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	e000ed04 	.word	0xe000ed04

080193f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80193f4:	b590      	push	{r4, r7, lr}
 80193f6:	b08b      	sub	sp, #44	; 0x2c
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	60f8      	str	r0, [r7, #12]
 80193fc:	60b9      	str	r1, [r7, #8]
 80193fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8019404:	2300      	movs	r3, #0
 8019406:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d10a      	bne.n	8019424 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801940e:	2380      	movs	r3, #128	; 0x80
 8019410:	617b      	str	r3, [r7, #20]
    return event;
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	461c      	mov	r4, r3
 8019416:	f107 0314 	add.w	r3, r7, #20
 801941a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801941e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019422:	e054      	b.n	80194ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8019424:	2300      	movs	r3, #0
 8019426:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8019428:	2300      	movs	r3, #0
 801942a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019432:	d103      	bne.n	801943c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8019434:	f04f 33ff 	mov.w	r3, #4294967295
 8019438:	627b      	str	r3, [r7, #36]	; 0x24
 801943a:	e009      	b.n	8019450 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d006      	beq.n	8019450 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8019446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019448:	2b00      	cmp	r3, #0
 801944a:	d101      	bne.n	8019450 <osMessageGet+0x5c>
      ticks = 1;
 801944c:	2301      	movs	r3, #1
 801944e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8019450:	f7ff fd96 	bl	8018f80 <inHandlerMode>
 8019454:	4603      	mov	r3, r0
 8019456:	2b00      	cmp	r3, #0
 8019458:	d01c      	beq.n	8019494 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801945a:	f107 0220 	add.w	r2, r7, #32
 801945e:	f107 0314 	add.w	r3, r7, #20
 8019462:	3304      	adds	r3, #4
 8019464:	4619      	mov	r1, r3
 8019466:	68b8      	ldr	r0, [r7, #8]
 8019468:	f000 fe30 	bl	801a0cc <xQueueReceiveFromISR>
 801946c:	4603      	mov	r3, r0
 801946e:	2b01      	cmp	r3, #1
 8019470:	d102      	bne.n	8019478 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8019472:	2310      	movs	r3, #16
 8019474:	617b      	str	r3, [r7, #20]
 8019476:	e001      	b.n	801947c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8019478:	2300      	movs	r3, #0
 801947a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801947c:	6a3b      	ldr	r3, [r7, #32]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d01d      	beq.n	80194be <osMessageGet+0xca>
 8019482:	4b15      	ldr	r3, [pc, #84]	; (80194d8 <osMessageGet+0xe4>)
 8019484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019488:	601a      	str	r2, [r3, #0]
 801948a:	f3bf 8f4f 	dsb	sy
 801948e:	f3bf 8f6f 	isb	sy
 8019492:	e014      	b.n	80194be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8019494:	f107 0314 	add.w	r3, r7, #20
 8019498:	3304      	adds	r3, #4
 801949a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801949c:	4619      	mov	r1, r3
 801949e:	68b8      	ldr	r0, [r7, #8]
 80194a0:	f000 fc28 	bl	8019cf4 <xQueueReceive>
 80194a4:	4603      	mov	r3, r0
 80194a6:	2b01      	cmp	r3, #1
 80194a8:	d102      	bne.n	80194b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80194aa:	2310      	movs	r3, #16
 80194ac:	617b      	str	r3, [r7, #20]
 80194ae:	e006      	b.n	80194be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80194b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d101      	bne.n	80194ba <osMessageGet+0xc6>
 80194b6:	2300      	movs	r3, #0
 80194b8:	e000      	b.n	80194bc <osMessageGet+0xc8>
 80194ba:	2340      	movs	r3, #64	; 0x40
 80194bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	461c      	mov	r4, r3
 80194c2:	f107 0314 	add.w	r3, r7, #20
 80194c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80194ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80194ce:	68f8      	ldr	r0, [r7, #12]
 80194d0:	372c      	adds	r7, #44	; 0x2c
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd90      	pop	{r4, r7, pc}
 80194d6:	bf00      	nop
 80194d8:	e000ed04 	.word	0xe000ed04

080194dc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80194e0:	f001 ff08 	bl	801b2f4 <xTaskGetSchedulerState>
 80194e4:	4603      	mov	r3, r0
 80194e6:	2b01      	cmp	r3, #1
 80194e8:	d001      	beq.n	80194ee <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80194ea:	f002 fe0d 	bl	801c108 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80194ee:	bf00      	nop
 80194f0:	bd80      	pop	{r7, pc}

080194f2 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80194f2:	b580      	push	{r7, lr}
 80194f4:	b082      	sub	sp, #8
 80194f6:	af00      	add	r7, sp, #0
 80194f8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f001 f92e 	bl	801a75c <vTaskSuspend>
  
  return osOK;
 8019500:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8019502:	4618      	mov	r0, r3
 8019504:	3708      	adds	r7, #8
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
	...

0801950c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8019514:	f7ff fd34 	bl	8018f80 <inHandlerMode>
 8019518:	4603      	mov	r3, r0
 801951a:	2b00      	cmp	r3, #0
 801951c:	d00e      	beq.n	801953c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	f001 fa3e 	bl	801a9a0 <xTaskResumeFromISR>
 8019524:	4603      	mov	r3, r0
 8019526:	2b01      	cmp	r3, #1
 8019528:	d10b      	bne.n	8019542 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 801952a:	4b08      	ldr	r3, [pc, #32]	; (801954c <osThreadResume+0x40>)
 801952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019530:	601a      	str	r2, [r3, #0]
 8019532:	f3bf 8f4f 	dsb	sy
 8019536:	f3bf 8f6f 	isb	sy
 801953a:	e002      	b.n	8019542 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	f001 f9d1 	bl	801a8e4 <vTaskResume>
  }
  return osOK;
 8019542:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8019544:	4618      	mov	r0, r3
 8019546:	3708      	adds	r7, #8
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	e000ed04 	.word	0xe000ed04

08019550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019550:	b480      	push	{r7}
 8019552:	b083      	sub	sp, #12
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	f103 0208 	add.w	r2, r3, #8
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	f04f 32ff 	mov.w	r2, #4294967295
 8019568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f103 0208 	add.w	r2, r3, #8
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	f103 0208 	add.w	r2, r3, #8
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2200      	movs	r2, #0
 8019582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019584:	bf00      	nop
 8019586:	370c      	adds	r7, #12
 8019588:	46bd      	mov	sp, r7
 801958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958e:	4770      	bx	lr

08019590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019590:	b480      	push	{r7}
 8019592:	b083      	sub	sp, #12
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2200      	movs	r2, #0
 801959c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801959e:	bf00      	nop
 80195a0:	370c      	adds	r7, #12
 80195a2:	46bd      	mov	sp, r7
 80195a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a8:	4770      	bx	lr

080195aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80195aa:	b480      	push	{r7}
 80195ac:	b085      	sub	sp, #20
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	68fa      	ldr	r2, [r7, #12]
 80195be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	689a      	ldr	r2, [r3, #8]
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	689b      	ldr	r3, [r3, #8]
 80195cc:	683a      	ldr	r2, [r7, #0]
 80195ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	683a      	ldr	r2, [r7, #0]
 80195d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	687a      	ldr	r2, [r7, #4]
 80195da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	1c5a      	adds	r2, r3, #1
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	601a      	str	r2, [r3, #0]
}
 80195e6:	bf00      	nop
 80195e8:	3714      	adds	r7, #20
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	4770      	bx	lr

080195f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80195f2:	b480      	push	{r7}
 80195f4:	b085      	sub	sp, #20
 80195f6:	af00      	add	r7, sp, #0
 80195f8:	6078      	str	r0, [r7, #4]
 80195fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019608:	d103      	bne.n	8019612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	691b      	ldr	r3, [r3, #16]
 801960e:	60fb      	str	r3, [r7, #12]
 8019610:	e00c      	b.n	801962c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	3308      	adds	r3, #8
 8019616:	60fb      	str	r3, [r7, #12]
 8019618:	e002      	b.n	8019620 <vListInsert+0x2e>
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	60fb      	str	r3, [r7, #12]
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	685b      	ldr	r3, [r3, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	68ba      	ldr	r2, [r7, #8]
 8019628:	429a      	cmp	r2, r3
 801962a:	d2f6      	bcs.n	801961a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	685a      	ldr	r2, [r3, #4]
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019634:	683b      	ldr	r3, [r7, #0]
 8019636:	685b      	ldr	r3, [r3, #4]
 8019638:	683a      	ldr	r2, [r7, #0]
 801963a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	68fa      	ldr	r2, [r7, #12]
 8019640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	683a      	ldr	r2, [r7, #0]
 8019646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	1c5a      	adds	r2, r3, #1
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	601a      	str	r2, [r3, #0]
}
 8019658:	bf00      	nop
 801965a:	3714      	adds	r7, #20
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019664:	b480      	push	{r7}
 8019666:	b085      	sub	sp, #20
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	691b      	ldr	r3, [r3, #16]
 8019670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	687a      	ldr	r2, [r7, #4]
 8019678:	6892      	ldr	r2, [r2, #8]
 801967a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	689b      	ldr	r3, [r3, #8]
 8019680:	687a      	ldr	r2, [r7, #4]
 8019682:	6852      	ldr	r2, [r2, #4]
 8019684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	685b      	ldr	r3, [r3, #4]
 801968a:	687a      	ldr	r2, [r7, #4]
 801968c:	429a      	cmp	r2, r3
 801968e:	d103      	bne.n	8019698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	689a      	ldr	r2, [r3, #8]
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2200      	movs	r2, #0
 801969c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	1e5a      	subs	r2, r3, #1
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
}
 80196ac:	4618      	mov	r0, r3
 80196ae:	3714      	adds	r7, #20
 80196b0:	46bd      	mov	sp, r7
 80196b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b6:	4770      	bx	lr

080196b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b084      	sub	sp, #16
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10a      	bne.n	80196e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80196cc:	f04f 0320 	mov.w	r3, #32
 80196d0:	f383 8811 	msr	BASEPRI, r3
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	f3bf 8f4f 	dsb	sy
 80196dc:	60bb      	str	r3, [r7, #8]
}
 80196de:	bf00      	nop
 80196e0:	e7fe      	b.n	80196e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80196e2:	f002 fc7f 	bl	801bfe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196ee:	68f9      	ldr	r1, [r7, #12]
 80196f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80196f2:	fb01 f303 	mul.w	r3, r1, r3
 80196f6:	441a      	add	r2, r3
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	2200      	movs	r2, #0
 8019700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681a      	ldr	r2, [r3, #0]
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	681a      	ldr	r2, [r3, #0]
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019712:	3b01      	subs	r3, #1
 8019714:	68f9      	ldr	r1, [r7, #12]
 8019716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019718:	fb01 f303 	mul.w	r3, r1, r3
 801971c:	441a      	add	r2, r3
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	22ff      	movs	r2, #255	; 0xff
 8019726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	22ff      	movs	r2, #255	; 0xff
 801972e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d114      	bne.n	8019762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	691b      	ldr	r3, [r3, #16]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d01a      	beq.n	8019776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	3310      	adds	r3, #16
 8019744:	4618      	mov	r0, r3
 8019746:	f001 fc37 	bl	801afb8 <xTaskRemoveFromEventList>
 801974a:	4603      	mov	r3, r0
 801974c:	2b00      	cmp	r3, #0
 801974e:	d012      	beq.n	8019776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019750:	4b0c      	ldr	r3, [pc, #48]	; (8019784 <xQueueGenericReset+0xcc>)
 8019752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019756:	601a      	str	r2, [r3, #0]
 8019758:	f3bf 8f4f 	dsb	sy
 801975c:	f3bf 8f6f 	isb	sy
 8019760:	e009      	b.n	8019776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	3310      	adds	r3, #16
 8019766:	4618      	mov	r0, r3
 8019768:	f7ff fef2 	bl	8019550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	3324      	adds	r3, #36	; 0x24
 8019770:	4618      	mov	r0, r3
 8019772:	f7ff feed 	bl	8019550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019776:	f002 fc65 	bl	801c044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801977a:	2301      	movs	r3, #1
}
 801977c:	4618      	mov	r0, r3
 801977e:	3710      	adds	r7, #16
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	e000ed04 	.word	0xe000ed04

08019788 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019788:	b580      	push	{r7, lr}
 801978a:	b08a      	sub	sp, #40	; 0x28
 801978c:	af02      	add	r7, sp, #8
 801978e:	60f8      	str	r0, [r7, #12]
 8019790:	60b9      	str	r1, [r7, #8]
 8019792:	4613      	mov	r3, r2
 8019794:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d10a      	bne.n	80197b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801979c:	f04f 0320 	mov.w	r3, #32
 80197a0:	f383 8811 	msr	BASEPRI, r3
 80197a4:	f3bf 8f6f 	isb	sy
 80197a8:	f3bf 8f4f 	dsb	sy
 80197ac:	613b      	str	r3, [r7, #16]
}
 80197ae:	bf00      	nop
 80197b0:	e7fe      	b.n	80197b0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80197b2:	68bb      	ldr	r3, [r7, #8]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d102      	bne.n	80197be <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80197b8:	2300      	movs	r3, #0
 80197ba:	61fb      	str	r3, [r7, #28]
 80197bc:	e004      	b.n	80197c8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	68ba      	ldr	r2, [r7, #8]
 80197c2:	fb02 f303 	mul.w	r3, r2, r3
 80197c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80197c8:	69fb      	ldr	r3, [r7, #28]
 80197ca:	3350      	adds	r3, #80	; 0x50
 80197cc:	4618      	mov	r0, r3
 80197ce:	f002 fd2b 	bl	801c228 <pvPortMalloc>
 80197d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d00d      	beq.n	80197f6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80197da:	69bb      	ldr	r3, [r7, #24]
 80197dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	3350      	adds	r3, #80	; 0x50
 80197e2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80197e4:	79fa      	ldrb	r2, [r7, #7]
 80197e6:	69bb      	ldr	r3, [r7, #24]
 80197e8:	9300      	str	r3, [sp, #0]
 80197ea:	4613      	mov	r3, r2
 80197ec:	697a      	ldr	r2, [r7, #20]
 80197ee:	68b9      	ldr	r1, [r7, #8]
 80197f0:	68f8      	ldr	r0, [r7, #12]
 80197f2:	f000 f805 	bl	8019800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80197f6:	69bb      	ldr	r3, [r7, #24]
	}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3720      	adds	r7, #32
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b084      	sub	sp, #16
 8019804:	af00      	add	r7, sp, #0
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	607a      	str	r2, [r7, #4]
 801980c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d103      	bne.n	801981c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019814:	69bb      	ldr	r3, [r7, #24]
 8019816:	69ba      	ldr	r2, [r7, #24]
 8019818:	601a      	str	r2, [r3, #0]
 801981a:	e002      	b.n	8019822 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801981c:	69bb      	ldr	r3, [r7, #24]
 801981e:	687a      	ldr	r2, [r7, #4]
 8019820:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019822:	69bb      	ldr	r3, [r7, #24]
 8019824:	68fa      	ldr	r2, [r7, #12]
 8019826:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019828:	69bb      	ldr	r3, [r7, #24]
 801982a:	68ba      	ldr	r2, [r7, #8]
 801982c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801982e:	2101      	movs	r1, #1
 8019830:	69b8      	ldr	r0, [r7, #24]
 8019832:	f7ff ff41 	bl	80196b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019836:	69bb      	ldr	r3, [r7, #24]
 8019838:	78fa      	ldrb	r2, [r7, #3]
 801983a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801983e:	bf00      	nop
 8019840:	3710      	adds	r7, #16
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}

08019846 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8019846:	b580      	push	{r7, lr}
 8019848:	b086      	sub	sp, #24
 801984a:	af00      	add	r7, sp, #0
 801984c:	6078      	str	r0, [r7, #4]
 801984e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d10a      	bne.n	801986c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8019856:	f04f 0320 	mov.w	r3, #32
 801985a:	f383 8811 	msr	BASEPRI, r3
 801985e:	f3bf 8f6f 	isb	sy
 8019862:	f3bf 8f4f 	dsb	sy
 8019866:	613b      	str	r3, [r7, #16]
}
 8019868:	bf00      	nop
 801986a:	e7fe      	b.n	801986a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801986c:	683a      	ldr	r2, [r7, #0]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	429a      	cmp	r2, r3
 8019872:	d90a      	bls.n	801988a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8019874:	f04f 0320 	mov.w	r3, #32
 8019878:	f383 8811 	msr	BASEPRI, r3
 801987c:	f3bf 8f6f 	isb	sy
 8019880:	f3bf 8f4f 	dsb	sy
 8019884:	60fb      	str	r3, [r7, #12]
}
 8019886:	bf00      	nop
 8019888:	e7fe      	b.n	8019888 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801988a:	2202      	movs	r2, #2
 801988c:	2100      	movs	r1, #0
 801988e:	6878      	ldr	r0, [r7, #4]
 8019890:	f7ff ff7a 	bl	8019788 <xQueueGenericCreate>
 8019894:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8019896:	697b      	ldr	r3, [r7, #20]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d002      	beq.n	80198a2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801989c:	697b      	ldr	r3, [r7, #20]
 801989e:	683a      	ldr	r2, [r7, #0]
 80198a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80198a2:	697b      	ldr	r3, [r7, #20]
	}
 80198a4:	4618      	mov	r0, r3
 80198a6:	3718      	adds	r7, #24
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}

080198ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b08e      	sub	sp, #56	; 0x38
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
 80198b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80198ba:	2300      	movs	r3, #0
 80198bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80198c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d10a      	bne.n	80198de <xQueueGenericSend+0x32>
	__asm volatile
 80198c8:	f04f 0320 	mov.w	r3, #32
 80198cc:	f383 8811 	msr	BASEPRI, r3
 80198d0:	f3bf 8f6f 	isb	sy
 80198d4:	f3bf 8f4f 	dsb	sy
 80198d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80198da:	bf00      	nop
 80198dc:	e7fe      	b.n	80198dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d103      	bne.n	80198ec <xQueueGenericSend+0x40>
 80198e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d101      	bne.n	80198f0 <xQueueGenericSend+0x44>
 80198ec:	2301      	movs	r3, #1
 80198ee:	e000      	b.n	80198f2 <xQueueGenericSend+0x46>
 80198f0:	2300      	movs	r3, #0
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d10a      	bne.n	801990c <xQueueGenericSend+0x60>
	__asm volatile
 80198f6:	f04f 0320 	mov.w	r3, #32
 80198fa:	f383 8811 	msr	BASEPRI, r3
 80198fe:	f3bf 8f6f 	isb	sy
 8019902:	f3bf 8f4f 	dsb	sy
 8019906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019908:	bf00      	nop
 801990a:	e7fe      	b.n	801990a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	2b02      	cmp	r3, #2
 8019910:	d103      	bne.n	801991a <xQueueGenericSend+0x6e>
 8019912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019916:	2b01      	cmp	r3, #1
 8019918:	d101      	bne.n	801991e <xQueueGenericSend+0x72>
 801991a:	2301      	movs	r3, #1
 801991c:	e000      	b.n	8019920 <xQueueGenericSend+0x74>
 801991e:	2300      	movs	r3, #0
 8019920:	2b00      	cmp	r3, #0
 8019922:	d10a      	bne.n	801993a <xQueueGenericSend+0x8e>
	__asm volatile
 8019924:	f04f 0320 	mov.w	r3, #32
 8019928:	f383 8811 	msr	BASEPRI, r3
 801992c:	f3bf 8f6f 	isb	sy
 8019930:	f3bf 8f4f 	dsb	sy
 8019934:	623b      	str	r3, [r7, #32]
}
 8019936:	bf00      	nop
 8019938:	e7fe      	b.n	8019938 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801993a:	f001 fcdb 	bl	801b2f4 <xTaskGetSchedulerState>
 801993e:	4603      	mov	r3, r0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d102      	bne.n	801994a <xQueueGenericSend+0x9e>
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d101      	bne.n	801994e <xQueueGenericSend+0xa2>
 801994a:	2301      	movs	r3, #1
 801994c:	e000      	b.n	8019950 <xQueueGenericSend+0xa4>
 801994e:	2300      	movs	r3, #0
 8019950:	2b00      	cmp	r3, #0
 8019952:	d10a      	bne.n	801996a <xQueueGenericSend+0xbe>
	__asm volatile
 8019954:	f04f 0320 	mov.w	r3, #32
 8019958:	f383 8811 	msr	BASEPRI, r3
 801995c:	f3bf 8f6f 	isb	sy
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	61fb      	str	r3, [r7, #28]
}
 8019966:	bf00      	nop
 8019968:	e7fe      	b.n	8019968 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801996a:	f002 fb3b 	bl	801bfe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019976:	429a      	cmp	r2, r3
 8019978:	d302      	bcc.n	8019980 <xQueueGenericSend+0xd4>
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	2b02      	cmp	r3, #2
 801997e:	d129      	bne.n	80199d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019980:	683a      	ldr	r2, [r7, #0]
 8019982:	68b9      	ldr	r1, [r7, #8]
 8019984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019986:	f000 fc39 	bl	801a1fc <prvCopyDataToQueue>
 801998a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019990:	2b00      	cmp	r3, #0
 8019992:	d010      	beq.n	80199b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019996:	3324      	adds	r3, #36	; 0x24
 8019998:	4618      	mov	r0, r3
 801999a:	f001 fb0d 	bl	801afb8 <xTaskRemoveFromEventList>
 801999e:	4603      	mov	r3, r0
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d013      	beq.n	80199cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80199a4:	4b3f      	ldr	r3, [pc, #252]	; (8019aa4 <xQueueGenericSend+0x1f8>)
 80199a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199aa:	601a      	str	r2, [r3, #0]
 80199ac:	f3bf 8f4f 	dsb	sy
 80199b0:	f3bf 8f6f 	isb	sy
 80199b4:	e00a      	b.n	80199cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80199b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d007      	beq.n	80199cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80199bc:	4b39      	ldr	r3, [pc, #228]	; (8019aa4 <xQueueGenericSend+0x1f8>)
 80199be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199c2:	601a      	str	r2, [r3, #0]
 80199c4:	f3bf 8f4f 	dsb	sy
 80199c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80199cc:	f002 fb3a 	bl	801c044 <vPortExitCritical>
				return pdPASS;
 80199d0:	2301      	movs	r3, #1
 80199d2:	e063      	b.n	8019a9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d103      	bne.n	80199e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80199da:	f002 fb33 	bl	801c044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80199de:	2300      	movs	r3, #0
 80199e0:	e05c      	b.n	8019a9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80199e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d106      	bne.n	80199f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80199e8:	f107 0314 	add.w	r3, r7, #20
 80199ec:	4618      	mov	r0, r3
 80199ee:	f001 fb45 	bl	801b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80199f2:	2301      	movs	r3, #1
 80199f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80199f6:	f002 fb25 	bl	801c044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80199fa:	f001 f899 	bl	801ab30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80199fe:	f002 faf1 	bl	801bfe4 <vPortEnterCritical>
 8019a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019a08:	b25b      	sxtb	r3, r3
 8019a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a0e:	d103      	bne.n	8019a18 <xQueueGenericSend+0x16c>
 8019a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a12:	2200      	movs	r2, #0
 8019a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a1e:	b25b      	sxtb	r3, r3
 8019a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a24:	d103      	bne.n	8019a2e <xQueueGenericSend+0x182>
 8019a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a28:	2200      	movs	r2, #0
 8019a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019a2e:	f002 fb09 	bl	801c044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019a32:	1d3a      	adds	r2, r7, #4
 8019a34:	f107 0314 	add.w	r3, r7, #20
 8019a38:	4611      	mov	r1, r2
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f001 fb34 	bl	801b0a8 <xTaskCheckForTimeOut>
 8019a40:	4603      	mov	r3, r0
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d124      	bne.n	8019a90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a48:	f000 fcd0 	bl	801a3ec <prvIsQueueFull>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d018      	beq.n	8019a84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a54:	3310      	adds	r3, #16
 8019a56:	687a      	ldr	r2, [r7, #4]
 8019a58:	4611      	mov	r1, r2
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f001 fa5c 	bl	801af18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a62:	f000 fc5b 	bl	801a31c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019a66:	f001 f871 	bl	801ab4c <xTaskResumeAll>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	f47f af7c 	bne.w	801996a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8019a72:	4b0c      	ldr	r3, [pc, #48]	; (8019aa4 <xQueueGenericSend+0x1f8>)
 8019a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a78:	601a      	str	r2, [r3, #0]
 8019a7a:	f3bf 8f4f 	dsb	sy
 8019a7e:	f3bf 8f6f 	isb	sy
 8019a82:	e772      	b.n	801996a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a86:	f000 fc49 	bl	801a31c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019a8a:	f001 f85f 	bl	801ab4c <xTaskResumeAll>
 8019a8e:	e76c      	b.n	801996a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a92:	f000 fc43 	bl	801a31c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019a96:	f001 f859 	bl	801ab4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3738      	adds	r7, #56	; 0x38
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	e000ed04 	.word	0xe000ed04

08019aa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b08e      	sub	sp, #56	; 0x38
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	60f8      	str	r0, [r7, #12]
 8019ab0:	60b9      	str	r1, [r7, #8]
 8019ab2:	607a      	str	r2, [r7, #4]
 8019ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d10a      	bne.n	8019ad6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019ac0:	f04f 0320 	mov.w	r3, #32
 8019ac4:	f383 8811 	msr	BASEPRI, r3
 8019ac8:	f3bf 8f6f 	isb	sy
 8019acc:	f3bf 8f4f 	dsb	sy
 8019ad0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019ad2:	bf00      	nop
 8019ad4:	e7fe      	b.n	8019ad4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d103      	bne.n	8019ae4 <xQueueGenericSendFromISR+0x3c>
 8019adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d101      	bne.n	8019ae8 <xQueueGenericSendFromISR+0x40>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e000      	b.n	8019aea <xQueueGenericSendFromISR+0x42>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d10a      	bne.n	8019b04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019aee:	f04f 0320 	mov.w	r3, #32
 8019af2:	f383 8811 	msr	BASEPRI, r3
 8019af6:	f3bf 8f6f 	isb	sy
 8019afa:	f3bf 8f4f 	dsb	sy
 8019afe:	623b      	str	r3, [r7, #32]
}
 8019b00:	bf00      	nop
 8019b02:	e7fe      	b.n	8019b02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	2b02      	cmp	r3, #2
 8019b08:	d103      	bne.n	8019b12 <xQueueGenericSendFromISR+0x6a>
 8019b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d101      	bne.n	8019b16 <xQueueGenericSendFromISR+0x6e>
 8019b12:	2301      	movs	r3, #1
 8019b14:	e000      	b.n	8019b18 <xQueueGenericSendFromISR+0x70>
 8019b16:	2300      	movs	r3, #0
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d10a      	bne.n	8019b32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019b1c:	f04f 0320 	mov.w	r3, #32
 8019b20:	f383 8811 	msr	BASEPRI, r3
 8019b24:	f3bf 8f6f 	isb	sy
 8019b28:	f3bf 8f4f 	dsb	sy
 8019b2c:	61fb      	str	r3, [r7, #28]
}
 8019b2e:	bf00      	nop
 8019b30:	e7fe      	b.n	8019b30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019b32:	f002 fb39 	bl	801c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8019b36:	f3ef 8211 	mrs	r2, BASEPRI
 8019b3a:	f04f 0320 	mov.w	r3, #32
 8019b3e:	f383 8811 	msr	BASEPRI, r3
 8019b42:	f3bf 8f6f 	isb	sy
 8019b46:	f3bf 8f4f 	dsb	sy
 8019b4a:	61ba      	str	r2, [r7, #24]
 8019b4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019b4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d302      	bcc.n	8019b64 <xQueueGenericSendFromISR+0xbc>
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	2b02      	cmp	r3, #2
 8019b62:	d12c      	bne.n	8019bbe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	68b9      	ldr	r1, [r7, #8]
 8019b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b74:	f000 fb42 	bl	801a1fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019b78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8019b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b80:	d112      	bne.n	8019ba8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d016      	beq.n	8019bb8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b8c:	3324      	adds	r3, #36	; 0x24
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f001 fa12 	bl	801afb8 <xTaskRemoveFromEventList>
 8019b94:	4603      	mov	r3, r0
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d00e      	beq.n	8019bb8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d00b      	beq.n	8019bb8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	2201      	movs	r2, #1
 8019ba4:	601a      	str	r2, [r3, #0]
 8019ba6:	e007      	b.n	8019bb8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019bac:	3301      	adds	r3, #1
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	b25a      	sxtb	r2, r3
 8019bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019bb8:	2301      	movs	r3, #1
 8019bba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8019bbc:	e001      	b.n	8019bc2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8019bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019bc6:	693b      	ldr	r3, [r7, #16]
 8019bc8:	f383 8811 	msr	BASEPRI, r3
}
 8019bcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3738      	adds	r7, #56	; 0x38
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b08e      	sub	sp, #56	; 0x38
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d10a      	bne.n	8019c02 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019bec:	f04f 0320 	mov.w	r3, #32
 8019bf0:	f383 8811 	msr	BASEPRI, r3
 8019bf4:	f3bf 8f6f 	isb	sy
 8019bf8:	f3bf 8f4f 	dsb	sy
 8019bfc:	623b      	str	r3, [r7, #32]
}
 8019bfe:	bf00      	nop
 8019c00:	e7fe      	b.n	8019c00 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d00a      	beq.n	8019c20 <xQueueGiveFromISR+0x48>
	__asm volatile
 8019c0a:	f04f 0320 	mov.w	r3, #32
 8019c0e:	f383 8811 	msr	BASEPRI, r3
 8019c12:	f3bf 8f6f 	isb	sy
 8019c16:	f3bf 8f4f 	dsb	sy
 8019c1a:	61fb      	str	r3, [r7, #28]
}
 8019c1c:	bf00      	nop
 8019c1e:	e7fe      	b.n	8019c1e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d103      	bne.n	8019c30 <xQueueGiveFromISR+0x58>
 8019c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c2a:	689b      	ldr	r3, [r3, #8]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d101      	bne.n	8019c34 <xQueueGiveFromISR+0x5c>
 8019c30:	2301      	movs	r3, #1
 8019c32:	e000      	b.n	8019c36 <xQueueGiveFromISR+0x5e>
 8019c34:	2300      	movs	r3, #0
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d10a      	bne.n	8019c50 <xQueueGiveFromISR+0x78>
	__asm volatile
 8019c3a:	f04f 0320 	mov.w	r3, #32
 8019c3e:	f383 8811 	msr	BASEPRI, r3
 8019c42:	f3bf 8f6f 	isb	sy
 8019c46:	f3bf 8f4f 	dsb	sy
 8019c4a:	61bb      	str	r3, [r7, #24]
}
 8019c4c:	bf00      	nop
 8019c4e:	e7fe      	b.n	8019c4e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019c50:	f002 faaa 	bl	801c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8019c54:	f3ef 8211 	mrs	r2, BASEPRI
 8019c58:	f04f 0320 	mov.w	r3, #32
 8019c5c:	f383 8811 	msr	BASEPRI, r3
 8019c60:	f3bf 8f6f 	isb	sy
 8019c64:	f3bf 8f4f 	dsb	sy
 8019c68:	617a      	str	r2, [r7, #20]
 8019c6a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019c6c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c74:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c7c:	429a      	cmp	r2, r3
 8019c7e:	d22b      	bcs.n	8019cd8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8c:	1c5a      	adds	r2, r3, #1
 8019c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c90:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c9a:	d112      	bne.n	8019cc2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d016      	beq.n	8019cd2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ca6:	3324      	adds	r3, #36	; 0x24
 8019ca8:	4618      	mov	r0, r3
 8019caa:	f001 f985 	bl	801afb8 <xTaskRemoveFromEventList>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d00e      	beq.n	8019cd2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d00b      	beq.n	8019cd2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	2201      	movs	r2, #1
 8019cbe:	601a      	str	r2, [r3, #0]
 8019cc0:	e007      	b.n	8019cd2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cc6:	3301      	adds	r3, #1
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	b25a      	sxtb	r2, r3
 8019ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8019cd6:	e001      	b.n	8019cdc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	637b      	str	r3, [r7, #52]	; 0x34
 8019cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cde:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f383 8811 	msr	BASEPRI, r3
}
 8019ce6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019cea:	4618      	mov	r0, r3
 8019cec:	3738      	adds	r7, #56	; 0x38
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd80      	pop	{r7, pc}
	...

08019cf4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b08c      	sub	sp, #48	; 0x30
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019d00:	2300      	movs	r3, #0
 8019d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d10a      	bne.n	8019d24 <xQueueReceive+0x30>
	__asm volatile
 8019d0e:	f04f 0320 	mov.w	r3, #32
 8019d12:	f383 8811 	msr	BASEPRI, r3
 8019d16:	f3bf 8f6f 	isb	sy
 8019d1a:	f3bf 8f4f 	dsb	sy
 8019d1e:	623b      	str	r3, [r7, #32]
}
 8019d20:	bf00      	nop
 8019d22:	e7fe      	b.n	8019d22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d103      	bne.n	8019d32 <xQueueReceive+0x3e>
 8019d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d101      	bne.n	8019d36 <xQueueReceive+0x42>
 8019d32:	2301      	movs	r3, #1
 8019d34:	e000      	b.n	8019d38 <xQueueReceive+0x44>
 8019d36:	2300      	movs	r3, #0
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d10a      	bne.n	8019d52 <xQueueReceive+0x5e>
	__asm volatile
 8019d3c:	f04f 0320 	mov.w	r3, #32
 8019d40:	f383 8811 	msr	BASEPRI, r3
 8019d44:	f3bf 8f6f 	isb	sy
 8019d48:	f3bf 8f4f 	dsb	sy
 8019d4c:	61fb      	str	r3, [r7, #28]
}
 8019d4e:	bf00      	nop
 8019d50:	e7fe      	b.n	8019d50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019d52:	f001 facf 	bl	801b2f4 <xTaskGetSchedulerState>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d102      	bne.n	8019d62 <xQueueReceive+0x6e>
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d101      	bne.n	8019d66 <xQueueReceive+0x72>
 8019d62:	2301      	movs	r3, #1
 8019d64:	e000      	b.n	8019d68 <xQueueReceive+0x74>
 8019d66:	2300      	movs	r3, #0
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d10a      	bne.n	8019d82 <xQueueReceive+0x8e>
	__asm volatile
 8019d6c:	f04f 0320 	mov.w	r3, #32
 8019d70:	f383 8811 	msr	BASEPRI, r3
 8019d74:	f3bf 8f6f 	isb	sy
 8019d78:	f3bf 8f4f 	dsb	sy
 8019d7c:	61bb      	str	r3, [r7, #24]
}
 8019d7e:	bf00      	nop
 8019d80:	e7fe      	b.n	8019d80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019d82:	f002 f92f 	bl	801bfe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d01f      	beq.n	8019dd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019d92:	68b9      	ldr	r1, [r7, #8]
 8019d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019d96:	f000 fa9b 	bl	801a2d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9c:	1e5a      	subs	r2, r3, #1
 8019d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019da0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019da4:	691b      	ldr	r3, [r3, #16]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d00f      	beq.n	8019dca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dac:	3310      	adds	r3, #16
 8019dae:	4618      	mov	r0, r3
 8019db0:	f001 f902 	bl	801afb8 <xTaskRemoveFromEventList>
 8019db4:	4603      	mov	r3, r0
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d007      	beq.n	8019dca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019dba:	4b3d      	ldr	r3, [pc, #244]	; (8019eb0 <xQueueReceive+0x1bc>)
 8019dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dc0:	601a      	str	r2, [r3, #0]
 8019dc2:	f3bf 8f4f 	dsb	sy
 8019dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019dca:	f002 f93b 	bl	801c044 <vPortExitCritical>
				return pdPASS;
 8019dce:	2301      	movs	r3, #1
 8019dd0:	e069      	b.n	8019ea6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d103      	bne.n	8019de0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019dd8:	f002 f934 	bl	801c044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019ddc:	2300      	movs	r3, #0
 8019dde:	e062      	b.n	8019ea6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d106      	bne.n	8019df4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019de6:	f107 0310 	add.w	r3, r7, #16
 8019dea:	4618      	mov	r0, r3
 8019dec:	f001 f946 	bl	801b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019df0:	2301      	movs	r3, #1
 8019df2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019df4:	f002 f926 	bl	801c044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019df8:	f000 fe9a 	bl	801ab30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019dfc:	f002 f8f2 	bl	801bfe4 <vPortEnterCritical>
 8019e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019e06:	b25b      	sxtb	r3, r3
 8019e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e0c:	d103      	bne.n	8019e16 <xQueueReceive+0x122>
 8019e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e10:	2200      	movs	r2, #0
 8019e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019e1c:	b25b      	sxtb	r3, r3
 8019e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e22:	d103      	bne.n	8019e2c <xQueueReceive+0x138>
 8019e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e26:	2200      	movs	r2, #0
 8019e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019e2c:	f002 f90a 	bl	801c044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019e30:	1d3a      	adds	r2, r7, #4
 8019e32:	f107 0310 	add.w	r3, r7, #16
 8019e36:	4611      	mov	r1, r2
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f001 f935 	bl	801b0a8 <xTaskCheckForTimeOut>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d123      	bne.n	8019e8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e46:	f000 fabb 	bl	801a3c0 <prvIsQueueEmpty>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d017      	beq.n	8019e80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e52:	3324      	adds	r3, #36	; 0x24
 8019e54:	687a      	ldr	r2, [r7, #4]
 8019e56:	4611      	mov	r1, r2
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f001 f85d 	bl	801af18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e60:	f000 fa5c 	bl	801a31c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019e64:	f000 fe72 	bl	801ab4c <xTaskResumeAll>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d189      	bne.n	8019d82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8019e6e:	4b10      	ldr	r3, [pc, #64]	; (8019eb0 <xQueueReceive+0x1bc>)
 8019e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e74:	601a      	str	r2, [r3, #0]
 8019e76:	f3bf 8f4f 	dsb	sy
 8019e7a:	f3bf 8f6f 	isb	sy
 8019e7e:	e780      	b.n	8019d82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e82:	f000 fa4b 	bl	801a31c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019e86:	f000 fe61 	bl	801ab4c <xTaskResumeAll>
 8019e8a:	e77a      	b.n	8019d82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e8e:	f000 fa45 	bl	801a31c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019e92:	f000 fe5b 	bl	801ab4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e98:	f000 fa92 	bl	801a3c0 <prvIsQueueEmpty>
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	f43f af6f 	beq.w	8019d82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3730      	adds	r7, #48	; 0x30
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bd80      	pop	{r7, pc}
 8019eae:	bf00      	nop
 8019eb0:	e000ed04 	.word	0xe000ed04

08019eb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b08e      	sub	sp, #56	; 0x38
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
 8019ebc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d10a      	bne.n	8019ee6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8019ed0:	f04f 0320 	mov.w	r3, #32
 8019ed4:	f383 8811 	msr	BASEPRI, r3
 8019ed8:	f3bf 8f6f 	isb	sy
 8019edc:	f3bf 8f4f 	dsb	sy
 8019ee0:	623b      	str	r3, [r7, #32]
}
 8019ee2:	bf00      	nop
 8019ee4:	e7fe      	b.n	8019ee4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00a      	beq.n	8019f04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8019eee:	f04f 0320 	mov.w	r3, #32
 8019ef2:	f383 8811 	msr	BASEPRI, r3
 8019ef6:	f3bf 8f6f 	isb	sy
 8019efa:	f3bf 8f4f 	dsb	sy
 8019efe:	61fb      	str	r3, [r7, #28]
}
 8019f00:	bf00      	nop
 8019f02:	e7fe      	b.n	8019f02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019f04:	f001 f9f6 	bl	801b2f4 <xTaskGetSchedulerState>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d102      	bne.n	8019f14 <xQueueSemaphoreTake+0x60>
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d101      	bne.n	8019f18 <xQueueSemaphoreTake+0x64>
 8019f14:	2301      	movs	r3, #1
 8019f16:	e000      	b.n	8019f1a <xQueueSemaphoreTake+0x66>
 8019f18:	2300      	movs	r3, #0
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d10a      	bne.n	8019f34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8019f1e:	f04f 0320 	mov.w	r3, #32
 8019f22:	f383 8811 	msr	BASEPRI, r3
 8019f26:	f3bf 8f6f 	isb	sy
 8019f2a:	f3bf 8f4f 	dsb	sy
 8019f2e:	61bb      	str	r3, [r7, #24]
}
 8019f30:	bf00      	nop
 8019f32:	e7fe      	b.n	8019f32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019f34:	f002 f856 	bl	801bfe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d024      	beq.n	8019f8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f46:	1e5a      	subs	r2, r3, #1
 8019f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d104      	bne.n	8019f5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019f54:	f001 fb8c 	bl	801b670 <pvTaskIncrementMutexHeldCount>
 8019f58:	4602      	mov	r2, r0
 8019f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f60:	691b      	ldr	r3, [r3, #16]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d00f      	beq.n	8019f86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f68:	3310      	adds	r3, #16
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f001 f824 	bl	801afb8 <xTaskRemoveFromEventList>
 8019f70:	4603      	mov	r3, r0
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d007      	beq.n	8019f86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019f76:	4b54      	ldr	r3, [pc, #336]	; (801a0c8 <xQueueSemaphoreTake+0x214>)
 8019f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f7c:	601a      	str	r2, [r3, #0]
 8019f7e:	f3bf 8f4f 	dsb	sy
 8019f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019f86:	f002 f85d 	bl	801c044 <vPortExitCritical>
				return pdPASS;
 8019f8a:	2301      	movs	r3, #1
 8019f8c:	e097      	b.n	801a0be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d111      	bne.n	8019fb8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d00a      	beq.n	8019fb0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8019f9a:	f04f 0320 	mov.w	r3, #32
 8019f9e:	f383 8811 	msr	BASEPRI, r3
 8019fa2:	f3bf 8f6f 	isb	sy
 8019fa6:	f3bf 8f4f 	dsb	sy
 8019faa:	617b      	str	r3, [r7, #20]
}
 8019fac:	bf00      	nop
 8019fae:	e7fe      	b.n	8019fae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019fb0:	f002 f848 	bl	801c044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e082      	b.n	801a0be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d106      	bne.n	8019fcc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019fbe:	f107 030c 	add.w	r3, r7, #12
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f001 f85a 	bl	801b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019fc8:	2301      	movs	r3, #1
 8019fca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019fcc:	f002 f83a 	bl	801c044 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019fd0:	f000 fdae 	bl	801ab30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019fd4:	f002 f806 	bl	801bfe4 <vPortEnterCritical>
 8019fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019fde:	b25b      	sxtb	r3, r3
 8019fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fe4:	d103      	bne.n	8019fee <xQueueSemaphoreTake+0x13a>
 8019fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe8:	2200      	movs	r2, #0
 8019fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ff4:	b25b      	sxtb	r3, r3
 8019ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ffa:	d103      	bne.n	801a004 <xQueueSemaphoreTake+0x150>
 8019ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ffe:	2200      	movs	r2, #0
 801a000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a004:	f002 f81e 	bl	801c044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a008:	463a      	mov	r2, r7
 801a00a:	f107 030c 	add.w	r3, r7, #12
 801a00e:	4611      	mov	r1, r2
 801a010:	4618      	mov	r0, r3
 801a012:	f001 f849 	bl	801b0a8 <xTaskCheckForTimeOut>
 801a016:	4603      	mov	r3, r0
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d132      	bne.n	801a082 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a01c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a01e:	f000 f9cf 	bl	801a3c0 <prvIsQueueEmpty>
 801a022:	4603      	mov	r3, r0
 801a024:	2b00      	cmp	r3, #0
 801a026:	d026      	beq.n	801a076 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d109      	bne.n	801a044 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a030:	f001 ffd8 	bl	801bfe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a036:	689b      	ldr	r3, [r3, #8]
 801a038:	4618      	mov	r0, r3
 801a03a:	f001 f979 	bl	801b330 <xTaskPriorityInherit>
 801a03e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a040:	f002 f800 	bl	801c044 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a046:	3324      	adds	r3, #36	; 0x24
 801a048:	683a      	ldr	r2, [r7, #0]
 801a04a:	4611      	mov	r1, r2
 801a04c:	4618      	mov	r0, r3
 801a04e:	f000 ff63 	bl	801af18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a054:	f000 f962 	bl	801a31c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a058:	f000 fd78 	bl	801ab4c <xTaskResumeAll>
 801a05c:	4603      	mov	r3, r0
 801a05e:	2b00      	cmp	r3, #0
 801a060:	f47f af68 	bne.w	8019f34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a064:	4b18      	ldr	r3, [pc, #96]	; (801a0c8 <xQueueSemaphoreTake+0x214>)
 801a066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a06a:	601a      	str	r2, [r3, #0]
 801a06c:	f3bf 8f4f 	dsb	sy
 801a070:	f3bf 8f6f 	isb	sy
 801a074:	e75e      	b.n	8019f34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a078:	f000 f950 	bl	801a31c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a07c:	f000 fd66 	bl	801ab4c <xTaskResumeAll>
 801a080:	e758      	b.n	8019f34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a084:	f000 f94a 	bl	801a31c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a088:	f000 fd60 	bl	801ab4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a08e:	f000 f997 	bl	801a3c0 <prvIsQueueEmpty>
 801a092:	4603      	mov	r3, r0
 801a094:	2b00      	cmp	r3, #0
 801a096:	f43f af4d 	beq.w	8019f34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d00d      	beq.n	801a0bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a0a0:	f001 ffa0 	bl	801bfe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a0a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0a6:	f000 f891 	bl	801a1cc <prvGetDisinheritPriorityAfterTimeout>
 801a0aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ae:	689b      	ldr	r3, [r3, #8]
 801a0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f001 fa42 	bl	801b53c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a0b8:	f001 ffc4 	bl	801c044 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a0bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a0be:	4618      	mov	r0, r3
 801a0c0:	3738      	adds	r7, #56	; 0x38
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	bf00      	nop
 801a0c8:	e000ed04 	.word	0xe000ed04

0801a0cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b08e      	sub	sp, #56	; 0x38
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	60f8      	str	r0, [r7, #12]
 801a0d4:	60b9      	str	r1, [r7, #8]
 801a0d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d10a      	bne.n	801a0f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801a0e2:	f04f 0320 	mov.w	r3, #32
 801a0e6:	f383 8811 	msr	BASEPRI, r3
 801a0ea:	f3bf 8f6f 	isb	sy
 801a0ee:	f3bf 8f4f 	dsb	sy
 801a0f2:	623b      	str	r3, [r7, #32]
}
 801a0f4:	bf00      	nop
 801a0f6:	e7fe      	b.n	801a0f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d103      	bne.n	801a106 <xQueueReceiveFromISR+0x3a>
 801a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a102:	2b00      	cmp	r3, #0
 801a104:	d101      	bne.n	801a10a <xQueueReceiveFromISR+0x3e>
 801a106:	2301      	movs	r3, #1
 801a108:	e000      	b.n	801a10c <xQueueReceiveFromISR+0x40>
 801a10a:	2300      	movs	r3, #0
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d10a      	bne.n	801a126 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801a110:	f04f 0320 	mov.w	r3, #32
 801a114:	f383 8811 	msr	BASEPRI, r3
 801a118:	f3bf 8f6f 	isb	sy
 801a11c:	f3bf 8f4f 	dsb	sy
 801a120:	61fb      	str	r3, [r7, #28]
}
 801a122:	bf00      	nop
 801a124:	e7fe      	b.n	801a124 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a126:	f002 f83f 	bl	801c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 801a12a:	f3ef 8211 	mrs	r2, BASEPRI
 801a12e:	f04f 0320 	mov.w	r3, #32
 801a132:	f383 8811 	msr	BASEPRI, r3
 801a136:	f3bf 8f6f 	isb	sy
 801a13a:	f3bf 8f4f 	dsb	sy
 801a13e:	61ba      	str	r2, [r7, #24]
 801a140:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a142:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a144:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a14a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d02f      	beq.n	801a1b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a15c:	68b9      	ldr	r1, [r7, #8]
 801a15e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a160:	f000 f8b6 	bl	801a2d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a166:	1e5a      	subs	r2, r3, #1
 801a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a16a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a16c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a170:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a174:	d112      	bne.n	801a19c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a178:	691b      	ldr	r3, [r3, #16]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d016      	beq.n	801a1ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a180:	3310      	adds	r3, #16
 801a182:	4618      	mov	r0, r3
 801a184:	f000 ff18 	bl	801afb8 <xTaskRemoveFromEventList>
 801a188:	4603      	mov	r3, r0
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d00e      	beq.n	801a1ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d00b      	beq.n	801a1ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	2201      	movs	r2, #1
 801a198:	601a      	str	r2, [r3, #0]
 801a19a:	e007      	b.n	801a1ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	b25a      	sxtb	r2, r3
 801a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	637b      	str	r3, [r7, #52]	; 0x34
 801a1b0:	e001      	b.n	801a1b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	637b      	str	r3, [r7, #52]	; 0x34
 801a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	f383 8811 	msr	BASEPRI, r3
}
 801a1c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	3738      	adds	r7, #56	; 0x38
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}

0801a1cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a1cc:	b480      	push	{r7}
 801a1ce:	b085      	sub	sp, #20
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d006      	beq.n	801a1ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f1c3 0307 	rsb	r3, r3, #7
 801a1e6:	60fb      	str	r3, [r7, #12]
 801a1e8:	e001      	b.n	801a1ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
	}
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	3714      	adds	r7, #20
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fa:	4770      	bx	lr

0801a1fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b086      	sub	sp, #24
 801a200:	af00      	add	r7, sp, #0
 801a202:	60f8      	str	r0, [r7, #12]
 801a204:	60b9      	str	r1, [r7, #8]
 801a206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a208:	2300      	movs	r3, #0
 801a20a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a216:	2b00      	cmp	r3, #0
 801a218:	d10d      	bne.n	801a236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d14d      	bne.n	801a2be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	689b      	ldr	r3, [r3, #8]
 801a226:	4618      	mov	r0, r3
 801a228:	f001 f902 	bl	801b430 <xTaskPriorityDisinherit>
 801a22c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	2200      	movs	r2, #0
 801a232:	609a      	str	r2, [r3, #8]
 801a234:	e043      	b.n	801a2be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d119      	bne.n	801a270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	6858      	ldr	r0, [r3, #4]
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a244:	461a      	mov	r2, r3
 801a246:	68b9      	ldr	r1, [r7, #8]
 801a248:	f005 fd44 	bl	801fcd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	685a      	ldr	r2, [r3, #4]
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a254:	441a      	add	r2, r3
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	685a      	ldr	r2, [r3, #4]
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	689b      	ldr	r3, [r3, #8]
 801a262:	429a      	cmp	r2, r3
 801a264:	d32b      	bcc.n	801a2be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	681a      	ldr	r2, [r3, #0]
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	605a      	str	r2, [r3, #4]
 801a26e:	e026      	b.n	801a2be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	68d8      	ldr	r0, [r3, #12]
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a278:	461a      	mov	r2, r3
 801a27a:	68b9      	ldr	r1, [r7, #8]
 801a27c:	f005 fd2a 	bl	801fcd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	68da      	ldr	r2, [r3, #12]
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a288:	425b      	negs	r3, r3
 801a28a:	441a      	add	r2, r3
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	68da      	ldr	r2, [r3, #12]
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	429a      	cmp	r2, r3
 801a29a:	d207      	bcs.n	801a2ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	689a      	ldr	r2, [r3, #8]
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2a4:	425b      	negs	r3, r3
 801a2a6:	441a      	add	r2, r3
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2b02      	cmp	r3, #2
 801a2b0:	d105      	bne.n	801a2be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d002      	beq.n	801a2be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	3b01      	subs	r3, #1
 801a2bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a2be:	693b      	ldr	r3, [r7, #16]
 801a2c0:	1c5a      	adds	r2, r3, #1
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a2c6:	697b      	ldr	r3, [r7, #20]
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	3718      	adds	r7, #24
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	bd80      	pop	{r7, pc}

0801a2d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b082      	sub	sp, #8
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
 801a2d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d018      	beq.n	801a314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	68da      	ldr	r2, [r3, #12]
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2ea:	441a      	add	r2, r3
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	68da      	ldr	r2, [r3, #12]
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	689b      	ldr	r3, [r3, #8]
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	d303      	bcc.n	801a304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681a      	ldr	r2, [r3, #0]
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	68d9      	ldr	r1, [r3, #12]
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a30c:	461a      	mov	r2, r3
 801a30e:	6838      	ldr	r0, [r7, #0]
 801a310:	f005 fce0 	bl	801fcd4 <memcpy>
	}
}
 801a314:	bf00      	nop
 801a316:	3708      	adds	r7, #8
 801a318:	46bd      	mov	sp, r7
 801a31a:	bd80      	pop	{r7, pc}

0801a31c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b084      	sub	sp, #16
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a324:	f001 fe5e 	bl	801bfe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a32e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a330:	e011      	b.n	801a356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a336:	2b00      	cmp	r3, #0
 801a338:	d012      	beq.n	801a360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	3324      	adds	r3, #36	; 0x24
 801a33e:	4618      	mov	r0, r3
 801a340:	f000 fe3a 	bl	801afb8 <xTaskRemoveFromEventList>
 801a344:	4603      	mov	r3, r0
 801a346:	2b00      	cmp	r3, #0
 801a348:	d001      	beq.n	801a34e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a34a:	f000 ff0f 	bl	801b16c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a34e:	7bfb      	ldrb	r3, [r7, #15]
 801a350:	3b01      	subs	r3, #1
 801a352:	b2db      	uxtb	r3, r3
 801a354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	dce9      	bgt.n	801a332 <prvUnlockQueue+0x16>
 801a35e:	e000      	b.n	801a362 <prvUnlockQueue+0x46>
					break;
 801a360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	22ff      	movs	r2, #255	; 0xff
 801a366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a36a:	f001 fe6b 	bl	801c044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a36e:	f001 fe39 	bl	801bfe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a37a:	e011      	b.n	801a3a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	691b      	ldr	r3, [r3, #16]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d012      	beq.n	801a3aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	3310      	adds	r3, #16
 801a388:	4618      	mov	r0, r3
 801a38a:	f000 fe15 	bl	801afb8 <xTaskRemoveFromEventList>
 801a38e:	4603      	mov	r3, r0
 801a390:	2b00      	cmp	r3, #0
 801a392:	d001      	beq.n	801a398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a394:	f000 feea 	bl	801b16c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a398:	7bbb      	ldrb	r3, [r7, #14]
 801a39a:	3b01      	subs	r3, #1
 801a39c:	b2db      	uxtb	r3, r3
 801a39e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a3a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	dce9      	bgt.n	801a37c <prvUnlockQueue+0x60>
 801a3a8:	e000      	b.n	801a3ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a3aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	22ff      	movs	r2, #255	; 0xff
 801a3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a3b4:	f001 fe46 	bl	801c044 <vPortExitCritical>
}
 801a3b8:	bf00      	nop
 801a3ba:	3710      	adds	r7, #16
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	bd80      	pop	{r7, pc}

0801a3c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a3c8:	f001 fe0c 	bl	801bfe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d102      	bne.n	801a3da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	60fb      	str	r3, [r7, #12]
 801a3d8:	e001      	b.n	801a3de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a3da:	2300      	movs	r3, #0
 801a3dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a3de:	f001 fe31 	bl	801c044 <vPortExitCritical>

	return xReturn;
 801a3e2:	68fb      	ldr	r3, [r7, #12]
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	3710      	adds	r7, #16
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}

0801a3ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a3f4:	f001 fdf6 	bl	801bfe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a400:	429a      	cmp	r2, r3
 801a402:	d102      	bne.n	801a40a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a404:	2301      	movs	r3, #1
 801a406:	60fb      	str	r3, [r7, #12]
 801a408:	e001      	b.n	801a40e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a40a:	2300      	movs	r3, #0
 801a40c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a40e:	f001 fe19 	bl	801c044 <vPortExitCritical>

	return xReturn;
 801a412:	68fb      	ldr	r3, [r7, #12]
}
 801a414:	4618      	mov	r0, r3
 801a416:	3710      	adds	r7, #16
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a41c:	b480      	push	{r7}
 801a41e:	b085      	sub	sp, #20
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a426:	2300      	movs	r3, #0
 801a428:	60fb      	str	r3, [r7, #12]
 801a42a:	e014      	b.n	801a456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a42c:	4a0f      	ldr	r2, [pc, #60]	; (801a46c <vQueueAddToRegistry+0x50>)
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d10b      	bne.n	801a450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a438:	490c      	ldr	r1, [pc, #48]	; (801a46c <vQueueAddToRegistry+0x50>)
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	683a      	ldr	r2, [r7, #0]
 801a43e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a442:	4a0a      	ldr	r2, [pc, #40]	; (801a46c <vQueueAddToRegistry+0x50>)
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	00db      	lsls	r3, r3, #3
 801a448:	4413      	add	r3, r2
 801a44a:	687a      	ldr	r2, [r7, #4]
 801a44c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a44e:	e006      	b.n	801a45e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	3301      	adds	r3, #1
 801a454:	60fb      	str	r3, [r7, #12]
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	2b63      	cmp	r3, #99	; 0x63
 801a45a:	d9e7      	bls.n	801a42c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a45c:	bf00      	nop
 801a45e:	bf00      	nop
 801a460:	3714      	adds	r7, #20
 801a462:	46bd      	mov	sp, r7
 801a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a468:	4770      	bx	lr
 801a46a:	bf00      	nop
 801a46c:	2001d148 	.word	0x2001d148

0801a470 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a470:	b580      	push	{r7, lr}
 801a472:	b086      	sub	sp, #24
 801a474:	af00      	add	r7, sp, #0
 801a476:	60f8      	str	r0, [r7, #12]
 801a478:	60b9      	str	r1, [r7, #8]
 801a47a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a480:	f001 fdb0 	bl	801bfe4 <vPortEnterCritical>
 801a484:	697b      	ldr	r3, [r7, #20]
 801a486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a48a:	b25b      	sxtb	r3, r3
 801a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a490:	d103      	bne.n	801a49a <vQueueWaitForMessageRestricted+0x2a>
 801a492:	697b      	ldr	r3, [r7, #20]
 801a494:	2200      	movs	r2, #0
 801a496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a4a0:	b25b      	sxtb	r3, r3
 801a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4a6:	d103      	bne.n	801a4b0 <vQueueWaitForMessageRestricted+0x40>
 801a4a8:	697b      	ldr	r3, [r7, #20]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a4b0:	f001 fdc8 	bl	801c044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d106      	bne.n	801a4ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	3324      	adds	r3, #36	; 0x24
 801a4c0:	687a      	ldr	r2, [r7, #4]
 801a4c2:	68b9      	ldr	r1, [r7, #8]
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f000 fd4b 	bl	801af60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a4ca:	6978      	ldr	r0, [r7, #20]
 801a4cc:	f7ff ff26 	bl	801a31c <prvUnlockQueue>
	}
 801a4d0:	bf00      	nop
 801a4d2:	3718      	adds	r7, #24
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}

0801a4d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b08c      	sub	sp, #48	; 0x30
 801a4dc:	af04      	add	r7, sp, #16
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	603b      	str	r3, [r7, #0]
 801a4e4:	4613      	mov	r3, r2
 801a4e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a4e8:	88fb      	ldrh	r3, [r7, #6]
 801a4ea:	009b      	lsls	r3, r3, #2
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f001 fe9b 	bl	801c228 <pvPortMalloc>
 801a4f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d00e      	beq.n	801a518 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a4fa:	2060      	movs	r0, #96	; 0x60
 801a4fc:	f001 fe94 	bl	801c228 <pvPortMalloc>
 801a500:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a502:	69fb      	ldr	r3, [r7, #28]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d003      	beq.n	801a510 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	697a      	ldr	r2, [r7, #20]
 801a50c:	631a      	str	r2, [r3, #48]	; 0x30
 801a50e:	e005      	b.n	801a51c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a510:	6978      	ldr	r0, [r7, #20]
 801a512:	f001 ff4d 	bl	801c3b0 <vPortFree>
 801a516:	e001      	b.n	801a51c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a518:	2300      	movs	r3, #0
 801a51a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a51c:	69fb      	ldr	r3, [r7, #28]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d013      	beq.n	801a54a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a522:	88fa      	ldrh	r2, [r7, #6]
 801a524:	2300      	movs	r3, #0
 801a526:	9303      	str	r3, [sp, #12]
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	9302      	str	r3, [sp, #8]
 801a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a52e:	9301      	str	r3, [sp, #4]
 801a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a532:	9300      	str	r3, [sp, #0]
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	68b9      	ldr	r1, [r7, #8]
 801a538:	68f8      	ldr	r0, [r7, #12]
 801a53a:	f000 f80e 	bl	801a55a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a53e:	69f8      	ldr	r0, [r7, #28]
 801a540:	f000 f89e 	bl	801a680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a544:	2301      	movs	r3, #1
 801a546:	61bb      	str	r3, [r7, #24]
 801a548:	e002      	b.n	801a550 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a54a:	f04f 33ff 	mov.w	r3, #4294967295
 801a54e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a550:	69bb      	ldr	r3, [r7, #24]
	}
 801a552:	4618      	mov	r0, r3
 801a554:	3720      	adds	r7, #32
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}

0801a55a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a55a:	b580      	push	{r7, lr}
 801a55c:	b088      	sub	sp, #32
 801a55e:	af00      	add	r7, sp, #0
 801a560:	60f8      	str	r0, [r7, #12]
 801a562:	60b9      	str	r1, [r7, #8]
 801a564:	607a      	str	r2, [r7, #4]
 801a566:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a56a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	009b      	lsls	r3, r3, #2
 801a570:	461a      	mov	r2, r3
 801a572:	21a5      	movs	r1, #165	; 0xa5
 801a574:	f005 fbd6 	bl	801fd24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a57a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a582:	3b01      	subs	r3, #1
 801a584:	009b      	lsls	r3, r3, #2
 801a586:	4413      	add	r3, r2
 801a588:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	f023 0307 	bic.w	r3, r3, #7
 801a590:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a592:	69bb      	ldr	r3, [r7, #24]
 801a594:	f003 0307 	and.w	r3, r3, #7
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d00a      	beq.n	801a5b2 <prvInitialiseNewTask+0x58>
	__asm volatile
 801a59c:	f04f 0320 	mov.w	r3, #32
 801a5a0:	f383 8811 	msr	BASEPRI, r3
 801a5a4:	f3bf 8f6f 	isb	sy
 801a5a8:	f3bf 8f4f 	dsb	sy
 801a5ac:	617b      	str	r3, [r7, #20]
}
 801a5ae:	bf00      	nop
 801a5b0:	e7fe      	b.n	801a5b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a5b2:	68bb      	ldr	r3, [r7, #8]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d01f      	beq.n	801a5f8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	61fb      	str	r3, [r7, #28]
 801a5bc:	e012      	b.n	801a5e4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a5be:	68ba      	ldr	r2, [r7, #8]
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	4413      	add	r3, r2
 801a5c4:	7819      	ldrb	r1, [r3, #0]
 801a5c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	4413      	add	r3, r2
 801a5cc:	3334      	adds	r3, #52	; 0x34
 801a5ce:	460a      	mov	r2, r1
 801a5d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a5d2:	68ba      	ldr	r2, [r7, #8]
 801a5d4:	69fb      	ldr	r3, [r7, #28]
 801a5d6:	4413      	add	r3, r2
 801a5d8:	781b      	ldrb	r3, [r3, #0]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d006      	beq.n	801a5ec <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	3301      	adds	r3, #1
 801a5e2:	61fb      	str	r3, [r7, #28]
 801a5e4:	69fb      	ldr	r3, [r7, #28]
 801a5e6:	2b0f      	cmp	r3, #15
 801a5e8:	d9e9      	bls.n	801a5be <prvInitialiseNewTask+0x64>
 801a5ea:	e000      	b.n	801a5ee <prvInitialiseNewTask+0x94>
			{
				break;
 801a5ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a5f6:	e003      	b.n	801a600 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a602:	2b06      	cmp	r3, #6
 801a604:	d901      	bls.n	801a60a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a606:	2306      	movs	r3, #6
 801a608:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a60e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a614:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a618:	2200      	movs	r2, #0
 801a61a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a61e:	3304      	adds	r3, #4
 801a620:	4618      	mov	r0, r3
 801a622:	f7fe ffb5 	bl	8019590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a628:	3318      	adds	r3, #24
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7fe ffb0 	bl	8019590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a634:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a638:	f1c3 0207 	rsb	r2, r3, #7
 801a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a63e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a644:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a648:	2200      	movs	r2, #0
 801a64a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a64e:	2200      	movs	r2, #0
 801a650:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a654:	2200      	movs	r2, #0
 801a656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a65a:	683a      	ldr	r2, [r7, #0]
 801a65c:	68f9      	ldr	r1, [r7, #12]
 801a65e:	69b8      	ldr	r0, [r7, #24]
 801a660:	f001 fb92 	bl	801bd88 <pxPortInitialiseStack>
 801a664:	4602      	mov	r2, r0
 801a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a668:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d002      	beq.n	801a676 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a676:	bf00      	nop
 801a678:	3720      	adds	r7, #32
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
	...

0801a680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b082      	sub	sp, #8
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a688:	f001 fcac 	bl	801bfe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a68c:	4b2c      	ldr	r3, [pc, #176]	; (801a740 <prvAddNewTaskToReadyList+0xc0>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	3301      	adds	r3, #1
 801a692:	4a2b      	ldr	r2, [pc, #172]	; (801a740 <prvAddNewTaskToReadyList+0xc0>)
 801a694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a696:	4b2b      	ldr	r3, [pc, #172]	; (801a744 <prvAddNewTaskToReadyList+0xc4>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d109      	bne.n	801a6b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a69e:	4a29      	ldr	r2, [pc, #164]	; (801a744 <prvAddNewTaskToReadyList+0xc4>)
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a6a4:	4b26      	ldr	r3, [pc, #152]	; (801a740 <prvAddNewTaskToReadyList+0xc0>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	2b01      	cmp	r3, #1
 801a6aa:	d110      	bne.n	801a6ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a6ac:	f000 fd84 	bl	801b1b8 <prvInitialiseTaskLists>
 801a6b0:	e00d      	b.n	801a6ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a6b2:	4b25      	ldr	r3, [pc, #148]	; (801a748 <prvAddNewTaskToReadyList+0xc8>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d109      	bne.n	801a6ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a6ba:	4b22      	ldr	r3, [pc, #136]	; (801a744 <prvAddNewTaskToReadyList+0xc4>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	d802      	bhi.n	801a6ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a6c8:	4a1e      	ldr	r2, [pc, #120]	; (801a744 <prvAddNewTaskToReadyList+0xc4>)
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a6ce:	4b1f      	ldr	r3, [pc, #124]	; (801a74c <prvAddNewTaskToReadyList+0xcc>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	4a1d      	ldr	r2, [pc, #116]	; (801a74c <prvAddNewTaskToReadyList+0xcc>)
 801a6d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a6d8:	4b1c      	ldr	r3, [pc, #112]	; (801a74c <prvAddNewTaskToReadyList+0xcc>)
 801a6da:	681a      	ldr	r2, [r3, #0]
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e4:	2201      	movs	r2, #1
 801a6e6:	409a      	lsls	r2, r3
 801a6e8:	4b19      	ldr	r3, [pc, #100]	; (801a750 <prvAddNewTaskToReadyList+0xd0>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	4313      	orrs	r3, r2
 801a6ee:	4a18      	ldr	r2, [pc, #96]	; (801a750 <prvAddNewTaskToReadyList+0xd0>)
 801a6f0:	6013      	str	r3, [r2, #0]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6f6:	4613      	mov	r3, r2
 801a6f8:	009b      	lsls	r3, r3, #2
 801a6fa:	4413      	add	r3, r2
 801a6fc:	009b      	lsls	r3, r3, #2
 801a6fe:	4a15      	ldr	r2, [pc, #84]	; (801a754 <prvAddNewTaskToReadyList+0xd4>)
 801a700:	441a      	add	r2, r3
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	3304      	adds	r3, #4
 801a706:	4619      	mov	r1, r3
 801a708:	4610      	mov	r0, r2
 801a70a:	f7fe ff4e 	bl	80195aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a70e:	f001 fc99 	bl	801c044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a712:	4b0d      	ldr	r3, [pc, #52]	; (801a748 <prvAddNewTaskToReadyList+0xc8>)
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d00e      	beq.n	801a738 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a71a:	4b0a      	ldr	r3, [pc, #40]	; (801a744 <prvAddNewTaskToReadyList+0xc4>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a724:	429a      	cmp	r2, r3
 801a726:	d207      	bcs.n	801a738 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a728:	4b0b      	ldr	r3, [pc, #44]	; (801a758 <prvAddNewTaskToReadyList+0xd8>)
 801a72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a72e:	601a      	str	r2, [r3, #0]
 801a730:	f3bf 8f4f 	dsb	sy
 801a734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a738:	bf00      	nop
 801a73a:	3708      	adds	r7, #8
 801a73c:	46bd      	mov	sp, r7
 801a73e:	bd80      	pop	{r7, pc}
 801a740:	200011d0 	.word	0x200011d0
 801a744:	200010d0 	.word	0x200010d0
 801a748:	200011dc 	.word	0x200011dc
 801a74c:	200011ec 	.word	0x200011ec
 801a750:	200011d8 	.word	0x200011d8
 801a754:	200010d4 	.word	0x200010d4
 801a758:	e000ed04 	.word	0xe000ed04

0801a75c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b084      	sub	sp, #16
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801a764:	f001 fc3e 	bl	801bfe4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d102      	bne.n	801a774 <vTaskSuspend+0x18>
 801a76e:	4b3c      	ldr	r3, [pc, #240]	; (801a860 <vTaskSuspend+0x104>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	e000      	b.n	801a776 <vTaskSuspend+0x1a>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	3304      	adds	r3, #4
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7fe ff71 	bl	8019664 <uxListRemove>
 801a782:	4603      	mov	r3, r0
 801a784:	2b00      	cmp	r3, #0
 801a786:	d115      	bne.n	801a7b4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a78c:	4935      	ldr	r1, [pc, #212]	; (801a864 <vTaskSuspend+0x108>)
 801a78e:	4613      	mov	r3, r2
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	4413      	add	r3, r2
 801a794:	009b      	lsls	r3, r3, #2
 801a796:	440b      	add	r3, r1
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d10a      	bne.n	801a7b4 <vTaskSuspend+0x58>
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7a2:	2201      	movs	r2, #1
 801a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 801a7a8:	43da      	mvns	r2, r3
 801a7aa:	4b2f      	ldr	r3, [pc, #188]	; (801a868 <vTaskSuspend+0x10c>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	4013      	ands	r3, r2
 801a7b0:	4a2d      	ldr	r2, [pc, #180]	; (801a868 <vTaskSuspend+0x10c>)
 801a7b2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d004      	beq.n	801a7c6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	3318      	adds	r3, #24
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7fe ff4f 	bl	8019664 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	3304      	adds	r3, #4
 801a7ca:	4619      	mov	r1, r3
 801a7cc:	4827      	ldr	r0, [pc, #156]	; (801a86c <vTaskSuspend+0x110>)
 801a7ce:	f7fe feec 	bl	80195aa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a7d8:	b2db      	uxtb	r3, r3
 801a7da:	2b01      	cmp	r3, #1
 801a7dc:	d103      	bne.n	801a7e6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801a7e6:	f001 fc2d 	bl	801c044 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801a7ea:	4b21      	ldr	r3, [pc, #132]	; (801a870 <vTaskSuspend+0x114>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d005      	beq.n	801a7fe <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801a7f2:	f001 fbf7 	bl	801bfe4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801a7f6:	f000 fd5d 	bl	801b2b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801a7fa:	f001 fc23 	bl	801c044 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801a7fe:	4b18      	ldr	r3, [pc, #96]	; (801a860 <vTaskSuspend+0x104>)
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	68fa      	ldr	r2, [r7, #12]
 801a804:	429a      	cmp	r2, r3
 801a806:	d127      	bne.n	801a858 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 801a808:	4b19      	ldr	r3, [pc, #100]	; (801a870 <vTaskSuspend+0x114>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d017      	beq.n	801a840 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801a810:	4b18      	ldr	r3, [pc, #96]	; (801a874 <vTaskSuspend+0x118>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d00a      	beq.n	801a82e <vTaskSuspend+0xd2>
	__asm volatile
 801a818:	f04f 0320 	mov.w	r3, #32
 801a81c:	f383 8811 	msr	BASEPRI, r3
 801a820:	f3bf 8f6f 	isb	sy
 801a824:	f3bf 8f4f 	dsb	sy
 801a828:	60bb      	str	r3, [r7, #8]
}
 801a82a:	bf00      	nop
 801a82c:	e7fe      	b.n	801a82c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801a82e:	4b12      	ldr	r3, [pc, #72]	; (801a878 <vTaskSuspend+0x11c>)
 801a830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a834:	601a      	str	r2, [r3, #0]
 801a836:	f3bf 8f4f 	dsb	sy
 801a83a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a83e:	e00b      	b.n	801a858 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801a840:	4b0a      	ldr	r3, [pc, #40]	; (801a86c <vTaskSuspend+0x110>)
 801a842:	681a      	ldr	r2, [r3, #0]
 801a844:	4b0d      	ldr	r3, [pc, #52]	; (801a87c <vTaskSuspend+0x120>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	429a      	cmp	r2, r3
 801a84a:	d103      	bne.n	801a854 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801a84c:	4b04      	ldr	r3, [pc, #16]	; (801a860 <vTaskSuspend+0x104>)
 801a84e:	2200      	movs	r2, #0
 801a850:	601a      	str	r2, [r3, #0]
	}
 801a852:	e001      	b.n	801a858 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801a854:	f000 fafa 	bl	801ae4c <vTaskSwitchContext>
	}
 801a858:	bf00      	nop
 801a85a:	3710      	adds	r7, #16
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}
 801a860:	200010d0 	.word	0x200010d0
 801a864:	200010d4 	.word	0x200010d4
 801a868:	200011d8 	.word	0x200011d8
 801a86c:	200011bc 	.word	0x200011bc
 801a870:	200011dc 	.word	0x200011dc
 801a874:	200011f8 	.word	0x200011f8
 801a878:	e000ed04 	.word	0xe000ed04
 801a87c:	200011d0 	.word	0x200011d0

0801a880 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801a880:	b480      	push	{r7}
 801a882:	b087      	sub	sp, #28
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801a888:	2300      	movs	r3, #0
 801a88a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d10a      	bne.n	801a8ac <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801a896:	f04f 0320 	mov.w	r3, #32
 801a89a:	f383 8811 	msr	BASEPRI, r3
 801a89e:	f3bf 8f6f 	isb	sy
 801a8a2:	f3bf 8f4f 	dsb	sy
 801a8a6:	60fb      	str	r3, [r7, #12]
}
 801a8a8:	bf00      	nop
 801a8aa:	e7fe      	b.n	801a8aa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	695b      	ldr	r3, [r3, #20]
 801a8b0:	4a0a      	ldr	r2, [pc, #40]	; (801a8dc <prvTaskIsTaskSuspended+0x5c>)
 801a8b2:	4293      	cmp	r3, r2
 801a8b4:	d10a      	bne.n	801a8cc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801a8b6:	693b      	ldr	r3, [r7, #16]
 801a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8ba:	4a09      	ldr	r2, [pc, #36]	; (801a8e0 <prvTaskIsTaskSuspended+0x60>)
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	d005      	beq.n	801a8cc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801a8c0:	693b      	ldr	r3, [r7, #16]
 801a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d101      	bne.n	801a8cc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a8cc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	371c      	adds	r7, #28
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d8:	4770      	bx	lr
 801a8da:	bf00      	nop
 801a8dc:	200011bc 	.word	0x200011bc
 801a8e0:	20001190 	.word	0x20001190

0801a8e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b084      	sub	sp, #16
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d10a      	bne.n	801a90c <vTaskResume+0x28>
	__asm volatile
 801a8f6:	f04f 0320 	mov.w	r3, #32
 801a8fa:	f383 8811 	msr	BASEPRI, r3
 801a8fe:	f3bf 8f6f 	isb	sy
 801a902:	f3bf 8f4f 	dsb	sy
 801a906:	60bb      	str	r3, [r7, #8]
}
 801a908:	bf00      	nop
 801a90a:	e7fe      	b.n	801a90a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801a90c:	4b20      	ldr	r3, [pc, #128]	; (801a990 <vTaskResume+0xac>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	68fa      	ldr	r2, [r7, #12]
 801a912:	429a      	cmp	r2, r3
 801a914:	d037      	beq.n	801a986 <vTaskResume+0xa2>
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d034      	beq.n	801a986 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 801a91c:	f001 fb62 	bl	801bfe4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a920:	68f8      	ldr	r0, [r7, #12]
 801a922:	f7ff ffad 	bl	801a880 <prvTaskIsTaskSuspended>
 801a926:	4603      	mov	r3, r0
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d02a      	beq.n	801a982 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	3304      	adds	r3, #4
 801a930:	4618      	mov	r0, r3
 801a932:	f7fe fe97 	bl	8019664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a93a:	2201      	movs	r2, #1
 801a93c:	409a      	lsls	r2, r3
 801a93e:	4b15      	ldr	r3, [pc, #84]	; (801a994 <vTaskResume+0xb0>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	4313      	orrs	r3, r2
 801a944:	4a13      	ldr	r2, [pc, #76]	; (801a994 <vTaskResume+0xb0>)
 801a946:	6013      	str	r3, [r2, #0]
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a94c:	4613      	mov	r3, r2
 801a94e:	009b      	lsls	r3, r3, #2
 801a950:	4413      	add	r3, r2
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	4a10      	ldr	r2, [pc, #64]	; (801a998 <vTaskResume+0xb4>)
 801a956:	441a      	add	r2, r3
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	3304      	adds	r3, #4
 801a95c:	4619      	mov	r1, r3
 801a95e:	4610      	mov	r0, r2
 801a960:	f7fe fe23 	bl	80195aa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a968:	4b09      	ldr	r3, [pc, #36]	; (801a990 <vTaskResume+0xac>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a96e:	429a      	cmp	r2, r3
 801a970:	d307      	bcc.n	801a982 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801a972:	4b0a      	ldr	r3, [pc, #40]	; (801a99c <vTaskResume+0xb8>)
 801a974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a978:	601a      	str	r2, [r3, #0]
 801a97a:	f3bf 8f4f 	dsb	sy
 801a97e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801a982:	f001 fb5f 	bl	801c044 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a986:	bf00      	nop
 801a988:	3710      	adds	r7, #16
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	200010d0 	.word	0x200010d0
 801a994:	200011d8 	.word	0x200011d8
 801a998:	200010d4 	.word	0x200010d4
 801a99c:	e000ed04 	.word	0xe000ed04

0801a9a0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b08a      	sub	sp, #40	; 0x28
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d10a      	bne.n	801a9cc <xTaskResumeFromISR+0x2c>
	__asm volatile
 801a9b6:	f04f 0320 	mov.w	r3, #32
 801a9ba:	f383 8811 	msr	BASEPRI, r3
 801a9be:	f3bf 8f6f 	isb	sy
 801a9c2:	f3bf 8f4f 	dsb	sy
 801a9c6:	61bb      	str	r3, [r7, #24]
}
 801a9c8:	bf00      	nop
 801a9ca:	e7fe      	b.n	801a9ca <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a9cc:	f001 fbec 	bl	801c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 801a9d0:	f3ef 8211 	mrs	r2, BASEPRI
 801a9d4:	f04f 0320 	mov.w	r3, #32
 801a9d8:	f383 8811 	msr	BASEPRI, r3
 801a9dc:	f3bf 8f6f 	isb	sy
 801a9e0:	f3bf 8f4f 	dsb	sy
 801a9e4:	617a      	str	r2, [r7, #20]
 801a9e6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a9e8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a9ea:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a9ec:	6a38      	ldr	r0, [r7, #32]
 801a9ee:	f7ff ff47 	bl	801a880 <prvTaskIsTaskSuspended>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d02f      	beq.n	801aa58 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a9f8:	4b1d      	ldr	r3, [pc, #116]	; (801aa70 <xTaskResumeFromISR+0xd0>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d125      	bne.n	801aa4c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801aa00:	6a3b      	ldr	r3, [r7, #32]
 801aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa04:	4b1b      	ldr	r3, [pc, #108]	; (801aa74 <xTaskResumeFromISR+0xd4>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	d301      	bcc.n	801aa12 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801aa0e:	2301      	movs	r3, #1
 801aa10:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aa12:	6a3b      	ldr	r3, [r7, #32]
 801aa14:	3304      	adds	r3, #4
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7fe fe24 	bl	8019664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801aa1c:	6a3b      	ldr	r3, [r7, #32]
 801aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa20:	2201      	movs	r2, #1
 801aa22:	409a      	lsls	r2, r3
 801aa24:	4b14      	ldr	r3, [pc, #80]	; (801aa78 <xTaskResumeFromISR+0xd8>)
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	4313      	orrs	r3, r2
 801aa2a:	4a13      	ldr	r2, [pc, #76]	; (801aa78 <xTaskResumeFromISR+0xd8>)
 801aa2c:	6013      	str	r3, [r2, #0]
 801aa2e:	6a3b      	ldr	r3, [r7, #32]
 801aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa32:	4613      	mov	r3, r2
 801aa34:	009b      	lsls	r3, r3, #2
 801aa36:	4413      	add	r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	4a10      	ldr	r2, [pc, #64]	; (801aa7c <xTaskResumeFromISR+0xdc>)
 801aa3c:	441a      	add	r2, r3
 801aa3e:	6a3b      	ldr	r3, [r7, #32]
 801aa40:	3304      	adds	r3, #4
 801aa42:	4619      	mov	r1, r3
 801aa44:	4610      	mov	r0, r2
 801aa46:	f7fe fdb0 	bl	80195aa <vListInsertEnd>
 801aa4a:	e005      	b.n	801aa58 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801aa4c:	6a3b      	ldr	r3, [r7, #32]
 801aa4e:	3318      	adds	r3, #24
 801aa50:	4619      	mov	r1, r3
 801aa52:	480b      	ldr	r0, [pc, #44]	; (801aa80 <xTaskResumeFromISR+0xe0>)
 801aa54:	f7fe fda9 	bl	80195aa <vListInsertEnd>
 801aa58:	69fb      	ldr	r3, [r7, #28]
 801aa5a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	f383 8811 	msr	BASEPRI, r3
}
 801aa62:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801aa66:	4618      	mov	r0, r3
 801aa68:	3728      	adds	r7, #40	; 0x28
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	200011f8 	.word	0x200011f8
 801aa74:	200010d0 	.word	0x200010d0
 801aa78:	200011d8 	.word	0x200011d8
 801aa7c:	200010d4 	.word	0x200010d4
 801aa80:	20001190 	.word	0x20001190

0801aa84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b086      	sub	sp, #24
 801aa88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801aa8a:	4b22      	ldr	r3, [pc, #136]	; (801ab14 <vTaskStartScheduler+0x90>)
 801aa8c:	9301      	str	r3, [sp, #4]
 801aa8e:	2300      	movs	r3, #0
 801aa90:	9300      	str	r3, [sp, #0]
 801aa92:	2300      	movs	r3, #0
 801aa94:	2280      	movs	r2, #128	; 0x80
 801aa96:	4920      	ldr	r1, [pc, #128]	; (801ab18 <vTaskStartScheduler+0x94>)
 801aa98:	4820      	ldr	r0, [pc, #128]	; (801ab1c <vTaskStartScheduler+0x98>)
 801aa9a:	f7ff fd1d 	bl	801a4d8 <xTaskCreate>
 801aa9e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	2b01      	cmp	r3, #1
 801aaa4:	d102      	bne.n	801aaac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 801aaa6:	f000 fe5d 	bl	801b764 <xTimerCreateTimerTask>
 801aaaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	2b01      	cmp	r3, #1
 801aab0:	d11c      	bne.n	801aaec <vTaskStartScheduler+0x68>
	__asm volatile
 801aab2:	f04f 0320 	mov.w	r3, #32
 801aab6:	f383 8811 	msr	BASEPRI, r3
 801aaba:	f3bf 8f6f 	isb	sy
 801aabe:	f3bf 8f4f 	dsb	sy
 801aac2:	60bb      	str	r3, [r7, #8]
}
 801aac4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801aac6:	4b16      	ldr	r3, [pc, #88]	; (801ab20 <vTaskStartScheduler+0x9c>)
 801aac8:	f04f 32ff 	mov.w	r2, #4294967295
 801aacc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801aace:	4b15      	ldr	r3, [pc, #84]	; (801ab24 <vTaskStartScheduler+0xa0>)
 801aad0:	2201      	movs	r2, #1
 801aad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801aad4:	4b14      	ldr	r3, [pc, #80]	; (801ab28 <vTaskStartScheduler+0xa4>)
 801aad6:	2200      	movs	r2, #0
 801aad8:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 801aada:	4b14      	ldr	r3, [pc, #80]	; (801ab2c <vTaskStartScheduler+0xa8>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7ed f82f 	bl	8007b44 <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801aae6:	f001 f9db 	bl	801bea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801aaea:	e00e      	b.n	801ab0a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaf2:	d10a      	bne.n	801ab0a <vTaskStartScheduler+0x86>
	__asm volatile
 801aaf4:	f04f 0320 	mov.w	r3, #32
 801aaf8:	f383 8811 	msr	BASEPRI, r3
 801aafc:	f3bf 8f6f 	isb	sy
 801ab00:	f3bf 8f4f 	dsb	sy
 801ab04:	607b      	str	r3, [r7, #4]
}
 801ab06:	bf00      	nop
 801ab08:	e7fe      	b.n	801ab08 <vTaskStartScheduler+0x84>
}
 801ab0a:	bf00      	nop
 801ab0c:	3710      	adds	r7, #16
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}
 801ab12:	bf00      	nop
 801ab14:	200011f4 	.word	0x200011f4
 801ab18:	0802307c 	.word	0x0802307c
 801ab1c:	0801b185 	.word	0x0801b185
 801ab20:	200011f0 	.word	0x200011f0
 801ab24:	200011dc 	.word	0x200011dc
 801ab28:	200011d4 	.word	0x200011d4
 801ab2c:	200010d0 	.word	0x200010d0

0801ab30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801ab30:	b480      	push	{r7}
 801ab32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801ab34:	4b04      	ldr	r3, [pc, #16]	; (801ab48 <vTaskSuspendAll+0x18>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	3301      	adds	r3, #1
 801ab3a:	4a03      	ldr	r2, [pc, #12]	; (801ab48 <vTaskSuspendAll+0x18>)
 801ab3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801ab3e:	bf00      	nop
 801ab40:	46bd      	mov	sp, r7
 801ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab46:	4770      	bx	lr
 801ab48:	200011f8 	.word	0x200011f8

0801ab4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b084      	sub	sp, #16
 801ab50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801ab52:	2300      	movs	r3, #0
 801ab54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801ab56:	2300      	movs	r3, #0
 801ab58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801ab5a:	4b41      	ldr	r3, [pc, #260]	; (801ac60 <xTaskResumeAll+0x114>)
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d10a      	bne.n	801ab78 <xTaskResumeAll+0x2c>
	__asm volatile
 801ab62:	f04f 0320 	mov.w	r3, #32
 801ab66:	f383 8811 	msr	BASEPRI, r3
 801ab6a:	f3bf 8f6f 	isb	sy
 801ab6e:	f3bf 8f4f 	dsb	sy
 801ab72:	603b      	str	r3, [r7, #0]
}
 801ab74:	bf00      	nop
 801ab76:	e7fe      	b.n	801ab76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ab78:	f001 fa34 	bl	801bfe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801ab7c:	4b38      	ldr	r3, [pc, #224]	; (801ac60 <xTaskResumeAll+0x114>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	3b01      	subs	r3, #1
 801ab82:	4a37      	ldr	r2, [pc, #220]	; (801ac60 <xTaskResumeAll+0x114>)
 801ab84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ab86:	4b36      	ldr	r3, [pc, #216]	; (801ac60 <xTaskResumeAll+0x114>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d161      	bne.n	801ac52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801ab8e:	4b35      	ldr	r3, [pc, #212]	; (801ac64 <xTaskResumeAll+0x118>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d05d      	beq.n	801ac52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ab96:	e02e      	b.n	801abf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ab98:	4b33      	ldr	r3, [pc, #204]	; (801ac68 <xTaskResumeAll+0x11c>)
 801ab9a:	68db      	ldr	r3, [r3, #12]
 801ab9c:	68db      	ldr	r3, [r3, #12]
 801ab9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	3318      	adds	r3, #24
 801aba4:	4618      	mov	r0, r3
 801aba6:	f7fe fd5d 	bl	8019664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	3304      	adds	r3, #4
 801abae:	4618      	mov	r0, r3
 801abb0:	f7fe fd58 	bl	8019664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abb8:	2201      	movs	r2, #1
 801abba:	409a      	lsls	r2, r3
 801abbc:	4b2b      	ldr	r3, [pc, #172]	; (801ac6c <xTaskResumeAll+0x120>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	4313      	orrs	r3, r2
 801abc2:	4a2a      	ldr	r2, [pc, #168]	; (801ac6c <xTaskResumeAll+0x120>)
 801abc4:	6013      	str	r3, [r2, #0]
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abca:	4613      	mov	r3, r2
 801abcc:	009b      	lsls	r3, r3, #2
 801abce:	4413      	add	r3, r2
 801abd0:	009b      	lsls	r3, r3, #2
 801abd2:	4a27      	ldr	r2, [pc, #156]	; (801ac70 <xTaskResumeAll+0x124>)
 801abd4:	441a      	add	r2, r3
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	3304      	adds	r3, #4
 801abda:	4619      	mov	r1, r3
 801abdc:	4610      	mov	r0, r2
 801abde:	f7fe fce4 	bl	80195aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abe6:	4b23      	ldr	r3, [pc, #140]	; (801ac74 <xTaskResumeAll+0x128>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abec:	429a      	cmp	r2, r3
 801abee:	d302      	bcc.n	801abf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801abf0:	4b21      	ldr	r3, [pc, #132]	; (801ac78 <xTaskResumeAll+0x12c>)
 801abf2:	2201      	movs	r2, #1
 801abf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801abf6:	4b1c      	ldr	r3, [pc, #112]	; (801ac68 <xTaskResumeAll+0x11c>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d1cc      	bne.n	801ab98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d001      	beq.n	801ac08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ac04:	f000 fb56 	bl	801b2b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801ac08:	4b1c      	ldr	r3, [pc, #112]	; (801ac7c <xTaskResumeAll+0x130>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d010      	beq.n	801ac36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ac14:	f000 f846 	bl	801aca4 <xTaskIncrementTick>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d002      	beq.n	801ac24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801ac1e:	4b16      	ldr	r3, [pc, #88]	; (801ac78 <xTaskResumeAll+0x12c>)
 801ac20:	2201      	movs	r2, #1
 801ac22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	3b01      	subs	r3, #1
 801ac28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d1f1      	bne.n	801ac14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801ac30:	4b12      	ldr	r3, [pc, #72]	; (801ac7c <xTaskResumeAll+0x130>)
 801ac32:	2200      	movs	r2, #0
 801ac34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801ac36:	4b10      	ldr	r3, [pc, #64]	; (801ac78 <xTaskResumeAll+0x12c>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d009      	beq.n	801ac52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801ac3e:	2301      	movs	r3, #1
 801ac40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801ac42:	4b0f      	ldr	r3, [pc, #60]	; (801ac80 <xTaskResumeAll+0x134>)
 801ac44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac48:	601a      	str	r2, [r3, #0]
 801ac4a:	f3bf 8f4f 	dsb	sy
 801ac4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801ac52:	f001 f9f7 	bl	801c044 <vPortExitCritical>

	return xAlreadyYielded;
 801ac56:	68bb      	ldr	r3, [r7, #8]
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3710      	adds	r7, #16
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}
 801ac60:	200011f8 	.word	0x200011f8
 801ac64:	200011d0 	.word	0x200011d0
 801ac68:	20001190 	.word	0x20001190
 801ac6c:	200011d8 	.word	0x200011d8
 801ac70:	200010d4 	.word	0x200010d4
 801ac74:	200010d0 	.word	0x200010d0
 801ac78:	200011e4 	.word	0x200011e4
 801ac7c:	200011e0 	.word	0x200011e0
 801ac80:	e000ed04 	.word	0xe000ed04

0801ac84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ac84:	b480      	push	{r7}
 801ac86:	b083      	sub	sp, #12
 801ac88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801ac8a:	4b05      	ldr	r3, [pc, #20]	; (801aca0 <xTaskGetTickCount+0x1c>)
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801ac90:	687b      	ldr	r3, [r7, #4]
}
 801ac92:	4618      	mov	r0, r3
 801ac94:	370c      	adds	r7, #12
 801ac96:	46bd      	mov	sp, r7
 801ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop
 801aca0:	200011d4 	.word	0x200011d4

0801aca4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b086      	sub	sp, #24
 801aca8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801acaa:	2300      	movs	r3, #0
 801acac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801acae:	4b4e      	ldr	r3, [pc, #312]	; (801ade8 <xTaskIncrementTick+0x144>)
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f040 8088 	bne.w	801adc8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801acb8:	4b4c      	ldr	r3, [pc, #304]	; (801adec <xTaskIncrementTick+0x148>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	3301      	adds	r3, #1
 801acbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801acc0:	4a4a      	ldr	r2, [pc, #296]	; (801adec <xTaskIncrementTick+0x148>)
 801acc2:	693b      	ldr	r3, [r7, #16]
 801acc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d120      	bne.n	801ad0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801accc:	4b48      	ldr	r3, [pc, #288]	; (801adf0 <xTaskIncrementTick+0x14c>)
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d00a      	beq.n	801acec <xTaskIncrementTick+0x48>
	__asm volatile
 801acd6:	f04f 0320 	mov.w	r3, #32
 801acda:	f383 8811 	msr	BASEPRI, r3
 801acde:	f3bf 8f6f 	isb	sy
 801ace2:	f3bf 8f4f 	dsb	sy
 801ace6:	603b      	str	r3, [r7, #0]
}
 801ace8:	bf00      	nop
 801acea:	e7fe      	b.n	801acea <xTaskIncrementTick+0x46>
 801acec:	4b40      	ldr	r3, [pc, #256]	; (801adf0 <xTaskIncrementTick+0x14c>)
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	60fb      	str	r3, [r7, #12]
 801acf2:	4b40      	ldr	r3, [pc, #256]	; (801adf4 <xTaskIncrementTick+0x150>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4a3e      	ldr	r2, [pc, #248]	; (801adf0 <xTaskIncrementTick+0x14c>)
 801acf8:	6013      	str	r3, [r2, #0]
 801acfa:	4a3e      	ldr	r2, [pc, #248]	; (801adf4 <xTaskIncrementTick+0x150>)
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	6013      	str	r3, [r2, #0]
 801ad00:	4b3d      	ldr	r3, [pc, #244]	; (801adf8 <xTaskIncrementTick+0x154>)
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	3301      	adds	r3, #1
 801ad06:	4a3c      	ldr	r2, [pc, #240]	; (801adf8 <xTaskIncrementTick+0x154>)
 801ad08:	6013      	str	r3, [r2, #0]
 801ad0a:	f000 fad3 	bl	801b2b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ad0e:	4b3b      	ldr	r3, [pc, #236]	; (801adfc <xTaskIncrementTick+0x158>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	693a      	ldr	r2, [r7, #16]
 801ad14:	429a      	cmp	r2, r3
 801ad16:	d348      	bcc.n	801adaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ad18:	4b35      	ldr	r3, [pc, #212]	; (801adf0 <xTaskIncrementTick+0x14c>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d104      	bne.n	801ad2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ad22:	4b36      	ldr	r3, [pc, #216]	; (801adfc <xTaskIncrementTick+0x158>)
 801ad24:	f04f 32ff 	mov.w	r2, #4294967295
 801ad28:	601a      	str	r2, [r3, #0]
					break;
 801ad2a:	e03e      	b.n	801adaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ad2c:	4b30      	ldr	r3, [pc, #192]	; (801adf0 <xTaskIncrementTick+0x14c>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	68db      	ldr	r3, [r3, #12]
 801ad32:	68db      	ldr	r3, [r3, #12]
 801ad34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ad36:	68bb      	ldr	r3, [r7, #8]
 801ad38:	685b      	ldr	r3, [r3, #4]
 801ad3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801ad3c:	693a      	ldr	r2, [r7, #16]
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	429a      	cmp	r2, r3
 801ad42:	d203      	bcs.n	801ad4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801ad44:	4a2d      	ldr	r2, [pc, #180]	; (801adfc <xTaskIncrementTick+0x158>)
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801ad4a:	e02e      	b.n	801adaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	3304      	adds	r3, #4
 801ad50:	4618      	mov	r0, r3
 801ad52:	f7fe fc87 	bl	8019664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d004      	beq.n	801ad68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	3318      	adds	r3, #24
 801ad62:	4618      	mov	r0, r3
 801ad64:	f7fe fc7e 	bl	8019664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad6c:	2201      	movs	r2, #1
 801ad6e:	409a      	lsls	r2, r3
 801ad70:	4b23      	ldr	r3, [pc, #140]	; (801ae00 <xTaskIncrementTick+0x15c>)
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	4313      	orrs	r3, r2
 801ad76:	4a22      	ldr	r2, [pc, #136]	; (801ae00 <xTaskIncrementTick+0x15c>)
 801ad78:	6013      	str	r3, [r2, #0]
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad7e:	4613      	mov	r3, r2
 801ad80:	009b      	lsls	r3, r3, #2
 801ad82:	4413      	add	r3, r2
 801ad84:	009b      	lsls	r3, r3, #2
 801ad86:	4a1f      	ldr	r2, [pc, #124]	; (801ae04 <xTaskIncrementTick+0x160>)
 801ad88:	441a      	add	r2, r3
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	3304      	adds	r3, #4
 801ad8e:	4619      	mov	r1, r3
 801ad90:	4610      	mov	r0, r2
 801ad92:	f7fe fc0a 	bl	80195aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ad96:	68bb      	ldr	r3, [r7, #8]
 801ad98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad9a:	4b1b      	ldr	r3, [pc, #108]	; (801ae08 <xTaskIncrementTick+0x164>)
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ada0:	429a      	cmp	r2, r3
 801ada2:	d3b9      	bcc.n	801ad18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801ada4:	2301      	movs	r3, #1
 801ada6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ada8:	e7b6      	b.n	801ad18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801adaa:	4b17      	ldr	r3, [pc, #92]	; (801ae08 <xTaskIncrementTick+0x164>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adb0:	4914      	ldr	r1, [pc, #80]	; (801ae04 <xTaskIncrementTick+0x160>)
 801adb2:	4613      	mov	r3, r2
 801adb4:	009b      	lsls	r3, r3, #2
 801adb6:	4413      	add	r3, r2
 801adb8:	009b      	lsls	r3, r3, #2
 801adba:	440b      	add	r3, r1
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	2b01      	cmp	r3, #1
 801adc0:	d907      	bls.n	801add2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801adc2:	2301      	movs	r3, #1
 801adc4:	617b      	str	r3, [r7, #20]
 801adc6:	e004      	b.n	801add2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801adc8:	4b10      	ldr	r3, [pc, #64]	; (801ae0c <xTaskIncrementTick+0x168>)
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	3301      	adds	r3, #1
 801adce:	4a0f      	ldr	r2, [pc, #60]	; (801ae0c <xTaskIncrementTick+0x168>)
 801add0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801add2:	4b0f      	ldr	r3, [pc, #60]	; (801ae10 <xTaskIncrementTick+0x16c>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d001      	beq.n	801adde <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801adda:	2301      	movs	r3, #1
 801addc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801adde:	697b      	ldr	r3, [r7, #20]
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	3718      	adds	r7, #24
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}
 801ade8:	200011f8 	.word	0x200011f8
 801adec:	200011d4 	.word	0x200011d4
 801adf0:	20001188 	.word	0x20001188
 801adf4:	2000118c 	.word	0x2000118c
 801adf8:	200011e8 	.word	0x200011e8
 801adfc:	200011f0 	.word	0x200011f0
 801ae00:	200011d8 	.word	0x200011d8
 801ae04:	200010d4 	.word	0x200010d4
 801ae08:	200010d0 	.word	0x200010d0
 801ae0c:	200011e0 	.word	0x200011e0
 801ae10:	200011e4 	.word	0x200011e4

0801ae14 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b084      	sub	sp, #16
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
 801ae1c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d103      	bne.n	801ae2c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801ae24:	4b08      	ldr	r3, [pc, #32]	; (801ae48 <vTaskSetApplicationTaskTag+0x34>)
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	60fb      	str	r3, [r7, #12]
 801ae2a:	e001      	b.n	801ae30 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801ae30:	f001 f8d8 	bl	801bfe4 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	683a      	ldr	r2, [r7, #0]
 801ae38:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801ae3a:	f001 f903 	bl	801c044 <vPortExitCritical>
	}
 801ae3e:	bf00      	nop
 801ae40:	3710      	adds	r7, #16
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
 801ae46:	bf00      	nop
 801ae48:	200010d0 	.word	0x200010d0

0801ae4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b086      	sub	sp, #24
 801ae50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801ae52:	4b2c      	ldr	r3, [pc, #176]	; (801af04 <vTaskSwitchContext+0xb8>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d003      	beq.n	801ae62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801ae5a:	4b2b      	ldr	r3, [pc, #172]	; (801af08 <vTaskSwitchContext+0xbc>)
 801ae5c:	2201      	movs	r2, #1
 801ae5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801ae60:	e04b      	b.n	801aefa <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 801ae62:	4b29      	ldr	r3, [pc, #164]	; (801af08 <vTaskSwitchContext+0xbc>)
 801ae64:	2200      	movs	r2, #0
 801ae66:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 801ae68:	4b28      	ldr	r3, [pc, #160]	; (801af0c <vTaskSwitchContext+0xc0>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7ec fe82 	bl	8007b78 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae74:	4b26      	ldr	r3, [pc, #152]	; (801af10 <vTaskSwitchContext+0xc4>)
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	fab3 f383 	clz	r3, r3
 801ae80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801ae82:	7afb      	ldrb	r3, [r7, #11]
 801ae84:	f1c3 031f 	rsb	r3, r3, #31
 801ae88:	617b      	str	r3, [r7, #20]
 801ae8a:	4922      	ldr	r1, [pc, #136]	; (801af14 <vTaskSwitchContext+0xc8>)
 801ae8c:	697a      	ldr	r2, [r7, #20]
 801ae8e:	4613      	mov	r3, r2
 801ae90:	009b      	lsls	r3, r3, #2
 801ae92:	4413      	add	r3, r2
 801ae94:	009b      	lsls	r3, r3, #2
 801ae96:	440b      	add	r3, r1
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d10a      	bne.n	801aeb4 <vTaskSwitchContext+0x68>
	__asm volatile
 801ae9e:	f04f 0320 	mov.w	r3, #32
 801aea2:	f383 8811 	msr	BASEPRI, r3
 801aea6:	f3bf 8f6f 	isb	sy
 801aeaa:	f3bf 8f4f 	dsb	sy
 801aeae:	607b      	str	r3, [r7, #4]
}
 801aeb0:	bf00      	nop
 801aeb2:	e7fe      	b.n	801aeb2 <vTaskSwitchContext+0x66>
 801aeb4:	697a      	ldr	r2, [r7, #20]
 801aeb6:	4613      	mov	r3, r2
 801aeb8:	009b      	lsls	r3, r3, #2
 801aeba:	4413      	add	r3, r2
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	4a15      	ldr	r2, [pc, #84]	; (801af14 <vTaskSwitchContext+0xc8>)
 801aec0:	4413      	add	r3, r2
 801aec2:	613b      	str	r3, [r7, #16]
 801aec4:	693b      	ldr	r3, [r7, #16]
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	685a      	ldr	r2, [r3, #4]
 801aeca:	693b      	ldr	r3, [r7, #16]
 801aecc:	605a      	str	r2, [r3, #4]
 801aece:	693b      	ldr	r3, [r7, #16]
 801aed0:	685a      	ldr	r2, [r3, #4]
 801aed2:	693b      	ldr	r3, [r7, #16]
 801aed4:	3308      	adds	r3, #8
 801aed6:	429a      	cmp	r2, r3
 801aed8:	d104      	bne.n	801aee4 <vTaskSwitchContext+0x98>
 801aeda:	693b      	ldr	r3, [r7, #16]
 801aedc:	685b      	ldr	r3, [r3, #4]
 801aede:	685a      	ldr	r2, [r3, #4]
 801aee0:	693b      	ldr	r3, [r7, #16]
 801aee2:	605a      	str	r2, [r3, #4]
 801aee4:	693b      	ldr	r3, [r7, #16]
 801aee6:	685b      	ldr	r3, [r3, #4]
 801aee8:	68db      	ldr	r3, [r3, #12]
 801aeea:	4a08      	ldr	r2, [pc, #32]	; (801af0c <vTaskSwitchContext+0xc0>)
 801aeec:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801aeee:	4b07      	ldr	r3, [pc, #28]	; (801af0c <vTaskSwitchContext+0xc0>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7ec fe25 	bl	8007b44 <BSP_DEBUG_PIN_On>
}
 801aefa:	bf00      	nop
 801aefc:	3718      	adds	r7, #24
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
 801af02:	bf00      	nop
 801af04:	200011f8 	.word	0x200011f8
 801af08:	200011e4 	.word	0x200011e4
 801af0c:	200010d0 	.word	0x200010d0
 801af10:	200011d8 	.word	0x200011d8
 801af14:	200010d4 	.word	0x200010d4

0801af18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b084      	sub	sp, #16
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
 801af20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d10a      	bne.n	801af3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801af28:	f04f 0320 	mov.w	r3, #32
 801af2c:	f383 8811 	msr	BASEPRI, r3
 801af30:	f3bf 8f6f 	isb	sy
 801af34:	f3bf 8f4f 	dsb	sy
 801af38:	60fb      	str	r3, [r7, #12]
}
 801af3a:	bf00      	nop
 801af3c:	e7fe      	b.n	801af3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801af3e:	4b07      	ldr	r3, [pc, #28]	; (801af5c <vTaskPlaceOnEventList+0x44>)
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	3318      	adds	r3, #24
 801af44:	4619      	mov	r1, r3
 801af46:	6878      	ldr	r0, [r7, #4]
 801af48:	f7fe fb53 	bl	80195f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801af4c:	2101      	movs	r1, #1
 801af4e:	6838      	ldr	r0, [r7, #0]
 801af50:	f000 fba2 	bl	801b698 <prvAddCurrentTaskToDelayedList>
}
 801af54:	bf00      	nop
 801af56:	3710      	adds	r7, #16
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}
 801af5c:	200010d0 	.word	0x200010d0

0801af60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801af60:	b580      	push	{r7, lr}
 801af62:	b086      	sub	sp, #24
 801af64:	af00      	add	r7, sp, #0
 801af66:	60f8      	str	r0, [r7, #12]
 801af68:	60b9      	str	r1, [r7, #8]
 801af6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d10a      	bne.n	801af88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801af72:	f04f 0320 	mov.w	r3, #32
 801af76:	f383 8811 	msr	BASEPRI, r3
 801af7a:	f3bf 8f6f 	isb	sy
 801af7e:	f3bf 8f4f 	dsb	sy
 801af82:	617b      	str	r3, [r7, #20]
}
 801af84:	bf00      	nop
 801af86:	e7fe      	b.n	801af86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801af88:	4b0a      	ldr	r3, [pc, #40]	; (801afb4 <vTaskPlaceOnEventListRestricted+0x54>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	3318      	adds	r3, #24
 801af8e:	4619      	mov	r1, r3
 801af90:	68f8      	ldr	r0, [r7, #12]
 801af92:	f7fe fb0a 	bl	80195aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d002      	beq.n	801afa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801af9c:	f04f 33ff 	mov.w	r3, #4294967295
 801afa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801afa2:	6879      	ldr	r1, [r7, #4]
 801afa4:	68b8      	ldr	r0, [r7, #8]
 801afa6:	f000 fb77 	bl	801b698 <prvAddCurrentTaskToDelayedList>
	}
 801afaa:	bf00      	nop
 801afac:	3718      	adds	r7, #24
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
 801afb2:	bf00      	nop
 801afb4:	200010d0 	.word	0x200010d0

0801afb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b086      	sub	sp, #24
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	68db      	ldr	r3, [r3, #12]
 801afc4:	68db      	ldr	r3, [r3, #12]
 801afc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d10a      	bne.n	801afe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801afce:	f04f 0320 	mov.w	r3, #32
 801afd2:	f383 8811 	msr	BASEPRI, r3
 801afd6:	f3bf 8f6f 	isb	sy
 801afda:	f3bf 8f4f 	dsb	sy
 801afde:	60fb      	str	r3, [r7, #12]
}
 801afe0:	bf00      	nop
 801afe2:	e7fe      	b.n	801afe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	3318      	adds	r3, #24
 801afe8:	4618      	mov	r0, r3
 801afea:	f7fe fb3b 	bl	8019664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801afee:	4b1d      	ldr	r3, [pc, #116]	; (801b064 <xTaskRemoveFromEventList+0xac>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d11c      	bne.n	801b030 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801aff6:	693b      	ldr	r3, [r7, #16]
 801aff8:	3304      	adds	r3, #4
 801affa:	4618      	mov	r0, r3
 801affc:	f7fe fb32 	bl	8019664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b000:	693b      	ldr	r3, [r7, #16]
 801b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b004:	2201      	movs	r2, #1
 801b006:	409a      	lsls	r2, r3
 801b008:	4b17      	ldr	r3, [pc, #92]	; (801b068 <xTaskRemoveFromEventList+0xb0>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4313      	orrs	r3, r2
 801b00e:	4a16      	ldr	r2, [pc, #88]	; (801b068 <xTaskRemoveFromEventList+0xb0>)
 801b010:	6013      	str	r3, [r2, #0]
 801b012:	693b      	ldr	r3, [r7, #16]
 801b014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b016:	4613      	mov	r3, r2
 801b018:	009b      	lsls	r3, r3, #2
 801b01a:	4413      	add	r3, r2
 801b01c:	009b      	lsls	r3, r3, #2
 801b01e:	4a13      	ldr	r2, [pc, #76]	; (801b06c <xTaskRemoveFromEventList+0xb4>)
 801b020:	441a      	add	r2, r3
 801b022:	693b      	ldr	r3, [r7, #16]
 801b024:	3304      	adds	r3, #4
 801b026:	4619      	mov	r1, r3
 801b028:	4610      	mov	r0, r2
 801b02a:	f7fe fabe 	bl	80195aa <vListInsertEnd>
 801b02e:	e005      	b.n	801b03c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	3318      	adds	r3, #24
 801b034:	4619      	mov	r1, r3
 801b036:	480e      	ldr	r0, [pc, #56]	; (801b070 <xTaskRemoveFromEventList+0xb8>)
 801b038:	f7fe fab7 	bl	80195aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b03c:	693b      	ldr	r3, [r7, #16]
 801b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b040:	4b0c      	ldr	r3, [pc, #48]	; (801b074 <xTaskRemoveFromEventList+0xbc>)
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b046:	429a      	cmp	r2, r3
 801b048:	d905      	bls.n	801b056 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b04a:	2301      	movs	r3, #1
 801b04c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b04e:	4b0a      	ldr	r3, [pc, #40]	; (801b078 <xTaskRemoveFromEventList+0xc0>)
 801b050:	2201      	movs	r2, #1
 801b052:	601a      	str	r2, [r3, #0]
 801b054:	e001      	b.n	801b05a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801b056:	2300      	movs	r3, #0
 801b058:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b05a:	697b      	ldr	r3, [r7, #20]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3718      	adds	r7, #24
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	200011f8 	.word	0x200011f8
 801b068:	200011d8 	.word	0x200011d8
 801b06c:	200010d4 	.word	0x200010d4
 801b070:	20001190 	.word	0x20001190
 801b074:	200010d0 	.word	0x200010d0
 801b078:	200011e4 	.word	0x200011e4

0801b07c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b07c:	b480      	push	{r7}
 801b07e:	b083      	sub	sp, #12
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b084:	4b06      	ldr	r3, [pc, #24]	; (801b0a0 <vTaskInternalSetTimeOutState+0x24>)
 801b086:	681a      	ldr	r2, [r3, #0]
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b08c:	4b05      	ldr	r3, [pc, #20]	; (801b0a4 <vTaskInternalSetTimeOutState+0x28>)
 801b08e:	681a      	ldr	r2, [r3, #0]
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	605a      	str	r2, [r3, #4]
}
 801b094:	bf00      	nop
 801b096:	370c      	adds	r7, #12
 801b098:	46bd      	mov	sp, r7
 801b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09e:	4770      	bx	lr
 801b0a0:	200011e8 	.word	0x200011e8
 801b0a4:	200011d4 	.word	0x200011d4

0801b0a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b088      	sub	sp, #32
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
 801b0b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d10a      	bne.n	801b0ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b0b8:	f04f 0320 	mov.w	r3, #32
 801b0bc:	f383 8811 	msr	BASEPRI, r3
 801b0c0:	f3bf 8f6f 	isb	sy
 801b0c4:	f3bf 8f4f 	dsb	sy
 801b0c8:	613b      	str	r3, [r7, #16]
}
 801b0ca:	bf00      	nop
 801b0cc:	e7fe      	b.n	801b0cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d10a      	bne.n	801b0ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b0d4:	f04f 0320 	mov.w	r3, #32
 801b0d8:	f383 8811 	msr	BASEPRI, r3
 801b0dc:	f3bf 8f6f 	isb	sy
 801b0e0:	f3bf 8f4f 	dsb	sy
 801b0e4:	60fb      	str	r3, [r7, #12]
}
 801b0e6:	bf00      	nop
 801b0e8:	e7fe      	b.n	801b0e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b0ea:	f000 ff7b 	bl	801bfe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b0ee:	4b1d      	ldr	r3, [pc, #116]	; (801b164 <xTaskCheckForTimeOut+0xbc>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	685b      	ldr	r3, [r3, #4]
 801b0f8:	69ba      	ldr	r2, [r7, #24]
 801b0fa:	1ad3      	subs	r3, r2, r3
 801b0fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b0fe:	683b      	ldr	r3, [r7, #0]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b106:	d102      	bne.n	801b10e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b108:	2300      	movs	r3, #0
 801b10a:	61fb      	str	r3, [r7, #28]
 801b10c:	e023      	b.n	801b156 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681a      	ldr	r2, [r3, #0]
 801b112:	4b15      	ldr	r3, [pc, #84]	; (801b168 <xTaskCheckForTimeOut+0xc0>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	429a      	cmp	r2, r3
 801b118:	d007      	beq.n	801b12a <xTaskCheckForTimeOut+0x82>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	685b      	ldr	r3, [r3, #4]
 801b11e:	69ba      	ldr	r2, [r7, #24]
 801b120:	429a      	cmp	r2, r3
 801b122:	d302      	bcc.n	801b12a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b124:	2301      	movs	r3, #1
 801b126:	61fb      	str	r3, [r7, #28]
 801b128:	e015      	b.n	801b156 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	697a      	ldr	r2, [r7, #20]
 801b130:	429a      	cmp	r2, r3
 801b132:	d20b      	bcs.n	801b14c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	681a      	ldr	r2, [r3, #0]
 801b138:	697b      	ldr	r3, [r7, #20]
 801b13a:	1ad2      	subs	r2, r2, r3
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b140:	6878      	ldr	r0, [r7, #4]
 801b142:	f7ff ff9b 	bl	801b07c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b146:	2300      	movs	r3, #0
 801b148:	61fb      	str	r3, [r7, #28]
 801b14a:	e004      	b.n	801b156 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	2200      	movs	r2, #0
 801b150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b152:	2301      	movs	r3, #1
 801b154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b156:	f000 ff75 	bl	801c044 <vPortExitCritical>

	return xReturn;
 801b15a:	69fb      	ldr	r3, [r7, #28]
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3720      	adds	r7, #32
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	200011d4 	.word	0x200011d4
 801b168:	200011e8 	.word	0x200011e8

0801b16c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b16c:	b480      	push	{r7}
 801b16e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b170:	4b03      	ldr	r3, [pc, #12]	; (801b180 <vTaskMissedYield+0x14>)
 801b172:	2201      	movs	r2, #1
 801b174:	601a      	str	r2, [r3, #0]
}
 801b176:	bf00      	nop
 801b178:	46bd      	mov	sp, r7
 801b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b17e:	4770      	bx	lr
 801b180:	200011e4 	.word	0x200011e4

0801b184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b184:	b580      	push	{r7, lr}
 801b186:	b082      	sub	sp, #8
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b18c:	f000 f854 	bl	801b238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b190:	4b07      	ldr	r3, [pc, #28]	; (801b1b0 <prvIdleTask+0x2c>)
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2b01      	cmp	r3, #1
 801b196:	d907      	bls.n	801b1a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 801b198:	4b06      	ldr	r3, [pc, #24]	; (801b1b4 <prvIdleTask+0x30>)
 801b19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b19e:	601a      	str	r2, [r3, #0]
 801b1a0:	f3bf 8f4f 	dsb	sy
 801b1a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801b1a8:	f7e8 fda6 	bl	8003cf8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801b1ac:	e7ee      	b.n	801b18c <prvIdleTask+0x8>
 801b1ae:	bf00      	nop
 801b1b0:	200010d4 	.word	0x200010d4
 801b1b4:	e000ed04 	.word	0xe000ed04

0801b1b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b1be:	2300      	movs	r3, #0
 801b1c0:	607b      	str	r3, [r7, #4]
 801b1c2:	e00c      	b.n	801b1de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b1c4:	687a      	ldr	r2, [r7, #4]
 801b1c6:	4613      	mov	r3, r2
 801b1c8:	009b      	lsls	r3, r3, #2
 801b1ca:	4413      	add	r3, r2
 801b1cc:	009b      	lsls	r3, r3, #2
 801b1ce:	4a12      	ldr	r2, [pc, #72]	; (801b218 <prvInitialiseTaskLists+0x60>)
 801b1d0:	4413      	add	r3, r2
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f7fe f9bc 	bl	8019550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	3301      	adds	r3, #1
 801b1dc:	607b      	str	r3, [r7, #4]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	2b06      	cmp	r3, #6
 801b1e2:	d9ef      	bls.n	801b1c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b1e4:	480d      	ldr	r0, [pc, #52]	; (801b21c <prvInitialiseTaskLists+0x64>)
 801b1e6:	f7fe f9b3 	bl	8019550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b1ea:	480d      	ldr	r0, [pc, #52]	; (801b220 <prvInitialiseTaskLists+0x68>)
 801b1ec:	f7fe f9b0 	bl	8019550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b1f0:	480c      	ldr	r0, [pc, #48]	; (801b224 <prvInitialiseTaskLists+0x6c>)
 801b1f2:	f7fe f9ad 	bl	8019550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b1f6:	480c      	ldr	r0, [pc, #48]	; (801b228 <prvInitialiseTaskLists+0x70>)
 801b1f8:	f7fe f9aa 	bl	8019550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b1fc:	480b      	ldr	r0, [pc, #44]	; (801b22c <prvInitialiseTaskLists+0x74>)
 801b1fe:	f7fe f9a7 	bl	8019550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b202:	4b0b      	ldr	r3, [pc, #44]	; (801b230 <prvInitialiseTaskLists+0x78>)
 801b204:	4a05      	ldr	r2, [pc, #20]	; (801b21c <prvInitialiseTaskLists+0x64>)
 801b206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b208:	4b0a      	ldr	r3, [pc, #40]	; (801b234 <prvInitialiseTaskLists+0x7c>)
 801b20a:	4a05      	ldr	r2, [pc, #20]	; (801b220 <prvInitialiseTaskLists+0x68>)
 801b20c:	601a      	str	r2, [r3, #0]
}
 801b20e:	bf00      	nop
 801b210:	3708      	adds	r7, #8
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	200010d4 	.word	0x200010d4
 801b21c:	20001160 	.word	0x20001160
 801b220:	20001174 	.word	0x20001174
 801b224:	20001190 	.word	0x20001190
 801b228:	200011a4 	.word	0x200011a4
 801b22c:	200011bc 	.word	0x200011bc
 801b230:	20001188 	.word	0x20001188
 801b234:	2000118c 	.word	0x2000118c

0801b238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b082      	sub	sp, #8
 801b23c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b23e:	e019      	b.n	801b274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b240:	f000 fed0 	bl	801bfe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b244:	4b10      	ldr	r3, [pc, #64]	; (801b288 <prvCheckTasksWaitingTermination+0x50>)
 801b246:	68db      	ldr	r3, [r3, #12]
 801b248:	68db      	ldr	r3, [r3, #12]
 801b24a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	3304      	adds	r3, #4
 801b250:	4618      	mov	r0, r3
 801b252:	f7fe fa07 	bl	8019664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b256:	4b0d      	ldr	r3, [pc, #52]	; (801b28c <prvCheckTasksWaitingTermination+0x54>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	3b01      	subs	r3, #1
 801b25c:	4a0b      	ldr	r2, [pc, #44]	; (801b28c <prvCheckTasksWaitingTermination+0x54>)
 801b25e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b260:	4b0b      	ldr	r3, [pc, #44]	; (801b290 <prvCheckTasksWaitingTermination+0x58>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	3b01      	subs	r3, #1
 801b266:	4a0a      	ldr	r2, [pc, #40]	; (801b290 <prvCheckTasksWaitingTermination+0x58>)
 801b268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b26a:	f000 feeb 	bl	801c044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b26e:	6878      	ldr	r0, [r7, #4]
 801b270:	f000 f810 	bl	801b294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b274:	4b06      	ldr	r3, [pc, #24]	; (801b290 <prvCheckTasksWaitingTermination+0x58>)
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d1e1      	bne.n	801b240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b27c:	bf00      	nop
 801b27e:	bf00      	nop
 801b280:	3708      	adds	r7, #8
 801b282:	46bd      	mov	sp, r7
 801b284:	bd80      	pop	{r7, pc}
 801b286:	bf00      	nop
 801b288:	200011a4 	.word	0x200011a4
 801b28c:	200011d0 	.word	0x200011d0
 801b290:	200011b8 	.word	0x200011b8

0801b294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b294:	b580      	push	{r7, lr}
 801b296:	b082      	sub	sp, #8
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f001 f885 	bl	801c3b0 <vPortFree>
			vPortFree( pxTCB );
 801b2a6:	6878      	ldr	r0, [r7, #4]
 801b2a8:	f001 f882 	bl	801c3b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b2ac:	bf00      	nop
 801b2ae:	3708      	adds	r7, #8
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}

0801b2b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b2b4:	b480      	push	{r7}
 801b2b6:	b083      	sub	sp, #12
 801b2b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b2ba:	4b0c      	ldr	r3, [pc, #48]	; (801b2ec <prvResetNextTaskUnblockTime+0x38>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d104      	bne.n	801b2ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b2c4:	4b0a      	ldr	r3, [pc, #40]	; (801b2f0 <prvResetNextTaskUnblockTime+0x3c>)
 801b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b2ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b2cc:	e008      	b.n	801b2e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b2ce:	4b07      	ldr	r3, [pc, #28]	; (801b2ec <prvResetNextTaskUnblockTime+0x38>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	68db      	ldr	r3, [r3, #12]
 801b2d4:	68db      	ldr	r3, [r3, #12]
 801b2d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	4a04      	ldr	r2, [pc, #16]	; (801b2f0 <prvResetNextTaskUnblockTime+0x3c>)
 801b2de:	6013      	str	r3, [r2, #0]
}
 801b2e0:	bf00      	nop
 801b2e2:	370c      	adds	r7, #12
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr
 801b2ec:	20001188 	.word	0x20001188
 801b2f0:	200011f0 	.word	0x200011f0

0801b2f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b2f4:	b480      	push	{r7}
 801b2f6:	b083      	sub	sp, #12
 801b2f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b2fa:	4b0b      	ldr	r3, [pc, #44]	; (801b328 <xTaskGetSchedulerState+0x34>)
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d102      	bne.n	801b308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b302:	2301      	movs	r3, #1
 801b304:	607b      	str	r3, [r7, #4]
 801b306:	e008      	b.n	801b31a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b308:	4b08      	ldr	r3, [pc, #32]	; (801b32c <xTaskGetSchedulerState+0x38>)
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d102      	bne.n	801b316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b310:	2302      	movs	r3, #2
 801b312:	607b      	str	r3, [r7, #4]
 801b314:	e001      	b.n	801b31a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b316:	2300      	movs	r3, #0
 801b318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b31a:	687b      	ldr	r3, [r7, #4]
	}
 801b31c:	4618      	mov	r0, r3
 801b31e:	370c      	adds	r7, #12
 801b320:	46bd      	mov	sp, r7
 801b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b326:	4770      	bx	lr
 801b328:	200011dc 	.word	0x200011dc
 801b32c:	200011f8 	.word	0x200011f8

0801b330 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b330:	b580      	push	{r7, lr}
 801b332:	b084      	sub	sp, #16
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b33c:	2300      	movs	r3, #0
 801b33e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d069      	beq.n	801b41a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b346:	68bb      	ldr	r3, [r7, #8]
 801b348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b34a:	4b36      	ldr	r3, [pc, #216]	; (801b424 <xTaskPriorityInherit+0xf4>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b350:	429a      	cmp	r2, r3
 801b352:	d259      	bcs.n	801b408 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b354:	68bb      	ldr	r3, [r7, #8]
 801b356:	699b      	ldr	r3, [r3, #24]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	db06      	blt.n	801b36a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b35c:	4b31      	ldr	r3, [pc, #196]	; (801b424 <xTaskPriorityInherit+0xf4>)
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b362:	f1c3 0207 	rsb	r2, r3, #7
 801b366:	68bb      	ldr	r3, [r7, #8]
 801b368:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b36a:	68bb      	ldr	r3, [r7, #8]
 801b36c:	6959      	ldr	r1, [r3, #20]
 801b36e:	68bb      	ldr	r3, [r7, #8]
 801b370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b372:	4613      	mov	r3, r2
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	4413      	add	r3, r2
 801b378:	009b      	lsls	r3, r3, #2
 801b37a:	4a2b      	ldr	r2, [pc, #172]	; (801b428 <xTaskPriorityInherit+0xf8>)
 801b37c:	4413      	add	r3, r2
 801b37e:	4299      	cmp	r1, r3
 801b380:	d13a      	bne.n	801b3f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b382:	68bb      	ldr	r3, [r7, #8]
 801b384:	3304      	adds	r3, #4
 801b386:	4618      	mov	r0, r3
 801b388:	f7fe f96c 	bl	8019664 <uxListRemove>
 801b38c:	4603      	mov	r3, r0
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d115      	bne.n	801b3be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b396:	4924      	ldr	r1, [pc, #144]	; (801b428 <xTaskPriorityInherit+0xf8>)
 801b398:	4613      	mov	r3, r2
 801b39a:	009b      	lsls	r3, r3, #2
 801b39c:	4413      	add	r3, r2
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	440b      	add	r3, r1
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d10a      	bne.n	801b3be <xTaskPriorityInherit+0x8e>
 801b3a8:	68bb      	ldr	r3, [r7, #8]
 801b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3ac:	2201      	movs	r2, #1
 801b3ae:	fa02 f303 	lsl.w	r3, r2, r3
 801b3b2:	43da      	mvns	r2, r3
 801b3b4:	4b1d      	ldr	r3, [pc, #116]	; (801b42c <xTaskPriorityInherit+0xfc>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	4013      	ands	r3, r2
 801b3ba:	4a1c      	ldr	r2, [pc, #112]	; (801b42c <xTaskPriorityInherit+0xfc>)
 801b3bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b3be:	4b19      	ldr	r3, [pc, #100]	; (801b424 <xTaskPriorityInherit+0xf4>)
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3cc:	2201      	movs	r2, #1
 801b3ce:	409a      	lsls	r2, r3
 801b3d0:	4b16      	ldr	r3, [pc, #88]	; (801b42c <xTaskPriorityInherit+0xfc>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	4313      	orrs	r3, r2
 801b3d6:	4a15      	ldr	r2, [pc, #84]	; (801b42c <xTaskPriorityInherit+0xfc>)
 801b3d8:	6013      	str	r3, [r2, #0]
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3de:	4613      	mov	r3, r2
 801b3e0:	009b      	lsls	r3, r3, #2
 801b3e2:	4413      	add	r3, r2
 801b3e4:	009b      	lsls	r3, r3, #2
 801b3e6:	4a10      	ldr	r2, [pc, #64]	; (801b428 <xTaskPriorityInherit+0xf8>)
 801b3e8:	441a      	add	r2, r3
 801b3ea:	68bb      	ldr	r3, [r7, #8]
 801b3ec:	3304      	adds	r3, #4
 801b3ee:	4619      	mov	r1, r3
 801b3f0:	4610      	mov	r0, r2
 801b3f2:	f7fe f8da 	bl	80195aa <vListInsertEnd>
 801b3f6:	e004      	b.n	801b402 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b3f8:	4b0a      	ldr	r3, [pc, #40]	; (801b424 <xTaskPriorityInherit+0xf4>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3fe:	68bb      	ldr	r3, [r7, #8]
 801b400:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b402:	2301      	movs	r3, #1
 801b404:	60fb      	str	r3, [r7, #12]
 801b406:	e008      	b.n	801b41a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b40c:	4b05      	ldr	r3, [pc, #20]	; (801b424 <xTaskPriorityInherit+0xf4>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b412:	429a      	cmp	r2, r3
 801b414:	d201      	bcs.n	801b41a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b416:	2301      	movs	r3, #1
 801b418:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b41a:	68fb      	ldr	r3, [r7, #12]
	}
 801b41c:	4618      	mov	r0, r3
 801b41e:	3710      	adds	r7, #16
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	200010d0 	.word	0x200010d0
 801b428:	200010d4 	.word	0x200010d4
 801b42c:	200011d8 	.word	0x200011d8

0801b430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b430:	b580      	push	{r7, lr}
 801b432:	b086      	sub	sp, #24
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b43c:	2300      	movs	r3, #0
 801b43e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d06e      	beq.n	801b524 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b446:	4b3a      	ldr	r3, [pc, #232]	; (801b530 <xTaskPriorityDisinherit+0x100>)
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	693a      	ldr	r2, [r7, #16]
 801b44c:	429a      	cmp	r2, r3
 801b44e:	d00a      	beq.n	801b466 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b450:	f04f 0320 	mov.w	r3, #32
 801b454:	f383 8811 	msr	BASEPRI, r3
 801b458:	f3bf 8f6f 	isb	sy
 801b45c:	f3bf 8f4f 	dsb	sy
 801b460:	60fb      	str	r3, [r7, #12]
}
 801b462:	bf00      	nop
 801b464:	e7fe      	b.n	801b464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b466:	693b      	ldr	r3, [r7, #16]
 801b468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d10a      	bne.n	801b484 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b46e:	f04f 0320 	mov.w	r3, #32
 801b472:	f383 8811 	msr	BASEPRI, r3
 801b476:	f3bf 8f6f 	isb	sy
 801b47a:	f3bf 8f4f 	dsb	sy
 801b47e:	60bb      	str	r3, [r7, #8]
}
 801b480:	bf00      	nop
 801b482:	e7fe      	b.n	801b482 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b484:	693b      	ldr	r3, [r7, #16]
 801b486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b488:	1e5a      	subs	r2, r3, #1
 801b48a:	693b      	ldr	r3, [r7, #16]
 801b48c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b48e:	693b      	ldr	r3, [r7, #16]
 801b490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b492:	693b      	ldr	r3, [r7, #16]
 801b494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b496:	429a      	cmp	r2, r3
 801b498:	d044      	beq.n	801b524 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d140      	bne.n	801b524 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b4a2:	693b      	ldr	r3, [r7, #16]
 801b4a4:	3304      	adds	r3, #4
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	f7fe f8dc 	bl	8019664 <uxListRemove>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d115      	bne.n	801b4de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4b6:	491f      	ldr	r1, [pc, #124]	; (801b534 <xTaskPriorityDisinherit+0x104>)
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	4413      	add	r3, r2
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	440b      	add	r3, r1
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d10a      	bne.n	801b4de <xTaskPriorityDisinherit+0xae>
 801b4c8:	693b      	ldr	r3, [r7, #16]
 801b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4cc:	2201      	movs	r2, #1
 801b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 801b4d2:	43da      	mvns	r2, r3
 801b4d4:	4b18      	ldr	r3, [pc, #96]	; (801b538 <xTaskPriorityDisinherit+0x108>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	4013      	ands	r3, r2
 801b4da:	4a17      	ldr	r2, [pc, #92]	; (801b538 <xTaskPriorityDisinherit+0x108>)
 801b4dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b4e6:	693b      	ldr	r3, [r7, #16]
 801b4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ea:	f1c3 0207 	rsb	r2, r3, #7
 801b4ee:	693b      	ldr	r3, [r7, #16]
 801b4f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b4f2:	693b      	ldr	r3, [r7, #16]
 801b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4f6:	2201      	movs	r2, #1
 801b4f8:	409a      	lsls	r2, r3
 801b4fa:	4b0f      	ldr	r3, [pc, #60]	; (801b538 <xTaskPriorityDisinherit+0x108>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4313      	orrs	r3, r2
 801b500:	4a0d      	ldr	r2, [pc, #52]	; (801b538 <xTaskPriorityDisinherit+0x108>)
 801b502:	6013      	str	r3, [r2, #0]
 801b504:	693b      	ldr	r3, [r7, #16]
 801b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b508:	4613      	mov	r3, r2
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	4413      	add	r3, r2
 801b50e:	009b      	lsls	r3, r3, #2
 801b510:	4a08      	ldr	r2, [pc, #32]	; (801b534 <xTaskPriorityDisinherit+0x104>)
 801b512:	441a      	add	r2, r3
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	3304      	adds	r3, #4
 801b518:	4619      	mov	r1, r3
 801b51a:	4610      	mov	r0, r2
 801b51c:	f7fe f845 	bl	80195aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b520:	2301      	movs	r3, #1
 801b522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b524:	697b      	ldr	r3, [r7, #20]
	}
 801b526:	4618      	mov	r0, r3
 801b528:	3718      	adds	r7, #24
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bd80      	pop	{r7, pc}
 801b52e:	bf00      	nop
 801b530:	200010d0 	.word	0x200010d0
 801b534:	200010d4 	.word	0x200010d4
 801b538:	200011d8 	.word	0x200011d8

0801b53c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b088      	sub	sp, #32
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b54a:	2301      	movs	r3, #1
 801b54c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	2b00      	cmp	r3, #0
 801b552:	f000 8083 	beq.w	801b65c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b556:	69bb      	ldr	r3, [r7, #24]
 801b558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d10a      	bne.n	801b574 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801b55e:	f04f 0320 	mov.w	r3, #32
 801b562:	f383 8811 	msr	BASEPRI, r3
 801b566:	f3bf 8f6f 	isb	sy
 801b56a:	f3bf 8f4f 	dsb	sy
 801b56e:	60fb      	str	r3, [r7, #12]
}
 801b570:	bf00      	nop
 801b572:	e7fe      	b.n	801b572 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b574:	69bb      	ldr	r3, [r7, #24]
 801b576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b578:	683a      	ldr	r2, [r7, #0]
 801b57a:	429a      	cmp	r2, r3
 801b57c:	d902      	bls.n	801b584 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	61fb      	str	r3, [r7, #28]
 801b582:	e002      	b.n	801b58a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b584:	69bb      	ldr	r3, [r7, #24]
 801b586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b588:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b58e:	69fa      	ldr	r2, [r7, #28]
 801b590:	429a      	cmp	r2, r3
 801b592:	d063      	beq.n	801b65c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b594:	69bb      	ldr	r3, [r7, #24]
 801b596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b598:	697a      	ldr	r2, [r7, #20]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d15e      	bne.n	801b65c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b59e:	4b31      	ldr	r3, [pc, #196]	; (801b664 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	69ba      	ldr	r2, [r7, #24]
 801b5a4:	429a      	cmp	r2, r3
 801b5a6:	d10a      	bne.n	801b5be <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 801b5a8:	f04f 0320 	mov.w	r3, #32
 801b5ac:	f383 8811 	msr	BASEPRI, r3
 801b5b0:	f3bf 8f6f 	isb	sy
 801b5b4:	f3bf 8f4f 	dsb	sy
 801b5b8:	60bb      	str	r3, [r7, #8]
}
 801b5ba:	bf00      	nop
 801b5bc:	e7fe      	b.n	801b5bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b5be:	69bb      	ldr	r3, [r7, #24]
 801b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b5c4:	69bb      	ldr	r3, [r7, #24]
 801b5c6:	69fa      	ldr	r2, [r7, #28]
 801b5c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b5ca:	69bb      	ldr	r3, [r7, #24]
 801b5cc:	699b      	ldr	r3, [r3, #24]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	db04      	blt.n	801b5dc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b5d2:	69fb      	ldr	r3, [r7, #28]
 801b5d4:	f1c3 0207 	rsb	r2, r3, #7
 801b5d8:	69bb      	ldr	r3, [r7, #24]
 801b5da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b5dc:	69bb      	ldr	r3, [r7, #24]
 801b5de:	6959      	ldr	r1, [r3, #20]
 801b5e0:	693a      	ldr	r2, [r7, #16]
 801b5e2:	4613      	mov	r3, r2
 801b5e4:	009b      	lsls	r3, r3, #2
 801b5e6:	4413      	add	r3, r2
 801b5e8:	009b      	lsls	r3, r3, #2
 801b5ea:	4a1f      	ldr	r2, [pc, #124]	; (801b668 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801b5ec:	4413      	add	r3, r2
 801b5ee:	4299      	cmp	r1, r3
 801b5f0:	d134      	bne.n	801b65c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	3304      	adds	r3, #4
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7fe f834 	bl	8019664 <uxListRemove>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d115      	bne.n	801b62e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b602:	69bb      	ldr	r3, [r7, #24]
 801b604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b606:	4918      	ldr	r1, [pc, #96]	; (801b668 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801b608:	4613      	mov	r3, r2
 801b60a:	009b      	lsls	r3, r3, #2
 801b60c:	4413      	add	r3, r2
 801b60e:	009b      	lsls	r3, r3, #2
 801b610:	440b      	add	r3, r1
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d10a      	bne.n	801b62e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801b618:	69bb      	ldr	r3, [r7, #24]
 801b61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b61c:	2201      	movs	r2, #1
 801b61e:	fa02 f303 	lsl.w	r3, r2, r3
 801b622:	43da      	mvns	r2, r3
 801b624:	4b11      	ldr	r3, [pc, #68]	; (801b66c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4013      	ands	r3, r2
 801b62a:	4a10      	ldr	r2, [pc, #64]	; (801b66c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801b62c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b62e:	69bb      	ldr	r3, [r7, #24]
 801b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b632:	2201      	movs	r2, #1
 801b634:	409a      	lsls	r2, r3
 801b636:	4b0d      	ldr	r3, [pc, #52]	; (801b66c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	4313      	orrs	r3, r2
 801b63c:	4a0b      	ldr	r2, [pc, #44]	; (801b66c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801b63e:	6013      	str	r3, [r2, #0]
 801b640:	69bb      	ldr	r3, [r7, #24]
 801b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b644:	4613      	mov	r3, r2
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	4413      	add	r3, r2
 801b64a:	009b      	lsls	r3, r3, #2
 801b64c:	4a06      	ldr	r2, [pc, #24]	; (801b668 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801b64e:	441a      	add	r2, r3
 801b650:	69bb      	ldr	r3, [r7, #24]
 801b652:	3304      	adds	r3, #4
 801b654:	4619      	mov	r1, r3
 801b656:	4610      	mov	r0, r2
 801b658:	f7fd ffa7 	bl	80195aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b65c:	bf00      	nop
 801b65e:	3720      	adds	r7, #32
 801b660:	46bd      	mov	sp, r7
 801b662:	bd80      	pop	{r7, pc}
 801b664:	200010d0 	.word	0x200010d0
 801b668:	200010d4 	.word	0x200010d4
 801b66c:	200011d8 	.word	0x200011d8

0801b670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b670:	b480      	push	{r7}
 801b672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b674:	4b07      	ldr	r3, [pc, #28]	; (801b694 <pvTaskIncrementMutexHeldCount+0x24>)
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d004      	beq.n	801b686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b67c:	4b05      	ldr	r3, [pc, #20]	; (801b694 <pvTaskIncrementMutexHeldCount+0x24>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b682:	3201      	adds	r2, #1
 801b684:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801b686:	4b03      	ldr	r3, [pc, #12]	; (801b694 <pvTaskIncrementMutexHeldCount+0x24>)
 801b688:	681b      	ldr	r3, [r3, #0]
	}
 801b68a:	4618      	mov	r0, r3
 801b68c:	46bd      	mov	sp, r7
 801b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b692:	4770      	bx	lr
 801b694:	200010d0 	.word	0x200010d0

0801b698 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b084      	sub	sp, #16
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
 801b6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b6a2:	4b29      	ldr	r3, [pc, #164]	; (801b748 <prvAddCurrentTaskToDelayedList+0xb0>)
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b6a8:	4b28      	ldr	r3, [pc, #160]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	3304      	adds	r3, #4
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7fd ffd8 	bl	8019664 <uxListRemove>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d10b      	bne.n	801b6d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801b6ba:	4b24      	ldr	r3, [pc, #144]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6c0:	2201      	movs	r2, #1
 801b6c2:	fa02 f303 	lsl.w	r3, r2, r3
 801b6c6:	43da      	mvns	r2, r3
 801b6c8:	4b21      	ldr	r3, [pc, #132]	; (801b750 <prvAddCurrentTaskToDelayedList+0xb8>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4013      	ands	r3, r2
 801b6ce:	4a20      	ldr	r2, [pc, #128]	; (801b750 <prvAddCurrentTaskToDelayedList+0xb8>)
 801b6d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6d8:	d10a      	bne.n	801b6f0 <prvAddCurrentTaskToDelayedList+0x58>
 801b6da:	683b      	ldr	r3, [r7, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d007      	beq.n	801b6f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b6e0:	4b1a      	ldr	r3, [pc, #104]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	3304      	adds	r3, #4
 801b6e6:	4619      	mov	r1, r3
 801b6e8:	481a      	ldr	r0, [pc, #104]	; (801b754 <prvAddCurrentTaskToDelayedList+0xbc>)
 801b6ea:	f7fd ff5e 	bl	80195aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b6ee:	e026      	b.n	801b73e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b6f0:	68fa      	ldr	r2, [r7, #12]
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	4413      	add	r3, r2
 801b6f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b6f8:	4b14      	ldr	r3, [pc, #80]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	68ba      	ldr	r2, [r7, #8]
 801b6fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b700:	68ba      	ldr	r2, [r7, #8]
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	429a      	cmp	r2, r3
 801b706:	d209      	bcs.n	801b71c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b708:	4b13      	ldr	r3, [pc, #76]	; (801b758 <prvAddCurrentTaskToDelayedList+0xc0>)
 801b70a:	681a      	ldr	r2, [r3, #0]
 801b70c:	4b0f      	ldr	r3, [pc, #60]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	3304      	adds	r3, #4
 801b712:	4619      	mov	r1, r3
 801b714:	4610      	mov	r0, r2
 801b716:	f7fd ff6c 	bl	80195f2 <vListInsert>
}
 801b71a:	e010      	b.n	801b73e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b71c:	4b0f      	ldr	r3, [pc, #60]	; (801b75c <prvAddCurrentTaskToDelayedList+0xc4>)
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	4b0a      	ldr	r3, [pc, #40]	; (801b74c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	3304      	adds	r3, #4
 801b726:	4619      	mov	r1, r3
 801b728:	4610      	mov	r0, r2
 801b72a:	f7fd ff62 	bl	80195f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b72e:	4b0c      	ldr	r3, [pc, #48]	; (801b760 <prvAddCurrentTaskToDelayedList+0xc8>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	68ba      	ldr	r2, [r7, #8]
 801b734:	429a      	cmp	r2, r3
 801b736:	d202      	bcs.n	801b73e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801b738:	4a09      	ldr	r2, [pc, #36]	; (801b760 <prvAddCurrentTaskToDelayedList+0xc8>)
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	6013      	str	r3, [r2, #0]
}
 801b73e:	bf00      	nop
 801b740:	3710      	adds	r7, #16
 801b742:	46bd      	mov	sp, r7
 801b744:	bd80      	pop	{r7, pc}
 801b746:	bf00      	nop
 801b748:	200011d4 	.word	0x200011d4
 801b74c:	200010d0 	.word	0x200010d0
 801b750:	200011d8 	.word	0x200011d8
 801b754:	200011bc 	.word	0x200011bc
 801b758:	2000118c 	.word	0x2000118c
 801b75c:	20001188 	.word	0x20001188
 801b760:	200011f0 	.word	0x200011f0

0801b764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b084      	sub	sp, #16
 801b768:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 801b76a:	2300      	movs	r3, #0
 801b76c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b76e:	f000 fad5 	bl	801bd1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b772:	4b11      	ldr	r3, [pc, #68]	; (801b7b8 <xTimerCreateTimerTask+0x54>)
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d00b      	beq.n	801b792 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 801b77a:	4b10      	ldr	r3, [pc, #64]	; (801b7bc <xTimerCreateTimerTask+0x58>)
 801b77c:	9301      	str	r3, [sp, #4]
 801b77e:	2306      	movs	r3, #6
 801b780:	9300      	str	r3, [sp, #0]
 801b782:	2300      	movs	r3, #0
 801b784:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b788:	490d      	ldr	r1, [pc, #52]	; (801b7c0 <xTimerCreateTimerTask+0x5c>)
 801b78a:	480e      	ldr	r0, [pc, #56]	; (801b7c4 <xTimerCreateTimerTask+0x60>)
 801b78c:	f7fe fea4 	bl	801a4d8 <xTaskCreate>
 801b790:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d10a      	bne.n	801b7ae <xTimerCreateTimerTask+0x4a>
	__asm volatile
 801b798:	f04f 0320 	mov.w	r3, #32
 801b79c:	f383 8811 	msr	BASEPRI, r3
 801b7a0:	f3bf 8f6f 	isb	sy
 801b7a4:	f3bf 8f4f 	dsb	sy
 801b7a8:	603b      	str	r3, [r7, #0]
}
 801b7aa:	bf00      	nop
 801b7ac:	e7fe      	b.n	801b7ac <xTimerCreateTimerTask+0x48>
	return xReturn;
 801b7ae:	687b      	ldr	r3, [r7, #4]
}
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	3708      	adds	r7, #8
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	2000122c 	.word	0x2000122c
 801b7bc:	20001230 	.word	0x20001230
 801b7c0:	08023084 	.word	0x08023084
 801b7c4:	0801b8fd 	.word	0x0801b8fd

0801b7c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b08a      	sub	sp, #40	; 0x28
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	60f8      	str	r0, [r7, #12]
 801b7d0:	60b9      	str	r1, [r7, #8]
 801b7d2:	607a      	str	r2, [r7, #4]
 801b7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d10a      	bne.n	801b7f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 801b7e0:	f04f 0320 	mov.w	r3, #32
 801b7e4:	f383 8811 	msr	BASEPRI, r3
 801b7e8:	f3bf 8f6f 	isb	sy
 801b7ec:	f3bf 8f4f 	dsb	sy
 801b7f0:	623b      	str	r3, [r7, #32]
}
 801b7f2:	bf00      	nop
 801b7f4:	e7fe      	b.n	801b7f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b7f6:	4b1a      	ldr	r3, [pc, #104]	; (801b860 <xTimerGenericCommand+0x98>)
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d02a      	beq.n	801b854 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	2b05      	cmp	r3, #5
 801b80e:	dc18      	bgt.n	801b842 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b810:	f7ff fd70 	bl	801b2f4 <xTaskGetSchedulerState>
 801b814:	4603      	mov	r3, r0
 801b816:	2b02      	cmp	r3, #2
 801b818:	d109      	bne.n	801b82e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b81a:	4b11      	ldr	r3, [pc, #68]	; (801b860 <xTimerGenericCommand+0x98>)
 801b81c:	6818      	ldr	r0, [r3, #0]
 801b81e:	f107 0114 	add.w	r1, r7, #20
 801b822:	2300      	movs	r3, #0
 801b824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b826:	f7fe f841 	bl	80198ac <xQueueGenericSend>
 801b82a:	6278      	str	r0, [r7, #36]	; 0x24
 801b82c:	e012      	b.n	801b854 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b82e:	4b0c      	ldr	r3, [pc, #48]	; (801b860 <xTimerGenericCommand+0x98>)
 801b830:	6818      	ldr	r0, [r3, #0]
 801b832:	f107 0114 	add.w	r1, r7, #20
 801b836:	2300      	movs	r3, #0
 801b838:	2200      	movs	r2, #0
 801b83a:	f7fe f837 	bl	80198ac <xQueueGenericSend>
 801b83e:	6278      	str	r0, [r7, #36]	; 0x24
 801b840:	e008      	b.n	801b854 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b842:	4b07      	ldr	r3, [pc, #28]	; (801b860 <xTimerGenericCommand+0x98>)
 801b844:	6818      	ldr	r0, [r3, #0]
 801b846:	f107 0114 	add.w	r1, r7, #20
 801b84a:	2300      	movs	r3, #0
 801b84c:	683a      	ldr	r2, [r7, #0]
 801b84e:	f7fe f92b 	bl	8019aa8 <xQueueGenericSendFromISR>
 801b852:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b856:	4618      	mov	r0, r3
 801b858:	3728      	adds	r7, #40	; 0x28
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
 801b85e:	bf00      	nop
 801b860:	2000122c 	.word	0x2000122c

0801b864 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b088      	sub	sp, #32
 801b868:	af02      	add	r7, sp, #8
 801b86a:	6078      	str	r0, [r7, #4]
 801b86c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b86e:	4b22      	ldr	r3, [pc, #136]	; (801b8f8 <prvProcessExpiredTimer+0x94>)
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	68db      	ldr	r3, [r3, #12]
 801b874:	68db      	ldr	r3, [r3, #12]
 801b876:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	3304      	adds	r3, #4
 801b87c:	4618      	mov	r0, r3
 801b87e:	f7fd fef1 	bl	8019664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b882:	697b      	ldr	r3, [r7, #20]
 801b884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b888:	f003 0304 	and.w	r3, r3, #4
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d022      	beq.n	801b8d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b890:	697b      	ldr	r3, [r7, #20]
 801b892:	699a      	ldr	r2, [r3, #24]
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	18d1      	adds	r1, r2, r3
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	683a      	ldr	r2, [r7, #0]
 801b89c:	6978      	ldr	r0, [r7, #20]
 801b89e:	f000 f8d1 	bl	801ba44 <prvInsertTimerInActiveList>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d01f      	beq.n	801b8e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	9300      	str	r3, [sp, #0]
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	687a      	ldr	r2, [r7, #4]
 801b8b0:	2100      	movs	r1, #0
 801b8b2:	6978      	ldr	r0, [r7, #20]
 801b8b4:	f7ff ff88 	bl	801b7c8 <xTimerGenericCommand>
 801b8b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b8ba:	693b      	ldr	r3, [r7, #16]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d113      	bne.n	801b8e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801b8c0:	f04f 0320 	mov.w	r3, #32
 801b8c4:	f383 8811 	msr	BASEPRI, r3
 801b8c8:	f3bf 8f6f 	isb	sy
 801b8cc:	f3bf 8f4f 	dsb	sy
 801b8d0:	60fb      	str	r3, [r7, #12]
}
 801b8d2:	bf00      	nop
 801b8d4:	e7fe      	b.n	801b8d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b8dc:	f023 0301 	bic.w	r3, r3, #1
 801b8e0:	b2da      	uxtb	r2, r3
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	6a1b      	ldr	r3, [r3, #32]
 801b8ec:	6978      	ldr	r0, [r7, #20]
 801b8ee:	4798      	blx	r3
}
 801b8f0:	bf00      	nop
 801b8f2:	3718      	adds	r7, #24
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	20001224 	.word	0x20001224

0801b8fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b084      	sub	sp, #16
 801b900:	af00      	add	r7, sp, #0
 801b902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b904:	f107 0308 	add.w	r3, r7, #8
 801b908:	4618      	mov	r0, r3
 801b90a:	f000 f857 	bl	801b9bc <prvGetNextExpireTime>
 801b90e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	4619      	mov	r1, r3
 801b914:	68f8      	ldr	r0, [r7, #12]
 801b916:	f000 f803 	bl	801b920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b91a:	f000 f8d5 	bl	801bac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b91e:	e7f1      	b.n	801b904 <prvTimerTask+0x8>

0801b920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b92a:	f7ff f901 	bl	801ab30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b92e:	f107 0308 	add.w	r3, r7, #8
 801b932:	4618      	mov	r0, r3
 801b934:	f000 f866 	bl	801ba04 <prvSampleTimeNow>
 801b938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b93a:	68bb      	ldr	r3, [r7, #8]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d130      	bne.n	801b9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b940:	683b      	ldr	r3, [r7, #0]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d10a      	bne.n	801b95c <prvProcessTimerOrBlockTask+0x3c>
 801b946:	687a      	ldr	r2, [r7, #4]
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d806      	bhi.n	801b95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b94e:	f7ff f8fd 	bl	801ab4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b952:	68f9      	ldr	r1, [r7, #12]
 801b954:	6878      	ldr	r0, [r7, #4]
 801b956:	f7ff ff85 	bl	801b864 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b95a:	e024      	b.n	801b9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d008      	beq.n	801b974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b962:	4b13      	ldr	r3, [pc, #76]	; (801b9b0 <prvProcessTimerOrBlockTask+0x90>)
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d101      	bne.n	801b970 <prvProcessTimerOrBlockTask+0x50>
 801b96c:	2301      	movs	r3, #1
 801b96e:	e000      	b.n	801b972 <prvProcessTimerOrBlockTask+0x52>
 801b970:	2300      	movs	r3, #0
 801b972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b974:	4b0f      	ldr	r3, [pc, #60]	; (801b9b4 <prvProcessTimerOrBlockTask+0x94>)
 801b976:	6818      	ldr	r0, [r3, #0]
 801b978:	687a      	ldr	r2, [r7, #4]
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	1ad3      	subs	r3, r2, r3
 801b97e:	683a      	ldr	r2, [r7, #0]
 801b980:	4619      	mov	r1, r3
 801b982:	f7fe fd75 	bl	801a470 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b986:	f7ff f8e1 	bl	801ab4c <xTaskResumeAll>
 801b98a:	4603      	mov	r3, r0
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d10a      	bne.n	801b9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b990:	4b09      	ldr	r3, [pc, #36]	; (801b9b8 <prvProcessTimerOrBlockTask+0x98>)
 801b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b996:	601a      	str	r2, [r3, #0]
 801b998:	f3bf 8f4f 	dsb	sy
 801b99c:	f3bf 8f6f 	isb	sy
}
 801b9a0:	e001      	b.n	801b9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b9a2:	f7ff f8d3 	bl	801ab4c <xTaskResumeAll>
}
 801b9a6:	bf00      	nop
 801b9a8:	3710      	adds	r7, #16
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
 801b9ae:	bf00      	nop
 801b9b0:	20001228 	.word	0x20001228
 801b9b4:	2000122c 	.word	0x2000122c
 801b9b8:	e000ed04 	.word	0xe000ed04

0801b9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b9bc:	b480      	push	{r7}
 801b9be:	b085      	sub	sp, #20
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b9c4:	4b0e      	ldr	r3, [pc, #56]	; (801ba00 <prvGetNextExpireTime+0x44>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d101      	bne.n	801b9d2 <prvGetNextExpireTime+0x16>
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	e000      	b.n	801b9d4 <prvGetNextExpireTime+0x18>
 801b9d2:	2200      	movs	r2, #0
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d105      	bne.n	801b9ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b9e0:	4b07      	ldr	r3, [pc, #28]	; (801ba00 <prvGetNextExpireTime+0x44>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	68db      	ldr	r3, [r3, #12]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	60fb      	str	r3, [r7, #12]
 801b9ea:	e001      	b.n	801b9f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b9f0:	68fb      	ldr	r3, [r7, #12]
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3714      	adds	r7, #20
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fc:	4770      	bx	lr
 801b9fe:	bf00      	nop
 801ba00:	20001224 	.word	0x20001224

0801ba04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ba0c:	f7ff f93a 	bl	801ac84 <xTaskGetTickCount>
 801ba10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ba12:	4b0b      	ldr	r3, [pc, #44]	; (801ba40 <prvSampleTimeNow+0x3c>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	68fa      	ldr	r2, [r7, #12]
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d205      	bcs.n	801ba28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801ba1c:	f000 f91a 	bl	801bc54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	2201      	movs	r2, #1
 801ba24:	601a      	str	r2, [r3, #0]
 801ba26:	e002      	b.n	801ba2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ba2e:	4a04      	ldr	r2, [pc, #16]	; (801ba40 <prvSampleTimeNow+0x3c>)
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801ba34:	68fb      	ldr	r3, [r7, #12]
}
 801ba36:	4618      	mov	r0, r3
 801ba38:	3710      	adds	r7, #16
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}
 801ba3e:	bf00      	nop
 801ba40:	20001234 	.word	0x20001234

0801ba44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b086      	sub	sp, #24
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	60f8      	str	r0, [r7, #12]
 801ba4c:	60b9      	str	r1, [r7, #8]
 801ba4e:	607a      	str	r2, [r7, #4]
 801ba50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801ba52:	2300      	movs	r3, #0
 801ba54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	68ba      	ldr	r2, [r7, #8]
 801ba5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	68fa      	ldr	r2, [r7, #12]
 801ba60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801ba62:	68ba      	ldr	r2, [r7, #8]
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	429a      	cmp	r2, r3
 801ba68:	d812      	bhi.n	801ba90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba6a:	687a      	ldr	r2, [r7, #4]
 801ba6c:	683b      	ldr	r3, [r7, #0]
 801ba6e:	1ad2      	subs	r2, r2, r3
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	699b      	ldr	r3, [r3, #24]
 801ba74:	429a      	cmp	r2, r3
 801ba76:	d302      	bcc.n	801ba7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ba78:	2301      	movs	r3, #1
 801ba7a:	617b      	str	r3, [r7, #20]
 801ba7c:	e01b      	b.n	801bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801ba7e:	4b10      	ldr	r3, [pc, #64]	; (801bac0 <prvInsertTimerInActiveList+0x7c>)
 801ba80:	681a      	ldr	r2, [r3, #0]
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	3304      	adds	r3, #4
 801ba86:	4619      	mov	r1, r3
 801ba88:	4610      	mov	r0, r2
 801ba8a:	f7fd fdb2 	bl	80195f2 <vListInsert>
 801ba8e:	e012      	b.n	801bab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801ba90:	687a      	ldr	r2, [r7, #4]
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	429a      	cmp	r2, r3
 801ba96:	d206      	bcs.n	801baa6 <prvInsertTimerInActiveList+0x62>
 801ba98:	68ba      	ldr	r2, [r7, #8]
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	429a      	cmp	r2, r3
 801ba9e:	d302      	bcc.n	801baa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801baa0:	2301      	movs	r3, #1
 801baa2:	617b      	str	r3, [r7, #20]
 801baa4:	e007      	b.n	801bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801baa6:	4b07      	ldr	r3, [pc, #28]	; (801bac4 <prvInsertTimerInActiveList+0x80>)
 801baa8:	681a      	ldr	r2, [r3, #0]
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	3304      	adds	r3, #4
 801baae:	4619      	mov	r1, r3
 801bab0:	4610      	mov	r0, r2
 801bab2:	f7fd fd9e 	bl	80195f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bab6:	697b      	ldr	r3, [r7, #20]
}
 801bab8:	4618      	mov	r0, r3
 801baba:	3718      	adds	r7, #24
 801babc:	46bd      	mov	sp, r7
 801babe:	bd80      	pop	{r7, pc}
 801bac0:	20001228 	.word	0x20001228
 801bac4:	20001224 	.word	0x20001224

0801bac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b08c      	sub	sp, #48	; 0x30
 801bacc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bace:	e0ae      	b.n	801bc2e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801bad0:	68bb      	ldr	r3, [r7, #8]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	f2c0 80aa 	blt.w	801bc2c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801bad8:	693b      	ldr	r3, [r7, #16]
 801bada:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bade:	695b      	ldr	r3, [r3, #20]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d004      	beq.n	801baee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bae6:	3304      	adds	r3, #4
 801bae8:	4618      	mov	r0, r3
 801baea:	f7fd fdbb 	bl	8019664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801baee:	1d3b      	adds	r3, r7, #4
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7ff ff87 	bl	801ba04 <prvSampleTimeNow>
 801baf6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801baf8:	68bb      	ldr	r3, [r7, #8]
 801bafa:	2b09      	cmp	r3, #9
 801bafc:	f200 8097 	bhi.w	801bc2e <prvProcessReceivedCommands+0x166>
 801bb00:	a201      	add	r2, pc, #4	; (adr r2, 801bb08 <prvProcessReceivedCommands+0x40>)
 801bb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb06:	bf00      	nop
 801bb08:	0801bb31 	.word	0x0801bb31
 801bb0c:	0801bb31 	.word	0x0801bb31
 801bb10:	0801bb31 	.word	0x0801bb31
 801bb14:	0801bba5 	.word	0x0801bba5
 801bb18:	0801bbb9 	.word	0x0801bbb9
 801bb1c:	0801bc03 	.word	0x0801bc03
 801bb20:	0801bb31 	.word	0x0801bb31
 801bb24:	0801bb31 	.word	0x0801bb31
 801bb28:	0801bba5 	.word	0x0801bba5
 801bb2c:	0801bbb9 	.word	0x0801bbb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bb36:	f043 0301 	orr.w	r3, r3, #1
 801bb3a:	b2da      	uxtb	r2, r3
 801bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bb42:	68fa      	ldr	r2, [r7, #12]
 801bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb46:	699b      	ldr	r3, [r3, #24]
 801bb48:	18d1      	adds	r1, r2, r3
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	6a3a      	ldr	r2, [r7, #32]
 801bb4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bb50:	f7ff ff78 	bl	801ba44 <prvInsertTimerInActiveList>
 801bb54:	4603      	mov	r3, r0
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d069      	beq.n	801bc2e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb5c:	6a1b      	ldr	r3, [r3, #32]
 801bb5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bb60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bb68:	f003 0304 	and.w	r3, r3, #4
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d05e      	beq.n	801bc2e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bb70:	68fa      	ldr	r2, [r7, #12]
 801bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb74:	699b      	ldr	r3, [r3, #24]
 801bb76:	441a      	add	r2, r3
 801bb78:	2300      	movs	r3, #0
 801bb7a:	9300      	str	r3, [sp, #0]
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	2100      	movs	r1, #0
 801bb80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bb82:	f7ff fe21 	bl	801b7c8 <xTimerGenericCommand>
 801bb86:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801bb88:	69fb      	ldr	r3, [r7, #28]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d14f      	bne.n	801bc2e <prvProcessReceivedCommands+0x166>
	__asm volatile
 801bb8e:	f04f 0320 	mov.w	r3, #32
 801bb92:	f383 8811 	msr	BASEPRI, r3
 801bb96:	f3bf 8f6f 	isb	sy
 801bb9a:	f3bf 8f4f 	dsb	sy
 801bb9e:	61bb      	str	r3, [r7, #24]
}
 801bba0:	bf00      	nop
 801bba2:	e7fe      	b.n	801bba2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bbaa:	f023 0301 	bic.w	r3, r3, #1
 801bbae:	b2da      	uxtb	r2, r3
 801bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801bbb6:	e03a      	b.n	801bc2e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bbbe:	f043 0301 	orr.w	r3, r3, #1
 801bbc2:	b2da      	uxtb	r2, r3
 801bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bbca:	68fa      	ldr	r2, [r7, #12]
 801bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbd2:	699b      	ldr	r3, [r3, #24]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d10a      	bne.n	801bbee <prvProcessReceivedCommands+0x126>
	__asm volatile
 801bbd8:	f04f 0320 	mov.w	r3, #32
 801bbdc:	f383 8811 	msr	BASEPRI, r3
 801bbe0:	f3bf 8f6f 	isb	sy
 801bbe4:	f3bf 8f4f 	dsb	sy
 801bbe8:	617b      	str	r3, [r7, #20]
}
 801bbea:	bf00      	nop
 801bbec:	e7fe      	b.n	801bbec <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbf0:	699a      	ldr	r2, [r3, #24]
 801bbf2:	6a3b      	ldr	r3, [r7, #32]
 801bbf4:	18d1      	adds	r1, r2, r3
 801bbf6:	6a3b      	ldr	r3, [r7, #32]
 801bbf8:	6a3a      	ldr	r2, [r7, #32]
 801bbfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bbfc:	f7ff ff22 	bl	801ba44 <prvInsertTimerInActiveList>
					break;
 801bc00:	e015      	b.n	801bc2e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bc08:	f003 0302 	and.w	r3, r3, #2
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d103      	bne.n	801bc18 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801bc10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc12:	f000 fbcd 	bl	801c3b0 <vPortFree>
 801bc16:	e00a      	b.n	801bc2e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bc1e:	f023 0301 	bic.w	r3, r3, #1
 801bc22:	b2da      	uxtb	r2, r3
 801bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bc2a:	e000      	b.n	801bc2e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801bc2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bc2e:	4b08      	ldr	r3, [pc, #32]	; (801bc50 <prvProcessReceivedCommands+0x188>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f107 0108 	add.w	r1, r7, #8
 801bc36:	2200      	movs	r2, #0
 801bc38:	4618      	mov	r0, r3
 801bc3a:	f7fe f85b 	bl	8019cf4 <xQueueReceive>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f47f af45 	bne.w	801bad0 <prvProcessReceivedCommands+0x8>
	}
}
 801bc46:	bf00      	nop
 801bc48:	bf00      	nop
 801bc4a:	3728      	adds	r7, #40	; 0x28
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}
 801bc50:	2000122c 	.word	0x2000122c

0801bc54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b088      	sub	sp, #32
 801bc58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bc5a:	e048      	b.n	801bcee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bc5c:	4b2d      	ldr	r3, [pc, #180]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	68db      	ldr	r3, [r3, #12]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc66:	4b2b      	ldr	r3, [pc, #172]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	68db      	ldr	r3, [r3, #12]
 801bc6c:	68db      	ldr	r3, [r3, #12]
 801bc6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	3304      	adds	r3, #4
 801bc74:	4618      	mov	r0, r3
 801bc76:	f7fd fcf5 	bl	8019664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	6a1b      	ldr	r3, [r3, #32]
 801bc7e:	68f8      	ldr	r0, [r7, #12]
 801bc80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bc88:	f003 0304 	and.w	r3, r3, #4
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d02e      	beq.n	801bcee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	699b      	ldr	r3, [r3, #24]
 801bc94:	693a      	ldr	r2, [r7, #16]
 801bc96:	4413      	add	r3, r2
 801bc98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801bc9a:	68ba      	ldr	r2, [r7, #8]
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d90e      	bls.n	801bcc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	68ba      	ldr	r2, [r7, #8]
 801bca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	68fa      	ldr	r2, [r7, #12]
 801bcac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bcae:	4b19      	ldr	r3, [pc, #100]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	3304      	adds	r3, #4
 801bcb6:	4619      	mov	r1, r3
 801bcb8:	4610      	mov	r0, r2
 801bcba:	f7fd fc9a 	bl	80195f2 <vListInsert>
 801bcbe:	e016      	b.n	801bcee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	9300      	str	r3, [sp, #0]
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	693a      	ldr	r2, [r7, #16]
 801bcc8:	2100      	movs	r1, #0
 801bcca:	68f8      	ldr	r0, [r7, #12]
 801bccc:	f7ff fd7c 	bl	801b7c8 <xTimerGenericCommand>
 801bcd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d10a      	bne.n	801bcee <prvSwitchTimerLists+0x9a>
	__asm volatile
 801bcd8:	f04f 0320 	mov.w	r3, #32
 801bcdc:	f383 8811 	msr	BASEPRI, r3
 801bce0:	f3bf 8f6f 	isb	sy
 801bce4:	f3bf 8f4f 	dsb	sy
 801bce8:	603b      	str	r3, [r7, #0]
}
 801bcea:	bf00      	nop
 801bcec:	e7fe      	b.n	801bcec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bcee:	4b09      	ldr	r3, [pc, #36]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d1b1      	bne.n	801bc5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801bcf8:	4b06      	ldr	r3, [pc, #24]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801bcfe:	4b06      	ldr	r3, [pc, #24]	; (801bd18 <prvSwitchTimerLists+0xc4>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	4a04      	ldr	r2, [pc, #16]	; (801bd14 <prvSwitchTimerLists+0xc0>)
 801bd04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801bd06:	4a04      	ldr	r2, [pc, #16]	; (801bd18 <prvSwitchTimerLists+0xc4>)
 801bd08:	697b      	ldr	r3, [r7, #20]
 801bd0a:	6013      	str	r3, [r2, #0]
}
 801bd0c:	bf00      	nop
 801bd0e:	3718      	adds	r7, #24
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}
 801bd14:	20001224 	.word	0x20001224
 801bd18:	20001228 	.word	0x20001228

0801bd1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801bd20:	f000 f960 	bl	801bfe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801bd24:	4b12      	ldr	r3, [pc, #72]	; (801bd70 <prvCheckForValidListAndQueue+0x54>)
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d11d      	bne.n	801bd68 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801bd2c:	4811      	ldr	r0, [pc, #68]	; (801bd74 <prvCheckForValidListAndQueue+0x58>)
 801bd2e:	f7fd fc0f 	bl	8019550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801bd32:	4811      	ldr	r0, [pc, #68]	; (801bd78 <prvCheckForValidListAndQueue+0x5c>)
 801bd34:	f7fd fc0c 	bl	8019550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801bd38:	4b10      	ldr	r3, [pc, #64]	; (801bd7c <prvCheckForValidListAndQueue+0x60>)
 801bd3a:	4a0e      	ldr	r2, [pc, #56]	; (801bd74 <prvCheckForValidListAndQueue+0x58>)
 801bd3c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801bd3e:	4b10      	ldr	r3, [pc, #64]	; (801bd80 <prvCheckForValidListAndQueue+0x64>)
 801bd40:	4a0d      	ldr	r2, [pc, #52]	; (801bd78 <prvCheckForValidListAndQueue+0x5c>)
 801bd42:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801bd44:	2200      	movs	r2, #0
 801bd46:	210c      	movs	r1, #12
 801bd48:	2064      	movs	r0, #100	; 0x64
 801bd4a:	f7fd fd1d 	bl	8019788 <xQueueGenericCreate>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	4a07      	ldr	r2, [pc, #28]	; (801bd70 <prvCheckForValidListAndQueue+0x54>)
 801bd52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801bd54:	4b06      	ldr	r3, [pc, #24]	; (801bd70 <prvCheckForValidListAndQueue+0x54>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d005      	beq.n	801bd68 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801bd5c:	4b04      	ldr	r3, [pc, #16]	; (801bd70 <prvCheckForValidListAndQueue+0x54>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4908      	ldr	r1, [pc, #32]	; (801bd84 <prvCheckForValidListAndQueue+0x68>)
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7fe fb5a 	bl	801a41c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801bd68:	f000 f96c 	bl	801c044 <vPortExitCritical>
}
 801bd6c:	bf00      	nop
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	2000122c 	.word	0x2000122c
 801bd74:	200011fc 	.word	0x200011fc
 801bd78:	20001210 	.word	0x20001210
 801bd7c:	20001224 	.word	0x20001224
 801bd80:	20001228 	.word	0x20001228
 801bd84:	0802308c 	.word	0x0802308c

0801bd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801bd88:	b480      	push	{r7}
 801bd8a:	b085      	sub	sp, #20
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	60f8      	str	r0, [r7, #12]
 801bd90:	60b9      	str	r1, [r7, #8]
 801bd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	3b04      	subs	r3, #4
 801bd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	3b04      	subs	r3, #4
 801bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	f023 0201 	bic.w	r2, r3, #1
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	3b04      	subs	r3, #4
 801bdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801bdb8:	4a0c      	ldr	r2, [pc, #48]	; (801bdec <pxPortInitialiseStack+0x64>)
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	3b14      	subs	r3, #20
 801bdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801bdc4:	687a      	ldr	r2, [r7, #4]
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	3b04      	subs	r3, #4
 801bdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	f06f 0202 	mvn.w	r2, #2
 801bdd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	3b20      	subs	r3, #32
 801bddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801bdde:	68fb      	ldr	r3, [r7, #12]
}
 801bde0:	4618      	mov	r0, r3
 801bde2:	3714      	adds	r7, #20
 801bde4:	46bd      	mov	sp, r7
 801bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdea:	4770      	bx	lr
 801bdec:	0801bdf1 	.word	0x0801bdf1

0801bdf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801bdf0:	b480      	push	{r7}
 801bdf2:	b085      	sub	sp, #20
 801bdf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801bdfa:	4b12      	ldr	r3, [pc, #72]	; (801be44 <prvTaskExitError+0x54>)
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be02:	d00a      	beq.n	801be1a <prvTaskExitError+0x2a>
	__asm volatile
 801be04:	f04f 0320 	mov.w	r3, #32
 801be08:	f383 8811 	msr	BASEPRI, r3
 801be0c:	f3bf 8f6f 	isb	sy
 801be10:	f3bf 8f4f 	dsb	sy
 801be14:	60fb      	str	r3, [r7, #12]
}
 801be16:	bf00      	nop
 801be18:	e7fe      	b.n	801be18 <prvTaskExitError+0x28>
	__asm volatile
 801be1a:	f04f 0320 	mov.w	r3, #32
 801be1e:	f383 8811 	msr	BASEPRI, r3
 801be22:	f3bf 8f6f 	isb	sy
 801be26:	f3bf 8f4f 	dsb	sy
 801be2a:	60bb      	str	r3, [r7, #8]
}
 801be2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801be2e:	bf00      	nop
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d0fc      	beq.n	801be30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801be36:	bf00      	nop
 801be38:	bf00      	nop
 801be3a:	3714      	adds	r7, #20
 801be3c:	46bd      	mov	sp, r7
 801be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be42:	4770      	bx	lr
 801be44:	200002ac 	.word	0x200002ac
	...

0801be50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801be50:	4b07      	ldr	r3, [pc, #28]	; (801be70 <pxCurrentTCBConst2>)
 801be52:	6819      	ldr	r1, [r3, #0]
 801be54:	6808      	ldr	r0, [r1, #0]
 801be56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be5a:	f380 8809 	msr	PSP, r0
 801be5e:	f3bf 8f6f 	isb	sy
 801be62:	f04f 0000 	mov.w	r0, #0
 801be66:	f380 8811 	msr	BASEPRI, r0
 801be6a:	4770      	bx	lr
 801be6c:	f3af 8000 	nop.w

0801be70 <pxCurrentTCBConst2>:
 801be70:	200010d0 	.word	0x200010d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801be74:	bf00      	nop
 801be76:	bf00      	nop

0801be78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801be78:	4808      	ldr	r0, [pc, #32]	; (801be9c <prvPortStartFirstTask+0x24>)
 801be7a:	6800      	ldr	r0, [r0, #0]
 801be7c:	6800      	ldr	r0, [r0, #0]
 801be7e:	f380 8808 	msr	MSP, r0
 801be82:	f04f 0000 	mov.w	r0, #0
 801be86:	f380 8814 	msr	CONTROL, r0
 801be8a:	b662      	cpsie	i
 801be8c:	b661      	cpsie	f
 801be8e:	f3bf 8f4f 	dsb	sy
 801be92:	f3bf 8f6f 	isb	sy
 801be96:	df00      	svc	0
 801be98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801be9a:	bf00      	nop
 801be9c:	e000ed08 	.word	0xe000ed08

0801bea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b086      	sub	sp, #24
 801bea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801bea6:	4b46      	ldr	r3, [pc, #280]	; (801bfc0 <xPortStartScheduler+0x120>)
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	4a46      	ldr	r2, [pc, #280]	; (801bfc4 <xPortStartScheduler+0x124>)
 801beac:	4293      	cmp	r3, r2
 801beae:	d10a      	bne.n	801bec6 <xPortStartScheduler+0x26>
	__asm volatile
 801beb0:	f04f 0320 	mov.w	r3, #32
 801beb4:	f383 8811 	msr	BASEPRI, r3
 801beb8:	f3bf 8f6f 	isb	sy
 801bebc:	f3bf 8f4f 	dsb	sy
 801bec0:	613b      	str	r3, [r7, #16]
}
 801bec2:	bf00      	nop
 801bec4:	e7fe      	b.n	801bec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801bec6:	4b3e      	ldr	r3, [pc, #248]	; (801bfc0 <xPortStartScheduler+0x120>)
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	4a3f      	ldr	r2, [pc, #252]	; (801bfc8 <xPortStartScheduler+0x128>)
 801becc:	4293      	cmp	r3, r2
 801bece:	d10a      	bne.n	801bee6 <xPortStartScheduler+0x46>
	__asm volatile
 801bed0:	f04f 0320 	mov.w	r3, #32
 801bed4:	f383 8811 	msr	BASEPRI, r3
 801bed8:	f3bf 8f6f 	isb	sy
 801bedc:	f3bf 8f4f 	dsb	sy
 801bee0:	60fb      	str	r3, [r7, #12]
}
 801bee2:	bf00      	nop
 801bee4:	e7fe      	b.n	801bee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801bee6:	4b39      	ldr	r3, [pc, #228]	; (801bfcc <xPortStartScheduler+0x12c>)
 801bee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801beea:	697b      	ldr	r3, [r7, #20]
 801beec:	781b      	ldrb	r3, [r3, #0]
 801beee:	b2db      	uxtb	r3, r3
 801bef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bef2:	697b      	ldr	r3, [r7, #20]
 801bef4:	22ff      	movs	r2, #255	; 0xff
 801bef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801bef8:	697b      	ldr	r3, [r7, #20]
 801befa:	781b      	ldrb	r3, [r3, #0]
 801befc:	b2db      	uxtb	r3, r3
 801befe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bf00:	78fb      	ldrb	r3, [r7, #3]
 801bf02:	b2db      	uxtb	r3, r3
 801bf04:	f003 0320 	and.w	r3, r3, #32
 801bf08:	b2da      	uxtb	r2, r3
 801bf0a:	4b31      	ldr	r3, [pc, #196]	; (801bfd0 <xPortStartScheduler+0x130>)
 801bf0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801bf0e:	4b31      	ldr	r3, [pc, #196]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf10:	2207      	movs	r2, #7
 801bf12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bf14:	e009      	b.n	801bf2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801bf16:	4b2f      	ldr	r3, [pc, #188]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	3b01      	subs	r3, #1
 801bf1c:	4a2d      	ldr	r2, [pc, #180]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bf20:	78fb      	ldrb	r3, [r7, #3]
 801bf22:	b2db      	uxtb	r3, r3
 801bf24:	005b      	lsls	r3, r3, #1
 801bf26:	b2db      	uxtb	r3, r3
 801bf28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bf2a:	78fb      	ldrb	r3, [r7, #3]
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf32:	2b80      	cmp	r3, #128	; 0x80
 801bf34:	d0ef      	beq.n	801bf16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801bf36:	4b27      	ldr	r3, [pc, #156]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	f1c3 0307 	rsb	r3, r3, #7
 801bf3e:	2b04      	cmp	r3, #4
 801bf40:	d00a      	beq.n	801bf58 <xPortStartScheduler+0xb8>
	__asm volatile
 801bf42:	f04f 0320 	mov.w	r3, #32
 801bf46:	f383 8811 	msr	BASEPRI, r3
 801bf4a:	f3bf 8f6f 	isb	sy
 801bf4e:	f3bf 8f4f 	dsb	sy
 801bf52:	60bb      	str	r3, [r7, #8]
}
 801bf54:	bf00      	nop
 801bf56:	e7fe      	b.n	801bf56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801bf58:	4b1e      	ldr	r3, [pc, #120]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	021b      	lsls	r3, r3, #8
 801bf5e:	4a1d      	ldr	r2, [pc, #116]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801bf62:	4b1c      	ldr	r3, [pc, #112]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bf6a:	4a1a      	ldr	r2, [pc, #104]	; (801bfd4 <xPortStartScheduler+0x134>)
 801bf6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	b2da      	uxtb	r2, r3
 801bf72:	697b      	ldr	r3, [r7, #20]
 801bf74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801bf76:	4b18      	ldr	r3, [pc, #96]	; (801bfd8 <xPortStartScheduler+0x138>)
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	4a17      	ldr	r2, [pc, #92]	; (801bfd8 <xPortStartScheduler+0x138>)
 801bf7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bf80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801bf82:	4b15      	ldr	r3, [pc, #84]	; (801bfd8 <xPortStartScheduler+0x138>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	4a14      	ldr	r2, [pc, #80]	; (801bfd8 <xPortStartScheduler+0x138>)
 801bf88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801bf8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801bf8e:	f000 f8dd 	bl	801c14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801bf92:	4b12      	ldr	r3, [pc, #72]	; (801bfdc <xPortStartScheduler+0x13c>)
 801bf94:	2200      	movs	r2, #0
 801bf96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801bf98:	f000 f8fc 	bl	801c194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801bf9c:	4b10      	ldr	r3, [pc, #64]	; (801bfe0 <xPortStartScheduler+0x140>)
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	4a0f      	ldr	r2, [pc, #60]	; (801bfe0 <xPortStartScheduler+0x140>)
 801bfa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801bfa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801bfa8:	f7ff ff66 	bl	801be78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801bfac:	f7fe ff4e 	bl	801ae4c <vTaskSwitchContext>
	prvTaskExitError();
 801bfb0:	f7ff ff1e 	bl	801bdf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801bfb4:	2300      	movs	r3, #0
}
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	3718      	adds	r7, #24
 801bfba:	46bd      	mov	sp, r7
 801bfbc:	bd80      	pop	{r7, pc}
 801bfbe:	bf00      	nop
 801bfc0:	e000ed00 	.word	0xe000ed00
 801bfc4:	410fc271 	.word	0x410fc271
 801bfc8:	410fc270 	.word	0x410fc270
 801bfcc:	e000e400 	.word	0xe000e400
 801bfd0:	20001238 	.word	0x20001238
 801bfd4:	2000123c 	.word	0x2000123c
 801bfd8:	e000ed20 	.word	0xe000ed20
 801bfdc:	200002ac 	.word	0x200002ac
 801bfe0:	e000ef34 	.word	0xe000ef34

0801bfe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801bfe4:	b480      	push	{r7}
 801bfe6:	b083      	sub	sp, #12
 801bfe8:	af00      	add	r7, sp, #0
	__asm volatile
 801bfea:	f04f 0320 	mov.w	r3, #32
 801bfee:	f383 8811 	msr	BASEPRI, r3
 801bff2:	f3bf 8f6f 	isb	sy
 801bff6:	f3bf 8f4f 	dsb	sy
 801bffa:	607b      	str	r3, [r7, #4]
}
 801bffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801bffe:	4b0f      	ldr	r3, [pc, #60]	; (801c03c <vPortEnterCritical+0x58>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	3301      	adds	r3, #1
 801c004:	4a0d      	ldr	r2, [pc, #52]	; (801c03c <vPortEnterCritical+0x58>)
 801c006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c008:	4b0c      	ldr	r3, [pc, #48]	; (801c03c <vPortEnterCritical+0x58>)
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d10f      	bne.n	801c030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c010:	4b0b      	ldr	r3, [pc, #44]	; (801c040 <vPortEnterCritical+0x5c>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	b2db      	uxtb	r3, r3
 801c016:	2b00      	cmp	r3, #0
 801c018:	d00a      	beq.n	801c030 <vPortEnterCritical+0x4c>
	__asm volatile
 801c01a:	f04f 0320 	mov.w	r3, #32
 801c01e:	f383 8811 	msr	BASEPRI, r3
 801c022:	f3bf 8f6f 	isb	sy
 801c026:	f3bf 8f4f 	dsb	sy
 801c02a:	603b      	str	r3, [r7, #0]
}
 801c02c:	bf00      	nop
 801c02e:	e7fe      	b.n	801c02e <vPortEnterCritical+0x4a>
	}
}
 801c030:	bf00      	nop
 801c032:	370c      	adds	r7, #12
 801c034:	46bd      	mov	sp, r7
 801c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03a:	4770      	bx	lr
 801c03c:	200002ac 	.word	0x200002ac
 801c040:	e000ed04 	.word	0xe000ed04

0801c044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c044:	b480      	push	{r7}
 801c046:	b083      	sub	sp, #12
 801c048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c04a:	4b12      	ldr	r3, [pc, #72]	; (801c094 <vPortExitCritical+0x50>)
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d10a      	bne.n	801c068 <vPortExitCritical+0x24>
	__asm volatile
 801c052:	f04f 0320 	mov.w	r3, #32
 801c056:	f383 8811 	msr	BASEPRI, r3
 801c05a:	f3bf 8f6f 	isb	sy
 801c05e:	f3bf 8f4f 	dsb	sy
 801c062:	607b      	str	r3, [r7, #4]
}
 801c064:	bf00      	nop
 801c066:	e7fe      	b.n	801c066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c068:	4b0a      	ldr	r3, [pc, #40]	; (801c094 <vPortExitCritical+0x50>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	3b01      	subs	r3, #1
 801c06e:	4a09      	ldr	r2, [pc, #36]	; (801c094 <vPortExitCritical+0x50>)
 801c070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c072:	4b08      	ldr	r3, [pc, #32]	; (801c094 <vPortExitCritical+0x50>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d105      	bne.n	801c086 <vPortExitCritical+0x42>
 801c07a:	2300      	movs	r3, #0
 801c07c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	f383 8811 	msr	BASEPRI, r3
}
 801c084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c086:	bf00      	nop
 801c088:	370c      	adds	r7, #12
 801c08a:	46bd      	mov	sp, r7
 801c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c090:	4770      	bx	lr
 801c092:	bf00      	nop
 801c094:	200002ac 	.word	0x200002ac
	...

0801c0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c0a0:	f3ef 8009 	mrs	r0, PSP
 801c0a4:	f3bf 8f6f 	isb	sy
 801c0a8:	4b15      	ldr	r3, [pc, #84]	; (801c100 <pxCurrentTCBConst>)
 801c0aa:	681a      	ldr	r2, [r3, #0]
 801c0ac:	f01e 0f10 	tst.w	lr, #16
 801c0b0:	bf08      	it	eq
 801c0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ba:	6010      	str	r0, [r2, #0]
 801c0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c0c0:	f04f 0020 	mov.w	r0, #32
 801c0c4:	f380 8811 	msr	BASEPRI, r0
 801c0c8:	f3bf 8f4f 	dsb	sy
 801c0cc:	f3bf 8f6f 	isb	sy
 801c0d0:	f7fe febc 	bl	801ae4c <vTaskSwitchContext>
 801c0d4:	f04f 0000 	mov.w	r0, #0
 801c0d8:	f380 8811 	msr	BASEPRI, r0
 801c0dc:	bc09      	pop	{r0, r3}
 801c0de:	6819      	ldr	r1, [r3, #0]
 801c0e0:	6808      	ldr	r0, [r1, #0]
 801c0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e6:	f01e 0f10 	tst.w	lr, #16
 801c0ea:	bf08      	it	eq
 801c0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c0f0:	f380 8809 	msr	PSP, r0
 801c0f4:	f3bf 8f6f 	isb	sy
 801c0f8:	4770      	bx	lr
 801c0fa:	bf00      	nop
 801c0fc:	f3af 8000 	nop.w

0801c100 <pxCurrentTCBConst>:
 801c100:	200010d0 	.word	0x200010d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c104:	bf00      	nop
 801c106:	bf00      	nop

0801c108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c108:	b580      	push	{r7, lr}
 801c10a:	b082      	sub	sp, #8
 801c10c:	af00      	add	r7, sp, #0
	__asm volatile
 801c10e:	f04f 0320 	mov.w	r3, #32
 801c112:	f383 8811 	msr	BASEPRI, r3
 801c116:	f3bf 8f6f 	isb	sy
 801c11a:	f3bf 8f4f 	dsb	sy
 801c11e:	607b      	str	r3, [r7, #4]
}
 801c120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c122:	f7fe fdbf 	bl	801aca4 <xTaskIncrementTick>
 801c126:	4603      	mov	r3, r0
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d003      	beq.n	801c134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c12c:	4b06      	ldr	r3, [pc, #24]	; (801c148 <xPortSysTickHandler+0x40>)
 801c12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c132:	601a      	str	r2, [r3, #0]
 801c134:	2300      	movs	r3, #0
 801c136:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c138:	683b      	ldr	r3, [r7, #0]
 801c13a:	f383 8811 	msr	BASEPRI, r3
}
 801c13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c140:	bf00      	nop
 801c142:	3708      	adds	r7, #8
 801c144:	46bd      	mov	sp, r7
 801c146:	bd80      	pop	{r7, pc}
 801c148:	e000ed04 	.word	0xe000ed04

0801c14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c14c:	b480      	push	{r7}
 801c14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c150:	4b0b      	ldr	r3, [pc, #44]	; (801c180 <vPortSetupTimerInterrupt+0x34>)
 801c152:	2200      	movs	r2, #0
 801c154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c156:	4b0b      	ldr	r3, [pc, #44]	; (801c184 <vPortSetupTimerInterrupt+0x38>)
 801c158:	2200      	movs	r2, #0
 801c15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c15c:	4b0a      	ldr	r3, [pc, #40]	; (801c188 <vPortSetupTimerInterrupt+0x3c>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a0a      	ldr	r2, [pc, #40]	; (801c18c <vPortSetupTimerInterrupt+0x40>)
 801c162:	fba2 2303 	umull	r2, r3, r2, r3
 801c166:	099b      	lsrs	r3, r3, #6
 801c168:	4a09      	ldr	r2, [pc, #36]	; (801c190 <vPortSetupTimerInterrupt+0x44>)
 801c16a:	3b01      	subs	r3, #1
 801c16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c16e:	4b04      	ldr	r3, [pc, #16]	; (801c180 <vPortSetupTimerInterrupt+0x34>)
 801c170:	2207      	movs	r2, #7
 801c172:	601a      	str	r2, [r3, #0]
}
 801c174:	bf00      	nop
 801c176:	46bd      	mov	sp, r7
 801c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c17c:	4770      	bx	lr
 801c17e:	bf00      	nop
 801c180:	e000e010 	.word	0xe000e010
 801c184:	e000e018 	.word	0xe000e018
 801c188:	20000038 	.word	0x20000038
 801c18c:	10624dd3 	.word	0x10624dd3
 801c190:	e000e014 	.word	0xe000e014

0801c194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c1a4 <vPortEnableVFP+0x10>
 801c198:	6801      	ldr	r1, [r0, #0]
 801c19a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c19e:	6001      	str	r1, [r0, #0]
 801c1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c1a2:	bf00      	nop
 801c1a4:	e000ed88 	.word	0xe000ed88

0801c1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c1a8:	b480      	push	{r7}
 801c1aa:	b085      	sub	sp, #20
 801c1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c1ae:	f3ef 8305 	mrs	r3, IPSR
 801c1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	2b0f      	cmp	r3, #15
 801c1b8:	d914      	bls.n	801c1e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c1ba:	4a17      	ldr	r2, [pc, #92]	; (801c218 <vPortValidateInterruptPriority+0x70>)
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	4413      	add	r3, r2
 801c1c0:	781b      	ldrb	r3, [r3, #0]
 801c1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c1c4:	4b15      	ldr	r3, [pc, #84]	; (801c21c <vPortValidateInterruptPriority+0x74>)
 801c1c6:	781b      	ldrb	r3, [r3, #0]
 801c1c8:	7afa      	ldrb	r2, [r7, #11]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d20a      	bcs.n	801c1e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c1ce:	f04f 0320 	mov.w	r3, #32
 801c1d2:	f383 8811 	msr	BASEPRI, r3
 801c1d6:	f3bf 8f6f 	isb	sy
 801c1da:	f3bf 8f4f 	dsb	sy
 801c1de:	607b      	str	r3, [r7, #4]
}
 801c1e0:	bf00      	nop
 801c1e2:	e7fe      	b.n	801c1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c1e4:	4b0e      	ldr	r3, [pc, #56]	; (801c220 <vPortValidateInterruptPriority+0x78>)
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c1ec:	4b0d      	ldr	r3, [pc, #52]	; (801c224 <vPortValidateInterruptPriority+0x7c>)
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d90a      	bls.n	801c20a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c1f4:	f04f 0320 	mov.w	r3, #32
 801c1f8:	f383 8811 	msr	BASEPRI, r3
 801c1fc:	f3bf 8f6f 	isb	sy
 801c200:	f3bf 8f4f 	dsb	sy
 801c204:	603b      	str	r3, [r7, #0]
}
 801c206:	bf00      	nop
 801c208:	e7fe      	b.n	801c208 <vPortValidateInterruptPriority+0x60>
	}
 801c20a:	bf00      	nop
 801c20c:	3714      	adds	r7, #20
 801c20e:	46bd      	mov	sp, r7
 801c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c214:	4770      	bx	lr
 801c216:	bf00      	nop
 801c218:	e000e3f0 	.word	0xe000e3f0
 801c21c:	20001238 	.word	0x20001238
 801c220:	e000ed0c 	.word	0xe000ed0c
 801c224:	2000123c 	.word	0x2000123c

0801c228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b08a      	sub	sp, #40	; 0x28
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c230:	2300      	movs	r3, #0
 801c232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c234:	f7fe fc7c 	bl	801ab30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c238:	4b58      	ldr	r3, [pc, #352]	; (801c39c <pvPortMalloc+0x174>)
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d101      	bne.n	801c244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c240:	f000 f910 	bl	801c464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c244:	4b56      	ldr	r3, [pc, #344]	; (801c3a0 <pvPortMalloc+0x178>)
 801c246:	681a      	ldr	r2, [r3, #0]
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	4013      	ands	r3, r2
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	f040 808e 	bne.w	801c36e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d01d      	beq.n	801c294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c258:	2208      	movs	r2, #8
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	4413      	add	r3, r2
 801c25e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	f003 0307 	and.w	r3, r3, #7
 801c266:	2b00      	cmp	r3, #0
 801c268:	d014      	beq.n	801c294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	f023 0307 	bic.w	r3, r3, #7
 801c270:	3308      	adds	r3, #8
 801c272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	f003 0307 	and.w	r3, r3, #7
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d00a      	beq.n	801c294 <pvPortMalloc+0x6c>
	__asm volatile
 801c27e:	f04f 0320 	mov.w	r3, #32
 801c282:	f383 8811 	msr	BASEPRI, r3
 801c286:	f3bf 8f6f 	isb	sy
 801c28a:	f3bf 8f4f 	dsb	sy
 801c28e:	617b      	str	r3, [r7, #20]
}
 801c290:	bf00      	nop
 801c292:	e7fe      	b.n	801c292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d069      	beq.n	801c36e <pvPortMalloc+0x146>
 801c29a:	4b42      	ldr	r3, [pc, #264]	; (801c3a4 <pvPortMalloc+0x17c>)
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	429a      	cmp	r2, r3
 801c2a2:	d864      	bhi.n	801c36e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c2a4:	4b40      	ldr	r3, [pc, #256]	; (801c3a8 <pvPortMalloc+0x180>)
 801c2a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c2a8:	4b3f      	ldr	r3, [pc, #252]	; (801c3a8 <pvPortMalloc+0x180>)
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c2ae:	e004      	b.n	801c2ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	429a      	cmp	r2, r3
 801c2c2:	d903      	bls.n	801c2cc <pvPortMalloc+0xa4>
 801c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d1f1      	bne.n	801c2b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c2cc:	4b33      	ldr	r3, [pc, #204]	; (801c39c <pvPortMalloc+0x174>)
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c2d2:	429a      	cmp	r2, r3
 801c2d4:	d04b      	beq.n	801c36e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c2d6:	6a3b      	ldr	r3, [r7, #32]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	2208      	movs	r2, #8
 801c2dc:	4413      	add	r3, r2
 801c2de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2e2:	681a      	ldr	r2, [r3, #0]
 801c2e4:	6a3b      	ldr	r3, [r7, #32]
 801c2e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ea:	685a      	ldr	r2, [r3, #4]
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	1ad2      	subs	r2, r2, r3
 801c2f0:	2308      	movs	r3, #8
 801c2f2:	005b      	lsls	r3, r3, #1
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d91f      	bls.n	801c338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	4413      	add	r3, r2
 801c2fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c300:	69bb      	ldr	r3, [r7, #24]
 801c302:	f003 0307 	and.w	r3, r3, #7
 801c306:	2b00      	cmp	r3, #0
 801c308:	d00a      	beq.n	801c320 <pvPortMalloc+0xf8>
	__asm volatile
 801c30a:	f04f 0320 	mov.w	r3, #32
 801c30e:	f383 8811 	msr	BASEPRI, r3
 801c312:	f3bf 8f6f 	isb	sy
 801c316:	f3bf 8f4f 	dsb	sy
 801c31a:	613b      	str	r3, [r7, #16]
}
 801c31c:	bf00      	nop
 801c31e:	e7fe      	b.n	801c31e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c322:	685a      	ldr	r2, [r3, #4]
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	1ad2      	subs	r2, r2, r3
 801c328:	69bb      	ldr	r3, [r7, #24]
 801c32a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c332:	69b8      	ldr	r0, [r7, #24]
 801c334:	f000 f8f8 	bl	801c528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c338:	4b1a      	ldr	r3, [pc, #104]	; (801c3a4 <pvPortMalloc+0x17c>)
 801c33a:	681a      	ldr	r2, [r3, #0]
 801c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c33e:	685b      	ldr	r3, [r3, #4]
 801c340:	1ad3      	subs	r3, r2, r3
 801c342:	4a18      	ldr	r2, [pc, #96]	; (801c3a4 <pvPortMalloc+0x17c>)
 801c344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c346:	4b17      	ldr	r3, [pc, #92]	; (801c3a4 <pvPortMalloc+0x17c>)
 801c348:	681a      	ldr	r2, [r3, #0]
 801c34a:	4b18      	ldr	r3, [pc, #96]	; (801c3ac <pvPortMalloc+0x184>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	429a      	cmp	r2, r3
 801c350:	d203      	bcs.n	801c35a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c352:	4b14      	ldr	r3, [pc, #80]	; (801c3a4 <pvPortMalloc+0x17c>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	4a15      	ldr	r2, [pc, #84]	; (801c3ac <pvPortMalloc+0x184>)
 801c358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c35c:	685a      	ldr	r2, [r3, #4]
 801c35e:	4b10      	ldr	r3, [pc, #64]	; (801c3a0 <pvPortMalloc+0x178>)
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	431a      	orrs	r2, r3
 801c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c36a:	2200      	movs	r2, #0
 801c36c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c36e:	f7fe fbed 	bl	801ab4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c372:	69fb      	ldr	r3, [r7, #28]
 801c374:	f003 0307 	and.w	r3, r3, #7
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d00a      	beq.n	801c392 <pvPortMalloc+0x16a>
	__asm volatile
 801c37c:	f04f 0320 	mov.w	r3, #32
 801c380:	f383 8811 	msr	BASEPRI, r3
 801c384:	f3bf 8f6f 	isb	sy
 801c388:	f3bf 8f4f 	dsb	sy
 801c38c:	60fb      	str	r3, [r7, #12]
}
 801c38e:	bf00      	nop
 801c390:	e7fe      	b.n	801c390 <pvPortMalloc+0x168>
	return pvReturn;
 801c392:	69fb      	ldr	r3, [r7, #28]
}
 801c394:	4618      	mov	r0, r3
 801c396:	3728      	adds	r7, #40	; 0x28
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	20010248 	.word	0x20010248
 801c3a0:	20010254 	.word	0x20010254
 801c3a4:	2001024c 	.word	0x2001024c
 801c3a8:	20010240 	.word	0x20010240
 801c3ac:	20010250 	.word	0x20010250

0801c3b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b086      	sub	sp, #24
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d048      	beq.n	801c454 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c3c2:	2308      	movs	r3, #8
 801c3c4:	425b      	negs	r3, r3
 801c3c6:	697a      	ldr	r2, [r7, #20]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c3cc:	697b      	ldr	r3, [r7, #20]
 801c3ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c3d0:	693b      	ldr	r3, [r7, #16]
 801c3d2:	685a      	ldr	r2, [r3, #4]
 801c3d4:	4b21      	ldr	r3, [pc, #132]	; (801c45c <vPortFree+0xac>)
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	4013      	ands	r3, r2
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d10a      	bne.n	801c3f4 <vPortFree+0x44>
	__asm volatile
 801c3de:	f04f 0320 	mov.w	r3, #32
 801c3e2:	f383 8811 	msr	BASEPRI, r3
 801c3e6:	f3bf 8f6f 	isb	sy
 801c3ea:	f3bf 8f4f 	dsb	sy
 801c3ee:	60fb      	str	r3, [r7, #12]
}
 801c3f0:	bf00      	nop
 801c3f2:	e7fe      	b.n	801c3f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c3f4:	693b      	ldr	r3, [r7, #16]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d00a      	beq.n	801c412 <vPortFree+0x62>
	__asm volatile
 801c3fc:	f04f 0320 	mov.w	r3, #32
 801c400:	f383 8811 	msr	BASEPRI, r3
 801c404:	f3bf 8f6f 	isb	sy
 801c408:	f3bf 8f4f 	dsb	sy
 801c40c:	60bb      	str	r3, [r7, #8]
}
 801c40e:	bf00      	nop
 801c410:	e7fe      	b.n	801c410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	685a      	ldr	r2, [r3, #4]
 801c416:	4b11      	ldr	r3, [pc, #68]	; (801c45c <vPortFree+0xac>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4013      	ands	r3, r2
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d019      	beq.n	801c454 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c420:	693b      	ldr	r3, [r7, #16]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d115      	bne.n	801c454 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c428:	693b      	ldr	r3, [r7, #16]
 801c42a:	685a      	ldr	r2, [r3, #4]
 801c42c:	4b0b      	ldr	r3, [pc, #44]	; (801c45c <vPortFree+0xac>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	43db      	mvns	r3, r3
 801c432:	401a      	ands	r2, r3
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c438:	f7fe fb7a 	bl	801ab30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	685a      	ldr	r2, [r3, #4]
 801c440:	4b07      	ldr	r3, [pc, #28]	; (801c460 <vPortFree+0xb0>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	4413      	add	r3, r2
 801c446:	4a06      	ldr	r2, [pc, #24]	; (801c460 <vPortFree+0xb0>)
 801c448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c44a:	6938      	ldr	r0, [r7, #16]
 801c44c:	f000 f86c 	bl	801c528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801c450:	f7fe fb7c 	bl	801ab4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c454:	bf00      	nop
 801c456:	3718      	adds	r7, #24
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}
 801c45c:	20010254 	.word	0x20010254
 801c460:	2001024c 	.word	0x2001024c

0801c464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c464:	b480      	push	{r7}
 801c466:	b085      	sub	sp, #20
 801c468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c46a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801c46e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c470:	4b27      	ldr	r3, [pc, #156]	; (801c510 <prvHeapInit+0xac>)
 801c472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	f003 0307 	and.w	r3, r3, #7
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d00c      	beq.n	801c498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	3307      	adds	r3, #7
 801c482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	f023 0307 	bic.w	r3, r3, #7
 801c48a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c48c:	68ba      	ldr	r2, [r7, #8]
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	1ad3      	subs	r3, r2, r3
 801c492:	4a1f      	ldr	r2, [pc, #124]	; (801c510 <prvHeapInit+0xac>)
 801c494:	4413      	add	r3, r2
 801c496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c49c:	4a1d      	ldr	r2, [pc, #116]	; (801c514 <prvHeapInit+0xb0>)
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c4a2:	4b1c      	ldr	r3, [pc, #112]	; (801c514 <prvHeapInit+0xb0>)
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	68ba      	ldr	r2, [r7, #8]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c4b0:	2208      	movs	r2, #8
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	1a9b      	subs	r3, r3, r2
 801c4b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	f023 0307 	bic.w	r3, r3, #7
 801c4be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	4a15      	ldr	r2, [pc, #84]	; (801c518 <prvHeapInit+0xb4>)
 801c4c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c4c6:	4b14      	ldr	r3, [pc, #80]	; (801c518 <prvHeapInit+0xb4>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c4ce:	4b12      	ldr	r3, [pc, #72]	; (801c518 <prvHeapInit+0xb4>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	68fa      	ldr	r2, [r7, #12]
 801c4de:	1ad2      	subs	r2, r2, r3
 801c4e0:	683b      	ldr	r3, [r7, #0]
 801c4e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c4e4:	4b0c      	ldr	r3, [pc, #48]	; (801c518 <prvHeapInit+0xb4>)
 801c4e6:	681a      	ldr	r2, [r3, #0]
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	685b      	ldr	r3, [r3, #4]
 801c4f0:	4a0a      	ldr	r2, [pc, #40]	; (801c51c <prvHeapInit+0xb8>)
 801c4f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c4f4:	683b      	ldr	r3, [r7, #0]
 801c4f6:	685b      	ldr	r3, [r3, #4]
 801c4f8:	4a09      	ldr	r2, [pc, #36]	; (801c520 <prvHeapInit+0xbc>)
 801c4fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c4fc:	4b09      	ldr	r3, [pc, #36]	; (801c524 <prvHeapInit+0xc0>)
 801c4fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c502:	601a      	str	r2, [r3, #0]
}
 801c504:	bf00      	nop
 801c506:	3714      	adds	r7, #20
 801c508:	46bd      	mov	sp, r7
 801c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c50e:	4770      	bx	lr
 801c510:	20001240 	.word	0x20001240
 801c514:	20010240 	.word	0x20010240
 801c518:	20010248 	.word	0x20010248
 801c51c:	20010250 	.word	0x20010250
 801c520:	2001024c 	.word	0x2001024c
 801c524:	20010254 	.word	0x20010254

0801c528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c528:	b480      	push	{r7}
 801c52a:	b085      	sub	sp, #20
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c530:	4b28      	ldr	r3, [pc, #160]	; (801c5d4 <prvInsertBlockIntoFreeList+0xac>)
 801c532:	60fb      	str	r3, [r7, #12]
 801c534:	e002      	b.n	801c53c <prvInsertBlockIntoFreeList+0x14>
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	60fb      	str	r3, [r7, #12]
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	687a      	ldr	r2, [r7, #4]
 801c542:	429a      	cmp	r2, r3
 801c544:	d8f7      	bhi.n	801c536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	685b      	ldr	r3, [r3, #4]
 801c54e:	68ba      	ldr	r2, [r7, #8]
 801c550:	4413      	add	r3, r2
 801c552:	687a      	ldr	r2, [r7, #4]
 801c554:	429a      	cmp	r2, r3
 801c556:	d108      	bne.n	801c56a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	685a      	ldr	r2, [r3, #4]
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	685b      	ldr	r3, [r3, #4]
 801c560:	441a      	add	r2, r3
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	68ba      	ldr	r2, [r7, #8]
 801c574:	441a      	add	r2, r3
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d118      	bne.n	801c5b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	681a      	ldr	r2, [r3, #0]
 801c582:	4b15      	ldr	r3, [pc, #84]	; (801c5d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	429a      	cmp	r2, r3
 801c588:	d00d      	beq.n	801c5a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	685a      	ldr	r2, [r3, #4]
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	685b      	ldr	r3, [r3, #4]
 801c594:	441a      	add	r2, r3
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	681a      	ldr	r2, [r3, #0]
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	601a      	str	r2, [r3, #0]
 801c5a4:	e008      	b.n	801c5b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c5a6:	4b0c      	ldr	r3, [pc, #48]	; (801c5d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c5a8:	681a      	ldr	r2, [r3, #0]
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	601a      	str	r2, [r3, #0]
 801c5ae:	e003      	b.n	801c5b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	681a      	ldr	r2, [r3, #0]
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c5b8:	68fa      	ldr	r2, [r7, #12]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	429a      	cmp	r2, r3
 801c5be:	d002      	beq.n	801c5c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c5c6:	bf00      	nop
 801c5c8:	3714      	adds	r7, #20
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d0:	4770      	bx	lr
 801c5d2:	bf00      	nop
 801c5d4:	20010240 	.word	0x20010240
 801c5d8:	20010248 	.word	0x20010248

0801c5dc <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b084      	sub	sp, #16
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
 801c5e4:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801c5e6:	4b0d      	ldr	r3, [pc, #52]	; (801c61c <parson_strndup+0x40>)
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	683a      	ldr	r2, [r7, #0]
 801c5ec:	3201      	adds	r2, #1
 801c5ee:	4610      	mov	r0, r2
 801c5f0:	4798      	blx	r3
 801c5f2:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d101      	bne.n	801c5fe <parson_strndup+0x22>
        return NULL;
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	e00a      	b.n	801c614 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801c5fe:	68fa      	ldr	r2, [r7, #12]
 801c600:	683b      	ldr	r3, [r7, #0]
 801c602:	4413      	add	r3, r2
 801c604:	2200      	movs	r2, #0
 801c606:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801c608:	683a      	ldr	r2, [r7, #0]
 801c60a:	6879      	ldr	r1, [r7, #4]
 801c60c:	68f8      	ldr	r0, [r7, #12]
 801c60e:	f003 fcdd 	bl	801ffcc <strncpy>
    return output_string;
 801c612:	68fb      	ldr	r3, [r7, #12]
}
 801c614:	4618      	mov	r0, r3
 801c616:	3710      	adds	r7, #16
 801c618:	46bd      	mov	sp, r7
 801c61a:	bd80      	pop	{r7, pc}
 801c61c:	200002b0 	.word	0x200002b0

0801c620 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801c620:	b480      	push	{r7}
 801c622:	b083      	sub	sp, #12
 801c624:	af00      	add	r7, sp, #0
 801c626:	4603      	mov	r3, r0
 801c628:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801c62a:	79fb      	ldrb	r3, [r7, #7]
 801c62c:	2b2f      	cmp	r3, #47	; 0x2f
 801c62e:	d905      	bls.n	801c63c <hex_char_to_int+0x1c>
 801c630:	79fb      	ldrb	r3, [r7, #7]
 801c632:	2b39      	cmp	r3, #57	; 0x39
 801c634:	d802      	bhi.n	801c63c <hex_char_to_int+0x1c>
        return c - '0';
 801c636:	79fb      	ldrb	r3, [r7, #7]
 801c638:	3b30      	subs	r3, #48	; 0x30
 801c63a:	e013      	b.n	801c664 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801c63c:	79fb      	ldrb	r3, [r7, #7]
 801c63e:	2b60      	cmp	r3, #96	; 0x60
 801c640:	d905      	bls.n	801c64e <hex_char_to_int+0x2e>
 801c642:	79fb      	ldrb	r3, [r7, #7]
 801c644:	2b66      	cmp	r3, #102	; 0x66
 801c646:	d802      	bhi.n	801c64e <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801c648:	79fb      	ldrb	r3, [r7, #7]
 801c64a:	3b57      	subs	r3, #87	; 0x57
 801c64c:	e00a      	b.n	801c664 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801c64e:	79fb      	ldrb	r3, [r7, #7]
 801c650:	2b40      	cmp	r3, #64	; 0x40
 801c652:	d905      	bls.n	801c660 <hex_char_to_int+0x40>
 801c654:	79fb      	ldrb	r3, [r7, #7]
 801c656:	2b46      	cmp	r3, #70	; 0x46
 801c658:	d802      	bhi.n	801c660 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801c65a:	79fb      	ldrb	r3, [r7, #7]
 801c65c:	3b37      	subs	r3, #55	; 0x37
 801c65e:	e001      	b.n	801c664 <hex_char_to_int+0x44>
    }
    return -1;
 801c660:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c664:	4618      	mov	r0, r3
 801c666:	370c      	adds	r7, #12
 801c668:	46bd      	mov	sp, r7
 801c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c66e:	4770      	bx	lr

0801c670 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801c670:	b580      	push	{r7, lr}
 801c672:	b086      	sub	sp, #24
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	781b      	ldrb	r3, [r3, #0]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d00e      	beq.n	801c6a0 <parse_utf16_hex+0x30>
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	3301      	adds	r3, #1
 801c686:	781b      	ldrb	r3, [r3, #0]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d009      	beq.n	801c6a0 <parse_utf16_hex+0x30>
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	3302      	adds	r3, #2
 801c690:	781b      	ldrb	r3, [r3, #0]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d004      	beq.n	801c6a0 <parse_utf16_hex+0x30>
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	3303      	adds	r3, #3
 801c69a:	781b      	ldrb	r3, [r3, #0]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d101      	bne.n	801c6a4 <parse_utf16_hex+0x34>
        return 0;
 801c6a0:	2300      	movs	r3, #0
 801c6a2:	e03a      	b.n	801c71a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	781b      	ldrb	r3, [r3, #0]
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7ff ffb9 	bl	801c620 <hex_char_to_int>
 801c6ae:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	781b      	ldrb	r3, [r3, #0]
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f7ff ffb2 	bl	801c620 <hex_char_to_int>
 801c6bc:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	3302      	adds	r3, #2
 801c6c2:	781b      	ldrb	r3, [r3, #0]
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f7ff ffab 	bl	801c620 <hex_char_to_int>
 801c6ca:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	3303      	adds	r3, #3
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f7ff ffa4 	bl	801c620 <hex_char_to_int>
 801c6d8:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6e0:	d00b      	beq.n	801c6fa <parse_utf16_hex+0x8a>
 801c6e2:	693b      	ldr	r3, [r7, #16]
 801c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6e8:	d007      	beq.n	801c6fa <parse_utf16_hex+0x8a>
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6f0:	d003      	beq.n	801c6fa <parse_utf16_hex+0x8a>
 801c6f2:	68bb      	ldr	r3, [r7, #8]
 801c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6f8:	d101      	bne.n	801c6fe <parse_utf16_hex+0x8e>
        return 0;
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	e00d      	b.n	801c71a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801c6fe:	697b      	ldr	r3, [r7, #20]
 801c700:	031a      	lsls	r2, r3, #12
 801c702:	693b      	ldr	r3, [r7, #16]
 801c704:	021b      	lsls	r3, r3, #8
 801c706:	431a      	orrs	r2, r3
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	011b      	lsls	r3, r3, #4
 801c70c:	431a      	orrs	r2, r3
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	4313      	orrs	r3, r2
 801c712:	461a      	mov	r2, r3
 801c714:	683b      	ldr	r3, [r7, #0]
 801c716:	601a      	str	r2, [r3, #0]
    return 1;
 801c718:	2301      	movs	r3, #1
}
 801c71a:	4618      	mov	r0, r3
 801c71c:	3718      	adds	r7, #24
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}

0801c722 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801c722:	b480      	push	{r7}
 801c724:	b083      	sub	sp, #12
 801c726:	af00      	add	r7, sp, #0
 801c728:	4603      	mov	r3, r0
 801c72a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801c72c:	79fb      	ldrb	r3, [r7, #7]
 801c72e:	2bc0      	cmp	r3, #192	; 0xc0
 801c730:	d00a      	beq.n	801c748 <num_bytes_in_utf8_sequence+0x26>
 801c732:	79fb      	ldrb	r3, [r7, #7]
 801c734:	2bc1      	cmp	r3, #193	; 0xc1
 801c736:	d007      	beq.n	801c748 <num_bytes_in_utf8_sequence+0x26>
 801c738:	79fb      	ldrb	r3, [r7, #7]
 801c73a:	2bf4      	cmp	r3, #244	; 0xf4
 801c73c:	d804      	bhi.n	801c748 <num_bytes_in_utf8_sequence+0x26>
 801c73e:	79fb      	ldrb	r3, [r7, #7]
 801c740:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c744:	2b80      	cmp	r3, #128	; 0x80
 801c746:	d101      	bne.n	801c74c <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801c748:	2300      	movs	r3, #0
 801c74a:	e01b      	b.n	801c784 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801c74c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c750:	2b00      	cmp	r3, #0
 801c752:	db01      	blt.n	801c758 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801c754:	2301      	movs	r3, #1
 801c756:	e015      	b.n	801c784 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801c758:	79fb      	ldrb	r3, [r7, #7]
 801c75a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801c75e:	2bc0      	cmp	r3, #192	; 0xc0
 801c760:	d101      	bne.n	801c766 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801c762:	2302      	movs	r3, #2
 801c764:	e00e      	b.n	801c784 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801c766:	79fb      	ldrb	r3, [r7, #7]
 801c768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c76c:	2be0      	cmp	r3, #224	; 0xe0
 801c76e:	d101      	bne.n	801c774 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801c770:	2303      	movs	r3, #3
 801c772:	e007      	b.n	801c784 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801c774:	79fb      	ldrb	r3, [r7, #7]
 801c776:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c77a:	2bf0      	cmp	r3, #240	; 0xf0
 801c77c:	d101      	bne.n	801c782 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801c77e:	2304      	movs	r3, #4
 801c780:	e000      	b.n	801c784 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801c782:	2300      	movs	r3, #0
}
 801c784:	4618      	mov	r0, r3
 801c786:	370c      	adds	r7, #12
 801c788:	46bd      	mov	sp, r7
 801c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78e:	4770      	bx	lr

0801c790 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801c790:	b580      	push	{r7, lr}
 801c792:	b084      	sub	sp, #16
 801c794:	af00      	add	r7, sp, #0
 801c796:	6078      	str	r0, [r7, #4]
 801c798:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801c79a:	2300      	movs	r3, #0
 801c79c:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	781b      	ldrb	r3, [r3, #0]
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7ff ffbd 	bl	801c722 <num_bytes_in_utf8_sequence>
 801c7a8:	4602      	mov	r2, r0
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801c7ae:	683b      	ldr	r3, [r7, #0]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	2b01      	cmp	r3, #1
 801c7b4:	d103      	bne.n	801c7be <verify_utf8_sequence+0x2e>
        cp = string[0];
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	781b      	ldrb	r3, [r3, #0]
 801c7ba:	60fb      	str	r3, [r7, #12]
 801c7bc:	e07f      	b.n	801c8be <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	2b02      	cmp	r3, #2
 801c7c4:	d115      	bne.n	801c7f2 <verify_utf8_sequence+0x62>
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	3301      	adds	r3, #1
 801c7ca:	781b      	ldrb	r3, [r3, #0]
 801c7cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c7d0:	2b80      	cmp	r3, #128	; 0x80
 801c7d2:	d10e      	bne.n	801c7f2 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	781b      	ldrb	r3, [r3, #0]
 801c7d8:	f003 031f 	and.w	r3, r3, #31
 801c7dc:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	019a      	lsls	r2, r3, #6
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	781b      	ldrb	r3, [r3, #0]
 801c7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c7ec:	4313      	orrs	r3, r2
 801c7ee:	60fb      	str	r3, [r7, #12]
 801c7f0:	e065      	b.n	801c8be <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	2b03      	cmp	r3, #3
 801c7f8:	d125      	bne.n	801c846 <verify_utf8_sequence+0xb6>
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	781b      	ldrb	r3, [r3, #0]
 801c800:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c804:	2b80      	cmp	r3, #128	; 0x80
 801c806:	d11e      	bne.n	801c846 <verify_utf8_sequence+0xb6>
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	3302      	adds	r3, #2
 801c80c:	781b      	ldrb	r3, [r3, #0]
 801c80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c812:	2b80      	cmp	r3, #128	; 0x80
 801c814:	d117      	bne.n	801c846 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	781b      	ldrb	r3, [r3, #0]
 801c81a:	f003 030f 	and.w	r3, r3, #15
 801c81e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	019a      	lsls	r2, r3, #6
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	3301      	adds	r3, #1
 801c828:	781b      	ldrb	r3, [r3, #0]
 801c82a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c82e:	4313      	orrs	r3, r2
 801c830:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	019a      	lsls	r2, r3, #6
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	3302      	adds	r3, #2
 801c83a:	781b      	ldrb	r3, [r3, #0]
 801c83c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c840:	4313      	orrs	r3, r2
 801c842:	60fb      	str	r3, [r7, #12]
 801c844:	e03b      	b.n	801c8be <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801c846:	683b      	ldr	r3, [r7, #0]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	2b04      	cmp	r3, #4
 801c84c:	d135      	bne.n	801c8ba <verify_utf8_sequence+0x12a>
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	3301      	adds	r3, #1
 801c852:	781b      	ldrb	r3, [r3, #0]
 801c854:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c858:	2b80      	cmp	r3, #128	; 0x80
 801c85a:	d12e      	bne.n	801c8ba <verify_utf8_sequence+0x12a>
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	3302      	adds	r3, #2
 801c860:	781b      	ldrb	r3, [r3, #0]
 801c862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c866:	2b80      	cmp	r3, #128	; 0x80
 801c868:	d127      	bne.n	801c8ba <verify_utf8_sequence+0x12a>
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	3303      	adds	r3, #3
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c874:	2b80      	cmp	r3, #128	; 0x80
 801c876:	d120      	bne.n	801c8ba <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	781b      	ldrb	r3, [r3, #0]
 801c87c:	f003 0307 	and.w	r3, r3, #7
 801c880:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	019a      	lsls	r2, r3, #6
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	3301      	adds	r3, #1
 801c88a:	781b      	ldrb	r3, [r3, #0]
 801c88c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c890:	4313      	orrs	r3, r2
 801c892:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	019a      	lsls	r2, r3, #6
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	3302      	adds	r3, #2
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c8a2:	4313      	orrs	r3, r2
 801c8a4:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	019a      	lsls	r2, r3, #6
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	3303      	adds	r3, #3
 801c8ae:	781b      	ldrb	r3, [r3, #0]
 801c8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c8b4:	4313      	orrs	r3, r2
 801c8b6:	60fb      	str	r3, [r7, #12]
 801c8b8:	e001      	b.n	801c8be <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	e029      	b.n	801c912 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	2b7f      	cmp	r3, #127	; 0x7f
 801c8c2:	d803      	bhi.n	801c8cc <verify_utf8_sequence+0x13c>
 801c8c4:	683b      	ldr	r3, [r7, #0]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	2b01      	cmp	r3, #1
 801c8ca:	dc0f      	bgt.n	801c8ec <verify_utf8_sequence+0x15c>
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c8d2:	d203      	bcs.n	801c8dc <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801c8d4:	683b      	ldr	r3, [r7, #0]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	2b02      	cmp	r3, #2
 801c8da:	dc07      	bgt.n	801c8ec <verify_utf8_sequence+0x15c>
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c8e2:	d205      	bcs.n	801c8f0 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	2b03      	cmp	r3, #3
 801c8ea:	dd01      	ble.n	801c8f0 <verify_utf8_sequence+0x160>
        return 0;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	e010      	b.n	801c912 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801c8f6:	d301      	bcc.n	801c8fc <verify_utf8_sequence+0x16c>
        return 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	e00a      	b.n	801c912 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c902:	d305      	bcc.n	801c910 <verify_utf8_sequence+0x180>
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801c90a:	d201      	bcs.n	801c910 <verify_utf8_sequence+0x180>
        return 0;
 801c90c:	2300      	movs	r3, #0
 801c90e:	e000      	b.n	801c912 <verify_utf8_sequence+0x182>
    }

    return 1;
 801c910:	2301      	movs	r3, #1
}
 801c912:	4618      	mov	r0, r3
 801c914:	3710      	adds	r7, #16
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}

0801c91a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801c91a:	b580      	push	{r7, lr}
 801c91c:	b084      	sub	sp, #16
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6078      	str	r0, [r7, #4]
 801c922:	6039      	str	r1, [r7, #0]
    int len = 0;
 801c924:	2300      	movs	r3, #0
 801c926:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801c928:	687a      	ldr	r2, [r7, #4]
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	4413      	add	r3, r2
 801c92e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801c930:	e00f      	b.n	801c952 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801c932:	f107 0308 	add.w	r3, r7, #8
 801c936:	4619      	mov	r1, r3
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f7ff ff29 	bl	801c790 <verify_utf8_sequence>
 801c93e:	4603      	mov	r3, r0
 801c940:	2b00      	cmp	r3, #0
 801c942:	d101      	bne.n	801c948 <is_valid_utf8+0x2e>
            return 0;
 801c944:	2300      	movs	r3, #0
 801c946:	e009      	b.n	801c95c <is_valid_utf8+0x42>
        }
        string += len;
 801c948:	68bb      	ldr	r3, [r7, #8]
 801c94a:	461a      	mov	r2, r3
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	4413      	add	r3, r2
 801c950:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	429a      	cmp	r2, r3
 801c958:	d3eb      	bcc.n	801c932 <is_valid_utf8+0x18>
    }
    return 1;
 801c95a:	2301      	movs	r3, #1
}
 801c95c:	4618      	mov	r0, r3
 801c95e:	3710      	adds	r7, #16
 801c960:	46bd      	mov	sp, r7
 801c962:	bd80      	pop	{r7, pc}

0801c964 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801c964:	b580      	push	{r7, lr}
 801c966:	b082      	sub	sp, #8
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
 801c96c:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801c96e:	683b      	ldr	r3, [r7, #0]
 801c970:	2b01      	cmp	r3, #1
 801c972:	d90a      	bls.n	801c98a <is_decimal+0x26>
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	781b      	ldrb	r3, [r3, #0]
 801c978:	2b30      	cmp	r3, #48	; 0x30
 801c97a:	d106      	bne.n	801c98a <is_decimal+0x26>
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	3301      	adds	r3, #1
 801c980:	781b      	ldrb	r3, [r3, #0]
 801c982:	2b2e      	cmp	r3, #46	; 0x2e
 801c984:	d001      	beq.n	801c98a <is_decimal+0x26>
        return 0;
 801c986:	2300      	movs	r3, #0
 801c988:	e024      	b.n	801c9d4 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	2b02      	cmp	r3, #2
 801c98e:	d91b      	bls.n	801c9c8 <is_decimal+0x64>
 801c990:	2202      	movs	r2, #2
 801c992:	4912      	ldr	r1, [pc, #72]	; (801c9dc <is_decimal+0x78>)
 801c994:	6878      	ldr	r0, [r7, #4]
 801c996:	f003 fb07 	bl	801ffa8 <strncmp>
 801c99a:	4603      	mov	r3, r0
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d113      	bne.n	801c9c8 <is_decimal+0x64>
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	3302      	adds	r3, #2
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	2b2e      	cmp	r3, #46	; 0x2e
 801c9a8:	d00e      	beq.n	801c9c8 <is_decimal+0x64>
        return 0;
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	e012      	b.n	801c9d4 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801c9ae:	687a      	ldr	r2, [r7, #4]
 801c9b0:	683b      	ldr	r3, [r7, #0]
 801c9b2:	4413      	add	r3, r2
 801c9b4:	781b      	ldrb	r3, [r3, #0]
 801c9b6:	4619      	mov	r1, r3
 801c9b8:	4809      	ldr	r0, [pc, #36]	; (801c9e0 <is_decimal+0x7c>)
 801c9ba:	f003 fae8 	bl	801ff8e <strchr>
 801c9be:	4603      	mov	r3, r0
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d001      	beq.n	801c9c8 <is_decimal+0x64>
            return 0;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	e005      	b.n	801c9d4 <is_decimal+0x70>
    while (length--) {
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	1e5a      	subs	r2, r3, #1
 801c9cc:	603a      	str	r2, [r7, #0]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d1ed      	bne.n	801c9ae <is_decimal+0x4a>
        }
    }
    return 1;
 801c9d2:	2301      	movs	r3, #1
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	3708      	adds	r7, #8
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd80      	pop	{r7, pc}
 801c9dc:	08023094 	.word	0x08023094
 801c9e0:	08023098 	.word	0x08023098

0801c9e4 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801c9e4:	b580      	push	{r7, lr}
 801c9e6:	b084      	sub	sp, #16
 801c9e8:	af00      	add	r7, sp, #0
 801c9ea:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801c9ec:	4b0e      	ldr	r3, [pc, #56]	; (801ca28 <json_object_init+0x44>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2014      	movs	r0, #20
 801c9f2:	4798      	blx	r3
 801c9f4:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d101      	bne.n	801ca00 <json_object_init+0x1c>
        return NULL;
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	e00f      	b.n	801ca20 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	687a      	ldr	r2, [r7, #4]
 801ca04:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	2200      	movs	r2, #0
 801ca0a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	2200      	movs	r2, #0
 801ca10:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2200      	movs	r2, #0
 801ca16:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	60da      	str	r2, [r3, #12]
    return new_obj;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
}
 801ca20:	4618      	mov	r0, r3
 801ca22:	3710      	adds	r7, #16
 801ca24:	46bd      	mov	sp, r7
 801ca26:	bd80      	pop	{r7, pc}
 801ca28:	200002b0 	.word	0x200002b0

0801ca2c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b084      	sub	sp, #16
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	60f8      	str	r0, [r7, #12]
 801ca34:	60b9      	str	r1, [r7, #8]
 801ca36:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801ca38:	68bb      	ldr	r3, [r7, #8]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d102      	bne.n	801ca44 <json_object_add+0x18>
        return JSONFailure;
 801ca3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca42:	e009      	b.n	801ca58 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801ca44:	68b8      	ldr	r0, [r7, #8]
 801ca46:	f7e3 fbe5 	bl	8000214 <strlen>
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	68b9      	ldr	r1, [r7, #8]
 801ca50:	68f8      	ldr	r0, [r7, #12]
 801ca52:	f000 f805 	bl	801ca60 <json_object_addn>
 801ca56:	4603      	mov	r3, r0
}
 801ca58:	4618      	mov	r0, r3
 801ca5a:	3710      	adds	r7, #16
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}

0801ca60 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801ca60:	b590      	push	{r4, r7, lr}
 801ca62:	b087      	sub	sp, #28
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	60f8      	str	r0, [r7, #12]
 801ca68:	60b9      	str	r1, [r7, #8]
 801ca6a:	607a      	str	r2, [r7, #4]
 801ca6c:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801ca6e:	2300      	movs	r3, #0
 801ca70:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d005      	beq.n	801ca84 <json_object_addn+0x24>
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d002      	beq.n	801ca84 <json_object_addn+0x24>
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d102      	bne.n	801ca8a <json_object_addn+0x2a>
        return JSONFailure;
 801ca84:	f04f 33ff 	mov.w	r3, #4294967295
 801ca88:	e04e      	b.n	801cb28 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801ca8a:	687a      	ldr	r2, [r7, #4]
 801ca8c:	68b9      	ldr	r1, [r7, #8]
 801ca8e:	68f8      	ldr	r0, [r7, #12]
 801ca90:	f000 f8c8 	bl	801cc24 <json_object_getn_value>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d002      	beq.n	801caa0 <json_object_addn+0x40>
        return JSONFailure;
 801ca9a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca9e:	e043      	b.n	801cb28 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	68da      	ldr	r2, [r3, #12]
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	691b      	ldr	r3, [r3, #16]
 801caa8:	429a      	cmp	r2, r3
 801caaa:	d311      	bcc.n	801cad0 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	691b      	ldr	r3, [r3, #16]
 801cab0:	005b      	lsls	r3, r3, #1
 801cab2:	2b10      	cmp	r3, #16
 801cab4:	bf38      	it	cc
 801cab6:	2310      	movcc	r3, #16
 801cab8:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801caba:	6939      	ldr	r1, [r7, #16]
 801cabc:	68f8      	ldr	r0, [r7, #12]
 801cabe:	f000 f837 	bl	801cb30 <json_object_resize>
 801cac2:	4603      	mov	r3, r0
 801cac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cac8:	d102      	bne.n	801cad0 <json_object_addn+0x70>
            return JSONFailure;
 801caca:	f04f 33ff 	mov.w	r3, #4294967295
 801cace:	e02b      	b.n	801cb28 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	68db      	ldr	r3, [r3, #12]
 801cad4:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	685a      	ldr	r2, [r3, #4]
 801cada:	697b      	ldr	r3, [r7, #20]
 801cadc:	009b      	lsls	r3, r3, #2
 801cade:	18d4      	adds	r4, r2, r3
 801cae0:	6879      	ldr	r1, [r7, #4]
 801cae2:	68b8      	ldr	r0, [r7, #8]
 801cae4:	f7ff fd7a 	bl	801c5dc <parson_strndup>
 801cae8:	4603      	mov	r3, r0
 801caea:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	685a      	ldr	r2, [r3, #4]
 801caf0:	697b      	ldr	r3, [r7, #20]
 801caf2:	009b      	lsls	r3, r3, #2
 801caf4:	4413      	add	r3, r2
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d102      	bne.n	801cb02 <json_object_addn+0xa2>
        return JSONFailure;
 801cafc:	f04f 33ff 	mov.w	r3, #4294967295
 801cb00:	e012      	b.n	801cb28 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801cb02:	68f8      	ldr	r0, [r7, #12]
 801cb04:	f002 f8d4 	bl	801ecb0 <json_object_get_wrapping_value>
 801cb08:	4602      	mov	r2, r0
 801cb0a:	683b      	ldr	r3, [r7, #0]
 801cb0c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	689a      	ldr	r2, [r3, #8]
 801cb12:	697b      	ldr	r3, [r7, #20]
 801cb14:	009b      	lsls	r3, r3, #2
 801cb16:	4413      	add	r3, r2
 801cb18:	683a      	ldr	r2, [r7, #0]
 801cb1a:	601a      	str	r2, [r3, #0]
    object->count++;
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	68db      	ldr	r3, [r3, #12]
 801cb20:	1c5a      	adds	r2, r3, #1
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801cb26:	2300      	movs	r3, #0
}
 801cb28:	4618      	mov	r0, r3
 801cb2a:	371c      	adds	r7, #28
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd90      	pop	{r4, r7, pc}

0801cb30 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801cb30:	b580      	push	{r7, lr}
 801cb32:	b084      	sub	sp, #16
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
 801cb38:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801cb3e:	2300      	movs	r3, #0
 801cb40:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	685b      	ldr	r3, [r3, #4]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d103      	bne.n	801cb52 <json_object_resize+0x22>
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	689b      	ldr	r3, [r3, #8]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d10a      	bne.n	801cb68 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d003      	beq.n	801cb62 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	689b      	ldr	r3, [r3, #8]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d002      	beq.n	801cb68 <json_object_resize+0x38>
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d102      	bne.n	801cb6e <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801cb68:	f04f 33ff 	mov.w	r3, #4294967295
 801cb6c:	e051      	b.n	801cc12 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801cb6e:	4b2b      	ldr	r3, [pc, #172]	; (801cc1c <json_object_resize+0xec>)
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	683a      	ldr	r2, [r7, #0]
 801cb74:	0092      	lsls	r2, r2, #2
 801cb76:	4610      	mov	r0, r2
 801cb78:	4798      	blx	r3
 801cb7a:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d102      	bne.n	801cb88 <json_object_resize+0x58>
        return JSONFailure;
 801cb82:	f04f 33ff 	mov.w	r3, #4294967295
 801cb86:	e044      	b.n	801cc12 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801cb88:	4b24      	ldr	r3, [pc, #144]	; (801cc1c <json_object_resize+0xec>)
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	683a      	ldr	r2, [r7, #0]
 801cb8e:	0092      	lsls	r2, r2, #2
 801cb90:	4610      	mov	r0, r2
 801cb92:	4798      	blx	r3
 801cb94:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d106      	bne.n	801cbaa <json_object_resize+0x7a>
        parson_free(temp_names);
 801cb9c:	4b20      	ldr	r3, [pc, #128]	; (801cc20 <json_object_resize+0xf0>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	68f8      	ldr	r0, [r7, #12]
 801cba2:	4798      	blx	r3
        return JSONFailure;
 801cba4:	f04f 33ff 	mov.w	r3, #4294967295
 801cba8:	e033      	b.n	801cc12 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d019      	beq.n	801cbe6 <json_object_resize+0xb6>
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	689b      	ldr	r3, [r3, #8]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d015      	beq.n	801cbe6 <json_object_resize+0xb6>
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	68db      	ldr	r3, [r3, #12]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d011      	beq.n	801cbe6 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	6859      	ldr	r1, [r3, #4]
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	68db      	ldr	r3, [r3, #12]
 801cbca:	009b      	lsls	r3, r3, #2
 801cbcc:	461a      	mov	r2, r3
 801cbce:	68f8      	ldr	r0, [r7, #12]
 801cbd0:	f003 f880 	bl	801fcd4 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	6899      	ldr	r1, [r3, #8]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	68db      	ldr	r3, [r3, #12]
 801cbdc:	009b      	lsls	r3, r3, #2
 801cbde:	461a      	mov	r2, r3
 801cbe0:	68b8      	ldr	r0, [r7, #8]
 801cbe2:	f003 f877 	bl	801fcd4 <memcpy>
    }
    parson_free(object->names);
 801cbe6:	4b0e      	ldr	r3, [pc, #56]	; (801cc20 <json_object_resize+0xf0>)
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	687a      	ldr	r2, [r7, #4]
 801cbec:	6852      	ldr	r2, [r2, #4]
 801cbee:	4610      	mov	r0, r2
 801cbf0:	4798      	blx	r3
    parson_free(object->values);
 801cbf2:	4b0b      	ldr	r3, [pc, #44]	; (801cc20 <json_object_resize+0xf0>)
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	687a      	ldr	r2, [r7, #4]
 801cbf8:	6892      	ldr	r2, [r2, #8]
 801cbfa:	4610      	mov	r0, r2
 801cbfc:	4798      	blx	r3
    object->names = temp_names;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	68fa      	ldr	r2, [r7, #12]
 801cc02:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	68ba      	ldr	r2, [r7, #8]
 801cc08:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	683a      	ldr	r2, [r7, #0]
 801cc0e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801cc10:	2300      	movs	r3, #0
}
 801cc12:	4618      	mov	r0, r3
 801cc14:	3710      	adds	r7, #16
 801cc16:	46bd      	mov	sp, r7
 801cc18:	bd80      	pop	{r7, pc}
 801cc1a:	bf00      	nop
 801cc1c:	200002b0 	.word	0x200002b0
 801cc20:	200002b4 	.word	0x200002b4

0801cc24 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801cc24:	b580      	push	{r7, lr}
 801cc26:	b086      	sub	sp, #24
 801cc28:	af00      	add	r7, sp, #0
 801cc2a:	60f8      	str	r0, [r7, #12]
 801cc2c:	60b9      	str	r1, [r7, #8]
 801cc2e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801cc30:	2300      	movs	r3, #0
 801cc32:	617b      	str	r3, [r7, #20]
 801cc34:	e026      	b.n	801cc84 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	685a      	ldr	r2, [r3, #4]
 801cc3a:	697b      	ldr	r3, [r7, #20]
 801cc3c:	009b      	lsls	r3, r3, #2
 801cc3e:	4413      	add	r3, r2
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	4618      	mov	r0, r3
 801cc44:	f7e3 fae6 	bl	8000214 <strlen>
 801cc48:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801cc4a:	693a      	ldr	r2, [r7, #16]
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	d114      	bne.n	801cc7c <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	685a      	ldr	r2, [r3, #4]
 801cc56:	697b      	ldr	r3, [r7, #20]
 801cc58:	009b      	lsls	r3, r3, #2
 801cc5a:	4413      	add	r3, r2
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	687a      	ldr	r2, [r7, #4]
 801cc60:	68b9      	ldr	r1, [r7, #8]
 801cc62:	4618      	mov	r0, r3
 801cc64:	f003 f9a0 	bl	801ffa8 <strncmp>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d107      	bne.n	801cc7e <json_object_getn_value+0x5a>
            return object->values[i];
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	689a      	ldr	r2, [r3, #8]
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	009b      	lsls	r3, r3, #2
 801cc76:	4413      	add	r3, r2
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	e00b      	b.n	801cc94 <json_object_getn_value+0x70>
            continue;
 801cc7c:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	3301      	adds	r3, #1
 801cc82:	617b      	str	r3, [r7, #20]
 801cc84:	68f8      	ldr	r0, [r7, #12]
 801cc86:	f001 ffe7 	bl	801ec58 <json_object_get_count>
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	697b      	ldr	r3, [r7, #20]
 801cc8e:	4293      	cmp	r3, r2
 801cc90:	d3d1      	bcc.n	801cc36 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801cc92:	2300      	movs	r3, #0
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3718      	adds	r7, #24
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b086      	sub	sp, #24
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	60f8      	str	r0, [r7, #12]
 801cca4:	60b9      	str	r1, [r7, #8]
 801cca6:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801cca8:	2300      	movs	r3, #0
 801ccaa:	617b      	str	r3, [r7, #20]
 801ccac:	2300      	movs	r3, #0
 801ccae:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d006      	beq.n	801ccc4 <json_object_remove_internal+0x28>
 801ccb6:	68b9      	ldr	r1, [r7, #8]
 801ccb8:	68f8      	ldr	r0, [r7, #12]
 801ccba:	f001 ff39 	bl	801eb30 <json_object_get_value>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d102      	bne.n	801ccca <json_object_remove_internal+0x2e>
        return JSONFailure;
 801ccc4:	f04f 33ff 	mov.w	r3, #4294967295
 801ccc8:	e05a      	b.n	801cd80 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801ccca:	68f8      	ldr	r0, [r7, #12]
 801cccc:	f001 ffc4 	bl	801ec58 <json_object_get_count>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	3b01      	subs	r3, #1
 801ccd4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	617b      	str	r3, [r7, #20]
 801ccda:	e048      	b.n	801cd6e <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	685a      	ldr	r2, [r3, #4]
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	009b      	lsls	r3, r3, #2
 801cce4:	4413      	add	r3, r2
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	68b9      	ldr	r1, [r7, #8]
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7e3 fa88 	bl	8000200 <strcmp>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d138      	bne.n	801cd68 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801ccf6:	4b24      	ldr	r3, [pc, #144]	; (801cd88 <json_object_remove_internal+0xec>)
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	68fa      	ldr	r2, [r7, #12]
 801ccfc:	6851      	ldr	r1, [r2, #4]
 801ccfe:	697a      	ldr	r2, [r7, #20]
 801cd00:	0092      	lsls	r2, r2, #2
 801cd02:	440a      	add	r2, r1
 801cd04:	6812      	ldr	r2, [r2, #0]
 801cd06:	4610      	mov	r0, r2
 801cd08:	4798      	blx	r3
            if (free_value) {
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d008      	beq.n	801cd22 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	689a      	ldr	r2, [r3, #8]
 801cd14:	697b      	ldr	r3, [r7, #20]
 801cd16:	009b      	lsls	r3, r3, #2
 801cd18:	4413      	add	r3, r2
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	f002 f8a7 	bl	801ee70 <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801cd22:	697a      	ldr	r2, [r7, #20]
 801cd24:	693b      	ldr	r3, [r7, #16]
 801cd26:	429a      	cmp	r2, r3
 801cd28:	d017      	beq.n	801cd5a <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	685a      	ldr	r2, [r3, #4]
 801cd2e:	693b      	ldr	r3, [r7, #16]
 801cd30:	009b      	lsls	r3, r3, #2
 801cd32:	441a      	add	r2, r3
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	6859      	ldr	r1, [r3, #4]
 801cd38:	697b      	ldr	r3, [r7, #20]
 801cd3a:	009b      	lsls	r3, r3, #2
 801cd3c:	440b      	add	r3, r1
 801cd3e:	6812      	ldr	r2, [r2, #0]
 801cd40:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801cd42:	68fb      	ldr	r3, [r7, #12]
 801cd44:	689a      	ldr	r2, [r3, #8]
 801cd46:	693b      	ldr	r3, [r7, #16]
 801cd48:	009b      	lsls	r3, r3, #2
 801cd4a:	441a      	add	r2, r3
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	6899      	ldr	r1, [r3, #8]
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	009b      	lsls	r3, r3, #2
 801cd54:	440b      	add	r3, r1
 801cd56:	6812      	ldr	r2, [r2, #0]
 801cd58:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	68db      	ldr	r3, [r3, #12]
 801cd5e:	1e5a      	subs	r2, r3, #1
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801cd64:	2300      	movs	r3, #0
 801cd66:	e00b      	b.n	801cd80 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801cd68:	697b      	ldr	r3, [r7, #20]
 801cd6a:	3301      	adds	r3, #1
 801cd6c:	617b      	str	r3, [r7, #20]
 801cd6e:	68f8      	ldr	r0, [r7, #12]
 801cd70:	f001 ff72 	bl	801ec58 <json_object_get_count>
 801cd74:	4602      	mov	r2, r0
 801cd76:	697b      	ldr	r3, [r7, #20]
 801cd78:	4293      	cmp	r3, r2
 801cd7a:	d3af      	bcc.n	801ccdc <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801cd7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cd80:	4618      	mov	r0, r3
 801cd82:	3718      	adds	r7, #24
 801cd84:	46bd      	mov	sp, r7
 801cd86:	bd80      	pop	{r7, pc}
 801cd88:	200002b4 	.word	0x200002b4

0801cd8c <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b088      	sub	sp, #32
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	60f8      	str	r0, [r7, #12]
 801cd94:	60b9      	str	r1, [r7, #8]
 801cd96:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801cd98:	2300      	movs	r3, #0
 801cd9a:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801cda0:	212e      	movs	r1, #46	; 0x2e
 801cda2:	68b8      	ldr	r0, [r7, #8]
 801cda4:	f003 f8f3 	bl	801ff8e <strchr>
 801cda8:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801cdaa:	697b      	ldr	r3, [r7, #20]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d106      	bne.n	801cdbe <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801cdb0:	687a      	ldr	r2, [r7, #4]
 801cdb2:	68b9      	ldr	r1, [r7, #8]
 801cdb4:	68f8      	ldr	r0, [r7, #12]
 801cdb6:	f7ff ff71 	bl	801cc9c <json_object_remove_internal>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	e01d      	b.n	801cdfa <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801cdbe:	697a      	ldr	r2, [r7, #20]
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	1ad3      	subs	r3, r2, r3
 801cdc4:	461a      	mov	r2, r3
 801cdc6:	68b9      	ldr	r1, [r7, #8]
 801cdc8:	68f8      	ldr	r0, [r7, #12]
 801cdca:	f7ff ff2b 	bl	801cc24 <json_object_getn_value>
 801cdce:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801cdd0:	69f8      	ldr	r0, [r7, #28]
 801cdd2:	f001 ffd6 	bl	801ed82 <json_value_get_type>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	2b04      	cmp	r3, #4
 801cdda:	d002      	beq.n	801cde2 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801cddc:	f04f 33ff 	mov.w	r3, #4294967295
 801cde0:	e00b      	b.n	801cdfa <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801cde2:	69f8      	ldr	r0, [r7, #28]
 801cde4:	f001 ffdf 	bl	801eda6 <json_value_get_object>
 801cde8:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	3301      	adds	r3, #1
 801cdee:	687a      	ldr	r2, [r7, #4]
 801cdf0:	4619      	mov	r1, r3
 801cdf2:	69b8      	ldr	r0, [r7, #24]
 801cdf4:	f7ff ffca 	bl	801cd8c <json_object_dotremove_internal>
 801cdf8:	4603      	mov	r3, r0
}
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	3720      	adds	r7, #32
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
	...

0801ce04 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b084      	sub	sp, #16
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801ce0c:	2300      	movs	r3, #0
 801ce0e:	60fb      	str	r3, [r7, #12]
 801ce10:	e015      	b.n	801ce3e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801ce12:	4b17      	ldr	r3, [pc, #92]	; (801ce70 <json_object_free+0x6c>)
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	687a      	ldr	r2, [r7, #4]
 801ce18:	6851      	ldr	r1, [r2, #4]
 801ce1a:	68fa      	ldr	r2, [r7, #12]
 801ce1c:	0092      	lsls	r2, r2, #2
 801ce1e:	440a      	add	r2, r1
 801ce20:	6812      	ldr	r2, [r2, #0]
 801ce22:	4610      	mov	r0, r2
 801ce24:	4798      	blx	r3
        json_value_free(object->values[i]);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	689a      	ldr	r2, [r3, #8]
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	009b      	lsls	r3, r3, #2
 801ce2e:	4413      	add	r3, r2
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	4618      	mov	r0, r3
 801ce34:	f002 f81c 	bl	801ee70 <json_value_free>
    for (i = 0; i < object->count; i++) {
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	60fb      	str	r3, [r7, #12]
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	68db      	ldr	r3, [r3, #12]
 801ce42:	68fa      	ldr	r2, [r7, #12]
 801ce44:	429a      	cmp	r2, r3
 801ce46:	d3e4      	bcc.n	801ce12 <json_object_free+0xe>
    }
    parson_free(object->names);
 801ce48:	4b09      	ldr	r3, [pc, #36]	; (801ce70 <json_object_free+0x6c>)
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	687a      	ldr	r2, [r7, #4]
 801ce4e:	6852      	ldr	r2, [r2, #4]
 801ce50:	4610      	mov	r0, r2
 801ce52:	4798      	blx	r3
    parson_free(object->values);
 801ce54:	4b06      	ldr	r3, [pc, #24]	; (801ce70 <json_object_free+0x6c>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	6892      	ldr	r2, [r2, #8]
 801ce5c:	4610      	mov	r0, r2
 801ce5e:	4798      	blx	r3
    parson_free(object);
 801ce60:	4b03      	ldr	r3, [pc, #12]	; (801ce70 <json_object_free+0x6c>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	6878      	ldr	r0, [r7, #4]
 801ce66:	4798      	blx	r3
}
 801ce68:	bf00      	nop
 801ce6a:	3710      	adds	r7, #16
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	200002b4 	.word	0x200002b4

0801ce74 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b084      	sub	sp, #16
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801ce7c:	4b0d      	ldr	r3, [pc, #52]	; (801ceb4 <json_array_init+0x40>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	2010      	movs	r0, #16
 801ce82:	4798      	blx	r3
 801ce84:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d101      	bne.n	801ce90 <json_array_init+0x1c>
        return NULL;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	e00c      	b.n	801ceaa <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	687a      	ldr	r2, [r7, #4]
 801ce94:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	2200      	movs	r2, #0
 801ce9a:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	2200      	movs	r2, #0
 801cea0:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	2200      	movs	r2, #0
 801cea6:	609a      	str	r2, [r3, #8]
    return new_array;
 801cea8:	68fb      	ldr	r3, [r7, #12]
}
 801ceaa:	4618      	mov	r0, r3
 801ceac:	3710      	adds	r7, #16
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	bd80      	pop	{r7, pc}
 801ceb2:	bf00      	nop
 801ceb4:	200002b0 	.word	0x200002b0

0801ceb8 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b084      	sub	sp, #16
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	6078      	str	r0, [r7, #4]
 801cec0:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	689a      	ldr	r2, [r3, #8]
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	68db      	ldr	r3, [r3, #12]
 801ceca:	429a      	cmp	r2, r3
 801cecc:	d311      	bcc.n	801cef2 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	68db      	ldr	r3, [r3, #12]
 801ced2:	005b      	lsls	r3, r3, #1
 801ced4:	2b10      	cmp	r3, #16
 801ced6:	bf38      	it	cc
 801ced8:	2310      	movcc	r3, #16
 801ceda:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801cedc:	68f9      	ldr	r1, [r7, #12]
 801cede:	6878      	ldr	r0, [r7, #4]
 801cee0:	f000 f820 	bl	801cf24 <json_array_resize>
 801cee4:	4603      	mov	r3, r0
 801cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ceea:	d102      	bne.n	801cef2 <json_array_add+0x3a>
            return JSONFailure;
 801ceec:	f04f 33ff 	mov.w	r3, #4294967295
 801cef0:	e013      	b.n	801cf1a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801cef2:	6878      	ldr	r0, [r7, #4]
 801cef4:	f001 ff39 	bl	801ed6a <json_array_get_wrapping_value>
 801cef8:	4602      	mov	r2, r0
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	685a      	ldr	r2, [r3, #4]
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	689b      	ldr	r3, [r3, #8]
 801cf06:	009b      	lsls	r3, r3, #2
 801cf08:	4413      	add	r3, r2
 801cf0a:	683a      	ldr	r2, [r7, #0]
 801cf0c:	601a      	str	r2, [r3, #0]
    array->count++;
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	689b      	ldr	r3, [r3, #8]
 801cf12:	1c5a      	adds	r2, r3, #1
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801cf18:	2300      	movs	r3, #0
}
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	3710      	adds	r7, #16
 801cf1e:	46bd      	mov	sp, r7
 801cf20:	bd80      	pop	{r7, pc}
	...

0801cf24 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b084      	sub	sp, #16
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
 801cf2c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801cf32:	683b      	ldr	r3, [r7, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d102      	bne.n	801cf3e <json_array_resize+0x1a>
        return JSONFailure;
 801cf38:	f04f 33ff 	mov.w	r3, #4294967295
 801cf3c:	e02a      	b.n	801cf94 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801cf3e:	4b17      	ldr	r3, [pc, #92]	; (801cf9c <json_array_resize+0x78>)
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	683a      	ldr	r2, [r7, #0]
 801cf44:	0092      	lsls	r2, r2, #2
 801cf46:	4610      	mov	r0, r2
 801cf48:	4798      	blx	r3
 801cf4a:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d102      	bne.n	801cf58 <json_array_resize+0x34>
        return JSONFailure;
 801cf52:	f04f 33ff 	mov.w	r3, #4294967295
 801cf56:	e01d      	b.n	801cf94 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	685b      	ldr	r3, [r3, #4]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d00c      	beq.n	801cf7a <json_array_resize+0x56>
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	689b      	ldr	r3, [r3, #8]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d008      	beq.n	801cf7a <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	6859      	ldr	r1, [r3, #4]
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	689b      	ldr	r3, [r3, #8]
 801cf70:	009b      	lsls	r3, r3, #2
 801cf72:	461a      	mov	r2, r3
 801cf74:	68f8      	ldr	r0, [r7, #12]
 801cf76:	f002 fead 	bl	801fcd4 <memcpy>
    }
    parson_free(array->items);
 801cf7a:	4b09      	ldr	r3, [pc, #36]	; (801cfa0 <json_array_resize+0x7c>)
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	687a      	ldr	r2, [r7, #4]
 801cf80:	6852      	ldr	r2, [r2, #4]
 801cf82:	4610      	mov	r0, r2
 801cf84:	4798      	blx	r3
    array->items = new_items;
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	68fa      	ldr	r2, [r7, #12]
 801cf8a:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	683a      	ldr	r2, [r7, #0]
 801cf90:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801cf92:	2300      	movs	r3, #0
}
 801cf94:	4618      	mov	r0, r3
 801cf96:	3710      	adds	r7, #16
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	bd80      	pop	{r7, pc}
 801cf9c:	200002b0 	.word	0x200002b0
 801cfa0:	200002b4 	.word	0x200002b4

0801cfa4 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b084      	sub	sp, #16
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801cfac:	2300      	movs	r3, #0
 801cfae:	60fb      	str	r3, [r7, #12]
 801cfb0:	e00b      	b.n	801cfca <json_array_free+0x26>
        json_value_free(array->items[i]);
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	685a      	ldr	r2, [r3, #4]
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	009b      	lsls	r3, r3, #2
 801cfba:	4413      	add	r3, r2
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	f001 ff56 	bl	801ee70 <json_value_free>
    for (i = 0; i < array->count; i++) {
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	3301      	adds	r3, #1
 801cfc8:	60fb      	str	r3, [r7, #12]
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	689b      	ldr	r3, [r3, #8]
 801cfce:	68fa      	ldr	r2, [r7, #12]
 801cfd0:	429a      	cmp	r2, r3
 801cfd2:	d3ee      	bcc.n	801cfb2 <json_array_free+0xe>
    }
    parson_free(array->items);
 801cfd4:	4b06      	ldr	r3, [pc, #24]	; (801cff0 <json_array_free+0x4c>)
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	687a      	ldr	r2, [r7, #4]
 801cfda:	6852      	ldr	r2, [r2, #4]
 801cfdc:	4610      	mov	r0, r2
 801cfde:	4798      	blx	r3
    parson_free(array);
 801cfe0:	4b03      	ldr	r3, [pc, #12]	; (801cff0 <json_array_free+0x4c>)
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	6878      	ldr	r0, [r7, #4]
 801cfe6:	4798      	blx	r3
}
 801cfe8:	bf00      	nop
 801cfea:	3710      	adds	r7, #16
 801cfec:	46bd      	mov	sp, r7
 801cfee:	bd80      	pop	{r7, pc}
 801cff0:	200002b4 	.word	0x200002b4

0801cff4 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b084      	sub	sp, #16
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801cffc:	4b0b      	ldr	r3, [pc, #44]	; (801d02c <json_value_init_string_no_copy+0x38>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	2010      	movs	r0, #16
 801d002:	4798      	blx	r3
 801d004:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d101      	bne.n	801d010 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801d00c:	2300      	movs	r3, #0
 801d00e:	e009      	b.n	801d024 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	2200      	movs	r2, #0
 801d014:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	2202      	movs	r2, #2
 801d01a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	687a      	ldr	r2, [r7, #4]
 801d020:	609a      	str	r2, [r3, #8]
    return new_value;
 801d022:	68fb      	ldr	r3, [r7, #12]
}
 801d024:	4618      	mov	r0, r3
 801d026:	3710      	adds	r7, #16
 801d028:	46bd      	mov	sp, r7
 801d02a:	bd80      	pop	{r7, pc}
 801d02c:	200002b0 	.word	0x200002b0

0801d030 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801d030:	b480      	push	{r7}
 801d032:	b083      	sub	sp, #12
 801d034:	af00      	add	r7, sp, #0
 801d036:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	781b      	ldrb	r3, [r3, #0]
 801d03e:	2b22      	cmp	r3, #34	; 0x22
 801d040:	d002      	beq.n	801d048 <skip_quotes+0x18>
        return JSONFailure;
 801d042:	f04f 33ff 	mov.w	r3, #4294967295
 801d046:	e02f      	b.n	801d0a8 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	1c5a      	adds	r2, r3, #1
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801d052:	e01e      	b.n	801d092 <skip_quotes+0x62>
        if (**string == '\0') {
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	781b      	ldrb	r3, [r3, #0]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d102      	bne.n	801d064 <skip_quotes+0x34>
            return JSONFailure;
 801d05e:	f04f 33ff 	mov.w	r3, #4294967295
 801d062:	e021      	b.n	801d0a8 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	2b5c      	cmp	r3, #92	; 0x5c
 801d06c:	d10c      	bne.n	801d088 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	1c5a      	adds	r2, r3, #1
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	781b      	ldrb	r3, [r3, #0]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d102      	bne.n	801d088 <skip_quotes+0x58>
                return JSONFailure;
 801d082:	f04f 33ff 	mov.w	r3, #4294967295
 801d086:	e00f      	b.n	801d0a8 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	1c5a      	adds	r2, r3, #1
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	2b22      	cmp	r3, #34	; 0x22
 801d09a:	d1db      	bne.n	801d054 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	1c5a      	adds	r2, r3, #1
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801d0a6:	2300      	movs	r3, #0
}
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	370c      	adds	r7, #12
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0b2:	4770      	bx	lr

0801d0b4 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801d0b4:	b580      	push	{r7, lr}
 801d0b6:	b088      	sub	sp, #32
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
 801d0bc:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801d0be:	2300      	movs	r3, #0
 801d0c0:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801d0c2:	683b      	ldr	r3, [r7, #0]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801d0ce:	69bb      	ldr	r3, [r7, #24]
 801d0d0:	3301      	adds	r3, #1
 801d0d2:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801d0d4:	f107 030c 	add.w	r3, r7, #12
 801d0d8:	4619      	mov	r1, r3
 801d0da:	69b8      	ldr	r0, [r7, #24]
 801d0dc:	f7ff fac8 	bl	801c670 <parse_utf16_hex>
 801d0e0:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801d0e2:	697b      	ldr	r3, [r7, #20]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d102      	bne.n	801d0ee <parse_utf16+0x3a>
        return JSONFailure;
 801d0e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ec:	e0ce      	b.n	801d28c <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	2b7f      	cmp	r3, #127	; 0x7f
 801d0f2:	d804      	bhi.n	801d0fe <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	b2da      	uxtb	r2, r3
 801d0f8:	69fb      	ldr	r3, [r7, #28]
 801d0fa:	701a      	strb	r2, [r3, #0]
 801d0fc:	e0bc      	b.n	801d278 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d104:	d219      	bcs.n	801d13a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	099b      	lsrs	r3, r3, #6
 801d10a:	b2db      	uxtb	r3, r3
 801d10c:	f003 031f 	and.w	r3, r3, #31
 801d110:	b2db      	uxtb	r3, r3
 801d112:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801d116:	b2da      	uxtb	r2, r3
 801d118:	69fb      	ldr	r3, [r7, #28]
 801d11a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	b2db      	uxtb	r3, r3
 801d120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d124:	b2da      	uxtb	r2, r3
 801d126:	69fb      	ldr	r3, [r7, #28]
 801d128:	3301      	adds	r3, #1
 801d12a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d12e:	b2d2      	uxtb	r2, r2
 801d130:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801d132:	69fb      	ldr	r3, [r7, #28]
 801d134:	3301      	adds	r3, #1
 801d136:	61fb      	str	r3, [r7, #28]
 801d138:	e09e      	b.n	801d278 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801d140:	d303      	bcc.n	801d14a <parse_utf16+0x96>
 801d142:	68fb      	ldr	r3, [r7, #12]
 801d144:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801d148:	d325      	bcc.n	801d196 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	0b1b      	lsrs	r3, r3, #12
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	f003 030f 	and.w	r3, r3, #15
 801d154:	b2db      	uxtb	r3, r3
 801d156:	f063 031f 	orn	r3, r3, #31
 801d15a:	b2da      	uxtb	r2, r3
 801d15c:	69fb      	ldr	r3, [r7, #28]
 801d15e:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	099b      	lsrs	r3, r3, #6
 801d164:	b2db      	uxtb	r3, r3
 801d166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d16a:	b2da      	uxtb	r2, r3
 801d16c:	69fb      	ldr	r3, [r7, #28]
 801d16e:	3301      	adds	r3, #1
 801d170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d174:	b2d2      	uxtb	r2, r2
 801d176:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	b2db      	uxtb	r3, r3
 801d17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d180:	b2da      	uxtb	r2, r3
 801d182:	69fb      	ldr	r3, [r7, #28]
 801d184:	3302      	adds	r3, #2
 801d186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d18a:	b2d2      	uxtb	r2, r2
 801d18c:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801d18e:	69fb      	ldr	r3, [r7, #28]
 801d190:	3302      	adds	r3, #2
 801d192:	61fb      	str	r3, [r7, #28]
 801d194:	e070      	b.n	801d278 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801d19c:	d369      	bcc.n	801d272 <parse_utf16+0x1be>
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801d1a4:	d265      	bcs.n	801d272 <parse_utf16+0x1be>
        lead = cp;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801d1aa:	69bb      	ldr	r3, [r7, #24]
 801d1ac:	3304      	adds	r3, #4
 801d1ae:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801d1b0:	69bb      	ldr	r3, [r7, #24]
 801d1b2:	1c5a      	adds	r2, r3, #1
 801d1b4:	61ba      	str	r2, [r7, #24]
 801d1b6:	781b      	ldrb	r3, [r3, #0]
 801d1b8:	2b5c      	cmp	r3, #92	; 0x5c
 801d1ba:	d105      	bne.n	801d1c8 <parse_utf16+0x114>
 801d1bc:	69bb      	ldr	r3, [r7, #24]
 801d1be:	1c5a      	adds	r2, r3, #1
 801d1c0:	61ba      	str	r2, [r7, #24]
 801d1c2:	781b      	ldrb	r3, [r3, #0]
 801d1c4:	2b75      	cmp	r3, #117	; 0x75
 801d1c6:	d002      	beq.n	801d1ce <parse_utf16+0x11a>
            return JSONFailure;
 801d1c8:	f04f 33ff 	mov.w	r3, #4294967295
 801d1cc:	e05e      	b.n	801d28c <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801d1ce:	f107 0308 	add.w	r3, r7, #8
 801d1d2:	4619      	mov	r1, r3
 801d1d4:	69b8      	ldr	r0, [r7, #24]
 801d1d6:	f7ff fa4b 	bl	801c670 <parse_utf16_hex>
 801d1da:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801d1dc:	697b      	ldr	r3, [r7, #20]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d007      	beq.n	801d1f2 <parse_utf16+0x13e>
 801d1e2:	68bb      	ldr	r3, [r7, #8]
 801d1e4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801d1e8:	d303      	bcc.n	801d1f2 <parse_utf16+0x13e>
 801d1ea:	68bb      	ldr	r3, [r7, #8]
 801d1ec:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801d1f0:	d302      	bcc.n	801d1f8 <parse_utf16+0x144>
            return JSONFailure;
 801d1f2:	f04f 33ff 	mov.w	r3, #4294967295
 801d1f6:	e049      	b.n	801d28c <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801d1f8:	693b      	ldr	r3, [r7, #16]
 801d1fa:	029a      	lsls	r2, r3, #10
 801d1fc:	4b25      	ldr	r3, [pc, #148]	; (801d294 <parse_utf16+0x1e0>)
 801d1fe:	4013      	ands	r3, r2
 801d200:	68ba      	ldr	r2, [r7, #8]
 801d202:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801d206:	4313      	orrs	r3, r2
 801d208:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801d20c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	0c9b      	lsrs	r3, r3, #18
 801d212:	b2db      	uxtb	r3, r3
 801d214:	f003 0307 	and.w	r3, r3, #7
 801d218:	b2db      	uxtb	r3, r3
 801d21a:	f063 030f 	orn	r3, r3, #15
 801d21e:	b2da      	uxtb	r2, r3
 801d220:	69fb      	ldr	r3, [r7, #28]
 801d222:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	0b1b      	lsrs	r3, r3, #12
 801d228:	b2db      	uxtb	r3, r3
 801d22a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d22e:	b2da      	uxtb	r2, r3
 801d230:	69fb      	ldr	r3, [r7, #28]
 801d232:	3301      	adds	r3, #1
 801d234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d238:	b2d2      	uxtb	r2, r2
 801d23a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	099b      	lsrs	r3, r3, #6
 801d240:	b2db      	uxtb	r3, r3
 801d242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d246:	b2da      	uxtb	r2, r3
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	3302      	adds	r3, #2
 801d24c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d250:	b2d2      	uxtb	r2, r2
 801d252:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	b2db      	uxtb	r3, r3
 801d258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d25c:	b2da      	uxtb	r2, r3
 801d25e:	69fb      	ldr	r3, [r7, #28]
 801d260:	3303      	adds	r3, #3
 801d262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801d266:	b2d2      	uxtb	r2, r2
 801d268:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801d26a:	69fb      	ldr	r3, [r7, #28]
 801d26c:	3303      	adds	r3, #3
 801d26e:	61fb      	str	r3, [r7, #28]
 801d270:	e002      	b.n	801d278 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801d272:	f04f 33ff 	mov.w	r3, #4294967295
 801d276:	e009      	b.n	801d28c <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801d278:	69bb      	ldr	r3, [r7, #24]
 801d27a:	3303      	adds	r3, #3
 801d27c:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	69fa      	ldr	r2, [r7, #28]
 801d282:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	69ba      	ldr	r2, [r7, #24]
 801d288:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801d28a:	2300      	movs	r3, #0
}
 801d28c:	4618      	mov	r0, r3
 801d28e:	3720      	adds	r7, #32
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}
 801d294:	000ffc00 	.word	0x000ffc00

0801d298 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801d298:	b580      	push	{r7, lr}
 801d29a:	b088      	sub	sp, #32
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
 801d2a0:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	3301      	adds	r3, #1
 801d2aa:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801d2ac:	2300      	movs	r3, #0
 801d2ae:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801d2b0:	2300      	movs	r3, #0
 801d2b2:	617b      	str	r3, [r7, #20]
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	60bb      	str	r3, [r7, #8]
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801d2bc:	4b66      	ldr	r3, [pc, #408]	; (801d458 <process_string+0x1c0>)
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	69f8      	ldr	r0, [r7, #28]
 801d2c2:	4798      	blx	r3
 801d2c4:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801d2c6:	697b      	ldr	r3, [r7, #20]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	f000 80b5 	beq.w	801d438 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801d2ce:	697b      	ldr	r3, [r7, #20]
 801d2d0:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801d2d2:	e08a      	b.n	801d3ea <process_string+0x152>
        if (*input_ptr == '\\') {
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	781b      	ldrb	r3, [r3, #0]
 801d2d8:	2b5c      	cmp	r3, #92	; 0x5c
 801d2da:	d176      	bne.n	801d3ca <process_string+0x132>
            input_ptr++;
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	3301      	adds	r3, #1
 801d2e0:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	781b      	ldrb	r3, [r3, #0]
 801d2e6:	2b75      	cmp	r3, #117	; 0x75
 801d2e8:	f300 80a8 	bgt.w	801d43c <process_string+0x1a4>
 801d2ec:	2b5c      	cmp	r3, #92	; 0x5c
 801d2ee:	da04      	bge.n	801d2fa <process_string+0x62>
 801d2f0:	2b22      	cmp	r3, #34	; 0x22
 801d2f2:	d03d      	beq.n	801d370 <process_string+0xd8>
 801d2f4:	2b2f      	cmp	r3, #47	; 0x2f
 801d2f6:	d043      	beq.n	801d380 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801d2f8:	e0a0      	b.n	801d43c <process_string+0x1a4>
 801d2fa:	3b5c      	subs	r3, #92	; 0x5c
 801d2fc:	2b19      	cmp	r3, #25
 801d2fe:	f200 809d 	bhi.w	801d43c <process_string+0x1a4>
 801d302:	a201      	add	r2, pc, #4	; (adr r2, 801d308 <process_string+0x70>)
 801d304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d308:	0801d379 	.word	0x0801d379
 801d30c:	0801d43d 	.word	0x0801d43d
 801d310:	0801d43d 	.word	0x0801d43d
 801d314:	0801d43d 	.word	0x0801d43d
 801d318:	0801d43d 	.word	0x0801d43d
 801d31c:	0801d43d 	.word	0x0801d43d
 801d320:	0801d389 	.word	0x0801d389
 801d324:	0801d43d 	.word	0x0801d43d
 801d328:	0801d43d 	.word	0x0801d43d
 801d32c:	0801d43d 	.word	0x0801d43d
 801d330:	0801d391 	.word	0x0801d391
 801d334:	0801d43d 	.word	0x0801d43d
 801d338:	0801d43d 	.word	0x0801d43d
 801d33c:	0801d43d 	.word	0x0801d43d
 801d340:	0801d43d 	.word	0x0801d43d
 801d344:	0801d43d 	.word	0x0801d43d
 801d348:	0801d43d 	.word	0x0801d43d
 801d34c:	0801d43d 	.word	0x0801d43d
 801d350:	0801d399 	.word	0x0801d399
 801d354:	0801d43d 	.word	0x0801d43d
 801d358:	0801d43d 	.word	0x0801d43d
 801d35c:	0801d43d 	.word	0x0801d43d
 801d360:	0801d3a1 	.word	0x0801d3a1
 801d364:	0801d43d 	.word	0x0801d43d
 801d368:	0801d3a9 	.word	0x0801d3a9
 801d36c:	0801d3b1 	.word	0x0801d3b1
                case '\"': *output_ptr = '\"'; break;
 801d370:	68bb      	ldr	r3, [r7, #8]
 801d372:	2222      	movs	r2, #34	; 0x22
 801d374:	701a      	strb	r2, [r3, #0]
 801d376:	e032      	b.n	801d3de <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801d378:	68bb      	ldr	r3, [r7, #8]
 801d37a:	225c      	movs	r2, #92	; 0x5c
 801d37c:	701a      	strb	r2, [r3, #0]
 801d37e:	e02e      	b.n	801d3de <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801d380:	68bb      	ldr	r3, [r7, #8]
 801d382:	222f      	movs	r2, #47	; 0x2f
 801d384:	701a      	strb	r2, [r3, #0]
 801d386:	e02a      	b.n	801d3de <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801d388:	68bb      	ldr	r3, [r7, #8]
 801d38a:	2208      	movs	r2, #8
 801d38c:	701a      	strb	r2, [r3, #0]
 801d38e:	e026      	b.n	801d3de <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801d390:	68bb      	ldr	r3, [r7, #8]
 801d392:	220c      	movs	r2, #12
 801d394:	701a      	strb	r2, [r3, #0]
 801d396:	e022      	b.n	801d3de <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801d398:	68bb      	ldr	r3, [r7, #8]
 801d39a:	220a      	movs	r2, #10
 801d39c:	701a      	strb	r2, [r3, #0]
 801d39e:	e01e      	b.n	801d3de <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801d3a0:	68bb      	ldr	r3, [r7, #8]
 801d3a2:	220d      	movs	r2, #13
 801d3a4:	701a      	strb	r2, [r3, #0]
 801d3a6:	e01a      	b.n	801d3de <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801d3a8:	68bb      	ldr	r3, [r7, #8]
 801d3aa:	2209      	movs	r2, #9
 801d3ac:	701a      	strb	r2, [r3, #0]
 801d3ae:	e016      	b.n	801d3de <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801d3b0:	f107 0208 	add.w	r2, r7, #8
 801d3b4:	f107 030c 	add.w	r3, r7, #12
 801d3b8:	4611      	mov	r1, r2
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	f7ff fe7a 	bl	801d0b4 <parse_utf16>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3c6:	d109      	bne.n	801d3dc <process_string+0x144>
                        goto error;
 801d3c8:	e03d      	b.n	801d446 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	781b      	ldrb	r3, [r3, #0]
 801d3ce:	2b1f      	cmp	r3, #31
 801d3d0:	d936      	bls.n	801d440 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801d3d2:	68fa      	ldr	r2, [r7, #12]
 801d3d4:	68bb      	ldr	r3, [r7, #8]
 801d3d6:	7812      	ldrb	r2, [r2, #0]
 801d3d8:	701a      	strb	r2, [r3, #0]
 801d3da:	e000      	b.n	801d3de <process_string+0x146>
                    break;
 801d3dc:	bf00      	nop
        }
        output_ptr++;
 801d3de:	68bb      	ldr	r3, [r7, #8]
 801d3e0:	3301      	adds	r3, #1
 801d3e2:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d007      	beq.n	801d402 <process_string+0x16a>
 801d3f2:	68fa      	ldr	r2, [r7, #12]
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	1ad3      	subs	r3, r2, r3
 801d3f8:	461a      	mov	r2, r3
 801d3fa:	683b      	ldr	r3, [r7, #0]
 801d3fc:	4293      	cmp	r3, r2
 801d3fe:	f63f af69 	bhi.w	801d2d4 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801d402:	68bb      	ldr	r3, [r7, #8]
 801d404:	2200      	movs	r2, #0
 801d406:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801d408:	68ba      	ldr	r2, [r7, #8]
 801d40a:	697b      	ldr	r3, [r7, #20]
 801d40c:	1ad3      	subs	r3, r2, r3
 801d40e:	3301      	adds	r3, #1
 801d410:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801d412:	4b11      	ldr	r3, [pc, #68]	; (801d458 <process_string+0x1c0>)
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	69b8      	ldr	r0, [r7, #24]
 801d418:	4798      	blx	r3
 801d41a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801d41c:	693b      	ldr	r3, [r7, #16]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d010      	beq.n	801d444 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801d422:	69ba      	ldr	r2, [r7, #24]
 801d424:	6979      	ldr	r1, [r7, #20]
 801d426:	6938      	ldr	r0, [r7, #16]
 801d428:	f002 fc54 	bl	801fcd4 <memcpy>
    parson_free(output);
 801d42c:	4b0b      	ldr	r3, [pc, #44]	; (801d45c <process_string+0x1c4>)
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	6978      	ldr	r0, [r7, #20]
 801d432:	4798      	blx	r3
    return resized_output;
 801d434:	693b      	ldr	r3, [r7, #16]
 801d436:	e00b      	b.n	801d450 <process_string+0x1b8>
        goto error;
 801d438:	bf00      	nop
 801d43a:	e004      	b.n	801d446 <process_string+0x1ae>
                    goto error;
 801d43c:	bf00      	nop
 801d43e:	e002      	b.n	801d446 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801d440:	bf00      	nop
 801d442:	e000      	b.n	801d446 <process_string+0x1ae>
        goto error;
 801d444:	bf00      	nop
error:
    parson_free(output);
 801d446:	4b05      	ldr	r3, [pc, #20]	; (801d45c <process_string+0x1c4>)
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	6978      	ldr	r0, [r7, #20]
 801d44c:	4798      	blx	r3
    return NULL;
 801d44e:	2300      	movs	r3, #0
}
 801d450:	4618      	mov	r0, r3
 801d452:	3720      	adds	r7, #32
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}
 801d458:	200002b0 	.word	0x200002b0
 801d45c:	200002b4 	.word	0x200002b4

0801d460 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801d460:	b580      	push	{r7, lr}
 801d462:	b086      	sub	sp, #24
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801d46e:	2300      	movs	r3, #0
 801d470:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801d472:	6878      	ldr	r0, [r7, #4]
 801d474:	f7ff fddc 	bl	801d030 <skip_quotes>
 801d478:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d001      	beq.n	801d484 <get_quoted_string+0x24>
        return NULL;
 801d480:	2300      	movs	r3, #0
 801d482:	e00c      	b.n	801d49e <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681a      	ldr	r2, [r3, #0]
 801d488:	697b      	ldr	r3, [r7, #20]
 801d48a:	1ad3      	subs	r3, r2, r3
 801d48c:	3b02      	subs	r3, #2
 801d48e:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801d490:	697b      	ldr	r3, [r7, #20]
 801d492:	3301      	adds	r3, #1
 801d494:	6939      	ldr	r1, [r7, #16]
 801d496:	4618      	mov	r0, r3
 801d498:	f7ff fefe 	bl	801d298 <process_string>
 801d49c:	4603      	mov	r3, r0
}
 801d49e:	4618      	mov	r0, r3
 801d4a0:	3718      	adds	r7, #24
 801d4a2:	46bd      	mov	sp, r7
 801d4a4:	bd80      	pop	{r7, pc}
	...

0801d4a8 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b082      	sub	sp, #8
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	6078      	str	r0, [r7, #4]
 801d4b0:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801d4b2:	683b      	ldr	r3, [r7, #0]
 801d4b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d4b8:	d906      	bls.n	801d4c8 <parse_value+0x20>
        return NULL;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	e08d      	b.n	801d5da <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	1c5a      	adds	r2, r3, #1
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	601a      	str	r2, [r3, #0]
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	781b      	ldrb	r3, [r3, #0]
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	4a44      	ldr	r2, [pc, #272]	; (801d5e4 <parse_value+0x13c>)
 801d4d2:	4413      	add	r3, r2
 801d4d4:	781b      	ldrb	r3, [r3, #0]
 801d4d6:	f003 0308 	and.w	r3, r3, #8
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d1ef      	bne.n	801d4be <parse_value+0x16>
    switch (**string) {
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	2b7b      	cmp	r3, #123	; 0x7b
 801d4e6:	dc77      	bgt.n	801d5d8 <parse_value+0x130>
 801d4e8:	2b5b      	cmp	r3, #91	; 0x5b
 801d4ea:	da08      	bge.n	801d4fe <parse_value+0x56>
 801d4ec:	2b39      	cmp	r3, #57	; 0x39
 801d4ee:	dc73      	bgt.n	801d5d8 <parse_value+0x130>
 801d4f0:	2b30      	cmp	r3, #48	; 0x30
 801d4f2:	da67      	bge.n	801d5c4 <parse_value+0x11c>
 801d4f4:	2b22      	cmp	r3, #34	; 0x22
 801d4f6:	d05b      	beq.n	801d5b0 <parse_value+0x108>
 801d4f8:	2b2d      	cmp	r3, #45	; 0x2d
 801d4fa:	d063      	beq.n	801d5c4 <parse_value+0x11c>
 801d4fc:	e06c      	b.n	801d5d8 <parse_value+0x130>
 801d4fe:	3b5b      	subs	r3, #91	; 0x5b
 801d500:	2b20      	cmp	r3, #32
 801d502:	d869      	bhi.n	801d5d8 <parse_value+0x130>
 801d504:	a201      	add	r2, pc, #4	; (adr r2, 801d50c <parse_value+0x64>)
 801d506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d50a:	bf00      	nop
 801d50c:	0801d5a1 	.word	0x0801d5a1
 801d510:	0801d5d9 	.word	0x0801d5d9
 801d514:	0801d5d9 	.word	0x0801d5d9
 801d518:	0801d5d9 	.word	0x0801d5d9
 801d51c:	0801d5d9 	.word	0x0801d5d9
 801d520:	0801d5d9 	.word	0x0801d5d9
 801d524:	0801d5d9 	.word	0x0801d5d9
 801d528:	0801d5d9 	.word	0x0801d5d9
 801d52c:	0801d5d9 	.word	0x0801d5d9
 801d530:	0801d5d9 	.word	0x0801d5d9
 801d534:	0801d5d9 	.word	0x0801d5d9
 801d538:	0801d5bb 	.word	0x0801d5bb
 801d53c:	0801d5d9 	.word	0x0801d5d9
 801d540:	0801d5d9 	.word	0x0801d5d9
 801d544:	0801d5d9 	.word	0x0801d5d9
 801d548:	0801d5d9 	.word	0x0801d5d9
 801d54c:	0801d5d9 	.word	0x0801d5d9
 801d550:	0801d5d9 	.word	0x0801d5d9
 801d554:	0801d5d9 	.word	0x0801d5d9
 801d558:	0801d5cf 	.word	0x0801d5cf
 801d55c:	0801d5d9 	.word	0x0801d5d9
 801d560:	0801d5d9 	.word	0x0801d5d9
 801d564:	0801d5d9 	.word	0x0801d5d9
 801d568:	0801d5d9 	.word	0x0801d5d9
 801d56c:	0801d5d9 	.word	0x0801d5d9
 801d570:	0801d5bb 	.word	0x0801d5bb
 801d574:	0801d5d9 	.word	0x0801d5d9
 801d578:	0801d5d9 	.word	0x0801d5d9
 801d57c:	0801d5d9 	.word	0x0801d5d9
 801d580:	0801d5d9 	.word	0x0801d5d9
 801d584:	0801d5d9 	.word	0x0801d5d9
 801d588:	0801d5d9 	.word	0x0801d5d9
 801d58c:	0801d591 	.word	0x0801d591
        case '{':
            return parse_object_value(string, nesting + 1);
 801d590:	683b      	ldr	r3, [r7, #0]
 801d592:	3301      	adds	r3, #1
 801d594:	4619      	mov	r1, r3
 801d596:	6878      	ldr	r0, [r7, #4]
 801d598:	f000 f826 	bl	801d5e8 <parse_object_value>
 801d59c:	4603      	mov	r3, r0
 801d59e:	e01c      	b.n	801d5da <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801d5a0:	683b      	ldr	r3, [r7, #0]
 801d5a2:	3301      	adds	r3, #1
 801d5a4:	4619      	mov	r1, r3
 801d5a6:	6878      	ldr	r0, [r7, #4]
 801d5a8:	f000 f926 	bl	801d7f8 <parse_array_value>
 801d5ac:	4603      	mov	r3, r0
 801d5ae:	e014      	b.n	801d5da <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801d5b0:	6878      	ldr	r0, [r7, #4]
 801d5b2:	f000 f9e7 	bl	801d984 <parse_string_value>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	e00f      	b.n	801d5da <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801d5ba:	6878      	ldr	r0, [r7, #4]
 801d5bc:	f000 fa06 	bl	801d9cc <parse_boolean_value>
 801d5c0:	4603      	mov	r3, r0
 801d5c2:	e00a      	b.n	801d5da <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801d5c4:	6878      	ldr	r0, [r7, #4]
 801d5c6:	f000 fa3d 	bl	801da44 <parse_number_value>
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	e005      	b.n	801d5da <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801d5ce:	6878      	ldr	r0, [r7, #4]
 801d5d0:	f000 fa72 	bl	801dab8 <parse_null_value>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	e000      	b.n	801d5da <parse_value+0x132>
        default:
            return NULL;
 801d5d8:	2300      	movs	r3, #0
    }
}
 801d5da:	4618      	mov	r0, r3
 801d5dc:	3708      	adds	r7, #8
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}
 801d5e2:	bf00      	nop
 801d5e4:	080236f4 	.word	0x080236f4

0801d5e8 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b086      	sub	sp, #24
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
 801d5f0:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	617b      	str	r3, [r7, #20]
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801d5fe:	2300      	movs	r3, #0
 801d600:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801d602:	f001 fc63 	bl	801eecc <json_value_init_object>
 801d606:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801d608:	697b      	ldr	r3, [r7, #20]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d101      	bne.n	801d612 <parse_object_value+0x2a>
        return NULL;
 801d60e:	2300      	movs	r3, #0
 801d610:	e0ea      	b.n	801d7e8 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	781b      	ldrb	r3, [r3, #0]
 801d618:	2b7b      	cmp	r3, #123	; 0x7b
 801d61a:	d004      	beq.n	801d626 <parse_object_value+0x3e>
        json_value_free(output_value);
 801d61c:	6978      	ldr	r0, [r7, #20]
 801d61e:	f001 fc27 	bl	801ee70 <json_value_free>
        return NULL;
 801d622:	2300      	movs	r3, #0
 801d624:	e0e0      	b.n	801d7e8 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801d626:	6978      	ldr	r0, [r7, #20]
 801d628:	f001 fbbd 	bl	801eda6 <json_value_get_object>
 801d62c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	1c5a      	adds	r2, r3, #1
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801d638:	e004      	b.n	801d644 <parse_object_value+0x5c>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	1c5a      	adds	r2, r3, #1
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	601a      	str	r2, [r3, #0]
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	781b      	ldrb	r3, [r3, #0]
 801d64a:	3301      	adds	r3, #1
 801d64c:	4a68      	ldr	r2, [pc, #416]	; (801d7f0 <parse_object_value+0x208>)
 801d64e:	4413      	add	r3, r2
 801d650:	781b      	ldrb	r3, [r3, #0]
 801d652:	f003 0308 	and.w	r3, r3, #8
 801d656:	2b00      	cmp	r3, #0
 801d658:	d1ef      	bne.n	801d63a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	781b      	ldrb	r3, [r3, #0]
 801d660:	2b7d      	cmp	r3, #125	; 0x7d
 801d662:	f040 808c 	bne.w	801d77e <parse_object_value+0x196>
        SKIP_CHAR(string);
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	1c5a      	adds	r2, r3, #1
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	601a      	str	r2, [r3, #0]
        return output_value;
 801d670:	697b      	ldr	r3, [r7, #20]
 801d672:	e0b9      	b.n	801d7e8 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801d674:	6878      	ldr	r0, [r7, #4]
 801d676:	f7ff fef3 	bl	801d460 <get_quoted_string>
 801d67a:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801d67c:	68bb      	ldr	r3, [r7, #8]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d109      	bne.n	801d696 <parse_object_value+0xae>
            json_value_free(output_value);
 801d682:	6978      	ldr	r0, [r7, #20]
 801d684:	f001 fbf4 	bl	801ee70 <json_value_free>
            return NULL;
 801d688:	2300      	movs	r3, #0
 801d68a:	e0ad      	b.n	801d7e8 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	1c5a      	adds	r2, r3, #1
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	601a      	str	r2, [r3, #0]
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	781b      	ldrb	r3, [r3, #0]
 801d69c:	3301      	adds	r3, #1
 801d69e:	4a54      	ldr	r2, [pc, #336]	; (801d7f0 <parse_object_value+0x208>)
 801d6a0:	4413      	add	r3, r2
 801d6a2:	781b      	ldrb	r3, [r3, #0]
 801d6a4:	f003 0308 	and.w	r3, r3, #8
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d1ef      	bne.n	801d68c <parse_object_value+0xa4>
        if (**string != ':') {
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	781b      	ldrb	r3, [r3, #0]
 801d6b2:	2b3a      	cmp	r3, #58	; 0x3a
 801d6b4:	d008      	beq.n	801d6c8 <parse_object_value+0xe0>
            parson_free(new_key);
 801d6b6:	4b4f      	ldr	r3, [pc, #316]	; (801d7f4 <parse_object_value+0x20c>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	68b8      	ldr	r0, [r7, #8]
 801d6bc:	4798      	blx	r3
            json_value_free(output_value);
 801d6be:	6978      	ldr	r0, [r7, #20]
 801d6c0:	f001 fbd6 	bl	801ee70 <json_value_free>
            return NULL;
 801d6c4:	2300      	movs	r3, #0
 801d6c6:	e08f      	b.n	801d7e8 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	1c5a      	adds	r2, r3, #1
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801d6d2:	6839      	ldr	r1, [r7, #0]
 801d6d4:	6878      	ldr	r0, [r7, #4]
 801d6d6:	f7ff fee7 	bl	801d4a8 <parse_value>
 801d6da:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801d6dc:	693b      	ldr	r3, [r7, #16]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d108      	bne.n	801d6f4 <parse_object_value+0x10c>
            parson_free(new_key);
 801d6e2:	4b44      	ldr	r3, [pc, #272]	; (801d7f4 <parse_object_value+0x20c>)
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	68b8      	ldr	r0, [r7, #8]
 801d6e8:	4798      	blx	r3
            json_value_free(output_value);
 801d6ea:	6978      	ldr	r0, [r7, #20]
 801d6ec:	f001 fbc0 	bl	801ee70 <json_value_free>
            return NULL;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	e079      	b.n	801d7e8 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801d6f4:	693a      	ldr	r2, [r7, #16]
 801d6f6:	68b9      	ldr	r1, [r7, #8]
 801d6f8:	68f8      	ldr	r0, [r7, #12]
 801d6fa:	f7ff f997 	bl	801ca2c <json_object_add>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d704:	d10b      	bne.n	801d71e <parse_object_value+0x136>
            parson_free(new_key);
 801d706:	4b3b      	ldr	r3, [pc, #236]	; (801d7f4 <parse_object_value+0x20c>)
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	68b8      	ldr	r0, [r7, #8]
 801d70c:	4798      	blx	r3
            json_value_free(new_value);
 801d70e:	6938      	ldr	r0, [r7, #16]
 801d710:	f001 fbae 	bl	801ee70 <json_value_free>
            json_value_free(output_value);
 801d714:	6978      	ldr	r0, [r7, #20]
 801d716:	f001 fbab 	bl	801ee70 <json_value_free>
            return NULL;
 801d71a:	2300      	movs	r3, #0
 801d71c:	e064      	b.n	801d7e8 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801d71e:	4b35      	ldr	r3, [pc, #212]	; (801d7f4 <parse_object_value+0x20c>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	68b8      	ldr	r0, [r7, #8]
 801d724:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801d726:	e004      	b.n	801d732 <parse_object_value+0x14a>
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	1c5a      	adds	r2, r3, #1
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	601a      	str	r2, [r3, #0]
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	781b      	ldrb	r3, [r3, #0]
 801d738:	3301      	adds	r3, #1
 801d73a:	4a2d      	ldr	r2, [pc, #180]	; (801d7f0 <parse_object_value+0x208>)
 801d73c:	4413      	add	r3, r2
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	f003 0308 	and.w	r3, r3, #8
 801d744:	2b00      	cmp	r3, #0
 801d746:	d1ef      	bne.n	801d728 <parse_object_value+0x140>
        if (**string != ',') {
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	781b      	ldrb	r3, [r3, #0]
 801d74e:	2b2c      	cmp	r3, #44	; 0x2c
 801d750:	d11c      	bne.n	801d78c <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	1c5a      	adds	r2, r3, #1
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801d75c:	e004      	b.n	801d768 <parse_object_value+0x180>
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	1c5a      	adds	r2, r3, #1
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	601a      	str	r2, [r3, #0]
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	781b      	ldrb	r3, [r3, #0]
 801d76e:	3301      	adds	r3, #1
 801d770:	4a1f      	ldr	r2, [pc, #124]	; (801d7f0 <parse_object_value+0x208>)
 801d772:	4413      	add	r3, r2
 801d774:	781b      	ldrb	r3, [r3, #0]
 801d776:	f003 0308 	and.w	r3, r3, #8
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d1ef      	bne.n	801d75e <parse_object_value+0x176>
    while (**string != '\0') {
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	781b      	ldrb	r3, [r3, #0]
 801d784:	2b00      	cmp	r3, #0
 801d786:	f47f af75 	bne.w	801d674 <parse_object_value+0x8c>
 801d78a:	e006      	b.n	801d79a <parse_object_value+0x1b2>
            break;
 801d78c:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801d78e:	e004      	b.n	801d79a <parse_object_value+0x1b2>
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	1c5a      	adds	r2, r3, #1
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	601a      	str	r2, [r3, #0]
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	3301      	adds	r3, #1
 801d7a2:	4a13      	ldr	r2, [pc, #76]	; (801d7f0 <parse_object_value+0x208>)
 801d7a4:	4413      	add	r3, r2
 801d7a6:	781b      	ldrb	r3, [r3, #0]
 801d7a8:	f003 0308 	and.w	r3, r3, #8
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d1ef      	bne.n	801d790 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	781b      	ldrb	r3, [r3, #0]
 801d7b6:	2b7d      	cmp	r3, #125	; 0x7d
 801d7b8:	d10b      	bne.n	801d7d2 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801d7ba:	68f8      	ldr	r0, [r7, #12]
 801d7bc:	f001 fa4c 	bl	801ec58 <json_object_get_count>
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	4619      	mov	r1, r3
 801d7c4:	68f8      	ldr	r0, [r7, #12]
 801d7c6:	f7ff f9b3 	bl	801cb30 <json_object_resize>
 801d7ca:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7d0:	d104      	bne.n	801d7dc <parse_object_value+0x1f4>
            json_value_free(output_value);
 801d7d2:	6978      	ldr	r0, [r7, #20]
 801d7d4:	f001 fb4c 	bl	801ee70 <json_value_free>
            return NULL;
 801d7d8:	2300      	movs	r3, #0
 801d7da:	e005      	b.n	801d7e8 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	1c5a      	adds	r2, r3, #1
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	601a      	str	r2, [r3, #0]
    return output_value;
 801d7e6:	697b      	ldr	r3, [r7, #20]
}
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3718      	adds	r7, #24
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}
 801d7f0:	080236f4 	.word	0x080236f4
 801d7f4:	200002b4 	.word	0x200002b4

0801d7f8 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b086      	sub	sp, #24
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
 801d800:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801d802:	2300      	movs	r3, #0
 801d804:	617b      	str	r3, [r7, #20]
 801d806:	2300      	movs	r3, #0
 801d808:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801d80a:	2300      	movs	r3, #0
 801d80c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801d80e:	f001 fb89 	bl	801ef24 <json_value_init_array>
 801d812:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801d814:	697b      	ldr	r3, [r7, #20]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d101      	bne.n	801d81e <parse_array_value+0x26>
        return NULL;
 801d81a:	2300      	movs	r3, #0
 801d81c:	e0ab      	b.n	801d976 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	781b      	ldrb	r3, [r3, #0]
 801d824:	2b5b      	cmp	r3, #91	; 0x5b
 801d826:	d004      	beq.n	801d832 <parse_array_value+0x3a>
        json_value_free(output_value);
 801d828:	6978      	ldr	r0, [r7, #20]
 801d82a:	f001 fb21 	bl	801ee70 <json_value_free>
        return NULL;
 801d82e:	2300      	movs	r3, #0
 801d830:	e0a1      	b.n	801d976 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801d832:	6978      	ldr	r0, [r7, #20]
 801d834:	f001 fac9 	bl	801edca <json_value_get_array>
 801d838:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	1c5a      	adds	r2, r3, #1
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801d844:	e004      	b.n	801d850 <parse_array_value+0x58>
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	1c5a      	adds	r2, r3, #1
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	601a      	str	r2, [r3, #0]
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	3301      	adds	r3, #1
 801d858:	4a49      	ldr	r2, [pc, #292]	; (801d980 <parse_array_value+0x188>)
 801d85a:	4413      	add	r3, r2
 801d85c:	781b      	ldrb	r3, [r3, #0]
 801d85e:	f003 0308 	and.w	r3, r3, #8
 801d862:	2b00      	cmp	r3, #0
 801d864:	d1ef      	bne.n	801d846 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	781b      	ldrb	r3, [r3, #0]
 801d86c:	2b5d      	cmp	r3, #93	; 0x5d
 801d86e:	d14e      	bne.n	801d90e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	1c5a      	adds	r2, r3, #1
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	601a      	str	r2, [r3, #0]
        return output_value;
 801d87a:	697b      	ldr	r3, [r7, #20]
 801d87c:	e07b      	b.n	801d976 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801d87e:	6839      	ldr	r1, [r7, #0]
 801d880:	6878      	ldr	r0, [r7, #4]
 801d882:	f7ff fe11 	bl	801d4a8 <parse_value>
 801d886:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801d888:	693b      	ldr	r3, [r7, #16]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d104      	bne.n	801d898 <parse_array_value+0xa0>
            json_value_free(output_value);
 801d88e:	6978      	ldr	r0, [r7, #20]
 801d890:	f001 faee 	bl	801ee70 <json_value_free>
            return NULL;
 801d894:	2300      	movs	r3, #0
 801d896:	e06e      	b.n	801d976 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801d898:	6939      	ldr	r1, [r7, #16]
 801d89a:	68f8      	ldr	r0, [r7, #12]
 801d89c:	f7ff fb0c 	bl	801ceb8 <json_array_add>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d8a6:	d10c      	bne.n	801d8c2 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801d8a8:	6938      	ldr	r0, [r7, #16]
 801d8aa:	f001 fae1 	bl	801ee70 <json_value_free>
            json_value_free(output_value);
 801d8ae:	6978      	ldr	r0, [r7, #20]
 801d8b0:	f001 fade 	bl	801ee70 <json_value_free>
            return NULL;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	e05e      	b.n	801d976 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	1c5a      	adds	r2, r3, #1
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	601a      	str	r2, [r3, #0]
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	781b      	ldrb	r3, [r3, #0]
 801d8c8:	3301      	adds	r3, #1
 801d8ca:	4a2d      	ldr	r2, [pc, #180]	; (801d980 <parse_array_value+0x188>)
 801d8cc:	4413      	add	r3, r2
 801d8ce:	781b      	ldrb	r3, [r3, #0]
 801d8d0:	f003 0308 	and.w	r3, r3, #8
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d1ef      	bne.n	801d8b8 <parse_array_value+0xc0>
        if (**string != ',') {
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	781b      	ldrb	r3, [r3, #0]
 801d8de:	2b2c      	cmp	r3, #44	; 0x2c
 801d8e0:	d11b      	bne.n	801d91a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	1c5a      	adds	r2, r3, #1
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801d8ec:	e004      	b.n	801d8f8 <parse_array_value+0x100>
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	1c5a      	adds	r2, r3, #1
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	601a      	str	r2, [r3, #0]
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	781b      	ldrb	r3, [r3, #0]
 801d8fe:	3301      	adds	r3, #1
 801d900:	4a1f      	ldr	r2, [pc, #124]	; (801d980 <parse_array_value+0x188>)
 801d902:	4413      	add	r3, r2
 801d904:	781b      	ldrb	r3, [r3, #0]
 801d906:	f003 0308 	and.w	r3, r3, #8
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d1ef      	bne.n	801d8ee <parse_array_value+0xf6>
    while (**string != '\0') {
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	781b      	ldrb	r3, [r3, #0]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d1b2      	bne.n	801d87e <parse_array_value+0x86>
 801d918:	e006      	b.n	801d928 <parse_array_value+0x130>
            break;
 801d91a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801d91c:	e004      	b.n	801d928 <parse_array_value+0x130>
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	1c5a      	adds	r2, r3, #1
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	601a      	str	r2, [r3, #0]
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	781b      	ldrb	r3, [r3, #0]
 801d92e:	3301      	adds	r3, #1
 801d930:	4a13      	ldr	r2, [pc, #76]	; (801d980 <parse_array_value+0x188>)
 801d932:	4413      	add	r3, r2
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	f003 0308 	and.w	r3, r3, #8
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d1ef      	bne.n	801d91e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	781b      	ldrb	r3, [r3, #0]
 801d944:	2b5d      	cmp	r3, #93	; 0x5d
 801d946:	d10b      	bne.n	801d960 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801d948:	68f8      	ldr	r0, [r7, #12]
 801d94a:	f001 f9fd 	bl	801ed48 <json_array_get_count>
 801d94e:	4603      	mov	r3, r0
 801d950:	4619      	mov	r1, r3
 801d952:	68f8      	ldr	r0, [r7, #12]
 801d954:	f7ff fae6 	bl	801cf24 <json_array_resize>
 801d958:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801d95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d95e:	d104      	bne.n	801d96a <parse_array_value+0x172>
            json_value_free(output_value);
 801d960:	6978      	ldr	r0, [r7, #20]
 801d962:	f001 fa85 	bl	801ee70 <json_value_free>
            return NULL;
 801d966:	2300      	movs	r3, #0
 801d968:	e005      	b.n	801d976 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	1c5a      	adds	r2, r3, #1
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	601a      	str	r2, [r3, #0]
    return output_value;
 801d974:	697b      	ldr	r3, [r7, #20]
}
 801d976:	4618      	mov	r0, r3
 801d978:	3718      	adds	r7, #24
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bd80      	pop	{r7, pc}
 801d97e:	bf00      	nop
 801d980:	080236f4 	.word	0x080236f4

0801d984 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801d98c:	2300      	movs	r3, #0
 801d98e:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801d990:	6878      	ldr	r0, [r7, #4]
 801d992:	f7ff fd65 	bl	801d460 <get_quoted_string>
 801d996:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801d998:	68bb      	ldr	r3, [r7, #8]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d101      	bne.n	801d9a2 <parse_string_value+0x1e>
        return NULL;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	e00d      	b.n	801d9be <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801d9a2:	68b8      	ldr	r0, [r7, #8]
 801d9a4:	f7ff fb26 	bl	801cff4 <json_value_init_string_no_copy>
 801d9a8:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d105      	bne.n	801d9bc <parse_string_value+0x38>
        parson_free(new_string);
 801d9b0:	4b05      	ldr	r3, [pc, #20]	; (801d9c8 <parse_string_value+0x44>)
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	68b8      	ldr	r0, [r7, #8]
 801d9b6:	4798      	blx	r3
        return NULL;
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	e000      	b.n	801d9be <parse_string_value+0x3a>
    }
    return value;
 801d9bc:	68fb      	ldr	r3, [r7, #12]
}
 801d9be:	4618      	mov	r0, r3
 801d9c0:	3710      	adds	r7, #16
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	bd80      	pop	{r7, pc}
 801d9c6:	bf00      	nop
 801d9c8:	200002b4 	.word	0x200002b4

0801d9cc <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b084      	sub	sp, #16
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801d9d4:	2304      	movs	r3, #4
 801d9d6:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801d9d8:	2305      	movs	r3, #5
 801d9da:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	68fa      	ldr	r2, [r7, #12]
 801d9e2:	4619      	mov	r1, r3
 801d9e4:	4815      	ldr	r0, [pc, #84]	; (801da3c <parse_boolean_value+0x70>)
 801d9e6:	f002 fadf 	bl	801ffa8 <strncmp>
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d10a      	bne.n	801da06 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	681a      	ldr	r2, [r3, #0]
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	441a      	add	r2, r3
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801d9fc:	2001      	movs	r0, #1
 801d9fe:	f001 fb45 	bl	801f08c <json_value_init_boolean>
 801da02:	4603      	mov	r3, r0
 801da04:	e015      	b.n	801da32 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	68ba      	ldr	r2, [r7, #8]
 801da0c:	4619      	mov	r1, r3
 801da0e:	480c      	ldr	r0, [pc, #48]	; (801da40 <parse_boolean_value+0x74>)
 801da10:	f002 faca 	bl	801ffa8 <strncmp>
 801da14:	4603      	mov	r3, r0
 801da16:	2b00      	cmp	r3, #0
 801da18:	d10a      	bne.n	801da30 <parse_boolean_value+0x64>
        *string += false_token_size;
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	681a      	ldr	r2, [r3, #0]
 801da1e:	68bb      	ldr	r3, [r7, #8]
 801da20:	441a      	add	r2, r3
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801da26:	2000      	movs	r0, #0
 801da28:	f001 fb30 	bl	801f08c <json_value_init_boolean>
 801da2c:	4603      	mov	r3, r0
 801da2e:	e000      	b.n	801da32 <parse_boolean_value+0x66>
    }
    return NULL;
 801da30:	2300      	movs	r3, #0
}
 801da32:	4618      	mov	r0, r3
 801da34:	3710      	adds	r7, #16
 801da36:	46bd      	mov	sp, r7
 801da38:	bd80      	pop	{r7, pc}
 801da3a:	bf00      	nop
 801da3c:	080230a0 	.word	0x080230a0
 801da40:	080230a8 	.word	0x080230a8

0801da44 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801da44:	b580      	push	{r7, lr}
 801da46:	b086      	sub	sp, #24
 801da48:	af00      	add	r7, sp, #0
 801da4a:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801da4c:	f04f 0200 	mov.w	r2, #0
 801da50:	f04f 0300 	mov.w	r3, #0
 801da54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801da58:	f001 fee2 	bl	801f820 <__errno>
 801da5c:	4603      	mov	r3, r0
 801da5e:	2200      	movs	r2, #0
 801da60:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	f107 020c 	add.w	r2, r7, #12
 801da6a:	4611      	mov	r1, r2
 801da6c:	4618      	mov	r0, r3
 801da6e:	f003 f8e9 	bl	8020c44 <strtod>
 801da72:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801da76:	f001 fed3 	bl	801f820 <__errno>
 801da7a:	4603      	mov	r3, r0
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d10b      	bne.n	801da9a <parse_number_value+0x56>
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	6818      	ldr	r0, [r3, #0]
 801da86:	68fa      	ldr	r2, [r7, #12]
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	1ad3      	subs	r3, r2, r3
 801da8e:	4619      	mov	r1, r3
 801da90:	f7fe ff68 	bl	801c964 <is_decimal>
 801da94:	4603      	mov	r3, r0
 801da96:	2b00      	cmp	r3, #0
 801da98:	d101      	bne.n	801da9e <parse_number_value+0x5a>
        return NULL;
 801da9a:	2300      	movs	r3, #0
 801da9c:	e007      	b.n	801daae <parse_number_value+0x6a>
    }
    *string = end;
 801da9e:	68fa      	ldr	r2, [r7, #12]
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801daa4:	ed97 0b04 	vldr	d0, [r7, #16]
 801daa8:	f001 fa9e 	bl	801efe8 <json_value_init_number>
 801daac:	4603      	mov	r3, r0
}
 801daae:	4618      	mov	r0, r3
 801dab0:	3718      	adds	r7, #24
 801dab2:	46bd      	mov	sp, r7
 801dab4:	bd80      	pop	{r7, pc}
	...

0801dab8 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801dab8:	b580      	push	{r7, lr}
 801daba:	b084      	sub	sp, #16
 801dabc:	af00      	add	r7, sp, #0
 801dabe:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801dac0:	2304      	movs	r3, #4
 801dac2:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	68fa      	ldr	r2, [r7, #12]
 801daca:	4619      	mov	r1, r3
 801dacc:	480a      	ldr	r0, [pc, #40]	; (801daf8 <parse_null_value+0x40>)
 801dace:	f002 fa6b 	bl	801ffa8 <strncmp>
 801dad2:	4603      	mov	r3, r0
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d109      	bne.n	801daec <parse_null_value+0x34>
        *string += token_size;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	681a      	ldr	r2, [r3, #0]
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	441a      	add	r2, r3
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801dae4:	f001 faf6 	bl	801f0d4 <json_value_init_null>
 801dae8:	4603      	mov	r3, r0
 801daea:	e000      	b.n	801daee <parse_null_value+0x36>
    }
    return NULL;
 801daec:	2300      	movs	r3, #0
}
 801daee:	4618      	mov	r0, r3
 801daf0:	3710      	adds	r7, #16
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bd80      	pop	{r7, pc}
 801daf6:	bf00      	nop
 801daf8:	080230b0 	.word	0x080230b0

0801dafc <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b092      	sub	sp, #72	; 0x48
 801db00:	af02      	add	r7, sp, #8
 801db02:	60f8      	str	r0, [r7, #12]
 801db04:	60b9      	str	r1, [r7, #8]
 801db06:	607a      	str	r2, [r7, #4]
 801db08:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801db0a:	2300      	movs	r3, #0
 801db0c:	637b      	str	r3, [r7, #52]	; 0x34
 801db0e:	2300      	movs	r3, #0
 801db10:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801db12:	2300      	movs	r3, #0
 801db14:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801db16:	2300      	movs	r3, #0
 801db18:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801db1a:	2300      	movs	r3, #0
 801db1c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801db1e:	2300      	movs	r3, #0
 801db20:	63fb      	str	r3, [r7, #60]	; 0x3c
 801db22:	2300      	movs	r3, #0
 801db24:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801db26:	f04f 0200 	mov.w	r2, #0
 801db2a:	f04f 0300 	mov.w	r3, #0
 801db2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801db32:	f04f 33ff 	mov.w	r3, #4294967295
 801db36:	617b      	str	r3, [r7, #20]
 801db38:	2300      	movs	r3, #0
 801db3a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801db3c:	68f8      	ldr	r0, [r7, #12]
 801db3e:	f001 f920 	bl	801ed82 <json_value_get_type>
 801db42:	4603      	mov	r3, r0
 801db44:	3301      	adds	r3, #1
 801db46:	2b07      	cmp	r3, #7
 801db48:	f200 82e4 	bhi.w	801e114 <json_serialize_to_buffer_r+0x618>
 801db4c:	a201      	add	r2, pc, #4	; (adr r2, 801db54 <json_serialize_to_buffer_r+0x58>)
 801db4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db52:	bf00      	nop
 801db54:	0801e10f 	.word	0x0801e10f
 801db58:	0801e115 	.word	0x0801e115
 801db5c:	0801e0df 	.word	0x0801e0df
 801db60:	0801dfc9 	.word	0x0801dfc9
 801db64:	0801e077 	.word	0x0801e077
 801db68:	0801dd43 	.word	0x0801dd43
 801db6c:	0801db75 	.word	0x0801db75
 801db70:	0801e00d 	.word	0x0801e00d
        case JSONArray:
            array = json_value_get_array(value);
 801db74:	68f8      	ldr	r0, [r7, #12]
 801db76:	f001 f928 	bl	801edca <json_value_get_array>
 801db7a:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801db7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801db7e:	f001 f8e3 	bl	801ed48 <json_array_get_count>
 801db82:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801db84:	499b      	ldr	r1, [pc, #620]	; (801ddf4 <json_serialize_to_buffer_r+0x2f8>)
 801db86:	68b8      	ldr	r0, [r7, #8]
 801db88:	f000 ff94 	bl	801eab4 <append_string>
 801db8c:	6178      	str	r0, [r7, #20]
 801db8e:	697b      	ldr	r3, [r7, #20]
 801db90:	2b00      	cmp	r3, #0
 801db92:	da02      	bge.n	801db9a <json_serialize_to_buffer_r+0x9e>
 801db94:	f04f 33ff 	mov.w	r3, #4294967295
 801db98:	e2be      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801db9a:	68bb      	ldr	r3, [r7, #8]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d003      	beq.n	801dba8 <json_serialize_to_buffer_r+0xac>
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	68ba      	ldr	r2, [r7, #8]
 801dba4:	4413      	add	r3, r2
 801dba6:	60bb      	str	r3, [r7, #8]
 801dba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dbaa:	697b      	ldr	r3, [r7, #20]
 801dbac:	4413      	add	r3, r2
 801dbae:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801dbb0:	6a3b      	ldr	r3, [r7, #32]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d018      	beq.n	801dbe8 <json_serialize_to_buffer_r+0xec>
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d015      	beq.n	801dbe8 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801dbbc:	498e      	ldr	r1, [pc, #568]	; (801ddf8 <json_serialize_to_buffer_r+0x2fc>)
 801dbbe:	68b8      	ldr	r0, [r7, #8]
 801dbc0:	f000 ff78 	bl	801eab4 <append_string>
 801dbc4:	6178      	str	r0, [r7, #20]
 801dbc6:	697b      	ldr	r3, [r7, #20]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	da02      	bge.n	801dbd2 <json_serialize_to_buffer_r+0xd6>
 801dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 801dbd0:	e2a2      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dbd2:	68bb      	ldr	r3, [r7, #8]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d003      	beq.n	801dbe0 <json_serialize_to_buffer_r+0xe4>
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	68ba      	ldr	r2, [r7, #8]
 801dbdc:	4413      	add	r3, r2
 801dbde:	60bb      	str	r3, [r7, #8]
 801dbe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	4413      	add	r3, r2
 801dbe6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801dbe8:	2300      	movs	r3, #0
 801dbea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dbec:	e071      	b.n	801dcd2 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801dbee:	683b      	ldr	r3, [r7, #0]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d017      	beq.n	801dc24 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	3301      	adds	r3, #1
 801dbf8:	4619      	mov	r1, r3
 801dbfa:	68b8      	ldr	r0, [r7, #8]
 801dbfc:	f000 ff28 	bl	801ea50 <append_indent>
 801dc00:	6178      	str	r0, [r7, #20]
 801dc02:	697b      	ldr	r3, [r7, #20]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	da02      	bge.n	801dc0e <json_serialize_to_buffer_r+0x112>
 801dc08:	f04f 33ff 	mov.w	r3, #4294967295
 801dc0c:	e284      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dc0e:	68bb      	ldr	r3, [r7, #8]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d003      	beq.n	801dc1c <json_serialize_to_buffer_r+0x120>
 801dc14:	697b      	ldr	r3, [r7, #20]
 801dc16:	68ba      	ldr	r2, [r7, #8]
 801dc18:	4413      	add	r3, r2
 801dc1a:	60bb      	str	r3, [r7, #8]
 801dc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc1e:	697b      	ldr	r3, [r7, #20]
 801dc20:	4413      	add	r3, r2
 801dc22:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801dc24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dc26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc28:	f001 f861 	bl	801ecee <json_array_get_value>
 801dc2c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	1c5a      	adds	r2, r3, #1
 801dc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc34:	9300      	str	r3, [sp, #0]
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	68b9      	ldr	r1, [r7, #8]
 801dc3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc3c:	f7ff ff5e 	bl	801dafc <json_serialize_to_buffer_r>
 801dc40:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	da02      	bge.n	801dc4e <json_serialize_to_buffer_r+0x152>
                    return -1;
 801dc48:	f04f 33ff 	mov.w	r3, #4294967295
 801dc4c:	e264      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801dc4e:	68bb      	ldr	r3, [r7, #8]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d003      	beq.n	801dc5c <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801dc54:	697b      	ldr	r3, [r7, #20]
 801dc56:	68ba      	ldr	r2, [r7, #8]
 801dc58:	4413      	add	r3, r2
 801dc5a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801dc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc5e:	697b      	ldr	r3, [r7, #20]
 801dc60:	4413      	add	r3, r2
 801dc62:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801dc64:	6a3b      	ldr	r3, [r7, #32]
 801dc66:	3b01      	subs	r3, #1
 801dc68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc6a:	429a      	cmp	r2, r3
 801dc6c:	d215      	bcs.n	801dc9a <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801dc6e:	4963      	ldr	r1, [pc, #396]	; (801ddfc <json_serialize_to_buffer_r+0x300>)
 801dc70:	68b8      	ldr	r0, [r7, #8]
 801dc72:	f000 ff1f 	bl	801eab4 <append_string>
 801dc76:	6178      	str	r0, [r7, #20]
 801dc78:	697b      	ldr	r3, [r7, #20]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	da02      	bge.n	801dc84 <json_serialize_to_buffer_r+0x188>
 801dc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc82:	e249      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dc84:	68bb      	ldr	r3, [r7, #8]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d003      	beq.n	801dc92 <json_serialize_to_buffer_r+0x196>
 801dc8a:	697b      	ldr	r3, [r7, #20]
 801dc8c:	68ba      	ldr	r2, [r7, #8]
 801dc8e:	4413      	add	r3, r2
 801dc90:	60bb      	str	r3, [r7, #8]
 801dc92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc94:	697b      	ldr	r3, [r7, #20]
 801dc96:	4413      	add	r3, r2
 801dc98:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801dc9a:	683b      	ldr	r3, [r7, #0]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d015      	beq.n	801dccc <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801dca0:	4955      	ldr	r1, [pc, #340]	; (801ddf8 <json_serialize_to_buffer_r+0x2fc>)
 801dca2:	68b8      	ldr	r0, [r7, #8]
 801dca4:	f000 ff06 	bl	801eab4 <append_string>
 801dca8:	6178      	str	r0, [r7, #20]
 801dcaa:	697b      	ldr	r3, [r7, #20]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	da02      	bge.n	801dcb6 <json_serialize_to_buffer_r+0x1ba>
 801dcb0:	f04f 33ff 	mov.w	r3, #4294967295
 801dcb4:	e230      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dcb6:	68bb      	ldr	r3, [r7, #8]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d003      	beq.n	801dcc4 <json_serialize_to_buffer_r+0x1c8>
 801dcbc:	697b      	ldr	r3, [r7, #20]
 801dcbe:	68ba      	ldr	r2, [r7, #8]
 801dcc0:	4413      	add	r3, r2
 801dcc2:	60bb      	str	r3, [r7, #8]
 801dcc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dcc6:	697b      	ldr	r3, [r7, #20]
 801dcc8:	4413      	add	r3, r2
 801dcca:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801dccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcce:	3301      	adds	r3, #1
 801dcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dcd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dcd4:	6a3b      	ldr	r3, [r7, #32]
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	d389      	bcc.n	801dbee <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801dcda:	6a3b      	ldr	r3, [r7, #32]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d018      	beq.n	801dd12 <json_serialize_to_buffer_r+0x216>
 801dce0:	683b      	ldr	r3, [r7, #0]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d015      	beq.n	801dd12 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801dce6:	6879      	ldr	r1, [r7, #4]
 801dce8:	68b8      	ldr	r0, [r7, #8]
 801dcea:	f000 feb1 	bl	801ea50 <append_indent>
 801dcee:	6178      	str	r0, [r7, #20]
 801dcf0:	697b      	ldr	r3, [r7, #20]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	da02      	bge.n	801dcfc <json_serialize_to_buffer_r+0x200>
 801dcf6:	f04f 33ff 	mov.w	r3, #4294967295
 801dcfa:	e20d      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dcfc:	68bb      	ldr	r3, [r7, #8]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d003      	beq.n	801dd0a <json_serialize_to_buffer_r+0x20e>
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	68ba      	ldr	r2, [r7, #8]
 801dd06:	4413      	add	r3, r2
 801dd08:	60bb      	str	r3, [r7, #8]
 801dd0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd0c:	697b      	ldr	r3, [r7, #20]
 801dd0e:	4413      	add	r3, r2
 801dd10:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801dd12:	493b      	ldr	r1, [pc, #236]	; (801de00 <json_serialize_to_buffer_r+0x304>)
 801dd14:	68b8      	ldr	r0, [r7, #8]
 801dd16:	f000 fecd 	bl	801eab4 <append_string>
 801dd1a:	6178      	str	r0, [r7, #20]
 801dd1c:	697b      	ldr	r3, [r7, #20]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	da02      	bge.n	801dd28 <json_serialize_to_buffer_r+0x22c>
 801dd22:	f04f 33ff 	mov.w	r3, #4294967295
 801dd26:	e1f7      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dd28:	68bb      	ldr	r3, [r7, #8]
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d003      	beq.n	801dd36 <json_serialize_to_buffer_r+0x23a>
 801dd2e:	697b      	ldr	r3, [r7, #20]
 801dd30:	68ba      	ldr	r2, [r7, #8]
 801dd32:	4413      	add	r3, r2
 801dd34:	60bb      	str	r3, [r7, #8]
 801dd36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	4413      	add	r3, r2
 801dd3c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd40:	e1ea      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801dd42:	68f8      	ldr	r0, [r7, #12]
 801dd44:	f001 f82f 	bl	801eda6 <json_value_get_object>
 801dd48:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801dd4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd4c:	f000 ff84 	bl	801ec58 <json_object_get_count>
 801dd50:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801dd52:	492c      	ldr	r1, [pc, #176]	; (801de04 <json_serialize_to_buffer_r+0x308>)
 801dd54:	68b8      	ldr	r0, [r7, #8]
 801dd56:	f000 fead 	bl	801eab4 <append_string>
 801dd5a:	6178      	str	r0, [r7, #20]
 801dd5c:	697b      	ldr	r3, [r7, #20]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	da02      	bge.n	801dd68 <json_serialize_to_buffer_r+0x26c>
 801dd62:	f04f 33ff 	mov.w	r3, #4294967295
 801dd66:	e1d7      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d003      	beq.n	801dd76 <json_serialize_to_buffer_r+0x27a>
 801dd6e:	697b      	ldr	r3, [r7, #20]
 801dd70:	68ba      	ldr	r2, [r7, #8]
 801dd72:	4413      	add	r3, r2
 801dd74:	60bb      	str	r3, [r7, #8]
 801dd76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd78:	697b      	ldr	r3, [r7, #20]
 801dd7a:	4413      	add	r3, r2
 801dd7c:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801dd7e:	6a3b      	ldr	r3, [r7, #32]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d018      	beq.n	801ddb6 <json_serialize_to_buffer_r+0x2ba>
 801dd84:	683b      	ldr	r3, [r7, #0]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d015      	beq.n	801ddb6 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801dd8a:	491b      	ldr	r1, [pc, #108]	; (801ddf8 <json_serialize_to_buffer_r+0x2fc>)
 801dd8c:	68b8      	ldr	r0, [r7, #8]
 801dd8e:	f000 fe91 	bl	801eab4 <append_string>
 801dd92:	6178      	str	r0, [r7, #20]
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	da02      	bge.n	801dda0 <json_serialize_to_buffer_r+0x2a4>
 801dd9a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd9e:	e1bb      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dda0:	68bb      	ldr	r3, [r7, #8]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d003      	beq.n	801ddae <json_serialize_to_buffer_r+0x2b2>
 801dda6:	697b      	ldr	r3, [r7, #20]
 801dda8:	68ba      	ldr	r2, [r7, #8]
 801ddaa:	4413      	add	r3, r2
 801ddac:	60bb      	str	r3, [r7, #8]
 801ddae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ddb0:	697b      	ldr	r3, [r7, #20]
 801ddb2:	4413      	add	r3, r2
 801ddb4:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801ddb6:	2300      	movs	r3, #0
 801ddb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddba:	e0cc      	b.n	801df56 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801ddbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ddbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ddc0:	f000 ff5b 	bl	801ec7a <json_object_get_name>
 801ddc4:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801ddc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d102      	bne.n	801ddd2 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801ddcc:	f04f 33ff 	mov.w	r3, #4294967295
 801ddd0:	e1a2      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d022      	beq.n	801de1e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	3301      	adds	r3, #1
 801dddc:	4619      	mov	r1, r3
 801ddde:	68b8      	ldr	r0, [r7, #8]
 801dde0:	f000 fe36 	bl	801ea50 <append_indent>
 801dde4:	6178      	str	r0, [r7, #20]
 801dde6:	697b      	ldr	r3, [r7, #20]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	da0d      	bge.n	801de08 <json_serialize_to_buffer_r+0x30c>
 801ddec:	f04f 33ff 	mov.w	r3, #4294967295
 801ddf0:	e192      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801ddf2:	bf00      	nop
 801ddf4:	080230b8 	.word	0x080230b8
 801ddf8:	080230bc 	.word	0x080230bc
 801ddfc:	080230c0 	.word	0x080230c0
 801de00:	080230c4 	.word	0x080230c4
 801de04:	080230c8 	.word	0x080230c8
 801de08:	68bb      	ldr	r3, [r7, #8]
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d003      	beq.n	801de16 <json_serialize_to_buffer_r+0x31a>
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	68ba      	ldr	r2, [r7, #8]
 801de12:	4413      	add	r3, r2
 801de14:	60bb      	str	r3, [r7, #8]
 801de16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de18:	697b      	ldr	r3, [r7, #20]
 801de1a:	4413      	add	r3, r2
 801de1c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801de1e:	68b9      	ldr	r1, [r7, #8]
 801de20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801de22:	f000 f97f 	bl	801e124 <json_serialize_string>
 801de26:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801de28:	697b      	ldr	r3, [r7, #20]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	da02      	bge.n	801de34 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801de2e:	f04f 33ff 	mov.w	r3, #4294967295
 801de32:	e171      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801de34:	68bb      	ldr	r3, [r7, #8]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d003      	beq.n	801de42 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801de3a:	697b      	ldr	r3, [r7, #20]
 801de3c:	68ba      	ldr	r2, [r7, #8]
 801de3e:	4413      	add	r3, r2
 801de40:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801de42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de44:	697b      	ldr	r3, [r7, #20]
 801de46:	4413      	add	r3, r2
 801de48:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801de4a:	4996      	ldr	r1, [pc, #600]	; (801e0a4 <json_serialize_to_buffer_r+0x5a8>)
 801de4c:	68b8      	ldr	r0, [r7, #8]
 801de4e:	f000 fe31 	bl	801eab4 <append_string>
 801de52:	6178      	str	r0, [r7, #20]
 801de54:	697b      	ldr	r3, [r7, #20]
 801de56:	2b00      	cmp	r3, #0
 801de58:	da02      	bge.n	801de60 <json_serialize_to_buffer_r+0x364>
 801de5a:	f04f 33ff 	mov.w	r3, #4294967295
 801de5e:	e15b      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801de60:	68bb      	ldr	r3, [r7, #8]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d003      	beq.n	801de6e <json_serialize_to_buffer_r+0x372>
 801de66:	697b      	ldr	r3, [r7, #20]
 801de68:	68ba      	ldr	r2, [r7, #8]
 801de6a:	4413      	add	r3, r2
 801de6c:	60bb      	str	r3, [r7, #8]
 801de6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de70:	697b      	ldr	r3, [r7, #20]
 801de72:	4413      	add	r3, r2
 801de74:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801de76:	683b      	ldr	r3, [r7, #0]
 801de78:	2b00      	cmp	r3, #0
 801de7a:	d015      	beq.n	801dea8 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801de7c:	498a      	ldr	r1, [pc, #552]	; (801e0a8 <json_serialize_to_buffer_r+0x5ac>)
 801de7e:	68b8      	ldr	r0, [r7, #8]
 801de80:	f000 fe18 	bl	801eab4 <append_string>
 801de84:	6178      	str	r0, [r7, #20]
 801de86:	697b      	ldr	r3, [r7, #20]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	da02      	bge.n	801de92 <json_serialize_to_buffer_r+0x396>
 801de8c:	f04f 33ff 	mov.w	r3, #4294967295
 801de90:	e142      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d003      	beq.n	801dea0 <json_serialize_to_buffer_r+0x3a4>
 801de98:	697b      	ldr	r3, [r7, #20]
 801de9a:	68ba      	ldr	r2, [r7, #8]
 801de9c:	4413      	add	r3, r2
 801de9e:	60bb      	str	r3, [r7, #8]
 801dea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dea2:	697b      	ldr	r3, [r7, #20]
 801dea4:	4413      	add	r3, r2
 801dea6:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801dea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801deaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801deac:	f000 fe40 	bl	801eb30 <json_object_get_value>
 801deb0:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	1c5a      	adds	r2, r3, #1
 801deb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801deb8:	9300      	str	r3, [sp, #0]
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	68b9      	ldr	r1, [r7, #8]
 801debe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dec0:	f7ff fe1c 	bl	801dafc <json_serialize_to_buffer_r>
 801dec4:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801dec6:	697b      	ldr	r3, [r7, #20]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	da02      	bge.n	801ded2 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801decc:	f04f 33ff 	mov.w	r3, #4294967295
 801ded0:	e122      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801ded2:	68bb      	ldr	r3, [r7, #8]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d003      	beq.n	801dee0 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801ded8:	697b      	ldr	r3, [r7, #20]
 801deda:	68ba      	ldr	r2, [r7, #8]
 801dedc:	4413      	add	r3, r2
 801dede:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801dee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dee2:	697b      	ldr	r3, [r7, #20]
 801dee4:	4413      	add	r3, r2
 801dee6:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801dee8:	6a3b      	ldr	r3, [r7, #32]
 801deea:	3b01      	subs	r3, #1
 801deec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801deee:	429a      	cmp	r2, r3
 801def0:	d215      	bcs.n	801df1e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801def2:	496e      	ldr	r1, [pc, #440]	; (801e0ac <json_serialize_to_buffer_r+0x5b0>)
 801def4:	68b8      	ldr	r0, [r7, #8]
 801def6:	f000 fddd 	bl	801eab4 <append_string>
 801defa:	6178      	str	r0, [r7, #20]
 801defc:	697b      	ldr	r3, [r7, #20]
 801defe:	2b00      	cmp	r3, #0
 801df00:	da02      	bge.n	801df08 <json_serialize_to_buffer_r+0x40c>
 801df02:	f04f 33ff 	mov.w	r3, #4294967295
 801df06:	e107      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801df08:	68bb      	ldr	r3, [r7, #8]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d003      	beq.n	801df16 <json_serialize_to_buffer_r+0x41a>
 801df0e:	697b      	ldr	r3, [r7, #20]
 801df10:	68ba      	ldr	r2, [r7, #8]
 801df12:	4413      	add	r3, r2
 801df14:	60bb      	str	r3, [r7, #8]
 801df16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801df18:	697b      	ldr	r3, [r7, #20]
 801df1a:	4413      	add	r3, r2
 801df1c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d015      	beq.n	801df50 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801df24:	4962      	ldr	r1, [pc, #392]	; (801e0b0 <json_serialize_to_buffer_r+0x5b4>)
 801df26:	68b8      	ldr	r0, [r7, #8]
 801df28:	f000 fdc4 	bl	801eab4 <append_string>
 801df2c:	6178      	str	r0, [r7, #20]
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	2b00      	cmp	r3, #0
 801df32:	da02      	bge.n	801df3a <json_serialize_to_buffer_r+0x43e>
 801df34:	f04f 33ff 	mov.w	r3, #4294967295
 801df38:	e0ee      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801df3a:	68bb      	ldr	r3, [r7, #8]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d003      	beq.n	801df48 <json_serialize_to_buffer_r+0x44c>
 801df40:	697b      	ldr	r3, [r7, #20]
 801df42:	68ba      	ldr	r2, [r7, #8]
 801df44:	4413      	add	r3, r2
 801df46:	60bb      	str	r3, [r7, #8]
 801df48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801df4a:	697b      	ldr	r3, [r7, #20]
 801df4c:	4413      	add	r3, r2
 801df4e:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801df50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df52:	3301      	adds	r3, #1
 801df54:	63fb      	str	r3, [r7, #60]	; 0x3c
 801df56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801df58:	6a3b      	ldr	r3, [r7, #32]
 801df5a:	429a      	cmp	r2, r3
 801df5c:	f4ff af2e 	bcc.w	801ddbc <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801df60:	6a3b      	ldr	r3, [r7, #32]
 801df62:	2b00      	cmp	r3, #0
 801df64:	d018      	beq.n	801df98 <json_serialize_to_buffer_r+0x49c>
 801df66:	683b      	ldr	r3, [r7, #0]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d015      	beq.n	801df98 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801df6c:	6879      	ldr	r1, [r7, #4]
 801df6e:	68b8      	ldr	r0, [r7, #8]
 801df70:	f000 fd6e 	bl	801ea50 <append_indent>
 801df74:	6178      	str	r0, [r7, #20]
 801df76:	697b      	ldr	r3, [r7, #20]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	da02      	bge.n	801df82 <json_serialize_to_buffer_r+0x486>
 801df7c:	f04f 33ff 	mov.w	r3, #4294967295
 801df80:	e0ca      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801df82:	68bb      	ldr	r3, [r7, #8]
 801df84:	2b00      	cmp	r3, #0
 801df86:	d003      	beq.n	801df90 <json_serialize_to_buffer_r+0x494>
 801df88:	697b      	ldr	r3, [r7, #20]
 801df8a:	68ba      	ldr	r2, [r7, #8]
 801df8c:	4413      	add	r3, r2
 801df8e:	60bb      	str	r3, [r7, #8]
 801df90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	4413      	add	r3, r2
 801df96:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801df98:	4946      	ldr	r1, [pc, #280]	; (801e0b4 <json_serialize_to_buffer_r+0x5b8>)
 801df9a:	68b8      	ldr	r0, [r7, #8]
 801df9c:	f000 fd8a 	bl	801eab4 <append_string>
 801dfa0:	6178      	str	r0, [r7, #20]
 801dfa2:	697b      	ldr	r3, [r7, #20]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	da02      	bge.n	801dfae <json_serialize_to_buffer_r+0x4b2>
 801dfa8:	f04f 33ff 	mov.w	r3, #4294967295
 801dfac:	e0b4      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801dfae:	68bb      	ldr	r3, [r7, #8]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d003      	beq.n	801dfbc <json_serialize_to_buffer_r+0x4c0>
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	68ba      	ldr	r2, [r7, #8]
 801dfb8:	4413      	add	r3, r2
 801dfba:	60bb      	str	r3, [r7, #8]
 801dfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dfbe:	697b      	ldr	r3, [r7, #20]
 801dfc0:	4413      	add	r3, r2
 801dfc2:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfc6:	e0a7      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801dfc8:	68f8      	ldr	r0, [r7, #12]
 801dfca:	f000 ff10 	bl	801edee <json_value_get_string>
 801dfce:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d102      	bne.n	801dfdc <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801dfd6:	f04f 33ff 	mov.w	r3, #4294967295
 801dfda:	e09d      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801dfdc:	68b9      	ldr	r1, [r7, #8]
 801dfde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dfe0:	f000 f8a0 	bl	801e124 <json_serialize_string>
 801dfe4:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	da02      	bge.n	801dff2 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801dfec:	f04f 33ff 	mov.w	r3, #4294967295
 801dff0:	e092      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801dff2:	68bb      	ldr	r3, [r7, #8]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d003      	beq.n	801e000 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	68ba      	ldr	r2, [r7, #8]
 801dffc:	4413      	add	r3, r2
 801dffe:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801e000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e002:	697b      	ldr	r3, [r7, #20]
 801e004:	4413      	add	r3, r2
 801e006:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e00a:	e085      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801e00c:	68f8      	ldr	r0, [r7, #12]
 801e00e:	f000 ff1b 	bl	801ee48 <json_value_get_boolean>
 801e012:	4603      	mov	r3, r0
 801e014:	2b00      	cmp	r3, #0
 801e016:	d016      	beq.n	801e046 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801e018:	4927      	ldr	r1, [pc, #156]	; (801e0b8 <json_serialize_to_buffer_r+0x5bc>)
 801e01a:	68b8      	ldr	r0, [r7, #8]
 801e01c:	f000 fd4a 	bl	801eab4 <append_string>
 801e020:	6178      	str	r0, [r7, #20]
 801e022:	697b      	ldr	r3, [r7, #20]
 801e024:	2b00      	cmp	r3, #0
 801e026:	da02      	bge.n	801e02e <json_serialize_to_buffer_r+0x532>
 801e028:	f04f 33ff 	mov.w	r3, #4294967295
 801e02c:	e074      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801e02e:	68bb      	ldr	r3, [r7, #8]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d003      	beq.n	801e03c <json_serialize_to_buffer_r+0x540>
 801e034:	697b      	ldr	r3, [r7, #20]
 801e036:	68ba      	ldr	r2, [r7, #8]
 801e038:	4413      	add	r3, r2
 801e03a:	60bb      	str	r3, [r7, #8]
 801e03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e03e:	697b      	ldr	r3, [r7, #20]
 801e040:	4413      	add	r3, r2
 801e042:	63bb      	str	r3, [r7, #56]	; 0x38
 801e044:	e015      	b.n	801e072 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801e046:	491d      	ldr	r1, [pc, #116]	; (801e0bc <json_serialize_to_buffer_r+0x5c0>)
 801e048:	68b8      	ldr	r0, [r7, #8]
 801e04a:	f000 fd33 	bl	801eab4 <append_string>
 801e04e:	6178      	str	r0, [r7, #20]
 801e050:	697b      	ldr	r3, [r7, #20]
 801e052:	2b00      	cmp	r3, #0
 801e054:	da02      	bge.n	801e05c <json_serialize_to_buffer_r+0x560>
 801e056:	f04f 33ff 	mov.w	r3, #4294967295
 801e05a:	e05d      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801e05c:	68bb      	ldr	r3, [r7, #8]
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d003      	beq.n	801e06a <json_serialize_to_buffer_r+0x56e>
 801e062:	697b      	ldr	r3, [r7, #20]
 801e064:	68ba      	ldr	r2, [r7, #8]
 801e066:	4413      	add	r3, r2
 801e068:	60bb      	str	r3, [r7, #8]
 801e06a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e06c:	697b      	ldr	r3, [r7, #20]
 801e06e:	4413      	add	r3, r2
 801e070:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e074:	e050      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801e076:	68f8      	ldr	r0, [r7, #12]
 801e078:	f000 fecb 	bl	801ee12 <json_value_get_number>
 801e07c:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801e080:	68bb      	ldr	r3, [r7, #8]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d001      	beq.n	801e08a <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801e086:	68bb      	ldr	r3, [r7, #8]
 801e088:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801e08a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e08e:	490c      	ldr	r1, [pc, #48]	; (801e0c0 <json_serialize_to_buffer_r+0x5c4>)
 801e090:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801e092:	f001 ff19 	bl	801fec8 <siprintf>
 801e096:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801e098:	697b      	ldr	r3, [r7, #20]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	da12      	bge.n	801e0c4 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801e09e:	f04f 33ff 	mov.w	r3, #4294967295
 801e0a2:	e039      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801e0a4:	080230cc 	.word	0x080230cc
 801e0a8:	080230d0 	.word	0x080230d0
 801e0ac:	080230c0 	.word	0x080230c0
 801e0b0:	080230bc 	.word	0x080230bc
 801e0b4:	080230d4 	.word	0x080230d4
 801e0b8:	080230a0 	.word	0x080230a0
 801e0bc:	080230a8 	.word	0x080230a8
 801e0c0:	080230d8 	.word	0x080230d8
            }
            if (buf != NULL) {
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d003      	beq.n	801e0d2 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801e0ca:	697b      	ldr	r3, [r7, #20]
 801e0cc:	68ba      	ldr	r2, [r7, #8]
 801e0ce:	4413      	add	r3, r2
 801e0d0:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801e0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e0d4:	697b      	ldr	r3, [r7, #20]
 801e0d6:	4413      	add	r3, r2
 801e0d8:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0dc:	e01c      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801e0de:	4910      	ldr	r1, [pc, #64]	; (801e120 <json_serialize_to_buffer_r+0x624>)
 801e0e0:	68b8      	ldr	r0, [r7, #8]
 801e0e2:	f000 fce7 	bl	801eab4 <append_string>
 801e0e6:	6178      	str	r0, [r7, #20]
 801e0e8:	697b      	ldr	r3, [r7, #20]
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	da02      	bge.n	801e0f4 <json_serialize_to_buffer_r+0x5f8>
 801e0ee:	f04f 33ff 	mov.w	r3, #4294967295
 801e0f2:	e011      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
 801e0f4:	68bb      	ldr	r3, [r7, #8]
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d003      	beq.n	801e102 <json_serialize_to_buffer_r+0x606>
 801e0fa:	697b      	ldr	r3, [r7, #20]
 801e0fc:	68ba      	ldr	r2, [r7, #8]
 801e0fe:	4413      	add	r3, r2
 801e100:	60bb      	str	r3, [r7, #8]
 801e102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e104:	697b      	ldr	r3, [r7, #20]
 801e106:	4413      	add	r3, r2
 801e108:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e10c:	e004      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801e10e:	f04f 33ff 	mov.w	r3, #4294967295
 801e112:	e001      	b.n	801e118 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801e114:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801e118:	4618      	mov	r0, r3
 801e11a:	3740      	adds	r7, #64	; 0x40
 801e11c:	46bd      	mov	sp, r7
 801e11e:	bd80      	pop	{r7, pc}
 801e120:	080230b0 	.word	0x080230b0

0801e124 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801e124:	b580      	push	{r7, lr}
 801e126:	b088      	sub	sp, #32
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
 801e12c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801e12e:	2300      	movs	r3, #0
 801e130:	61fb      	str	r3, [r7, #28]
 801e132:	6878      	ldr	r0, [r7, #4]
 801e134:	f7e2 f86e 	bl	8000214 <strlen>
 801e138:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801e13a:	2300      	movs	r3, #0
 801e13c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801e13e:	f04f 33ff 	mov.w	r3, #4294967295
 801e142:	60fb      	str	r3, [r7, #12]
 801e144:	2300      	movs	r3, #0
 801e146:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801e148:	49bb      	ldr	r1, [pc, #748]	; (801e438 <json_serialize_string+0x314>)
 801e14a:	6838      	ldr	r0, [r7, #0]
 801e14c:	f000 fcb2 	bl	801eab4 <append_string>
 801e150:	60f8      	str	r0, [r7, #12]
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	2b00      	cmp	r3, #0
 801e156:	da03      	bge.n	801e160 <json_serialize_string+0x3c>
 801e158:	f04f 33ff 	mov.w	r3, #4294967295
 801e15c:	f000 bc6e 	b.w	801ea3c <json_serialize_string+0x918>
 801e160:	683b      	ldr	r3, [r7, #0]
 801e162:	2b00      	cmp	r3, #0
 801e164:	d003      	beq.n	801e16e <json_serialize_string+0x4a>
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	683a      	ldr	r2, [r7, #0]
 801e16a:	4413      	add	r3, r2
 801e16c:	603b      	str	r3, [r7, #0]
 801e16e:	69ba      	ldr	r2, [r7, #24]
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	4413      	add	r3, r2
 801e174:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801e176:	2300      	movs	r3, #0
 801e178:	61fb      	str	r3, [r7, #28]
 801e17a:	f000 bc43 	b.w	801ea04 <json_serialize_string+0x8e0>
        c = string[i];
 801e17e:	687a      	ldr	r2, [r7, #4]
 801e180:	69fb      	ldr	r3, [r7, #28]
 801e182:	4413      	add	r3, r2
 801e184:	781b      	ldrb	r3, [r3, #0]
 801e186:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801e188:	7cfb      	ldrb	r3, [r7, #19]
 801e18a:	2b5c      	cmp	r3, #92	; 0x5c
 801e18c:	f200 842a 	bhi.w	801e9e4 <json_serialize_string+0x8c0>
 801e190:	a201      	add	r2, pc, #4	; (adr r2, 801e198 <json_serialize_string+0x74>)
 801e192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e196:	bf00      	nop
 801e198:	0801e49f 	.word	0x0801e49f
 801e19c:	0801e4cd 	.word	0x0801e4cd
 801e1a0:	0801e4fb 	.word	0x0801e4fb
 801e1a4:	0801e529 	.word	0x0801e529
 801e1a8:	0801e557 	.word	0x0801e557
 801e1ac:	0801e585 	.word	0x0801e585
 801e1b0:	0801e5b3 	.word	0x0801e5b3
 801e1b4:	0801e5e1 	.word	0x0801e5e1
 801e1b8:	0801e397 	.word	0x0801e397
 801e1bc:	0801e471 	.word	0x0801e471
 801e1c0:	0801e3f3 	.word	0x0801e3f3
 801e1c4:	0801e60f 	.word	0x0801e60f
 801e1c8:	0801e3c5 	.word	0x0801e3c5
 801e1cc:	0801e421 	.word	0x0801e421
 801e1d0:	0801e63d 	.word	0x0801e63d
 801e1d4:	0801e66b 	.word	0x0801e66b
 801e1d8:	0801e699 	.word	0x0801e699
 801e1dc:	0801e6fd 	.word	0x0801e6fd
 801e1e0:	0801e72b 	.word	0x0801e72b
 801e1e4:	0801e759 	.word	0x0801e759
 801e1e8:	0801e787 	.word	0x0801e787
 801e1ec:	0801e7b5 	.word	0x0801e7b5
 801e1f0:	0801e7e3 	.word	0x0801e7e3
 801e1f4:	0801e811 	.word	0x0801e811
 801e1f8:	0801e83f 	.word	0x0801e83f
 801e1fc:	0801e86d 	.word	0x0801e86d
 801e200:	0801e89b 	.word	0x0801e89b
 801e204:	0801e8c9 	.word	0x0801e8c9
 801e208:	0801e8f7 	.word	0x0801e8f7
 801e20c:	0801e925 	.word	0x0801e925
 801e210:	0801e989 	.word	0x0801e989
 801e214:	0801e9b7 	.word	0x0801e9b7
 801e218:	0801e9e5 	.word	0x0801e9e5
 801e21c:	0801e9e5 	.word	0x0801e9e5
 801e220:	0801e30d 	.word	0x0801e30d
 801e224:	0801e9e5 	.word	0x0801e9e5
 801e228:	0801e9e5 	.word	0x0801e9e5
 801e22c:	0801e9e5 	.word	0x0801e9e5
 801e230:	0801e9e5 	.word	0x0801e9e5
 801e234:	0801e9e5 	.word	0x0801e9e5
 801e238:	0801e9e5 	.word	0x0801e9e5
 801e23c:	0801e9e5 	.word	0x0801e9e5
 801e240:	0801e9e5 	.word	0x0801e9e5
 801e244:	0801e9e5 	.word	0x0801e9e5
 801e248:	0801e9e5 	.word	0x0801e9e5
 801e24c:	0801e9e5 	.word	0x0801e9e5
 801e250:	0801e9e5 	.word	0x0801e9e5
 801e254:	0801e369 	.word	0x0801e369
 801e258:	0801e9e5 	.word	0x0801e9e5
 801e25c:	0801e9e5 	.word	0x0801e9e5
 801e260:	0801e9e5 	.word	0x0801e9e5
 801e264:	0801e9e5 	.word	0x0801e9e5
 801e268:	0801e9e5 	.word	0x0801e9e5
 801e26c:	0801e9e5 	.word	0x0801e9e5
 801e270:	0801e9e5 	.word	0x0801e9e5
 801e274:	0801e9e5 	.word	0x0801e9e5
 801e278:	0801e9e5 	.word	0x0801e9e5
 801e27c:	0801e9e5 	.word	0x0801e9e5
 801e280:	0801e9e5 	.word	0x0801e9e5
 801e284:	0801e9e5 	.word	0x0801e9e5
 801e288:	0801e9e5 	.word	0x0801e9e5
 801e28c:	0801e9e5 	.word	0x0801e9e5
 801e290:	0801e9e5 	.word	0x0801e9e5
 801e294:	0801e9e5 	.word	0x0801e9e5
 801e298:	0801e9e5 	.word	0x0801e9e5
 801e29c:	0801e9e5 	.word	0x0801e9e5
 801e2a0:	0801e9e5 	.word	0x0801e9e5
 801e2a4:	0801e9e5 	.word	0x0801e9e5
 801e2a8:	0801e9e5 	.word	0x0801e9e5
 801e2ac:	0801e9e5 	.word	0x0801e9e5
 801e2b0:	0801e9e5 	.word	0x0801e9e5
 801e2b4:	0801e9e5 	.word	0x0801e9e5
 801e2b8:	0801e9e5 	.word	0x0801e9e5
 801e2bc:	0801e9e5 	.word	0x0801e9e5
 801e2c0:	0801e9e5 	.word	0x0801e9e5
 801e2c4:	0801e9e5 	.word	0x0801e9e5
 801e2c8:	0801e9e5 	.word	0x0801e9e5
 801e2cc:	0801e9e5 	.word	0x0801e9e5
 801e2d0:	0801e9e5 	.word	0x0801e9e5
 801e2d4:	0801e9e5 	.word	0x0801e9e5
 801e2d8:	0801e9e5 	.word	0x0801e9e5
 801e2dc:	0801e9e5 	.word	0x0801e9e5
 801e2e0:	0801e9e5 	.word	0x0801e9e5
 801e2e4:	0801e9e5 	.word	0x0801e9e5
 801e2e8:	0801e9e5 	.word	0x0801e9e5
 801e2ec:	0801e9e5 	.word	0x0801e9e5
 801e2f0:	0801e9e5 	.word	0x0801e9e5
 801e2f4:	0801e9e5 	.word	0x0801e9e5
 801e2f8:	0801e9e5 	.word	0x0801e9e5
 801e2fc:	0801e9e5 	.word	0x0801e9e5
 801e300:	0801e9e5 	.word	0x0801e9e5
 801e304:	0801e9e5 	.word	0x0801e9e5
 801e308:	0801e33b 	.word	0x0801e33b
            case '\"': APPEND_STRING("\\\""); break;
 801e30c:	494b      	ldr	r1, [pc, #300]	; (801e43c <json_serialize_string+0x318>)
 801e30e:	6838      	ldr	r0, [r7, #0]
 801e310:	f000 fbd0 	bl	801eab4 <append_string>
 801e314:	60f8      	str	r0, [r7, #12]
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	da02      	bge.n	801e322 <json_serialize_string+0x1fe>
 801e31c:	f04f 33ff 	mov.w	r3, #4294967295
 801e320:	e38c      	b.n	801ea3c <json_serialize_string+0x918>
 801e322:	683b      	ldr	r3, [r7, #0]
 801e324:	2b00      	cmp	r3, #0
 801e326:	d003      	beq.n	801e330 <json_serialize_string+0x20c>
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	683a      	ldr	r2, [r7, #0]
 801e32c:	4413      	add	r3, r2
 801e32e:	603b      	str	r3, [r7, #0]
 801e330:	69ba      	ldr	r2, [r7, #24]
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	4413      	add	r3, r2
 801e336:	61bb      	str	r3, [r7, #24]
 801e338:	e361      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801e33a:	4941      	ldr	r1, [pc, #260]	; (801e440 <json_serialize_string+0x31c>)
 801e33c:	6838      	ldr	r0, [r7, #0]
 801e33e:	f000 fbb9 	bl	801eab4 <append_string>
 801e342:	60f8      	str	r0, [r7, #12]
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	2b00      	cmp	r3, #0
 801e348:	da02      	bge.n	801e350 <json_serialize_string+0x22c>
 801e34a:	f04f 33ff 	mov.w	r3, #4294967295
 801e34e:	e375      	b.n	801ea3c <json_serialize_string+0x918>
 801e350:	683b      	ldr	r3, [r7, #0]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d003      	beq.n	801e35e <json_serialize_string+0x23a>
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	683a      	ldr	r2, [r7, #0]
 801e35a:	4413      	add	r3, r2
 801e35c:	603b      	str	r3, [r7, #0]
 801e35e:	69ba      	ldr	r2, [r7, #24]
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	4413      	add	r3, r2
 801e364:	61bb      	str	r3, [r7, #24]
 801e366:	e34a      	b.n	801e9fe <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801e368:	4936      	ldr	r1, [pc, #216]	; (801e444 <json_serialize_string+0x320>)
 801e36a:	6838      	ldr	r0, [r7, #0]
 801e36c:	f000 fba2 	bl	801eab4 <append_string>
 801e370:	60f8      	str	r0, [r7, #12]
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	2b00      	cmp	r3, #0
 801e376:	da02      	bge.n	801e37e <json_serialize_string+0x25a>
 801e378:	f04f 33ff 	mov.w	r3, #4294967295
 801e37c:	e35e      	b.n	801ea3c <json_serialize_string+0x918>
 801e37e:	683b      	ldr	r3, [r7, #0]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d003      	beq.n	801e38c <json_serialize_string+0x268>
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	683a      	ldr	r2, [r7, #0]
 801e388:	4413      	add	r3, r2
 801e38a:	603b      	str	r3, [r7, #0]
 801e38c:	69ba      	ldr	r2, [r7, #24]
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	4413      	add	r3, r2
 801e392:	61bb      	str	r3, [r7, #24]
 801e394:	e333      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801e396:	492c      	ldr	r1, [pc, #176]	; (801e448 <json_serialize_string+0x324>)
 801e398:	6838      	ldr	r0, [r7, #0]
 801e39a:	f000 fb8b 	bl	801eab4 <append_string>
 801e39e:	60f8      	str	r0, [r7, #12]
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	da02      	bge.n	801e3ac <json_serialize_string+0x288>
 801e3a6:	f04f 33ff 	mov.w	r3, #4294967295
 801e3aa:	e347      	b.n	801ea3c <json_serialize_string+0x918>
 801e3ac:	683b      	ldr	r3, [r7, #0]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d003      	beq.n	801e3ba <json_serialize_string+0x296>
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	683a      	ldr	r2, [r7, #0]
 801e3b6:	4413      	add	r3, r2
 801e3b8:	603b      	str	r3, [r7, #0]
 801e3ba:	69ba      	ldr	r2, [r7, #24]
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	4413      	add	r3, r2
 801e3c0:	61bb      	str	r3, [r7, #24]
 801e3c2:	e31c      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801e3c4:	4921      	ldr	r1, [pc, #132]	; (801e44c <json_serialize_string+0x328>)
 801e3c6:	6838      	ldr	r0, [r7, #0]
 801e3c8:	f000 fb74 	bl	801eab4 <append_string>
 801e3cc:	60f8      	str	r0, [r7, #12]
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	da02      	bge.n	801e3da <json_serialize_string+0x2b6>
 801e3d4:	f04f 33ff 	mov.w	r3, #4294967295
 801e3d8:	e330      	b.n	801ea3c <json_serialize_string+0x918>
 801e3da:	683b      	ldr	r3, [r7, #0]
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d003      	beq.n	801e3e8 <json_serialize_string+0x2c4>
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	683a      	ldr	r2, [r7, #0]
 801e3e4:	4413      	add	r3, r2
 801e3e6:	603b      	str	r3, [r7, #0]
 801e3e8:	69ba      	ldr	r2, [r7, #24]
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	4413      	add	r3, r2
 801e3ee:	61bb      	str	r3, [r7, #24]
 801e3f0:	e305      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801e3f2:	4917      	ldr	r1, [pc, #92]	; (801e450 <json_serialize_string+0x32c>)
 801e3f4:	6838      	ldr	r0, [r7, #0]
 801e3f6:	f000 fb5d 	bl	801eab4 <append_string>
 801e3fa:	60f8      	str	r0, [r7, #12]
 801e3fc:	68fb      	ldr	r3, [r7, #12]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	da02      	bge.n	801e408 <json_serialize_string+0x2e4>
 801e402:	f04f 33ff 	mov.w	r3, #4294967295
 801e406:	e319      	b.n	801ea3c <json_serialize_string+0x918>
 801e408:	683b      	ldr	r3, [r7, #0]
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d003      	beq.n	801e416 <json_serialize_string+0x2f2>
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	683a      	ldr	r2, [r7, #0]
 801e412:	4413      	add	r3, r2
 801e414:	603b      	str	r3, [r7, #0]
 801e416:	69ba      	ldr	r2, [r7, #24]
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	4413      	add	r3, r2
 801e41c:	61bb      	str	r3, [r7, #24]
 801e41e:	e2ee      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801e420:	490c      	ldr	r1, [pc, #48]	; (801e454 <json_serialize_string+0x330>)
 801e422:	6838      	ldr	r0, [r7, #0]
 801e424:	f000 fb46 	bl	801eab4 <append_string>
 801e428:	60f8      	str	r0, [r7, #12]
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	da13      	bge.n	801e458 <json_serialize_string+0x334>
 801e430:	f04f 33ff 	mov.w	r3, #4294967295
 801e434:	e302      	b.n	801ea3c <json_serialize_string+0x918>
 801e436:	bf00      	nop
 801e438:	080230e0 	.word	0x080230e0
 801e43c:	080230e4 	.word	0x080230e4
 801e440:	080230e8 	.word	0x080230e8
 801e444:	080230ec 	.word	0x080230ec
 801e448:	080230f0 	.word	0x080230f0
 801e44c:	080230f4 	.word	0x080230f4
 801e450:	080230f8 	.word	0x080230f8
 801e454:	080230fc 	.word	0x080230fc
 801e458:	683b      	ldr	r3, [r7, #0]
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d003      	beq.n	801e466 <json_serialize_string+0x342>
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	683a      	ldr	r2, [r7, #0]
 801e462:	4413      	add	r3, r2
 801e464:	603b      	str	r3, [r7, #0]
 801e466:	69ba      	ldr	r2, [r7, #24]
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	4413      	add	r3, r2
 801e46c:	61bb      	str	r3, [r7, #24]
 801e46e:	e2c6      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801e470:	4995      	ldr	r1, [pc, #596]	; (801e6c8 <json_serialize_string+0x5a4>)
 801e472:	6838      	ldr	r0, [r7, #0]
 801e474:	f000 fb1e 	bl	801eab4 <append_string>
 801e478:	60f8      	str	r0, [r7, #12]
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	da02      	bge.n	801e486 <json_serialize_string+0x362>
 801e480:	f04f 33ff 	mov.w	r3, #4294967295
 801e484:	e2da      	b.n	801ea3c <json_serialize_string+0x918>
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d003      	beq.n	801e494 <json_serialize_string+0x370>
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	683a      	ldr	r2, [r7, #0]
 801e490:	4413      	add	r3, r2
 801e492:	603b      	str	r3, [r7, #0]
 801e494:	69ba      	ldr	r2, [r7, #24]
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	4413      	add	r3, r2
 801e49a:	61bb      	str	r3, [r7, #24]
 801e49c:	e2af      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801e49e:	498b      	ldr	r1, [pc, #556]	; (801e6cc <json_serialize_string+0x5a8>)
 801e4a0:	6838      	ldr	r0, [r7, #0]
 801e4a2:	f000 fb07 	bl	801eab4 <append_string>
 801e4a6:	60f8      	str	r0, [r7, #12]
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	da02      	bge.n	801e4b4 <json_serialize_string+0x390>
 801e4ae:	f04f 33ff 	mov.w	r3, #4294967295
 801e4b2:	e2c3      	b.n	801ea3c <json_serialize_string+0x918>
 801e4b4:	683b      	ldr	r3, [r7, #0]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d003      	beq.n	801e4c2 <json_serialize_string+0x39e>
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	683a      	ldr	r2, [r7, #0]
 801e4be:	4413      	add	r3, r2
 801e4c0:	603b      	str	r3, [r7, #0]
 801e4c2:	69ba      	ldr	r2, [r7, #24]
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	4413      	add	r3, r2
 801e4c8:	61bb      	str	r3, [r7, #24]
 801e4ca:	e298      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801e4cc:	4980      	ldr	r1, [pc, #512]	; (801e6d0 <json_serialize_string+0x5ac>)
 801e4ce:	6838      	ldr	r0, [r7, #0]
 801e4d0:	f000 faf0 	bl	801eab4 <append_string>
 801e4d4:	60f8      	str	r0, [r7, #12]
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	da02      	bge.n	801e4e2 <json_serialize_string+0x3be>
 801e4dc:	f04f 33ff 	mov.w	r3, #4294967295
 801e4e0:	e2ac      	b.n	801ea3c <json_serialize_string+0x918>
 801e4e2:	683b      	ldr	r3, [r7, #0]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d003      	beq.n	801e4f0 <json_serialize_string+0x3cc>
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	683a      	ldr	r2, [r7, #0]
 801e4ec:	4413      	add	r3, r2
 801e4ee:	603b      	str	r3, [r7, #0]
 801e4f0:	69ba      	ldr	r2, [r7, #24]
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	4413      	add	r3, r2
 801e4f6:	61bb      	str	r3, [r7, #24]
 801e4f8:	e281      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801e4fa:	4976      	ldr	r1, [pc, #472]	; (801e6d4 <json_serialize_string+0x5b0>)
 801e4fc:	6838      	ldr	r0, [r7, #0]
 801e4fe:	f000 fad9 	bl	801eab4 <append_string>
 801e502:	60f8      	str	r0, [r7, #12]
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	2b00      	cmp	r3, #0
 801e508:	da02      	bge.n	801e510 <json_serialize_string+0x3ec>
 801e50a:	f04f 33ff 	mov.w	r3, #4294967295
 801e50e:	e295      	b.n	801ea3c <json_serialize_string+0x918>
 801e510:	683b      	ldr	r3, [r7, #0]
 801e512:	2b00      	cmp	r3, #0
 801e514:	d003      	beq.n	801e51e <json_serialize_string+0x3fa>
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	683a      	ldr	r2, [r7, #0]
 801e51a:	4413      	add	r3, r2
 801e51c:	603b      	str	r3, [r7, #0]
 801e51e:	69ba      	ldr	r2, [r7, #24]
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	4413      	add	r3, r2
 801e524:	61bb      	str	r3, [r7, #24]
 801e526:	e26a      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801e528:	496b      	ldr	r1, [pc, #428]	; (801e6d8 <json_serialize_string+0x5b4>)
 801e52a:	6838      	ldr	r0, [r7, #0]
 801e52c:	f000 fac2 	bl	801eab4 <append_string>
 801e530:	60f8      	str	r0, [r7, #12]
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	2b00      	cmp	r3, #0
 801e536:	da02      	bge.n	801e53e <json_serialize_string+0x41a>
 801e538:	f04f 33ff 	mov.w	r3, #4294967295
 801e53c:	e27e      	b.n	801ea3c <json_serialize_string+0x918>
 801e53e:	683b      	ldr	r3, [r7, #0]
 801e540:	2b00      	cmp	r3, #0
 801e542:	d003      	beq.n	801e54c <json_serialize_string+0x428>
 801e544:	68fb      	ldr	r3, [r7, #12]
 801e546:	683a      	ldr	r2, [r7, #0]
 801e548:	4413      	add	r3, r2
 801e54a:	603b      	str	r3, [r7, #0]
 801e54c:	69ba      	ldr	r2, [r7, #24]
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	4413      	add	r3, r2
 801e552:	61bb      	str	r3, [r7, #24]
 801e554:	e253      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801e556:	4961      	ldr	r1, [pc, #388]	; (801e6dc <json_serialize_string+0x5b8>)
 801e558:	6838      	ldr	r0, [r7, #0]
 801e55a:	f000 faab 	bl	801eab4 <append_string>
 801e55e:	60f8      	str	r0, [r7, #12]
 801e560:	68fb      	ldr	r3, [r7, #12]
 801e562:	2b00      	cmp	r3, #0
 801e564:	da02      	bge.n	801e56c <json_serialize_string+0x448>
 801e566:	f04f 33ff 	mov.w	r3, #4294967295
 801e56a:	e267      	b.n	801ea3c <json_serialize_string+0x918>
 801e56c:	683b      	ldr	r3, [r7, #0]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d003      	beq.n	801e57a <json_serialize_string+0x456>
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	683a      	ldr	r2, [r7, #0]
 801e576:	4413      	add	r3, r2
 801e578:	603b      	str	r3, [r7, #0]
 801e57a:	69ba      	ldr	r2, [r7, #24]
 801e57c:	68fb      	ldr	r3, [r7, #12]
 801e57e:	4413      	add	r3, r2
 801e580:	61bb      	str	r3, [r7, #24]
 801e582:	e23c      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801e584:	4956      	ldr	r1, [pc, #344]	; (801e6e0 <json_serialize_string+0x5bc>)
 801e586:	6838      	ldr	r0, [r7, #0]
 801e588:	f000 fa94 	bl	801eab4 <append_string>
 801e58c:	60f8      	str	r0, [r7, #12]
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	2b00      	cmp	r3, #0
 801e592:	da02      	bge.n	801e59a <json_serialize_string+0x476>
 801e594:	f04f 33ff 	mov.w	r3, #4294967295
 801e598:	e250      	b.n	801ea3c <json_serialize_string+0x918>
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	d003      	beq.n	801e5a8 <json_serialize_string+0x484>
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	683a      	ldr	r2, [r7, #0]
 801e5a4:	4413      	add	r3, r2
 801e5a6:	603b      	str	r3, [r7, #0]
 801e5a8:	69ba      	ldr	r2, [r7, #24]
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	4413      	add	r3, r2
 801e5ae:	61bb      	str	r3, [r7, #24]
 801e5b0:	e225      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801e5b2:	494c      	ldr	r1, [pc, #304]	; (801e6e4 <json_serialize_string+0x5c0>)
 801e5b4:	6838      	ldr	r0, [r7, #0]
 801e5b6:	f000 fa7d 	bl	801eab4 <append_string>
 801e5ba:	60f8      	str	r0, [r7, #12]
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	da02      	bge.n	801e5c8 <json_serialize_string+0x4a4>
 801e5c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e5c6:	e239      	b.n	801ea3c <json_serialize_string+0x918>
 801e5c8:	683b      	ldr	r3, [r7, #0]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d003      	beq.n	801e5d6 <json_serialize_string+0x4b2>
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	683a      	ldr	r2, [r7, #0]
 801e5d2:	4413      	add	r3, r2
 801e5d4:	603b      	str	r3, [r7, #0]
 801e5d6:	69ba      	ldr	r2, [r7, #24]
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	4413      	add	r3, r2
 801e5dc:	61bb      	str	r3, [r7, #24]
 801e5de:	e20e      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801e5e0:	4941      	ldr	r1, [pc, #260]	; (801e6e8 <json_serialize_string+0x5c4>)
 801e5e2:	6838      	ldr	r0, [r7, #0]
 801e5e4:	f000 fa66 	bl	801eab4 <append_string>
 801e5e8:	60f8      	str	r0, [r7, #12]
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	da02      	bge.n	801e5f6 <json_serialize_string+0x4d2>
 801e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 801e5f4:	e222      	b.n	801ea3c <json_serialize_string+0x918>
 801e5f6:	683b      	ldr	r3, [r7, #0]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d003      	beq.n	801e604 <json_serialize_string+0x4e0>
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	683a      	ldr	r2, [r7, #0]
 801e600:	4413      	add	r3, r2
 801e602:	603b      	str	r3, [r7, #0]
 801e604:	69ba      	ldr	r2, [r7, #24]
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	4413      	add	r3, r2
 801e60a:	61bb      	str	r3, [r7, #24]
 801e60c:	e1f7      	b.n	801e9fe <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801e60e:	4937      	ldr	r1, [pc, #220]	; (801e6ec <json_serialize_string+0x5c8>)
 801e610:	6838      	ldr	r0, [r7, #0]
 801e612:	f000 fa4f 	bl	801eab4 <append_string>
 801e616:	60f8      	str	r0, [r7, #12]
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	da02      	bge.n	801e624 <json_serialize_string+0x500>
 801e61e:	f04f 33ff 	mov.w	r3, #4294967295
 801e622:	e20b      	b.n	801ea3c <json_serialize_string+0x918>
 801e624:	683b      	ldr	r3, [r7, #0]
 801e626:	2b00      	cmp	r3, #0
 801e628:	d003      	beq.n	801e632 <json_serialize_string+0x50e>
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	683a      	ldr	r2, [r7, #0]
 801e62e:	4413      	add	r3, r2
 801e630:	603b      	str	r3, [r7, #0]
 801e632:	69ba      	ldr	r2, [r7, #24]
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	4413      	add	r3, r2
 801e638:	61bb      	str	r3, [r7, #24]
 801e63a:	e1e0      	b.n	801e9fe <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801e63c:	492c      	ldr	r1, [pc, #176]	; (801e6f0 <json_serialize_string+0x5cc>)
 801e63e:	6838      	ldr	r0, [r7, #0]
 801e640:	f000 fa38 	bl	801eab4 <append_string>
 801e644:	60f8      	str	r0, [r7, #12]
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	da02      	bge.n	801e652 <json_serialize_string+0x52e>
 801e64c:	f04f 33ff 	mov.w	r3, #4294967295
 801e650:	e1f4      	b.n	801ea3c <json_serialize_string+0x918>
 801e652:	683b      	ldr	r3, [r7, #0]
 801e654:	2b00      	cmp	r3, #0
 801e656:	d003      	beq.n	801e660 <json_serialize_string+0x53c>
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	683a      	ldr	r2, [r7, #0]
 801e65c:	4413      	add	r3, r2
 801e65e:	603b      	str	r3, [r7, #0]
 801e660:	69ba      	ldr	r2, [r7, #24]
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	4413      	add	r3, r2
 801e666:	61bb      	str	r3, [r7, #24]
 801e668:	e1c9      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801e66a:	4922      	ldr	r1, [pc, #136]	; (801e6f4 <json_serialize_string+0x5d0>)
 801e66c:	6838      	ldr	r0, [r7, #0]
 801e66e:	f000 fa21 	bl	801eab4 <append_string>
 801e672:	60f8      	str	r0, [r7, #12]
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	2b00      	cmp	r3, #0
 801e678:	da02      	bge.n	801e680 <json_serialize_string+0x55c>
 801e67a:	f04f 33ff 	mov.w	r3, #4294967295
 801e67e:	e1dd      	b.n	801ea3c <json_serialize_string+0x918>
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d003      	beq.n	801e68e <json_serialize_string+0x56a>
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	683a      	ldr	r2, [r7, #0]
 801e68a:	4413      	add	r3, r2
 801e68c:	603b      	str	r3, [r7, #0]
 801e68e:	69ba      	ldr	r2, [r7, #24]
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	4413      	add	r3, r2
 801e694:	61bb      	str	r3, [r7, #24]
 801e696:	e1b2      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801e698:	4917      	ldr	r1, [pc, #92]	; (801e6f8 <json_serialize_string+0x5d4>)
 801e69a:	6838      	ldr	r0, [r7, #0]
 801e69c:	f000 fa0a 	bl	801eab4 <append_string>
 801e6a0:	60f8      	str	r0, [r7, #12]
 801e6a2:	68fb      	ldr	r3, [r7, #12]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	da02      	bge.n	801e6ae <json_serialize_string+0x58a>
 801e6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801e6ac:	e1c6      	b.n	801ea3c <json_serialize_string+0x918>
 801e6ae:	683b      	ldr	r3, [r7, #0]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d003      	beq.n	801e6bc <json_serialize_string+0x598>
 801e6b4:	68fb      	ldr	r3, [r7, #12]
 801e6b6:	683a      	ldr	r2, [r7, #0]
 801e6b8:	4413      	add	r3, r2
 801e6ba:	603b      	str	r3, [r7, #0]
 801e6bc:	69ba      	ldr	r2, [r7, #24]
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	4413      	add	r3, r2
 801e6c2:	61bb      	str	r3, [r7, #24]
 801e6c4:	e19b      	b.n	801e9fe <json_serialize_string+0x8da>
 801e6c6:	bf00      	nop
 801e6c8:	08023100 	.word	0x08023100
 801e6cc:	08023104 	.word	0x08023104
 801e6d0:	0802310c 	.word	0x0802310c
 801e6d4:	08023114 	.word	0x08023114
 801e6d8:	0802311c 	.word	0x0802311c
 801e6dc:	08023124 	.word	0x08023124
 801e6e0:	0802312c 	.word	0x0802312c
 801e6e4:	08023134 	.word	0x08023134
 801e6e8:	0802313c 	.word	0x0802313c
 801e6ec:	08023144 	.word	0x08023144
 801e6f0:	0802314c 	.word	0x0802314c
 801e6f4:	08023154 	.word	0x08023154
 801e6f8:	0802315c 	.word	0x0802315c
            case '\x11': APPEND_STRING("\\u0011"); break;
 801e6fc:	4995      	ldr	r1, [pc, #596]	; (801e954 <json_serialize_string+0x830>)
 801e6fe:	6838      	ldr	r0, [r7, #0]
 801e700:	f000 f9d8 	bl	801eab4 <append_string>
 801e704:	60f8      	str	r0, [r7, #12]
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	2b00      	cmp	r3, #0
 801e70a:	da02      	bge.n	801e712 <json_serialize_string+0x5ee>
 801e70c:	f04f 33ff 	mov.w	r3, #4294967295
 801e710:	e194      	b.n	801ea3c <json_serialize_string+0x918>
 801e712:	683b      	ldr	r3, [r7, #0]
 801e714:	2b00      	cmp	r3, #0
 801e716:	d003      	beq.n	801e720 <json_serialize_string+0x5fc>
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	683a      	ldr	r2, [r7, #0]
 801e71c:	4413      	add	r3, r2
 801e71e:	603b      	str	r3, [r7, #0]
 801e720:	69ba      	ldr	r2, [r7, #24]
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	4413      	add	r3, r2
 801e726:	61bb      	str	r3, [r7, #24]
 801e728:	e169      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801e72a:	498b      	ldr	r1, [pc, #556]	; (801e958 <json_serialize_string+0x834>)
 801e72c:	6838      	ldr	r0, [r7, #0]
 801e72e:	f000 f9c1 	bl	801eab4 <append_string>
 801e732:	60f8      	str	r0, [r7, #12]
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	2b00      	cmp	r3, #0
 801e738:	da02      	bge.n	801e740 <json_serialize_string+0x61c>
 801e73a:	f04f 33ff 	mov.w	r3, #4294967295
 801e73e:	e17d      	b.n	801ea3c <json_serialize_string+0x918>
 801e740:	683b      	ldr	r3, [r7, #0]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d003      	beq.n	801e74e <json_serialize_string+0x62a>
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	683a      	ldr	r2, [r7, #0]
 801e74a:	4413      	add	r3, r2
 801e74c:	603b      	str	r3, [r7, #0]
 801e74e:	69ba      	ldr	r2, [r7, #24]
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	4413      	add	r3, r2
 801e754:	61bb      	str	r3, [r7, #24]
 801e756:	e152      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801e758:	4980      	ldr	r1, [pc, #512]	; (801e95c <json_serialize_string+0x838>)
 801e75a:	6838      	ldr	r0, [r7, #0]
 801e75c:	f000 f9aa 	bl	801eab4 <append_string>
 801e760:	60f8      	str	r0, [r7, #12]
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	2b00      	cmp	r3, #0
 801e766:	da02      	bge.n	801e76e <json_serialize_string+0x64a>
 801e768:	f04f 33ff 	mov.w	r3, #4294967295
 801e76c:	e166      	b.n	801ea3c <json_serialize_string+0x918>
 801e76e:	683b      	ldr	r3, [r7, #0]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d003      	beq.n	801e77c <json_serialize_string+0x658>
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	683a      	ldr	r2, [r7, #0]
 801e778:	4413      	add	r3, r2
 801e77a:	603b      	str	r3, [r7, #0]
 801e77c:	69ba      	ldr	r2, [r7, #24]
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	4413      	add	r3, r2
 801e782:	61bb      	str	r3, [r7, #24]
 801e784:	e13b      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801e786:	4976      	ldr	r1, [pc, #472]	; (801e960 <json_serialize_string+0x83c>)
 801e788:	6838      	ldr	r0, [r7, #0]
 801e78a:	f000 f993 	bl	801eab4 <append_string>
 801e78e:	60f8      	str	r0, [r7, #12]
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	2b00      	cmp	r3, #0
 801e794:	da02      	bge.n	801e79c <json_serialize_string+0x678>
 801e796:	f04f 33ff 	mov.w	r3, #4294967295
 801e79a:	e14f      	b.n	801ea3c <json_serialize_string+0x918>
 801e79c:	683b      	ldr	r3, [r7, #0]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d003      	beq.n	801e7aa <json_serialize_string+0x686>
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	683a      	ldr	r2, [r7, #0]
 801e7a6:	4413      	add	r3, r2
 801e7a8:	603b      	str	r3, [r7, #0]
 801e7aa:	69ba      	ldr	r2, [r7, #24]
 801e7ac:	68fb      	ldr	r3, [r7, #12]
 801e7ae:	4413      	add	r3, r2
 801e7b0:	61bb      	str	r3, [r7, #24]
 801e7b2:	e124      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801e7b4:	496b      	ldr	r1, [pc, #428]	; (801e964 <json_serialize_string+0x840>)
 801e7b6:	6838      	ldr	r0, [r7, #0]
 801e7b8:	f000 f97c 	bl	801eab4 <append_string>
 801e7bc:	60f8      	str	r0, [r7, #12]
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	da02      	bge.n	801e7ca <json_serialize_string+0x6a6>
 801e7c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e7c8:	e138      	b.n	801ea3c <json_serialize_string+0x918>
 801e7ca:	683b      	ldr	r3, [r7, #0]
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d003      	beq.n	801e7d8 <json_serialize_string+0x6b4>
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	683a      	ldr	r2, [r7, #0]
 801e7d4:	4413      	add	r3, r2
 801e7d6:	603b      	str	r3, [r7, #0]
 801e7d8:	69ba      	ldr	r2, [r7, #24]
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	4413      	add	r3, r2
 801e7de:	61bb      	str	r3, [r7, #24]
 801e7e0:	e10d      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801e7e2:	4961      	ldr	r1, [pc, #388]	; (801e968 <json_serialize_string+0x844>)
 801e7e4:	6838      	ldr	r0, [r7, #0]
 801e7e6:	f000 f965 	bl	801eab4 <append_string>
 801e7ea:	60f8      	str	r0, [r7, #12]
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	da02      	bge.n	801e7f8 <json_serialize_string+0x6d4>
 801e7f2:	f04f 33ff 	mov.w	r3, #4294967295
 801e7f6:	e121      	b.n	801ea3c <json_serialize_string+0x918>
 801e7f8:	683b      	ldr	r3, [r7, #0]
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d003      	beq.n	801e806 <json_serialize_string+0x6e2>
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	683a      	ldr	r2, [r7, #0]
 801e802:	4413      	add	r3, r2
 801e804:	603b      	str	r3, [r7, #0]
 801e806:	69ba      	ldr	r2, [r7, #24]
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	4413      	add	r3, r2
 801e80c:	61bb      	str	r3, [r7, #24]
 801e80e:	e0f6      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801e810:	4956      	ldr	r1, [pc, #344]	; (801e96c <json_serialize_string+0x848>)
 801e812:	6838      	ldr	r0, [r7, #0]
 801e814:	f000 f94e 	bl	801eab4 <append_string>
 801e818:	60f8      	str	r0, [r7, #12]
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	da02      	bge.n	801e826 <json_serialize_string+0x702>
 801e820:	f04f 33ff 	mov.w	r3, #4294967295
 801e824:	e10a      	b.n	801ea3c <json_serialize_string+0x918>
 801e826:	683b      	ldr	r3, [r7, #0]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d003      	beq.n	801e834 <json_serialize_string+0x710>
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	683a      	ldr	r2, [r7, #0]
 801e830:	4413      	add	r3, r2
 801e832:	603b      	str	r3, [r7, #0]
 801e834:	69ba      	ldr	r2, [r7, #24]
 801e836:	68fb      	ldr	r3, [r7, #12]
 801e838:	4413      	add	r3, r2
 801e83a:	61bb      	str	r3, [r7, #24]
 801e83c:	e0df      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801e83e:	494c      	ldr	r1, [pc, #304]	; (801e970 <json_serialize_string+0x84c>)
 801e840:	6838      	ldr	r0, [r7, #0]
 801e842:	f000 f937 	bl	801eab4 <append_string>
 801e846:	60f8      	str	r0, [r7, #12]
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	da02      	bge.n	801e854 <json_serialize_string+0x730>
 801e84e:	f04f 33ff 	mov.w	r3, #4294967295
 801e852:	e0f3      	b.n	801ea3c <json_serialize_string+0x918>
 801e854:	683b      	ldr	r3, [r7, #0]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d003      	beq.n	801e862 <json_serialize_string+0x73e>
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	683a      	ldr	r2, [r7, #0]
 801e85e:	4413      	add	r3, r2
 801e860:	603b      	str	r3, [r7, #0]
 801e862:	69ba      	ldr	r2, [r7, #24]
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	4413      	add	r3, r2
 801e868:	61bb      	str	r3, [r7, #24]
 801e86a:	e0c8      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801e86c:	4941      	ldr	r1, [pc, #260]	; (801e974 <json_serialize_string+0x850>)
 801e86e:	6838      	ldr	r0, [r7, #0]
 801e870:	f000 f920 	bl	801eab4 <append_string>
 801e874:	60f8      	str	r0, [r7, #12]
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	da02      	bge.n	801e882 <json_serialize_string+0x75e>
 801e87c:	f04f 33ff 	mov.w	r3, #4294967295
 801e880:	e0dc      	b.n	801ea3c <json_serialize_string+0x918>
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d003      	beq.n	801e890 <json_serialize_string+0x76c>
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	683a      	ldr	r2, [r7, #0]
 801e88c:	4413      	add	r3, r2
 801e88e:	603b      	str	r3, [r7, #0]
 801e890:	69ba      	ldr	r2, [r7, #24]
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	4413      	add	r3, r2
 801e896:	61bb      	str	r3, [r7, #24]
 801e898:	e0b1      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801e89a:	4937      	ldr	r1, [pc, #220]	; (801e978 <json_serialize_string+0x854>)
 801e89c:	6838      	ldr	r0, [r7, #0]
 801e89e:	f000 f909 	bl	801eab4 <append_string>
 801e8a2:	60f8      	str	r0, [r7, #12]
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	da02      	bge.n	801e8b0 <json_serialize_string+0x78c>
 801e8aa:	f04f 33ff 	mov.w	r3, #4294967295
 801e8ae:	e0c5      	b.n	801ea3c <json_serialize_string+0x918>
 801e8b0:	683b      	ldr	r3, [r7, #0]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d003      	beq.n	801e8be <json_serialize_string+0x79a>
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	683a      	ldr	r2, [r7, #0]
 801e8ba:	4413      	add	r3, r2
 801e8bc:	603b      	str	r3, [r7, #0]
 801e8be:	69ba      	ldr	r2, [r7, #24]
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	4413      	add	r3, r2
 801e8c4:	61bb      	str	r3, [r7, #24]
 801e8c6:	e09a      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801e8c8:	492c      	ldr	r1, [pc, #176]	; (801e97c <json_serialize_string+0x858>)
 801e8ca:	6838      	ldr	r0, [r7, #0]
 801e8cc:	f000 f8f2 	bl	801eab4 <append_string>
 801e8d0:	60f8      	str	r0, [r7, #12]
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	da02      	bge.n	801e8de <json_serialize_string+0x7ba>
 801e8d8:	f04f 33ff 	mov.w	r3, #4294967295
 801e8dc:	e0ae      	b.n	801ea3c <json_serialize_string+0x918>
 801e8de:	683b      	ldr	r3, [r7, #0]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d003      	beq.n	801e8ec <json_serialize_string+0x7c8>
 801e8e4:	68fb      	ldr	r3, [r7, #12]
 801e8e6:	683a      	ldr	r2, [r7, #0]
 801e8e8:	4413      	add	r3, r2
 801e8ea:	603b      	str	r3, [r7, #0]
 801e8ec:	69ba      	ldr	r2, [r7, #24]
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	4413      	add	r3, r2
 801e8f2:	61bb      	str	r3, [r7, #24]
 801e8f4:	e083      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801e8f6:	4922      	ldr	r1, [pc, #136]	; (801e980 <json_serialize_string+0x85c>)
 801e8f8:	6838      	ldr	r0, [r7, #0]
 801e8fa:	f000 f8db 	bl	801eab4 <append_string>
 801e8fe:	60f8      	str	r0, [r7, #12]
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	2b00      	cmp	r3, #0
 801e904:	da02      	bge.n	801e90c <json_serialize_string+0x7e8>
 801e906:	f04f 33ff 	mov.w	r3, #4294967295
 801e90a:	e097      	b.n	801ea3c <json_serialize_string+0x918>
 801e90c:	683b      	ldr	r3, [r7, #0]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d003      	beq.n	801e91a <json_serialize_string+0x7f6>
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	683a      	ldr	r2, [r7, #0]
 801e916:	4413      	add	r3, r2
 801e918:	603b      	str	r3, [r7, #0]
 801e91a:	69ba      	ldr	r2, [r7, #24]
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	4413      	add	r3, r2
 801e920:	61bb      	str	r3, [r7, #24]
 801e922:	e06c      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801e924:	4917      	ldr	r1, [pc, #92]	; (801e984 <json_serialize_string+0x860>)
 801e926:	6838      	ldr	r0, [r7, #0]
 801e928:	f000 f8c4 	bl	801eab4 <append_string>
 801e92c:	60f8      	str	r0, [r7, #12]
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	2b00      	cmp	r3, #0
 801e932:	da02      	bge.n	801e93a <json_serialize_string+0x816>
 801e934:	f04f 33ff 	mov.w	r3, #4294967295
 801e938:	e080      	b.n	801ea3c <json_serialize_string+0x918>
 801e93a:	683b      	ldr	r3, [r7, #0]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d003      	beq.n	801e948 <json_serialize_string+0x824>
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	683a      	ldr	r2, [r7, #0]
 801e944:	4413      	add	r3, r2
 801e946:	603b      	str	r3, [r7, #0]
 801e948:	69ba      	ldr	r2, [r7, #24]
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	4413      	add	r3, r2
 801e94e:	61bb      	str	r3, [r7, #24]
 801e950:	e055      	b.n	801e9fe <json_serialize_string+0x8da>
 801e952:	bf00      	nop
 801e954:	08023164 	.word	0x08023164
 801e958:	0802316c 	.word	0x0802316c
 801e95c:	08023174 	.word	0x08023174
 801e960:	0802317c 	.word	0x0802317c
 801e964:	08023184 	.word	0x08023184
 801e968:	0802318c 	.word	0x0802318c
 801e96c:	08023194 	.word	0x08023194
 801e970:	0802319c 	.word	0x0802319c
 801e974:	080231a4 	.word	0x080231a4
 801e978:	080231ac 	.word	0x080231ac
 801e97c:	080231b4 	.word	0x080231b4
 801e980:	080231bc 	.word	0x080231bc
 801e984:	080231c4 	.word	0x080231c4
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801e988:	492e      	ldr	r1, [pc, #184]	; (801ea44 <json_serialize_string+0x920>)
 801e98a:	6838      	ldr	r0, [r7, #0]
 801e98c:	f000 f892 	bl	801eab4 <append_string>
 801e990:	60f8      	str	r0, [r7, #12]
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	2b00      	cmp	r3, #0
 801e996:	da02      	bge.n	801e99e <json_serialize_string+0x87a>
 801e998:	f04f 33ff 	mov.w	r3, #4294967295
 801e99c:	e04e      	b.n	801ea3c <json_serialize_string+0x918>
 801e99e:	683b      	ldr	r3, [r7, #0]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d003      	beq.n	801e9ac <json_serialize_string+0x888>
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	683a      	ldr	r2, [r7, #0]
 801e9a8:	4413      	add	r3, r2
 801e9aa:	603b      	str	r3, [r7, #0]
 801e9ac:	69ba      	ldr	r2, [r7, #24]
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	4413      	add	r3, r2
 801e9b2:	61bb      	str	r3, [r7, #24]
 801e9b4:	e023      	b.n	801e9fe <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801e9b6:	4924      	ldr	r1, [pc, #144]	; (801ea48 <json_serialize_string+0x924>)
 801e9b8:	6838      	ldr	r0, [r7, #0]
 801e9ba:	f000 f87b 	bl	801eab4 <append_string>
 801e9be:	60f8      	str	r0, [r7, #12]
 801e9c0:	68fb      	ldr	r3, [r7, #12]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	da02      	bge.n	801e9cc <json_serialize_string+0x8a8>
 801e9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801e9ca:	e037      	b.n	801ea3c <json_serialize_string+0x918>
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d003      	beq.n	801e9da <json_serialize_string+0x8b6>
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	683a      	ldr	r2, [r7, #0]
 801e9d6:	4413      	add	r3, r2
 801e9d8:	603b      	str	r3, [r7, #0]
 801e9da:	69ba      	ldr	r2, [r7, #24]
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	4413      	add	r3, r2
 801e9e0:	61bb      	str	r3, [r7, #24]
 801e9e2:	e00c      	b.n	801e9fe <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d005      	beq.n	801e9f6 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801e9ea:	683b      	ldr	r3, [r7, #0]
 801e9ec:	7cfa      	ldrb	r2, [r7, #19]
 801e9ee:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801e9f0:	683b      	ldr	r3, [r7, #0]
 801e9f2:	3301      	adds	r3, #1
 801e9f4:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801e9f6:	69bb      	ldr	r3, [r7, #24]
 801e9f8:	3301      	adds	r3, #1
 801e9fa:	61bb      	str	r3, [r7, #24]
                break;
 801e9fc:	bf00      	nop
    for (i = 0; i < len; i++) {
 801e9fe:	69fb      	ldr	r3, [r7, #28]
 801ea00:	3301      	adds	r3, #1
 801ea02:	61fb      	str	r3, [r7, #28]
 801ea04:	69fa      	ldr	r2, [r7, #28]
 801ea06:	697b      	ldr	r3, [r7, #20]
 801ea08:	429a      	cmp	r2, r3
 801ea0a:	f4ff abb8 	bcc.w	801e17e <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801ea0e:	490f      	ldr	r1, [pc, #60]	; (801ea4c <json_serialize_string+0x928>)
 801ea10:	6838      	ldr	r0, [r7, #0]
 801ea12:	f000 f84f 	bl	801eab4 <append_string>
 801ea16:	60f8      	str	r0, [r7, #12]
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	da02      	bge.n	801ea24 <json_serialize_string+0x900>
 801ea1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ea22:	e00b      	b.n	801ea3c <json_serialize_string+0x918>
 801ea24:	683b      	ldr	r3, [r7, #0]
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d003      	beq.n	801ea32 <json_serialize_string+0x90e>
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	683a      	ldr	r2, [r7, #0]
 801ea2e:	4413      	add	r3, r2
 801ea30:	603b      	str	r3, [r7, #0]
 801ea32:	69ba      	ldr	r2, [r7, #24]
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	4413      	add	r3, r2
 801ea38:	61bb      	str	r3, [r7, #24]
    return written_total;
 801ea3a:	69bb      	ldr	r3, [r7, #24]
}
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	3720      	adds	r7, #32
 801ea40:	46bd      	mov	sp, r7
 801ea42:	bd80      	pop	{r7, pc}
 801ea44:	080231cc 	.word	0x080231cc
 801ea48:	080231d4 	.word	0x080231d4
 801ea4c:	080230e0 	.word	0x080230e0

0801ea50 <append_indent>:

static int append_indent(char *buf, int level) {
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b086      	sub	sp, #24
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
 801ea58:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801ea5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ea5e:	60fb      	str	r3, [r7, #12]
 801ea60:	2300      	movs	r3, #0
 801ea62:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ea64:	2300      	movs	r3, #0
 801ea66:	617b      	str	r3, [r7, #20]
 801ea68:	e018      	b.n	801ea9c <append_indent+0x4c>
        APPEND_STRING("    ");
 801ea6a:	4911      	ldr	r1, [pc, #68]	; (801eab0 <append_indent+0x60>)
 801ea6c:	6878      	ldr	r0, [r7, #4]
 801ea6e:	f000 f821 	bl	801eab4 <append_string>
 801ea72:	60f8      	str	r0, [r7, #12]
 801ea74:	68fb      	ldr	r3, [r7, #12]
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	da02      	bge.n	801ea80 <append_indent+0x30>
 801ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ea7e:	e012      	b.n	801eaa6 <append_indent+0x56>
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d003      	beq.n	801ea8e <append_indent+0x3e>
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	687a      	ldr	r2, [r7, #4]
 801ea8a:	4413      	add	r3, r2
 801ea8c:	607b      	str	r3, [r7, #4]
 801ea8e:	693a      	ldr	r2, [r7, #16]
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	4413      	add	r3, r2
 801ea94:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ea96:	697b      	ldr	r3, [r7, #20]
 801ea98:	3301      	adds	r3, #1
 801ea9a:	617b      	str	r3, [r7, #20]
 801ea9c:	697a      	ldr	r2, [r7, #20]
 801ea9e:	683b      	ldr	r3, [r7, #0]
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	dbe2      	blt.n	801ea6a <append_indent+0x1a>
    }
    return written_total;
 801eaa4:	693b      	ldr	r3, [r7, #16]
}
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	3718      	adds	r7, #24
 801eaaa:	46bd      	mov	sp, r7
 801eaac:	bd80      	pop	{r7, pc}
 801eaae:	bf00      	nop
 801eab0:	080231dc 	.word	0x080231dc

0801eab4 <append_string>:

static int append_string(char *buf, const char *string) {
 801eab4:	b580      	push	{r7, lr}
 801eab6:	b082      	sub	sp, #8
 801eab8:	af00      	add	r7, sp, #0
 801eaba:	6078      	str	r0, [r7, #4]
 801eabc:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d104      	bne.n	801eace <append_string+0x1a>
        return (int)strlen(string);
 801eac4:	6838      	ldr	r0, [r7, #0]
 801eac6:	f7e1 fba5 	bl	8000214 <strlen>
 801eaca:	4603      	mov	r3, r0
 801eacc:	e005      	b.n	801eada <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801eace:	683a      	ldr	r2, [r7, #0]
 801ead0:	4904      	ldr	r1, [pc, #16]	; (801eae4 <append_string+0x30>)
 801ead2:	6878      	ldr	r0, [r7, #4]
 801ead4:	f001 f9f8 	bl	801fec8 <siprintf>
 801ead8:	4603      	mov	r3, r0
}
 801eada:	4618      	mov	r0, r3
 801eadc:	3708      	adds	r7, #8
 801eade:	46bd      	mov	sp, r7
 801eae0:	bd80      	pop	{r7, pc}
 801eae2:	bf00      	nop
 801eae4:	080231e4 	.word	0x080231e4

0801eae8 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801eae8:	b580      	push	{r7, lr}
 801eaea:	b082      	sub	sp, #8
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d101      	bne.n	801eafa <json_parse_string+0x12>
        return NULL;
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	e016      	b.n	801eb28 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	781b      	ldrb	r3, [r3, #0]
 801eafe:	2bef      	cmp	r3, #239	; 0xef
 801eb00:	d10c      	bne.n	801eb1c <json_parse_string+0x34>
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	3301      	adds	r3, #1
 801eb06:	781b      	ldrb	r3, [r3, #0]
 801eb08:	2bbb      	cmp	r3, #187	; 0xbb
 801eb0a:	d107      	bne.n	801eb1c <json_parse_string+0x34>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	3302      	adds	r3, #2
 801eb10:	781b      	ldrb	r3, [r3, #0]
 801eb12:	2bbf      	cmp	r3, #191	; 0xbf
 801eb14:	d102      	bne.n	801eb1c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	3303      	adds	r3, #3
 801eb1a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801eb1c:	1d3b      	adds	r3, r7, #4
 801eb1e:	2100      	movs	r1, #0
 801eb20:	4618      	mov	r0, r3
 801eb22:	f7fe fcc1 	bl	801d4a8 <parse_value>
 801eb26:	4603      	mov	r3, r0
}
 801eb28:	4618      	mov	r0, r3
 801eb2a:	3708      	adds	r7, #8
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	bd80      	pop	{r7, pc}

0801eb30 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801eb30:	b580      	push	{r7, lr}
 801eb32:	b082      	sub	sp, #8
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
 801eb38:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d002      	beq.n	801eb46 <json_object_get_value+0x16>
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d101      	bne.n	801eb4a <json_object_get_value+0x1a>
        return NULL;
 801eb46:	2300      	movs	r3, #0
 801eb48:	e009      	b.n	801eb5e <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801eb4a:	6838      	ldr	r0, [r7, #0]
 801eb4c:	f7e1 fb62 	bl	8000214 <strlen>
 801eb50:	4603      	mov	r3, r0
 801eb52:	461a      	mov	r2, r3
 801eb54:	6839      	ldr	r1, [r7, #0]
 801eb56:	6878      	ldr	r0, [r7, #4]
 801eb58:	f7fe f864 	bl	801cc24 <json_object_getn_value>
 801eb5c:	4603      	mov	r3, r0
}
 801eb5e:	4618      	mov	r0, r3
 801eb60:	3708      	adds	r7, #8
 801eb62:	46bd      	mov	sp, r7
 801eb64:	bd80      	pop	{r7, pc}

0801eb66 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801eb66:	b580      	push	{r7, lr}
 801eb68:	b084      	sub	sp, #16
 801eb6a:	af00      	add	r7, sp, #0
 801eb6c:	6078      	str	r0, [r7, #4]
 801eb6e:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801eb70:	212e      	movs	r1, #46	; 0x2e
 801eb72:	6838      	ldr	r0, [r7, #0]
 801eb74:	f001 fa0b 	bl	801ff8e <strchr>
 801eb78:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801eb7a:	68fb      	ldr	r3, [r7, #12]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d105      	bne.n	801eb8c <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801eb80:	6839      	ldr	r1, [r7, #0]
 801eb82:	6878      	ldr	r0, [r7, #4]
 801eb84:	f7ff ffd4 	bl	801eb30 <json_object_get_value>
 801eb88:	4603      	mov	r3, r0
 801eb8a:	e013      	b.n	801ebb4 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801eb8c:	68fa      	ldr	r2, [r7, #12]
 801eb8e:	683b      	ldr	r3, [r7, #0]
 801eb90:	1ad3      	subs	r3, r2, r3
 801eb92:	461a      	mov	r2, r3
 801eb94:	6839      	ldr	r1, [r7, #0]
 801eb96:	6878      	ldr	r0, [r7, #4]
 801eb98:	f7fe f844 	bl	801cc24 <json_object_getn_value>
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f000 f901 	bl	801eda6 <json_value_get_object>
 801eba4:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	3301      	adds	r3, #1
 801ebaa:	4619      	mov	r1, r3
 801ebac:	6878      	ldr	r0, [r7, #4]
 801ebae:	f7ff ffda 	bl	801eb66 <json_object_dotget_value>
 801ebb2:	4603      	mov	r3, r0
}
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	3710      	adds	r7, #16
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	bd80      	pop	{r7, pc}

0801ebbc <json_object_dotget_string>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 801ebbc:	b580      	push	{r7, lr}
 801ebbe:	b082      	sub	sp, #8
 801ebc0:	af00      	add	r7, sp, #0
 801ebc2:	6078      	str	r0, [r7, #4]
 801ebc4:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_dotget_value(object, name));
 801ebc6:	6839      	ldr	r1, [r7, #0]
 801ebc8:	6878      	ldr	r0, [r7, #4]
 801ebca:	f7ff ffcc 	bl	801eb66 <json_object_dotget_value>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f000 f90c 	bl	801edee <json_value_get_string>
 801ebd6:	4603      	mov	r3, r0
}
 801ebd8:	4618      	mov	r0, r3
 801ebda:	3708      	adds	r7, #8
 801ebdc:	46bd      	mov	sp, r7
 801ebde:	bd80      	pop	{r7, pc}

0801ebe0 <json_object_dotget_number>:

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801ebe0:	b580      	push	{r7, lr}
 801ebe2:	b082      	sub	sp, #8
 801ebe4:	af00      	add	r7, sp, #0
 801ebe6:	6078      	str	r0, [r7, #4]
 801ebe8:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801ebea:	6839      	ldr	r1, [r7, #0]
 801ebec:	6878      	ldr	r0, [r7, #4]
 801ebee:	f7ff ffba 	bl	801eb66 <json_object_dotget_value>
 801ebf2:	4603      	mov	r3, r0
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f000 f90c 	bl	801ee12 <json_value_get_number>
 801ebfa:	eeb0 7a40 	vmov.f32	s14, s0
 801ebfe:	eef0 7a60 	vmov.f32	s15, s1
}
 801ec02:	eeb0 0a47 	vmov.f32	s0, s14
 801ec06:	eef0 0a67 	vmov.f32	s1, s15
 801ec0a:	3708      	adds	r7, #8
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	bd80      	pop	{r7, pc}

0801ec10 <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801ec10:	b580      	push	{r7, lr}
 801ec12:	b082      	sub	sp, #8
 801ec14:	af00      	add	r7, sp, #0
 801ec16:	6078      	str	r0, [r7, #4]
 801ec18:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801ec1a:	6839      	ldr	r1, [r7, #0]
 801ec1c:	6878      	ldr	r0, [r7, #4]
 801ec1e:	f7ff ffa2 	bl	801eb66 <json_object_dotget_value>
 801ec22:	4603      	mov	r3, r0
 801ec24:	4618      	mov	r0, r3
 801ec26:	f000 f8d0 	bl	801edca <json_value_get_array>
 801ec2a:	4603      	mov	r3, r0
}
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	3708      	adds	r7, #8
 801ec30:	46bd      	mov	sp, r7
 801ec32:	bd80      	pop	{r7, pc}

0801ec34 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b082      	sub	sp, #8
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
 801ec3c:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801ec3e:	6839      	ldr	r1, [r7, #0]
 801ec40:	6878      	ldr	r0, [r7, #4]
 801ec42:	f7ff ff90 	bl	801eb66 <json_object_dotget_value>
 801ec46:	4603      	mov	r3, r0
 801ec48:	4618      	mov	r0, r3
 801ec4a:	f000 f8fd 	bl	801ee48 <json_value_get_boolean>
 801ec4e:	4603      	mov	r3, r0
}
 801ec50:	4618      	mov	r0, r3
 801ec52:	3708      	adds	r7, #8
 801ec54:	46bd      	mov	sp, r7
 801ec56:	bd80      	pop	{r7, pc}

0801ec58 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801ec58:	b480      	push	{r7}
 801ec5a:	b083      	sub	sp, #12
 801ec5c:	af00      	add	r7, sp, #0
 801ec5e:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d002      	beq.n	801ec6c <json_object_get_count+0x14>
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	68db      	ldr	r3, [r3, #12]
 801ec6a:	e000      	b.n	801ec6e <json_object_get_count+0x16>
 801ec6c:	2300      	movs	r3, #0
}
 801ec6e:	4618      	mov	r0, r3
 801ec70:	370c      	adds	r7, #12
 801ec72:	46bd      	mov	sp, r7
 801ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec78:	4770      	bx	lr

0801ec7a <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801ec7a:	b580      	push	{r7, lr}
 801ec7c:	b082      	sub	sp, #8
 801ec7e:	af00      	add	r7, sp, #0
 801ec80:	6078      	str	r0, [r7, #4]
 801ec82:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d006      	beq.n	801ec98 <json_object_get_name+0x1e>
 801ec8a:	6878      	ldr	r0, [r7, #4]
 801ec8c:	f7ff ffe4 	bl	801ec58 <json_object_get_count>
 801ec90:	4602      	mov	r2, r0
 801ec92:	683b      	ldr	r3, [r7, #0]
 801ec94:	4293      	cmp	r3, r2
 801ec96:	d301      	bcc.n	801ec9c <json_object_get_name+0x22>
        return NULL;
 801ec98:	2300      	movs	r3, #0
 801ec9a:	e005      	b.n	801eca8 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	685a      	ldr	r2, [r3, #4]
 801eca0:	683b      	ldr	r3, [r7, #0]
 801eca2:	009b      	lsls	r3, r3, #2
 801eca4:	4413      	add	r3, r2
 801eca6:	681b      	ldr	r3, [r3, #0]
}
 801eca8:	4618      	mov	r0, r3
 801ecaa:	3708      	adds	r7, #8
 801ecac:	46bd      	mov	sp, r7
 801ecae:	bd80      	pop	{r7, pc}

0801ecb0 <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801ecb0:	b480      	push	{r7}
 801ecb2:	b083      	sub	sp, #12
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
}
 801ecbc:	4618      	mov	r0, r3
 801ecbe:	370c      	adds	r7, #12
 801ecc0:	46bd      	mov	sp, r7
 801ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecc6:	4770      	bx	lr

0801ecc8 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801ecc8:	b580      	push	{r7, lr}
 801ecca:	b082      	sub	sp, #8
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
 801ecd0:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801ecd2:	6839      	ldr	r1, [r7, #0]
 801ecd4:	6878      	ldr	r0, [r7, #4]
 801ecd6:	f7ff ff46 	bl	801eb66 <json_object_dotget_value>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	bf14      	ite	ne
 801ece0:	2301      	movne	r3, #1
 801ece2:	2300      	moveq	r3, #0
 801ece4:	b2db      	uxtb	r3, r3
}
 801ece6:	4618      	mov	r0, r3
 801ece8:	3708      	adds	r7, #8
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}

0801ecee <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801ecee:	b580      	push	{r7, lr}
 801ecf0:	b082      	sub	sp, #8
 801ecf2:	af00      	add	r7, sp, #0
 801ecf4:	6078      	str	r0, [r7, #4]
 801ecf6:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d006      	beq.n	801ed0c <json_array_get_value+0x1e>
 801ecfe:	6878      	ldr	r0, [r7, #4]
 801ed00:	f000 f822 	bl	801ed48 <json_array_get_count>
 801ed04:	4602      	mov	r2, r0
 801ed06:	683b      	ldr	r3, [r7, #0]
 801ed08:	4293      	cmp	r3, r2
 801ed0a:	d301      	bcc.n	801ed10 <json_array_get_value+0x22>
        return NULL;
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	e005      	b.n	801ed1c <json_array_get_value+0x2e>
    }
    return array->items[index];
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	685a      	ldr	r2, [r3, #4]
 801ed14:	683b      	ldr	r3, [r7, #0]
 801ed16:	009b      	lsls	r3, r3, #2
 801ed18:	4413      	add	r3, r2
 801ed1a:	681b      	ldr	r3, [r3, #0]
}
 801ed1c:	4618      	mov	r0, r3
 801ed1e:	3708      	adds	r7, #8
 801ed20:	46bd      	mov	sp, r7
 801ed22:	bd80      	pop	{r7, pc}

0801ed24 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801ed24:	b580      	push	{r7, lr}
 801ed26:	b082      	sub	sp, #8
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	6078      	str	r0, [r7, #4]
 801ed2c:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801ed2e:	6839      	ldr	r1, [r7, #0]
 801ed30:	6878      	ldr	r0, [r7, #4]
 801ed32:	f7ff ffdc 	bl	801ecee <json_array_get_value>
 801ed36:	4603      	mov	r3, r0
 801ed38:	4618      	mov	r0, r3
 801ed3a:	f000 f834 	bl	801eda6 <json_value_get_object>
 801ed3e:	4603      	mov	r3, r0
}
 801ed40:	4618      	mov	r0, r3
 801ed42:	3708      	adds	r7, #8
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bd80      	pop	{r7, pc}

0801ed48 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801ed48:	b480      	push	{r7}
 801ed4a:	b083      	sub	sp, #12
 801ed4c:	af00      	add	r7, sp, #0
 801ed4e:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d002      	beq.n	801ed5c <json_array_get_count+0x14>
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	689b      	ldr	r3, [r3, #8]
 801ed5a:	e000      	b.n	801ed5e <json_array_get_count+0x16>
 801ed5c:	2300      	movs	r3, #0
}
 801ed5e:	4618      	mov	r0, r3
 801ed60:	370c      	adds	r7, #12
 801ed62:	46bd      	mov	sp, r7
 801ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed68:	4770      	bx	lr

0801ed6a <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801ed6a:	b480      	push	{r7}
 801ed6c:	b083      	sub	sp, #12
 801ed6e:	af00      	add	r7, sp, #0
 801ed70:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
}
 801ed76:	4618      	mov	r0, r3
 801ed78:	370c      	adds	r7, #12
 801ed7a:	46bd      	mov	sp, r7
 801ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed80:	4770      	bx	lr

0801ed82 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801ed82:	b480      	push	{r7}
 801ed84:	b083      	sub	sp, #12
 801ed86:	af00      	add	r7, sp, #0
 801ed88:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d002      	beq.n	801ed96 <json_value_get_type+0x14>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	685b      	ldr	r3, [r3, #4]
 801ed94:	e001      	b.n	801ed9a <json_value_get_type+0x18>
 801ed96:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ed9a:	4618      	mov	r0, r3
 801ed9c:	370c      	adds	r7, #12
 801ed9e:	46bd      	mov	sp, r7
 801eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda4:	4770      	bx	lr

0801eda6 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801eda6:	b580      	push	{r7, lr}
 801eda8:	b082      	sub	sp, #8
 801edaa:	af00      	add	r7, sp, #0
 801edac:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801edae:	6878      	ldr	r0, [r7, #4]
 801edb0:	f7ff ffe7 	bl	801ed82 <json_value_get_type>
 801edb4:	4603      	mov	r3, r0
 801edb6:	2b04      	cmp	r3, #4
 801edb8:	d102      	bne.n	801edc0 <json_value_get_object+0x1a>
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	689b      	ldr	r3, [r3, #8]
 801edbe:	e000      	b.n	801edc2 <json_value_get_object+0x1c>
 801edc0:	2300      	movs	r3, #0
}
 801edc2:	4618      	mov	r0, r3
 801edc4:	3708      	adds	r7, #8
 801edc6:	46bd      	mov	sp, r7
 801edc8:	bd80      	pop	{r7, pc}

0801edca <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801edca:	b580      	push	{r7, lr}
 801edcc:	b082      	sub	sp, #8
 801edce:	af00      	add	r7, sp, #0
 801edd0:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801edd2:	6878      	ldr	r0, [r7, #4]
 801edd4:	f7ff ffd5 	bl	801ed82 <json_value_get_type>
 801edd8:	4603      	mov	r3, r0
 801edda:	2b05      	cmp	r3, #5
 801eddc:	d102      	bne.n	801ede4 <json_value_get_array+0x1a>
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	689b      	ldr	r3, [r3, #8]
 801ede2:	e000      	b.n	801ede6 <json_value_get_array+0x1c>
 801ede4:	2300      	movs	r3, #0
}
 801ede6:	4618      	mov	r0, r3
 801ede8:	3708      	adds	r7, #8
 801edea:	46bd      	mov	sp, r7
 801edec:	bd80      	pop	{r7, pc}

0801edee <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801edee:	b580      	push	{r7, lr}
 801edf0:	b082      	sub	sp, #8
 801edf2:	af00      	add	r7, sp, #0
 801edf4:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801edf6:	6878      	ldr	r0, [r7, #4]
 801edf8:	f7ff ffc3 	bl	801ed82 <json_value_get_type>
 801edfc:	4603      	mov	r3, r0
 801edfe:	2b02      	cmp	r3, #2
 801ee00:	d102      	bne.n	801ee08 <json_value_get_string+0x1a>
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	689b      	ldr	r3, [r3, #8]
 801ee06:	e000      	b.n	801ee0a <json_value_get_string+0x1c>
 801ee08:	2300      	movs	r3, #0
}
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	3708      	adds	r7, #8
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	bd80      	pop	{r7, pc}

0801ee12 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801ee12:	b580      	push	{r7, lr}
 801ee14:	b082      	sub	sp, #8
 801ee16:	af00      	add	r7, sp, #0
 801ee18:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	f7ff ffb1 	bl	801ed82 <json_value_get_type>
 801ee20:	4603      	mov	r3, r0
 801ee22:	2b03      	cmp	r3, #3
 801ee24:	d103      	bne.n	801ee2e <json_value_get_number+0x1c>
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ee2c:	e003      	b.n	801ee36 <json_value_get_number+0x24>
 801ee2e:	f04f 0200 	mov.w	r2, #0
 801ee32:	f04f 0300 	mov.w	r3, #0
 801ee36:	ec43 2b17 	vmov	d7, r2, r3
}
 801ee3a:	eeb0 0a47 	vmov.f32	s0, s14
 801ee3e:	eef0 0a67 	vmov.f32	s1, s15
 801ee42:	3708      	adds	r7, #8
 801ee44:	46bd      	mov	sp, r7
 801ee46:	bd80      	pop	{r7, pc}

0801ee48 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801ee48:	b580      	push	{r7, lr}
 801ee4a:	b082      	sub	sp, #8
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801ee50:	6878      	ldr	r0, [r7, #4]
 801ee52:	f7ff ff96 	bl	801ed82 <json_value_get_type>
 801ee56:	4603      	mov	r3, r0
 801ee58:	2b06      	cmp	r3, #6
 801ee5a:	d102      	bne.n	801ee62 <json_value_get_boolean+0x1a>
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	689b      	ldr	r3, [r3, #8]
 801ee60:	e001      	b.n	801ee66 <json_value_get_boolean+0x1e>
 801ee62:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ee66:	4618      	mov	r0, r3
 801ee68:	3708      	adds	r7, #8
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	bd80      	pop	{r7, pc}
	...

0801ee70 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b082      	sub	sp, #8
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801ee78:	6878      	ldr	r0, [r7, #4]
 801ee7a:	f7ff ff82 	bl	801ed82 <json_value_get_type>
 801ee7e:	4603      	mov	r3, r0
 801ee80:	2b05      	cmp	r3, #5
 801ee82:	d012      	beq.n	801eeaa <json_value_free+0x3a>
 801ee84:	2b05      	cmp	r3, #5
 801ee86:	dc16      	bgt.n	801eeb6 <json_value_free+0x46>
 801ee88:	2b02      	cmp	r3, #2
 801ee8a:	d007      	beq.n	801ee9c <json_value_free+0x2c>
 801ee8c:	2b04      	cmp	r3, #4
 801ee8e:	d112      	bne.n	801eeb6 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	689b      	ldr	r3, [r3, #8]
 801ee94:	4618      	mov	r0, r3
 801ee96:	f7fd ffb5 	bl	801ce04 <json_object_free>
            break;
 801ee9a:	e00d      	b.n	801eeb8 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801ee9c:	4b0a      	ldr	r3, [pc, #40]	; (801eec8 <json_value_free+0x58>)
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	687a      	ldr	r2, [r7, #4]
 801eea2:	6892      	ldr	r2, [r2, #8]
 801eea4:	4610      	mov	r0, r2
 801eea6:	4798      	blx	r3
            break;
 801eea8:	e006      	b.n	801eeb8 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	689b      	ldr	r3, [r3, #8]
 801eeae:	4618      	mov	r0, r3
 801eeb0:	f7fe f878 	bl	801cfa4 <json_array_free>
            break;
 801eeb4:	e000      	b.n	801eeb8 <json_value_free+0x48>
        default:
            break;
 801eeb6:	bf00      	nop
    }
    parson_free(value);
 801eeb8:	4b03      	ldr	r3, [pc, #12]	; (801eec8 <json_value_free+0x58>)
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	6878      	ldr	r0, [r7, #4]
 801eebe:	4798      	blx	r3
}
 801eec0:	bf00      	nop
 801eec2:	3708      	adds	r7, #8
 801eec4:	46bd      	mov	sp, r7
 801eec6:	bd80      	pop	{r7, pc}
 801eec8:	200002b4 	.word	0x200002b4

0801eecc <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801eecc:	b580      	push	{r7, lr}
 801eece:	b082      	sub	sp, #8
 801eed0:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801eed2:	4b12      	ldr	r3, [pc, #72]	; (801ef1c <json_value_init_object+0x50>)
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	2010      	movs	r0, #16
 801eed8:	4798      	blx	r3
 801eeda:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d101      	bne.n	801eee6 <json_value_init_object+0x1a>
        return NULL;
 801eee2:	2300      	movs	r3, #0
 801eee4:	e016      	b.n	801ef14 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2200      	movs	r2, #0
 801eeea:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	2204      	movs	r2, #4
 801eef0:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801eef2:	6878      	ldr	r0, [r7, #4]
 801eef4:	f7fd fd76 	bl	801c9e4 <json_object_init>
 801eef8:	4602      	mov	r2, r0
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	689b      	ldr	r3, [r3, #8]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d105      	bne.n	801ef12 <json_value_init_object+0x46>
        parson_free(new_value);
 801ef06:	4b06      	ldr	r3, [pc, #24]	; (801ef20 <json_value_init_object+0x54>)
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	6878      	ldr	r0, [r7, #4]
 801ef0c:	4798      	blx	r3
        return NULL;
 801ef0e:	2300      	movs	r3, #0
 801ef10:	e000      	b.n	801ef14 <json_value_init_object+0x48>
    }
    return new_value;
 801ef12:	687b      	ldr	r3, [r7, #4]
}
 801ef14:	4618      	mov	r0, r3
 801ef16:	3708      	adds	r7, #8
 801ef18:	46bd      	mov	sp, r7
 801ef1a:	bd80      	pop	{r7, pc}
 801ef1c:	200002b0 	.word	0x200002b0
 801ef20:	200002b4 	.word	0x200002b4

0801ef24 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801ef24:	b580      	push	{r7, lr}
 801ef26:	b082      	sub	sp, #8
 801ef28:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801ef2a:	4b12      	ldr	r3, [pc, #72]	; (801ef74 <json_value_init_array+0x50>)
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	2010      	movs	r0, #16
 801ef30:	4798      	blx	r3
 801ef32:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d101      	bne.n	801ef3e <json_value_init_array+0x1a>
        return NULL;
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	e016      	b.n	801ef6c <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	2200      	movs	r2, #0
 801ef42:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	2205      	movs	r2, #5
 801ef48:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801ef4a:	6878      	ldr	r0, [r7, #4]
 801ef4c:	f7fd ff92 	bl	801ce74 <json_array_init>
 801ef50:	4602      	mov	r2, r0
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	689b      	ldr	r3, [r3, #8]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d105      	bne.n	801ef6a <json_value_init_array+0x46>
        parson_free(new_value);
 801ef5e:	4b06      	ldr	r3, [pc, #24]	; (801ef78 <json_value_init_array+0x54>)
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	6878      	ldr	r0, [r7, #4]
 801ef64:	4798      	blx	r3
        return NULL;
 801ef66:	2300      	movs	r3, #0
 801ef68:	e000      	b.n	801ef6c <json_value_init_array+0x48>
    }
    return new_value;
 801ef6a:	687b      	ldr	r3, [r7, #4]
}
 801ef6c:	4618      	mov	r0, r3
 801ef6e:	3708      	adds	r7, #8
 801ef70:	46bd      	mov	sp, r7
 801ef72:	bd80      	pop	{r7, pc}
 801ef74:	200002b0 	.word	0x200002b0
 801ef78:	200002b4 	.word	0x200002b4

0801ef7c <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801ef7c:	b580      	push	{r7, lr}
 801ef7e:	b086      	sub	sp, #24
 801ef80:	af00      	add	r7, sp, #0
 801ef82:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801ef84:	2300      	movs	r3, #0
 801ef86:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801ef88:	2300      	movs	r3, #0
 801ef8a:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d101      	bne.n	801ef96 <json_value_init_string+0x1a>
        return NULL;
 801ef92:	2300      	movs	r3, #0
 801ef94:	e022      	b.n	801efdc <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801ef96:	6878      	ldr	r0, [r7, #4]
 801ef98:	f7e1 f93c 	bl	8000214 <strlen>
 801ef9c:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801ef9e:	6939      	ldr	r1, [r7, #16]
 801efa0:	6878      	ldr	r0, [r7, #4]
 801efa2:	f7fd fcba 	bl	801c91a <is_valid_utf8>
 801efa6:	4603      	mov	r3, r0
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d101      	bne.n	801efb0 <json_value_init_string+0x34>
        return NULL;
 801efac:	2300      	movs	r3, #0
 801efae:	e015      	b.n	801efdc <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801efb0:	6939      	ldr	r1, [r7, #16]
 801efb2:	6878      	ldr	r0, [r7, #4]
 801efb4:	f7fd fb12 	bl	801c5dc <parson_strndup>
 801efb8:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801efba:	697b      	ldr	r3, [r7, #20]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d101      	bne.n	801efc4 <json_value_init_string+0x48>
        return NULL;
 801efc0:	2300      	movs	r3, #0
 801efc2:	e00b      	b.n	801efdc <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801efc4:	6978      	ldr	r0, [r7, #20]
 801efc6:	f7fe f815 	bl	801cff4 <json_value_init_string_no_copy>
 801efca:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801efcc:	68fb      	ldr	r3, [r7, #12]
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d103      	bne.n	801efda <json_value_init_string+0x5e>
        parson_free(copy);
 801efd2:	4b04      	ldr	r3, [pc, #16]	; (801efe4 <json_value_init_string+0x68>)
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	6978      	ldr	r0, [r7, #20]
 801efd8:	4798      	blx	r3
    }
    return value;
 801efda:	68fb      	ldr	r3, [r7, #12]
}
 801efdc:	4618      	mov	r0, r3
 801efde:	3718      	adds	r7, #24
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bd80      	pop	{r7, pc}
 801efe4:	200002b4 	.word	0x200002b4

0801efe8 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efea:	b085      	sub	sp, #20
 801efec:	af00      	add	r7, sp, #0
 801efee:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801eff2:	2300      	movs	r3, #0
 801eff4:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801eff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801effa:	e9d7 0100 	ldrd	r0, r1, [r7]
 801effe:	f7e1 fdbd 	bl	8000b7c <__aeabi_dcmpun>
 801f002:	4603      	mov	r3, r0
 801f004:	2b00      	cmp	r3, #0
 801f006:	d121      	bne.n	801f04c <json_value_init_number+0x64>
 801f008:	683c      	ldr	r4, [r7, #0]
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801f010:	2301      	movs	r3, #1
 801f012:	461e      	mov	r6, r3
 801f014:	f04f 32ff 	mov.w	r2, #4294967295
 801f018:	4b1a      	ldr	r3, [pc, #104]	; (801f084 <json_value_init_number+0x9c>)
 801f01a:	4620      	mov	r0, r4
 801f01c:	4629      	mov	r1, r5
 801f01e:	f7e1 fdad 	bl	8000b7c <__aeabi_dcmpun>
 801f022:	4603      	mov	r3, r0
 801f024:	2b00      	cmp	r3, #0
 801f026:	d10b      	bne.n	801f040 <json_value_init_number+0x58>
 801f028:	f04f 32ff 	mov.w	r2, #4294967295
 801f02c:	4b15      	ldr	r3, [pc, #84]	; (801f084 <json_value_init_number+0x9c>)
 801f02e:	4620      	mov	r0, r4
 801f030:	4629      	mov	r1, r5
 801f032:	f7e1 fd85 	bl	8000b40 <__aeabi_dcmple>
 801f036:	4603      	mov	r3, r0
 801f038:	2b00      	cmp	r3, #0
 801f03a:	d101      	bne.n	801f040 <json_value_init_number+0x58>
 801f03c:	2300      	movs	r3, #0
 801f03e:	461e      	mov	r6, r3
 801f040:	b2f3      	uxtb	r3, r6
 801f042:	f083 0301 	eor.w	r3, r3, #1
 801f046:	b2db      	uxtb	r3, r3
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d001      	beq.n	801f050 <json_value_init_number+0x68>
        return NULL;
 801f04c:	2300      	movs	r3, #0
 801f04e:	e015      	b.n	801f07c <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801f050:	4b0d      	ldr	r3, [pc, #52]	; (801f088 <json_value_init_number+0xa0>)
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	2010      	movs	r0, #16
 801f056:	4798      	blx	r3
 801f058:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d101      	bne.n	801f064 <json_value_init_number+0x7c>
        return NULL;
 801f060:	2300      	movs	r3, #0
 801f062:	e00b      	b.n	801f07c <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	2200      	movs	r2, #0
 801f068:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801f06a:	68fb      	ldr	r3, [r7, #12]
 801f06c:	2203      	movs	r2, #3
 801f06e:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801f070:	68f9      	ldr	r1, [r7, #12]
 801f072:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f076:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801f07a:	68fb      	ldr	r3, [r7, #12]
}
 801f07c:	4618      	mov	r0, r3
 801f07e:	3714      	adds	r7, #20
 801f080:	46bd      	mov	sp, r7
 801f082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f084:	7fefffff 	.word	0x7fefffff
 801f088:	200002b0 	.word	0x200002b0

0801f08c <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b084      	sub	sp, #16
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801f094:	4b0e      	ldr	r3, [pc, #56]	; (801f0d0 <json_value_init_boolean+0x44>)
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	2010      	movs	r0, #16
 801f09a:	4798      	blx	r3
 801f09c:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d101      	bne.n	801f0a8 <json_value_init_boolean+0x1c>
        return NULL;
 801f0a4:	2300      	movs	r3, #0
 801f0a6:	e00f      	b.n	801f0c8 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	2200      	movs	r2, #0
 801f0ac:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801f0ae:	68fb      	ldr	r3, [r7, #12]
 801f0b0:	2206      	movs	r2, #6
 801f0b2:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	bf14      	ite	ne
 801f0ba:	2301      	movne	r3, #1
 801f0bc:	2300      	moveq	r3, #0
 801f0be:	b2db      	uxtb	r3, r3
 801f0c0:	461a      	mov	r2, r3
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	609a      	str	r2, [r3, #8]
    return new_value;
 801f0c6:	68fb      	ldr	r3, [r7, #12]
}
 801f0c8:	4618      	mov	r0, r3
 801f0ca:	3710      	adds	r7, #16
 801f0cc:	46bd      	mov	sp, r7
 801f0ce:	bd80      	pop	{r7, pc}
 801f0d0:	200002b0 	.word	0x200002b0

0801f0d4 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b082      	sub	sp, #8
 801f0d8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801f0da:	4b0a      	ldr	r3, [pc, #40]	; (801f104 <json_value_init_null+0x30>)
 801f0dc:	681b      	ldr	r3, [r3, #0]
 801f0de:	2010      	movs	r0, #16
 801f0e0:	4798      	blx	r3
 801f0e2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d101      	bne.n	801f0ee <json_value_init_null+0x1a>
        return NULL;
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	e006      	b.n	801f0fc <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	2200      	movs	r2, #0
 801f0f2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	2201      	movs	r2, #1
 801f0f8:	605a      	str	r2, [r3, #4]
    return new_value;
 801f0fa:	687b      	ldr	r3, [r7, #4]
}
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	3708      	adds	r7, #8
 801f100:	46bd      	mov	sp, r7
 801f102:	bd80      	pop	{r7, pc}
 801f104:	200002b0 	.word	0x200002b0

0801f108 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801f108:	b580      	push	{r7, lr}
 801f10a:	b096      	sub	sp, #88	; 0x58
 801f10c:	af02      	add	r7, sp, #8
 801f10e:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801f110:	f107 030c 	add.w	r3, r7, #12
 801f114:	9300      	str	r3, [sp, #0]
 801f116:	2300      	movs	r3, #0
 801f118:	2200      	movs	r2, #0
 801f11a:	2100      	movs	r1, #0
 801f11c:	6878      	ldr	r0, [r7, #4]
 801f11e:	f7fe fced 	bl	801dafc <json_serialize_to_buffer_r>
 801f122:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801f124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f126:	2b00      	cmp	r3, #0
 801f128:	db02      	blt.n	801f130 <json_serialization_size+0x28>
 801f12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f12c:	3301      	adds	r3, #1
 801f12e:	e000      	b.n	801f132 <json_serialization_size+0x2a>
 801f130:	2300      	movs	r3, #0
}
 801f132:	4618      	mov	r0, r3
 801f134:	3750      	adds	r7, #80	; 0x50
 801f136:	46bd      	mov	sp, r7
 801f138:	bd80      	pop	{r7, pc}

0801f13a <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801f13a:	b580      	push	{r7, lr}
 801f13c:	b088      	sub	sp, #32
 801f13e:	af02      	add	r7, sp, #8
 801f140:	60f8      	str	r0, [r7, #12]
 801f142:	60b9      	str	r1, [r7, #8]
 801f144:	607a      	str	r2, [r7, #4]
    int written = -1;
 801f146:	f04f 33ff 	mov.w	r3, #4294967295
 801f14a:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801f14c:	68f8      	ldr	r0, [r7, #12]
 801f14e:	f7ff ffdb 	bl	801f108 <json_serialization_size>
 801f152:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801f154:	693b      	ldr	r3, [r7, #16]
 801f156:	2b00      	cmp	r3, #0
 801f158:	d003      	beq.n	801f162 <json_serialize_to_buffer+0x28>
 801f15a:	687a      	ldr	r2, [r7, #4]
 801f15c:	693b      	ldr	r3, [r7, #16]
 801f15e:	429a      	cmp	r2, r3
 801f160:	d202      	bcs.n	801f168 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801f162:	f04f 33ff 	mov.w	r3, #4294967295
 801f166:	e00f      	b.n	801f188 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801f168:	2300      	movs	r3, #0
 801f16a:	9300      	str	r3, [sp, #0]
 801f16c:	2300      	movs	r3, #0
 801f16e:	2200      	movs	r2, #0
 801f170:	68b9      	ldr	r1, [r7, #8]
 801f172:	68f8      	ldr	r0, [r7, #12]
 801f174:	f7fe fcc2 	bl	801dafc <json_serialize_to_buffer_r>
 801f178:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801f17a:	697b      	ldr	r3, [r7, #20]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	da02      	bge.n	801f186 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801f180:	f04f 33ff 	mov.w	r3, #4294967295
 801f184:	e000      	b.n	801f188 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801f186:	2300      	movs	r3, #0
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3718      	adds	r7, #24
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}

0801f190 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801f190:	b580      	push	{r7, lr}
 801f192:	b086      	sub	sp, #24
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801f198:	f04f 33ff 	mov.w	r3, #4294967295
 801f19c:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801f19e:	6878      	ldr	r0, [r7, #4]
 801f1a0:	f7ff ffb2 	bl	801f108 <json_serialization_size>
 801f1a4:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801f1a6:	2300      	movs	r3, #0
 801f1a8:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801f1aa:	693b      	ldr	r3, [r7, #16]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d101      	bne.n	801f1b4 <json_serialize_to_string+0x24>
        return NULL;
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	e019      	b.n	801f1e8 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801f1b4:	4b0e      	ldr	r3, [pc, #56]	; (801f1f0 <json_serialize_to_string+0x60>)
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	6938      	ldr	r0, [r7, #16]
 801f1ba:	4798      	blx	r3
 801f1bc:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	d101      	bne.n	801f1c8 <json_serialize_to_string+0x38>
        return NULL;
 801f1c4:	2300      	movs	r3, #0
 801f1c6:	e00f      	b.n	801f1e8 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801f1c8:	693a      	ldr	r2, [r7, #16]
 801f1ca:	68f9      	ldr	r1, [r7, #12]
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	f7ff ffb4 	bl	801f13a <json_serialize_to_buffer>
 801f1d2:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801f1d4:	697b      	ldr	r3, [r7, #20]
 801f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1da:	d104      	bne.n	801f1e6 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801f1dc:	68f8      	ldr	r0, [r7, #12]
 801f1de:	f000 f87f 	bl	801f2e0 <json_free_serialized_string>
        return NULL;
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	e000      	b.n	801f1e8 <json_serialize_to_string+0x58>
    }
    return buf;
 801f1e6:	68fb      	ldr	r3, [r7, #12]
}
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	3718      	adds	r7, #24
 801f1ec:	46bd      	mov	sp, r7
 801f1ee:	bd80      	pop	{r7, pc}
 801f1f0:	200002b0 	.word	0x200002b0

0801f1f4 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b096      	sub	sp, #88	; 0x58
 801f1f8:	af02      	add	r7, sp, #8
 801f1fa:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801f1fc:	f107 030c 	add.w	r3, r7, #12
 801f200:	9300      	str	r3, [sp, #0]
 801f202:	2301      	movs	r3, #1
 801f204:	2200      	movs	r2, #0
 801f206:	2100      	movs	r1, #0
 801f208:	6878      	ldr	r0, [r7, #4]
 801f20a:	f7fe fc77 	bl	801dafc <json_serialize_to_buffer_r>
 801f20e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801f210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f212:	2b00      	cmp	r3, #0
 801f214:	db02      	blt.n	801f21c <json_serialization_size_pretty+0x28>
 801f216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f218:	3301      	adds	r3, #1
 801f21a:	e000      	b.n	801f21e <json_serialization_size_pretty+0x2a>
 801f21c:	2300      	movs	r3, #0
}
 801f21e:	4618      	mov	r0, r3
 801f220:	3750      	adds	r7, #80	; 0x50
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}

0801f226 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801f226:	b580      	push	{r7, lr}
 801f228:	b088      	sub	sp, #32
 801f22a:	af02      	add	r7, sp, #8
 801f22c:	60f8      	str	r0, [r7, #12]
 801f22e:	60b9      	str	r1, [r7, #8]
 801f230:	607a      	str	r2, [r7, #4]
    int written = -1;
 801f232:	f04f 33ff 	mov.w	r3, #4294967295
 801f236:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801f238:	68f8      	ldr	r0, [r7, #12]
 801f23a:	f7ff ffdb 	bl	801f1f4 <json_serialization_size_pretty>
 801f23e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801f240:	693b      	ldr	r3, [r7, #16]
 801f242:	2b00      	cmp	r3, #0
 801f244:	d003      	beq.n	801f24e <json_serialize_to_buffer_pretty+0x28>
 801f246:	687a      	ldr	r2, [r7, #4]
 801f248:	693b      	ldr	r3, [r7, #16]
 801f24a:	429a      	cmp	r2, r3
 801f24c:	d202      	bcs.n	801f254 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801f24e:	f04f 33ff 	mov.w	r3, #4294967295
 801f252:	e00f      	b.n	801f274 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801f254:	2300      	movs	r3, #0
 801f256:	9300      	str	r3, [sp, #0]
 801f258:	2301      	movs	r3, #1
 801f25a:	2200      	movs	r2, #0
 801f25c:	68b9      	ldr	r1, [r7, #8]
 801f25e:	68f8      	ldr	r0, [r7, #12]
 801f260:	f7fe fc4c 	bl	801dafc <json_serialize_to_buffer_r>
 801f264:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	da02      	bge.n	801f272 <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801f26c:	f04f 33ff 	mov.w	r3, #4294967295
 801f270:	e000      	b.n	801f274 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801f272:	2300      	movs	r3, #0
}
 801f274:	4618      	mov	r0, r3
 801f276:	3718      	adds	r7, #24
 801f278:	46bd      	mov	sp, r7
 801f27a:	bd80      	pop	{r7, pc}

0801f27c <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b086      	sub	sp, #24
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801f284:	f04f 33ff 	mov.w	r3, #4294967295
 801f288:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801f28a:	6878      	ldr	r0, [r7, #4]
 801f28c:	f7ff ffb2 	bl	801f1f4 <json_serialization_size_pretty>
 801f290:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801f292:	2300      	movs	r3, #0
 801f294:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801f296:	693b      	ldr	r3, [r7, #16]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d101      	bne.n	801f2a0 <json_serialize_to_string_pretty+0x24>
        return NULL;
 801f29c:	2300      	movs	r3, #0
 801f29e:	e019      	b.n	801f2d4 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801f2a0:	4b0e      	ldr	r3, [pc, #56]	; (801f2dc <json_serialize_to_string_pretty+0x60>)
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	6938      	ldr	r0, [r7, #16]
 801f2a6:	4798      	blx	r3
 801f2a8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	d101      	bne.n	801f2b4 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801f2b0:	2300      	movs	r3, #0
 801f2b2:	e00f      	b.n	801f2d4 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801f2b4:	693a      	ldr	r2, [r7, #16]
 801f2b6:	68f9      	ldr	r1, [r7, #12]
 801f2b8:	6878      	ldr	r0, [r7, #4]
 801f2ba:	f7ff ffb4 	bl	801f226 <json_serialize_to_buffer_pretty>
 801f2be:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801f2c0:	697b      	ldr	r3, [r7, #20]
 801f2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f2c6:	d104      	bne.n	801f2d2 <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801f2c8:	68f8      	ldr	r0, [r7, #12]
 801f2ca:	f000 f809 	bl	801f2e0 <json_free_serialized_string>
        return NULL;
 801f2ce:	2300      	movs	r3, #0
 801f2d0:	e000      	b.n	801f2d4 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801f2d2:	68fb      	ldr	r3, [r7, #12]
}
 801f2d4:	4618      	mov	r0, r3
 801f2d6:	3718      	adds	r7, #24
 801f2d8:	46bd      	mov	sp, r7
 801f2da:	bd80      	pop	{r7, pc}
 801f2dc:	200002b0 	.word	0x200002b0

0801f2e0 <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b082      	sub	sp, #8
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801f2e8:	4b03      	ldr	r3, [pc, #12]	; (801f2f8 <json_free_serialized_string+0x18>)
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	6878      	ldr	r0, [r7, #4]
 801f2ee:	4798      	blx	r3
}
 801f2f0:	bf00      	nop
 801f2f2:	3708      	adds	r7, #8
 801f2f4:	46bd      	mov	sp, r7
 801f2f6:	bd80      	pop	{r7, pc}
 801f2f8:	200002b4 	.word	0x200002b4

0801f2fc <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801f2fc:	b580      	push	{r7, lr}
 801f2fe:	b082      	sub	sp, #8
 801f300:	af00      	add	r7, sp, #0
 801f302:	6078      	str	r0, [r7, #4]
 801f304:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d006      	beq.n	801f31a <json_array_append_value+0x1e>
 801f30c:	683b      	ldr	r3, [r7, #0]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d003      	beq.n	801f31a <json_array_append_value+0x1e>
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	2b00      	cmp	r3, #0
 801f318:	d002      	beq.n	801f320 <json_array_append_value+0x24>
        return JSONFailure;
 801f31a:	f04f 33ff 	mov.w	r3, #4294967295
 801f31e:	e004      	b.n	801f32a <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801f320:	6839      	ldr	r1, [r7, #0]
 801f322:	6878      	ldr	r0, [r7, #4]
 801f324:	f7fd fdc8 	bl	801ceb8 <json_array_add>
 801f328:	4603      	mov	r3, r0
}
 801f32a:	4618      	mov	r0, r3
 801f32c:	3708      	adds	r7, #8
 801f32e:	46bd      	mov	sp, r7
 801f330:	bd80      	pop	{r7, pc}

0801f332 <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801f332:	b580      	push	{r7, lr}
 801f334:	b086      	sub	sp, #24
 801f336:	af00      	add	r7, sp, #0
 801f338:	60f8      	str	r0, [r7, #12]
 801f33a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801f33e:	ed97 0b00 	vldr	d0, [r7]
 801f342:	f7ff fe51 	bl	801efe8 <json_value_init_number>
 801f346:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801f348:	697b      	ldr	r3, [r7, #20]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d102      	bne.n	801f354 <json_array_append_number+0x22>
        return JSONFailure;
 801f34e:	f04f 33ff 	mov.w	r3, #4294967295
 801f352:	e00e      	b.n	801f372 <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801f354:	6979      	ldr	r1, [r7, #20]
 801f356:	68f8      	ldr	r0, [r7, #12]
 801f358:	f7ff ffd0 	bl	801f2fc <json_array_append_value>
 801f35c:	4603      	mov	r3, r0
 801f35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f362:	d105      	bne.n	801f370 <json_array_append_number+0x3e>
        json_value_free(value);
 801f364:	6978      	ldr	r0, [r7, #20]
 801f366:	f7ff fd83 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f36a:	f04f 33ff 	mov.w	r3, #4294967295
 801f36e:	e000      	b.n	801f372 <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801f370:	2300      	movs	r3, #0
}
 801f372:	4618      	mov	r0, r3
 801f374:	3718      	adds	r7, #24
 801f376:	46bd      	mov	sp, r7
 801f378:	bd80      	pop	{r7, pc}

0801f37a <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801f37a:	b580      	push	{r7, lr}
 801f37c:	b086      	sub	sp, #24
 801f37e:	af00      	add	r7, sp, #0
 801f380:	60f8      	str	r0, [r7, #12]
 801f382:	60b9      	str	r1, [r7, #8]
 801f384:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801f386:	2300      	movs	r3, #0
 801f388:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d009      	beq.n	801f3a4 <json_object_set_value+0x2a>
 801f390:	68bb      	ldr	r3, [r7, #8]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d006      	beq.n	801f3a4 <json_object_set_value+0x2a>
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d003      	beq.n	801f3a4 <json_object_set_value+0x2a>
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d002      	beq.n	801f3aa <json_object_set_value+0x30>
        return JSONFailure;
 801f3a4:	f04f 33ff 	mov.w	r3, #4294967295
 801f3a8:	e039      	b.n	801f41e <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801f3aa:	68b9      	ldr	r1, [r7, #8]
 801f3ac:	68f8      	ldr	r0, [r7, #12]
 801f3ae:	f7ff fbbf 	bl	801eb30 <json_object_get_value>
 801f3b2:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801f3b4:	693b      	ldr	r3, [r7, #16]
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d02b      	beq.n	801f412 <json_object_set_value+0x98>
        json_value_free(old_value);
 801f3ba:	6938      	ldr	r0, [r7, #16]
 801f3bc:	f7ff fd58 	bl	801ee70 <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	617b      	str	r3, [r7, #20]
 801f3c4:	e01e      	b.n	801f404 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	685a      	ldr	r2, [r3, #4]
 801f3ca:	697b      	ldr	r3, [r7, #20]
 801f3cc:	009b      	lsls	r3, r3, #2
 801f3ce:	4413      	add	r3, r2
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	68b9      	ldr	r1, [r7, #8]
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f7e0 ff13 	bl	8000200 <strcmp>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d10e      	bne.n	801f3fe <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801f3e0:	68f8      	ldr	r0, [r7, #12]
 801f3e2:	f7ff fc65 	bl	801ecb0 <json_object_get_wrapping_value>
 801f3e6:	4602      	mov	r2, r0
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	689a      	ldr	r2, [r3, #8]
 801f3f0:	697b      	ldr	r3, [r7, #20]
 801f3f2:	009b      	lsls	r3, r3, #2
 801f3f4:	4413      	add	r3, r2
 801f3f6:	687a      	ldr	r2, [r7, #4]
 801f3f8:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801f3fa:	2300      	movs	r3, #0
 801f3fc:	e00f      	b.n	801f41e <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801f3fe:	697b      	ldr	r3, [r7, #20]
 801f400:	3301      	adds	r3, #1
 801f402:	617b      	str	r3, [r7, #20]
 801f404:	68f8      	ldr	r0, [r7, #12]
 801f406:	f7ff fc27 	bl	801ec58 <json_object_get_count>
 801f40a:	4602      	mov	r2, r0
 801f40c:	697b      	ldr	r3, [r7, #20]
 801f40e:	4293      	cmp	r3, r2
 801f410:	d3d9      	bcc.n	801f3c6 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801f412:	687a      	ldr	r2, [r7, #4]
 801f414:	68b9      	ldr	r1, [r7, #8]
 801f416:	68f8      	ldr	r0, [r7, #12]
 801f418:	f7fd fb08 	bl	801ca2c <json_object_add>
 801f41c:	4603      	mov	r3, r0
}
 801f41e:	4618      	mov	r0, r3
 801f420:	3718      	adds	r7, #24
 801f422:	46bd      	mov	sp, r7
 801f424:	bd80      	pop	{r7, pc}

0801f426 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801f426:	b580      	push	{r7, lr}
 801f428:	b08c      	sub	sp, #48	; 0x30
 801f42a:	af00      	add	r7, sp, #0
 801f42c:	60f8      	str	r0, [r7, #12]
 801f42e:	60b9      	str	r1, [r7, #8]
 801f430:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801f432:	2300      	movs	r3, #0
 801f434:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801f436:	2300      	movs	r3, #0
 801f438:	62bb      	str	r3, [r7, #40]	; 0x28
 801f43a:	2300      	movs	r3, #0
 801f43c:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801f43e:	2300      	movs	r3, #0
 801f440:	623b      	str	r3, [r7, #32]
 801f442:	2300      	movs	r3, #0
 801f444:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801f446:	f04f 33ff 	mov.w	r3, #4294967295
 801f44a:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801f44c:	2300      	movs	r3, #0
 801f44e:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d005      	beq.n	801f462 <json_object_dotset_value+0x3c>
 801f456:	68bb      	ldr	r3, [r7, #8]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d002      	beq.n	801f462 <json_object_dotset_value+0x3c>
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d102      	bne.n	801f468 <json_object_dotset_value+0x42>
        return JSONFailure;
 801f462:	f04f 33ff 	mov.w	r3, #4294967295
 801f466:	e067      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801f468:	212e      	movs	r1, #46	; 0x2e
 801f46a:	68b8      	ldr	r0, [r7, #8]
 801f46c:	f000 fd8f 	bl	801ff8e <strchr>
 801f470:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801f472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f474:	2b00      	cmp	r3, #0
 801f476:	d106      	bne.n	801f486 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801f478:	687a      	ldr	r2, [r7, #4]
 801f47a:	68b9      	ldr	r1, [r7, #8]
 801f47c:	68f8      	ldr	r0, [r7, #12]
 801f47e:	f7ff ff7c 	bl	801f37a <json_object_set_value>
 801f482:	4603      	mov	r3, r0
 801f484:	e058      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801f486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f488:	68bb      	ldr	r3, [r7, #8]
 801f48a:	1ad3      	subs	r3, r2, r3
 801f48c:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801f48e:	697a      	ldr	r2, [r7, #20]
 801f490:	68b9      	ldr	r1, [r7, #8]
 801f492:	68f8      	ldr	r0, [r7, #12]
 801f494:	f7fd fbc6 	bl	801cc24 <json_object_getn_value>
 801f498:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d015      	beq.n	801f4cc <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801f4a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f4a2:	f7ff fc6e 	bl	801ed82 <json_value_get_type>
 801f4a6:	4603      	mov	r3, r0
 801f4a8:	2b04      	cmp	r3, #4
 801f4aa:	d002      	beq.n	801f4b2 <json_object_dotset_value+0x8c>
            return JSONFailure;
 801f4ac:	f04f 33ff 	mov.w	r3, #4294967295
 801f4b0:	e042      	b.n	801f538 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801f4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f4b4:	f7ff fc77 	bl	801eda6 <json_value_get_object>
 801f4b8:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4bc:	3301      	adds	r3, #1
 801f4be:	687a      	ldr	r2, [r7, #4]
 801f4c0:	4619      	mov	r1, r3
 801f4c2:	6a38      	ldr	r0, [r7, #32]
 801f4c4:	f7ff ffaf 	bl	801f426 <json_object_dotset_value>
 801f4c8:	4603      	mov	r3, r0
 801f4ca:	e035      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801f4cc:	f7ff fcfe 	bl	801eecc <json_value_init_object>
 801f4d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d102      	bne.n	801f4de <json_object_dotset_value+0xb8>
        return JSONFailure;
 801f4d8:	f04f 33ff 	mov.w	r3, #4294967295
 801f4dc:	e02c      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801f4de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4e0:	f7ff fc61 	bl	801eda6 <json_value_get_object>
 801f4e4:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4e8:	3301      	adds	r3, #1
 801f4ea:	687a      	ldr	r2, [r7, #4]
 801f4ec:	4619      	mov	r1, r3
 801f4ee:	69f8      	ldr	r0, [r7, #28]
 801f4f0:	f7ff ff99 	bl	801f426 <json_object_dotset_value>
 801f4f4:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801f4f6:	69bb      	ldr	r3, [r7, #24]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d005      	beq.n	801f508 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801f4fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4fe:	f7ff fcb7 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f502:	f04f 33ff 	mov.w	r3, #4294967295
 801f506:	e017      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f50a:	697a      	ldr	r2, [r7, #20]
 801f50c:	68b9      	ldr	r1, [r7, #8]
 801f50e:	68f8      	ldr	r0, [r7, #12]
 801f510:	f7fd faa6 	bl	801ca60 <json_object_addn>
 801f514:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801f516:	69bb      	ldr	r3, [r7, #24]
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d00c      	beq.n	801f536 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801f51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f51e:	3301      	adds	r3, #1
 801f520:	2200      	movs	r2, #0
 801f522:	4619      	mov	r1, r3
 801f524:	69f8      	ldr	r0, [r7, #28]
 801f526:	f7fd fc31 	bl	801cd8c <json_object_dotremove_internal>
        json_value_free(new_value);
 801f52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f52c:	f7ff fca0 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f530:	f04f 33ff 	mov.w	r3, #4294967295
 801f534:	e000      	b.n	801f538 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801f536:	2300      	movs	r3, #0
}
 801f538:	4618      	mov	r0, r3
 801f53a:	3730      	adds	r7, #48	; 0x30
 801f53c:	46bd      	mov	sp, r7
 801f53e:	bd80      	pop	{r7, pc}

0801f540 <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801f540:	b580      	push	{r7, lr}
 801f542:	b086      	sub	sp, #24
 801f544:	af00      	add	r7, sp, #0
 801f546:	60f8      	str	r0, [r7, #12]
 801f548:	60b9      	str	r1, [r7, #8]
 801f54a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801f54c:	6878      	ldr	r0, [r7, #4]
 801f54e:	f7ff fd15 	bl	801ef7c <json_value_init_string>
 801f552:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801f554:	697b      	ldr	r3, [r7, #20]
 801f556:	2b00      	cmp	r3, #0
 801f558:	d102      	bne.n	801f560 <json_object_dotset_string+0x20>
        return JSONFailure;
 801f55a:	f04f 33ff 	mov.w	r3, #4294967295
 801f55e:	e00f      	b.n	801f580 <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801f560:	697a      	ldr	r2, [r7, #20]
 801f562:	68b9      	ldr	r1, [r7, #8]
 801f564:	68f8      	ldr	r0, [r7, #12]
 801f566:	f7ff ff5e 	bl	801f426 <json_object_dotset_value>
 801f56a:	4603      	mov	r3, r0
 801f56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f570:	d105      	bne.n	801f57e <json_object_dotset_string+0x3e>
        json_value_free(value);
 801f572:	6978      	ldr	r0, [r7, #20]
 801f574:	f7ff fc7c 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f578:	f04f 33ff 	mov.w	r3, #4294967295
 801f57c:	e000      	b.n	801f580 <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801f57e:	2300      	movs	r3, #0
}
 801f580:	4618      	mov	r0, r3
 801f582:	3718      	adds	r7, #24
 801f584:	46bd      	mov	sp, r7
 801f586:	bd80      	pop	{r7, pc}

0801f588 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801f588:	b580      	push	{r7, lr}
 801f58a:	b086      	sub	sp, #24
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	60f8      	str	r0, [r7, #12]
 801f590:	60b9      	str	r1, [r7, #8]
 801f592:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801f596:	ed97 0b00 	vldr	d0, [r7]
 801f59a:	f7ff fd25 	bl	801efe8 <json_value_init_number>
 801f59e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801f5a0:	697b      	ldr	r3, [r7, #20]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d102      	bne.n	801f5ac <json_object_dotset_number+0x24>
        return JSONFailure;
 801f5a6:	f04f 33ff 	mov.w	r3, #4294967295
 801f5aa:	e00f      	b.n	801f5cc <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801f5ac:	697a      	ldr	r2, [r7, #20]
 801f5ae:	68b9      	ldr	r1, [r7, #8]
 801f5b0:	68f8      	ldr	r0, [r7, #12]
 801f5b2:	f7ff ff38 	bl	801f426 <json_object_dotset_value>
 801f5b6:	4603      	mov	r3, r0
 801f5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5bc:	d105      	bne.n	801f5ca <json_object_dotset_number+0x42>
        json_value_free(value);
 801f5be:	6978      	ldr	r0, [r7, #20]
 801f5c0:	f7ff fc56 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f5c8:	e000      	b.n	801f5cc <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801f5ca:	2300      	movs	r3, #0
}
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	3718      	adds	r7, #24
 801f5d0:	46bd      	mov	sp, r7
 801f5d2:	bd80      	pop	{r7, pc}

0801f5d4 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b086      	sub	sp, #24
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	60f8      	str	r0, [r7, #12]
 801f5dc:	60b9      	str	r1, [r7, #8]
 801f5de:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801f5e0:	6878      	ldr	r0, [r7, #4]
 801f5e2:	f7ff fd53 	bl	801f08c <json_value_init_boolean>
 801f5e6:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801f5e8:	697b      	ldr	r3, [r7, #20]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d102      	bne.n	801f5f4 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801f5ee:	f04f 33ff 	mov.w	r3, #4294967295
 801f5f2:	e00f      	b.n	801f614 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801f5f4:	697a      	ldr	r2, [r7, #20]
 801f5f6:	68b9      	ldr	r1, [r7, #8]
 801f5f8:	68f8      	ldr	r0, [r7, #12]
 801f5fa:	f7ff ff14 	bl	801f426 <json_object_dotset_value>
 801f5fe:	4603      	mov	r3, r0
 801f600:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f604:	d105      	bne.n	801f612 <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801f606:	6978      	ldr	r0, [r7, #20]
 801f608:	f7ff fc32 	bl	801ee70 <json_value_free>
        return JSONFailure;
 801f60c:	f04f 33ff 	mov.w	r3, #4294967295
 801f610:	e000      	b.n	801f614 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801f612:	2300      	movs	r3, #0
}
 801f614:	4618      	mov	r0, r3
 801f616:	3718      	adds	r7, #24
 801f618:	46bd      	mov	sp, r7
 801f61a:	bd80      	pop	{r7, pc}

0801f61c <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801f61c:	b480      	push	{r7}
 801f61e:	b083      	sub	sp, #12
 801f620:	af00      	add	r7, sp, #0
 801f622:	6078      	str	r0, [r7, #4]
 801f624:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801f626:	4a06      	ldr	r2, [pc, #24]	; (801f640 <json_set_allocation_functions+0x24>)
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801f62c:	4a05      	ldr	r2, [pc, #20]	; (801f644 <json_set_allocation_functions+0x28>)
 801f62e:	683b      	ldr	r3, [r7, #0]
 801f630:	6013      	str	r3, [r2, #0]
}
 801f632:	bf00      	nop
 801f634:	370c      	adds	r7, #12
 801f636:	46bd      	mov	sp, r7
 801f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f63c:	4770      	bx	lr
 801f63e:	bf00      	nop
 801f640:	200002b0 	.word	0x200002b0
 801f644:	200002b4 	.word	0x200002b4

0801f648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801f648:	480d      	ldr	r0, [pc, #52]	; (801f680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801f64a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801f64c:	f7e6 fc26 	bl	8005e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801f650:	480c      	ldr	r0, [pc, #48]	; (801f684 <LoopForever+0x6>)
  ldr r1, =_edata
 801f652:	490d      	ldr	r1, [pc, #52]	; (801f688 <LoopForever+0xa>)
  ldr r2, =_sidata
 801f654:	4a0d      	ldr	r2, [pc, #52]	; (801f68c <LoopForever+0xe>)
  movs r3, #0
 801f656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801f658:	e002      	b.n	801f660 <LoopCopyDataInit>

0801f65a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801f65a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801f65c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801f65e:	3304      	adds	r3, #4

0801f660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801f660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801f662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801f664:	d3f9      	bcc.n	801f65a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801f666:	4a0a      	ldr	r2, [pc, #40]	; (801f690 <LoopForever+0x12>)
  ldr r4, =_ebss
 801f668:	4c0a      	ldr	r4, [pc, #40]	; (801f694 <LoopForever+0x16>)
  movs r3, #0
 801f66a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801f66c:	e001      	b.n	801f672 <LoopFillZerobss>

0801f66e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801f66e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801f670:	3204      	adds	r2, #4

0801f672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801f672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801f674:	d3fb      	bcc.n	801f66e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801f676:	f000 fa91 	bl	801fb9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801f67a:	f7e4 f9d7 	bl	8003a2c <main>

0801f67e <LoopForever>:

LoopForever:
    b LoopForever
 801f67e:	e7fe      	b.n	801f67e <LoopForever>
  ldr   r0, =_estack
 801f680:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801f684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801f688:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 801f68c:	08023b34 	.word	0x08023b34
  ldr r2, =_sbss
 801f690:	20000490 	.word	0x20000490
  ldr r4, =_ebss
 801f694:	2001d478 	.word	0x2001d478

0801f698 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801f698:	e7fe      	b.n	801f698 <ADC1_IRQHandler>
	...

0801f69c <_sbrk>:




caddr_t _sbrk(int incr)
{
 801f69c:	b580      	push	{r7, lr}
 801f69e:	b084      	sub	sp, #16
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801f6a4:	4b15      	ldr	r3, [pc, #84]	; (801f6fc <_sbrk+0x60>)
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d102      	bne.n	801f6b2 <_sbrk+0x16>
		heap_end = &end;
 801f6ac:	4b13      	ldr	r3, [pc, #76]	; (801f6fc <_sbrk+0x60>)
 801f6ae:	4a14      	ldr	r2, [pc, #80]	; (801f700 <_sbrk+0x64>)
 801f6b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801f6b2:	4b12      	ldr	r3, [pc, #72]	; (801f6fc <_sbrk+0x60>)
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801f6b8:	4b12      	ldr	r3, [pc, #72]	; (801f704 <_sbrk+0x68>)
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801f6c0:	68bb      	ldr	r3, [r7, #8]
 801f6c2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801f6c6:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801f6c8:	4b0c      	ldr	r3, [pc, #48]	; (801f6fc <_sbrk+0x60>)
 801f6ca:	681a      	ldr	r2, [r3, #0]
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	4413      	add	r3, r2
 801f6d0:	68ba      	ldr	r2, [r7, #8]
 801f6d2:	429a      	cmp	r2, r3
 801f6d4:	d207      	bcs.n	801f6e6 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801f6d6:	f000 f8a3 	bl	801f820 <__errno>
 801f6da:	4603      	mov	r3, r0
 801f6dc:	220c      	movs	r2, #12
 801f6de:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801f6e0:	f04f 33ff 	mov.w	r3, #4294967295
 801f6e4:	e006      	b.n	801f6f4 <_sbrk+0x58>
	}

	heap_end += incr;
 801f6e6:	4b05      	ldr	r3, [pc, #20]	; (801f6fc <_sbrk+0x60>)
 801f6e8:	681a      	ldr	r2, [r3, #0]
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	4413      	add	r3, r2
 801f6ee:	4a03      	ldr	r2, [pc, #12]	; (801f6fc <_sbrk+0x60>)
 801f6f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801f6f2:	68fb      	ldr	r3, [r7, #12]
}
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	3710      	adds	r7, #16
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	bd80      	pop	{r7, pc}
 801f6fc:	20010258 	.word	0x20010258
 801f700:	2001d478 	.word	0x2001d478
 801f704:	e000ed08 	.word	0xe000ed08

0801f708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801f708:	b480      	push	{r7}
 801f70a:	af00      	add	r7, sp, #0
	return 1;
 801f70c:	2301      	movs	r3, #1
}
 801f70e:	4618      	mov	r0, r3
 801f710:	46bd      	mov	sp, r7
 801f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f716:	4770      	bx	lr

0801f718 <_kill>:

int _kill(int pid, int sig)
{
 801f718:	b580      	push	{r7, lr}
 801f71a:	b082      	sub	sp, #8
 801f71c:	af00      	add	r7, sp, #0
 801f71e:	6078      	str	r0, [r7, #4]
 801f720:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801f722:	f000 f87d 	bl	801f820 <__errno>
 801f726:	4603      	mov	r3, r0
 801f728:	2216      	movs	r2, #22
 801f72a:	601a      	str	r2, [r3, #0]
	return -1;
 801f72c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f730:	4618      	mov	r0, r3
 801f732:	3708      	adds	r7, #8
 801f734:	46bd      	mov	sp, r7
 801f736:	bd80      	pop	{r7, pc}

0801f738 <_exit>:

void _exit (int status)
{
 801f738:	b580      	push	{r7, lr}
 801f73a:	b082      	sub	sp, #8
 801f73c:	af00      	add	r7, sp, #0
 801f73e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801f740:	f04f 31ff 	mov.w	r1, #4294967295
 801f744:	6878      	ldr	r0, [r7, #4]
 801f746:	f7ff ffe7 	bl	801f718 <_kill>
	while (1) {}
 801f74a:	e7fe      	b.n	801f74a <_exit+0x12>

0801f74c <_write>:
}

int _write(int file, char *ptr, int len)
{
 801f74c:	b580      	push	{r7, lr}
 801f74e:	b086      	sub	sp, #24
 801f750:	af00      	add	r7, sp, #0
 801f752:	60f8      	str	r0, [r7, #12]
 801f754:	60b9      	str	r1, [r7, #8]
 801f756:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801f758:	2300      	movs	r3, #0
 801f75a:	617b      	str	r3, [r7, #20]
 801f75c:	e009      	b.n	801f772 <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801f75e:	68bb      	ldr	r3, [r7, #8]
 801f760:	1c5a      	adds	r2, r3, #1
 801f762:	60ba      	str	r2, [r7, #8]
 801f764:	781b      	ldrb	r3, [r3, #0]
 801f766:	4618      	mov	r0, r3
 801f768:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801f76c:	697b      	ldr	r3, [r7, #20]
 801f76e:	3301      	adds	r3, #1
 801f770:	617b      	str	r3, [r7, #20]
 801f772:	697a      	ldr	r2, [r7, #20]
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	429a      	cmp	r2, r3
 801f778:	dbf1      	blt.n	801f75e <_write+0x12>
		}
	return len;
 801f77a:	687b      	ldr	r3, [r7, #4]
}
 801f77c:	4618      	mov	r0, r3
 801f77e:	3718      	adds	r7, #24
 801f780:	46bd      	mov	sp, r7
 801f782:	bd80      	pop	{r7, pc}

0801f784 <_close>:

int _close(int file)
{
 801f784:	b480      	push	{r7}
 801f786:	b083      	sub	sp, #12
 801f788:	af00      	add	r7, sp, #0
 801f78a:	6078      	str	r0, [r7, #4]
	return -1;
 801f78c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f790:	4618      	mov	r0, r3
 801f792:	370c      	adds	r7, #12
 801f794:	46bd      	mov	sp, r7
 801f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79a:	4770      	bx	lr

0801f79c <_fstat>:

int _fstat(int file, struct stat *st)
{
 801f79c:	b480      	push	{r7}
 801f79e:	b083      	sub	sp, #12
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]
 801f7a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801f7a6:	683b      	ldr	r3, [r7, #0]
 801f7a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801f7ac:	605a      	str	r2, [r3, #4]
	return 0;
 801f7ae:	2300      	movs	r3, #0
}
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	370c      	adds	r7, #12
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ba:	4770      	bx	lr

0801f7bc <_isatty>:

int _isatty(int file)
{
 801f7bc:	b480      	push	{r7}
 801f7be:	b083      	sub	sp, #12
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	6078      	str	r0, [r7, #4]
	return 1;
 801f7c4:	2301      	movs	r3, #1
}
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	370c      	adds	r7, #12
 801f7ca:	46bd      	mov	sp, r7
 801f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7d0:	4770      	bx	lr

0801f7d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801f7d2:	b480      	push	{r7}
 801f7d4:	b085      	sub	sp, #20
 801f7d6:	af00      	add	r7, sp, #0
 801f7d8:	60f8      	str	r0, [r7, #12]
 801f7da:	60b9      	str	r1, [r7, #8]
 801f7dc:	607a      	str	r2, [r7, #4]
	return 0;
 801f7de:	2300      	movs	r3, #0
}
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	3714      	adds	r7, #20
 801f7e4:	46bd      	mov	sp, r7
 801f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ea:	4770      	bx	lr

0801f7ec <_read>:

int _read(int file, char *ptr, int len)
{
 801f7ec:	b580      	push	{r7, lr}
 801f7ee:	b084      	sub	sp, #16
 801f7f0:	af00      	add	r7, sp, #0
 801f7f2:	60f8      	str	r0, [r7, #12]
 801f7f4:	60b9      	str	r1, [r7, #8]
 801f7f6:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801f7f8:	f3af 8000 	nop.w
 801f7fc:	4603      	mov	r3, r0
 801f7fe:	b2da      	uxtb	r2, r3
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	701a      	strb	r2, [r3, #0]
	return 1;
 801f804:	2301      	movs	r3, #1
}
 801f806:	4618      	mov	r0, r3
 801f808:	3710      	adds	r7, #16
 801f80a:	46bd      	mov	sp, r7
 801f80c:	bd80      	pop	{r7, pc}
	...

0801f810 <calloc>:
 801f810:	4b02      	ldr	r3, [pc, #8]	; (801f81c <calloc+0xc>)
 801f812:	460a      	mov	r2, r1
 801f814:	4601      	mov	r1, r0
 801f816:	6818      	ldr	r0, [r3, #0]
 801f818:	f000 ba8c 	b.w	801fd34 <_calloc_r>
 801f81c:	200002b8 	.word	0x200002b8

0801f820 <__errno>:
 801f820:	4b01      	ldr	r3, [pc, #4]	; (801f828 <__errno+0x8>)
 801f822:	6818      	ldr	r0, [r3, #0]
 801f824:	4770      	bx	lr
 801f826:	bf00      	nop
 801f828:	200002b8 	.word	0x200002b8

0801f82c <__sflush_r>:
 801f82c:	898a      	ldrh	r2, [r1, #12]
 801f82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f832:	4605      	mov	r5, r0
 801f834:	0710      	lsls	r0, r2, #28
 801f836:	460c      	mov	r4, r1
 801f838:	d458      	bmi.n	801f8ec <__sflush_r+0xc0>
 801f83a:	684b      	ldr	r3, [r1, #4]
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	dc05      	bgt.n	801f84c <__sflush_r+0x20>
 801f840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f842:	2b00      	cmp	r3, #0
 801f844:	dc02      	bgt.n	801f84c <__sflush_r+0x20>
 801f846:	2000      	movs	r0, #0
 801f848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f84e:	2e00      	cmp	r6, #0
 801f850:	d0f9      	beq.n	801f846 <__sflush_r+0x1a>
 801f852:	2300      	movs	r3, #0
 801f854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f858:	682f      	ldr	r7, [r5, #0]
 801f85a:	602b      	str	r3, [r5, #0]
 801f85c:	d032      	beq.n	801f8c4 <__sflush_r+0x98>
 801f85e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f860:	89a3      	ldrh	r3, [r4, #12]
 801f862:	075a      	lsls	r2, r3, #29
 801f864:	d505      	bpl.n	801f872 <__sflush_r+0x46>
 801f866:	6863      	ldr	r3, [r4, #4]
 801f868:	1ac0      	subs	r0, r0, r3
 801f86a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f86c:	b10b      	cbz	r3, 801f872 <__sflush_r+0x46>
 801f86e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f870:	1ac0      	subs	r0, r0, r3
 801f872:	2300      	movs	r3, #0
 801f874:	4602      	mov	r2, r0
 801f876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f878:	6a21      	ldr	r1, [r4, #32]
 801f87a:	4628      	mov	r0, r5
 801f87c:	47b0      	blx	r6
 801f87e:	1c43      	adds	r3, r0, #1
 801f880:	89a3      	ldrh	r3, [r4, #12]
 801f882:	d106      	bne.n	801f892 <__sflush_r+0x66>
 801f884:	6829      	ldr	r1, [r5, #0]
 801f886:	291d      	cmp	r1, #29
 801f888:	d82c      	bhi.n	801f8e4 <__sflush_r+0xb8>
 801f88a:	4a2a      	ldr	r2, [pc, #168]	; (801f934 <__sflush_r+0x108>)
 801f88c:	40ca      	lsrs	r2, r1
 801f88e:	07d6      	lsls	r6, r2, #31
 801f890:	d528      	bpl.n	801f8e4 <__sflush_r+0xb8>
 801f892:	2200      	movs	r2, #0
 801f894:	6062      	str	r2, [r4, #4]
 801f896:	04d9      	lsls	r1, r3, #19
 801f898:	6922      	ldr	r2, [r4, #16]
 801f89a:	6022      	str	r2, [r4, #0]
 801f89c:	d504      	bpl.n	801f8a8 <__sflush_r+0x7c>
 801f89e:	1c42      	adds	r2, r0, #1
 801f8a0:	d101      	bne.n	801f8a6 <__sflush_r+0x7a>
 801f8a2:	682b      	ldr	r3, [r5, #0]
 801f8a4:	b903      	cbnz	r3, 801f8a8 <__sflush_r+0x7c>
 801f8a6:	6560      	str	r0, [r4, #84]	; 0x54
 801f8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f8aa:	602f      	str	r7, [r5, #0]
 801f8ac:	2900      	cmp	r1, #0
 801f8ae:	d0ca      	beq.n	801f846 <__sflush_r+0x1a>
 801f8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f8b4:	4299      	cmp	r1, r3
 801f8b6:	d002      	beq.n	801f8be <__sflush_r+0x92>
 801f8b8:	4628      	mov	r0, r5
 801f8ba:	f000 fa4b 	bl	801fd54 <_free_r>
 801f8be:	2000      	movs	r0, #0
 801f8c0:	6360      	str	r0, [r4, #52]	; 0x34
 801f8c2:	e7c1      	b.n	801f848 <__sflush_r+0x1c>
 801f8c4:	6a21      	ldr	r1, [r4, #32]
 801f8c6:	2301      	movs	r3, #1
 801f8c8:	4628      	mov	r0, r5
 801f8ca:	47b0      	blx	r6
 801f8cc:	1c41      	adds	r1, r0, #1
 801f8ce:	d1c7      	bne.n	801f860 <__sflush_r+0x34>
 801f8d0:	682b      	ldr	r3, [r5, #0]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d0c4      	beq.n	801f860 <__sflush_r+0x34>
 801f8d6:	2b1d      	cmp	r3, #29
 801f8d8:	d001      	beq.n	801f8de <__sflush_r+0xb2>
 801f8da:	2b16      	cmp	r3, #22
 801f8dc:	d101      	bne.n	801f8e2 <__sflush_r+0xb6>
 801f8de:	602f      	str	r7, [r5, #0]
 801f8e0:	e7b1      	b.n	801f846 <__sflush_r+0x1a>
 801f8e2:	89a3      	ldrh	r3, [r4, #12]
 801f8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f8e8:	81a3      	strh	r3, [r4, #12]
 801f8ea:	e7ad      	b.n	801f848 <__sflush_r+0x1c>
 801f8ec:	690f      	ldr	r7, [r1, #16]
 801f8ee:	2f00      	cmp	r7, #0
 801f8f0:	d0a9      	beq.n	801f846 <__sflush_r+0x1a>
 801f8f2:	0793      	lsls	r3, r2, #30
 801f8f4:	680e      	ldr	r6, [r1, #0]
 801f8f6:	bf08      	it	eq
 801f8f8:	694b      	ldreq	r3, [r1, #20]
 801f8fa:	600f      	str	r7, [r1, #0]
 801f8fc:	bf18      	it	ne
 801f8fe:	2300      	movne	r3, #0
 801f900:	eba6 0807 	sub.w	r8, r6, r7
 801f904:	608b      	str	r3, [r1, #8]
 801f906:	f1b8 0f00 	cmp.w	r8, #0
 801f90a:	dd9c      	ble.n	801f846 <__sflush_r+0x1a>
 801f90c:	6a21      	ldr	r1, [r4, #32]
 801f90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f910:	4643      	mov	r3, r8
 801f912:	463a      	mov	r2, r7
 801f914:	4628      	mov	r0, r5
 801f916:	47b0      	blx	r6
 801f918:	2800      	cmp	r0, #0
 801f91a:	dc06      	bgt.n	801f92a <__sflush_r+0xfe>
 801f91c:	89a3      	ldrh	r3, [r4, #12]
 801f91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f922:	81a3      	strh	r3, [r4, #12]
 801f924:	f04f 30ff 	mov.w	r0, #4294967295
 801f928:	e78e      	b.n	801f848 <__sflush_r+0x1c>
 801f92a:	4407      	add	r7, r0
 801f92c:	eba8 0800 	sub.w	r8, r8, r0
 801f930:	e7e9      	b.n	801f906 <__sflush_r+0xda>
 801f932:	bf00      	nop
 801f934:	20400001 	.word	0x20400001

0801f938 <_fflush_r>:
 801f938:	b538      	push	{r3, r4, r5, lr}
 801f93a:	690b      	ldr	r3, [r1, #16]
 801f93c:	4605      	mov	r5, r0
 801f93e:	460c      	mov	r4, r1
 801f940:	b913      	cbnz	r3, 801f948 <_fflush_r+0x10>
 801f942:	2500      	movs	r5, #0
 801f944:	4628      	mov	r0, r5
 801f946:	bd38      	pop	{r3, r4, r5, pc}
 801f948:	b118      	cbz	r0, 801f952 <_fflush_r+0x1a>
 801f94a:	6983      	ldr	r3, [r0, #24]
 801f94c:	b90b      	cbnz	r3, 801f952 <_fflush_r+0x1a>
 801f94e:	f000 f887 	bl	801fa60 <__sinit>
 801f952:	4b14      	ldr	r3, [pc, #80]	; (801f9a4 <_fflush_r+0x6c>)
 801f954:	429c      	cmp	r4, r3
 801f956:	d11b      	bne.n	801f990 <_fflush_r+0x58>
 801f958:	686c      	ldr	r4, [r5, #4]
 801f95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d0ef      	beq.n	801f942 <_fflush_r+0xa>
 801f962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f964:	07d0      	lsls	r0, r2, #31
 801f966:	d404      	bmi.n	801f972 <_fflush_r+0x3a>
 801f968:	0599      	lsls	r1, r3, #22
 801f96a:	d402      	bmi.n	801f972 <_fflush_r+0x3a>
 801f96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f96e:	f000 f93a 	bl	801fbe6 <__retarget_lock_acquire_recursive>
 801f972:	4628      	mov	r0, r5
 801f974:	4621      	mov	r1, r4
 801f976:	f7ff ff59 	bl	801f82c <__sflush_r>
 801f97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f97c:	07da      	lsls	r2, r3, #31
 801f97e:	4605      	mov	r5, r0
 801f980:	d4e0      	bmi.n	801f944 <_fflush_r+0xc>
 801f982:	89a3      	ldrh	r3, [r4, #12]
 801f984:	059b      	lsls	r3, r3, #22
 801f986:	d4dd      	bmi.n	801f944 <_fflush_r+0xc>
 801f988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f98a:	f000 f92d 	bl	801fbe8 <__retarget_lock_release_recursive>
 801f98e:	e7d9      	b.n	801f944 <_fflush_r+0xc>
 801f990:	4b05      	ldr	r3, [pc, #20]	; (801f9a8 <_fflush_r+0x70>)
 801f992:	429c      	cmp	r4, r3
 801f994:	d101      	bne.n	801f99a <_fflush_r+0x62>
 801f996:	68ac      	ldr	r4, [r5, #8]
 801f998:	e7df      	b.n	801f95a <_fflush_r+0x22>
 801f99a:	4b04      	ldr	r3, [pc, #16]	; (801f9ac <_fflush_r+0x74>)
 801f99c:	429c      	cmp	r4, r3
 801f99e:	bf08      	it	eq
 801f9a0:	68ec      	ldreq	r4, [r5, #12]
 801f9a2:	e7da      	b.n	801f95a <_fflush_r+0x22>
 801f9a4:	08023818 	.word	0x08023818
 801f9a8:	08023838 	.word	0x08023838
 801f9ac:	080237f8 	.word	0x080237f8

0801f9b0 <std>:
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	b510      	push	{r4, lr}
 801f9b4:	4604      	mov	r4, r0
 801f9b6:	e9c0 3300 	strd	r3, r3, [r0]
 801f9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f9be:	6083      	str	r3, [r0, #8]
 801f9c0:	8181      	strh	r1, [r0, #12]
 801f9c2:	6643      	str	r3, [r0, #100]	; 0x64
 801f9c4:	81c2      	strh	r2, [r0, #14]
 801f9c6:	6183      	str	r3, [r0, #24]
 801f9c8:	4619      	mov	r1, r3
 801f9ca:	2208      	movs	r2, #8
 801f9cc:	305c      	adds	r0, #92	; 0x5c
 801f9ce:	f000 f9a9 	bl	801fd24 <memset>
 801f9d2:	4b05      	ldr	r3, [pc, #20]	; (801f9e8 <std+0x38>)
 801f9d4:	6263      	str	r3, [r4, #36]	; 0x24
 801f9d6:	4b05      	ldr	r3, [pc, #20]	; (801f9ec <std+0x3c>)
 801f9d8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f9da:	4b05      	ldr	r3, [pc, #20]	; (801f9f0 <std+0x40>)
 801f9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f9de:	4b05      	ldr	r3, [pc, #20]	; (801f9f4 <std+0x44>)
 801f9e0:	6224      	str	r4, [r4, #32]
 801f9e2:	6323      	str	r3, [r4, #48]	; 0x30
 801f9e4:	bd10      	pop	{r4, pc}
 801f9e6:	bf00      	nop
 801f9e8:	0801ff09 	.word	0x0801ff09
 801f9ec:	0801ff2b 	.word	0x0801ff2b
 801f9f0:	0801ff63 	.word	0x0801ff63
 801f9f4:	0801ff87 	.word	0x0801ff87

0801f9f8 <_cleanup_r>:
 801f9f8:	4901      	ldr	r1, [pc, #4]	; (801fa00 <_cleanup_r+0x8>)
 801f9fa:	f000 b8af 	b.w	801fb5c <_fwalk_reent>
 801f9fe:	bf00      	nop
 801fa00:	0801f939 	.word	0x0801f939

0801fa04 <__sfmoreglue>:
 801fa04:	b570      	push	{r4, r5, r6, lr}
 801fa06:	1e4a      	subs	r2, r1, #1
 801fa08:	2568      	movs	r5, #104	; 0x68
 801fa0a:	4355      	muls	r5, r2
 801fa0c:	460e      	mov	r6, r1
 801fa0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fa12:	f000 f9ef 	bl	801fdf4 <_malloc_r>
 801fa16:	4604      	mov	r4, r0
 801fa18:	b140      	cbz	r0, 801fa2c <__sfmoreglue+0x28>
 801fa1a:	2100      	movs	r1, #0
 801fa1c:	e9c0 1600 	strd	r1, r6, [r0]
 801fa20:	300c      	adds	r0, #12
 801fa22:	60a0      	str	r0, [r4, #8]
 801fa24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fa28:	f000 f97c 	bl	801fd24 <memset>
 801fa2c:	4620      	mov	r0, r4
 801fa2e:	bd70      	pop	{r4, r5, r6, pc}

0801fa30 <__sfp_lock_acquire>:
 801fa30:	4801      	ldr	r0, [pc, #4]	; (801fa38 <__sfp_lock_acquire+0x8>)
 801fa32:	f000 b8d8 	b.w	801fbe6 <__retarget_lock_acquire_recursive>
 801fa36:	bf00      	nop
 801fa38:	2001d46c 	.word	0x2001d46c

0801fa3c <__sfp_lock_release>:
 801fa3c:	4801      	ldr	r0, [pc, #4]	; (801fa44 <__sfp_lock_release+0x8>)
 801fa3e:	f000 b8d3 	b.w	801fbe8 <__retarget_lock_release_recursive>
 801fa42:	bf00      	nop
 801fa44:	2001d46c 	.word	0x2001d46c

0801fa48 <__sinit_lock_acquire>:
 801fa48:	4801      	ldr	r0, [pc, #4]	; (801fa50 <__sinit_lock_acquire+0x8>)
 801fa4a:	f000 b8cc 	b.w	801fbe6 <__retarget_lock_acquire_recursive>
 801fa4e:	bf00      	nop
 801fa50:	2001d46b 	.word	0x2001d46b

0801fa54 <__sinit_lock_release>:
 801fa54:	4801      	ldr	r0, [pc, #4]	; (801fa5c <__sinit_lock_release+0x8>)
 801fa56:	f000 b8c7 	b.w	801fbe8 <__retarget_lock_release_recursive>
 801fa5a:	bf00      	nop
 801fa5c:	2001d46b 	.word	0x2001d46b

0801fa60 <__sinit>:
 801fa60:	b510      	push	{r4, lr}
 801fa62:	4604      	mov	r4, r0
 801fa64:	f7ff fff0 	bl	801fa48 <__sinit_lock_acquire>
 801fa68:	69a3      	ldr	r3, [r4, #24]
 801fa6a:	b11b      	cbz	r3, 801fa74 <__sinit+0x14>
 801fa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa70:	f7ff bff0 	b.w	801fa54 <__sinit_lock_release>
 801fa74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fa78:	6523      	str	r3, [r4, #80]	; 0x50
 801fa7a:	4b13      	ldr	r3, [pc, #76]	; (801fac8 <__sinit+0x68>)
 801fa7c:	4a13      	ldr	r2, [pc, #76]	; (801facc <__sinit+0x6c>)
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	62a2      	str	r2, [r4, #40]	; 0x28
 801fa82:	42a3      	cmp	r3, r4
 801fa84:	bf04      	itt	eq
 801fa86:	2301      	moveq	r3, #1
 801fa88:	61a3      	streq	r3, [r4, #24]
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	f000 f820 	bl	801fad0 <__sfp>
 801fa90:	6060      	str	r0, [r4, #4]
 801fa92:	4620      	mov	r0, r4
 801fa94:	f000 f81c 	bl	801fad0 <__sfp>
 801fa98:	60a0      	str	r0, [r4, #8]
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	f000 f818 	bl	801fad0 <__sfp>
 801faa0:	2200      	movs	r2, #0
 801faa2:	60e0      	str	r0, [r4, #12]
 801faa4:	2104      	movs	r1, #4
 801faa6:	6860      	ldr	r0, [r4, #4]
 801faa8:	f7ff ff82 	bl	801f9b0 <std>
 801faac:	68a0      	ldr	r0, [r4, #8]
 801faae:	2201      	movs	r2, #1
 801fab0:	2109      	movs	r1, #9
 801fab2:	f7ff ff7d 	bl	801f9b0 <std>
 801fab6:	68e0      	ldr	r0, [r4, #12]
 801fab8:	2202      	movs	r2, #2
 801faba:	2112      	movs	r1, #18
 801fabc:	f7ff ff78 	bl	801f9b0 <std>
 801fac0:	2301      	movs	r3, #1
 801fac2:	61a3      	str	r3, [r4, #24]
 801fac4:	e7d2      	b.n	801fa6c <__sinit+0xc>
 801fac6:	bf00      	nop
 801fac8:	08023858 	.word	0x08023858
 801facc:	0801f9f9 	.word	0x0801f9f9

0801fad0 <__sfp>:
 801fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fad2:	4607      	mov	r7, r0
 801fad4:	f7ff ffac 	bl	801fa30 <__sfp_lock_acquire>
 801fad8:	4b1e      	ldr	r3, [pc, #120]	; (801fb54 <__sfp+0x84>)
 801fada:	681e      	ldr	r6, [r3, #0]
 801fadc:	69b3      	ldr	r3, [r6, #24]
 801fade:	b913      	cbnz	r3, 801fae6 <__sfp+0x16>
 801fae0:	4630      	mov	r0, r6
 801fae2:	f7ff ffbd 	bl	801fa60 <__sinit>
 801fae6:	3648      	adds	r6, #72	; 0x48
 801fae8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801faec:	3b01      	subs	r3, #1
 801faee:	d503      	bpl.n	801faf8 <__sfp+0x28>
 801faf0:	6833      	ldr	r3, [r6, #0]
 801faf2:	b30b      	cbz	r3, 801fb38 <__sfp+0x68>
 801faf4:	6836      	ldr	r6, [r6, #0]
 801faf6:	e7f7      	b.n	801fae8 <__sfp+0x18>
 801faf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fafc:	b9d5      	cbnz	r5, 801fb34 <__sfp+0x64>
 801fafe:	4b16      	ldr	r3, [pc, #88]	; (801fb58 <__sfp+0x88>)
 801fb00:	60e3      	str	r3, [r4, #12]
 801fb02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fb06:	6665      	str	r5, [r4, #100]	; 0x64
 801fb08:	f000 f86c 	bl	801fbe4 <__retarget_lock_init_recursive>
 801fb0c:	f7ff ff96 	bl	801fa3c <__sfp_lock_release>
 801fb10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fb14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fb18:	6025      	str	r5, [r4, #0]
 801fb1a:	61a5      	str	r5, [r4, #24]
 801fb1c:	2208      	movs	r2, #8
 801fb1e:	4629      	mov	r1, r5
 801fb20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fb24:	f000 f8fe 	bl	801fd24 <memset>
 801fb28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fb2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fb30:	4620      	mov	r0, r4
 801fb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb34:	3468      	adds	r4, #104	; 0x68
 801fb36:	e7d9      	b.n	801faec <__sfp+0x1c>
 801fb38:	2104      	movs	r1, #4
 801fb3a:	4638      	mov	r0, r7
 801fb3c:	f7ff ff62 	bl	801fa04 <__sfmoreglue>
 801fb40:	4604      	mov	r4, r0
 801fb42:	6030      	str	r0, [r6, #0]
 801fb44:	2800      	cmp	r0, #0
 801fb46:	d1d5      	bne.n	801faf4 <__sfp+0x24>
 801fb48:	f7ff ff78 	bl	801fa3c <__sfp_lock_release>
 801fb4c:	230c      	movs	r3, #12
 801fb4e:	603b      	str	r3, [r7, #0]
 801fb50:	e7ee      	b.n	801fb30 <__sfp+0x60>
 801fb52:	bf00      	nop
 801fb54:	08023858 	.word	0x08023858
 801fb58:	ffff0001 	.word	0xffff0001

0801fb5c <_fwalk_reent>:
 801fb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb60:	4606      	mov	r6, r0
 801fb62:	4688      	mov	r8, r1
 801fb64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fb68:	2700      	movs	r7, #0
 801fb6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fb6e:	f1b9 0901 	subs.w	r9, r9, #1
 801fb72:	d505      	bpl.n	801fb80 <_fwalk_reent+0x24>
 801fb74:	6824      	ldr	r4, [r4, #0]
 801fb76:	2c00      	cmp	r4, #0
 801fb78:	d1f7      	bne.n	801fb6a <_fwalk_reent+0xe>
 801fb7a:	4638      	mov	r0, r7
 801fb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb80:	89ab      	ldrh	r3, [r5, #12]
 801fb82:	2b01      	cmp	r3, #1
 801fb84:	d907      	bls.n	801fb96 <_fwalk_reent+0x3a>
 801fb86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb8a:	3301      	adds	r3, #1
 801fb8c:	d003      	beq.n	801fb96 <_fwalk_reent+0x3a>
 801fb8e:	4629      	mov	r1, r5
 801fb90:	4630      	mov	r0, r6
 801fb92:	47c0      	blx	r8
 801fb94:	4307      	orrs	r7, r0
 801fb96:	3568      	adds	r5, #104	; 0x68
 801fb98:	e7e9      	b.n	801fb6e <_fwalk_reent+0x12>
	...

0801fb9c <__libc_init_array>:
 801fb9c:	b570      	push	{r4, r5, r6, lr}
 801fb9e:	4d0d      	ldr	r5, [pc, #52]	; (801fbd4 <__libc_init_array+0x38>)
 801fba0:	4c0d      	ldr	r4, [pc, #52]	; (801fbd8 <__libc_init_array+0x3c>)
 801fba2:	1b64      	subs	r4, r4, r5
 801fba4:	10a4      	asrs	r4, r4, #2
 801fba6:	2600      	movs	r6, #0
 801fba8:	42a6      	cmp	r6, r4
 801fbaa:	d109      	bne.n	801fbc0 <__libc_init_array+0x24>
 801fbac:	4d0b      	ldr	r5, [pc, #44]	; (801fbdc <__libc_init_array+0x40>)
 801fbae:	4c0c      	ldr	r4, [pc, #48]	; (801fbe0 <__libc_init_array+0x44>)
 801fbb0:	f002 ff5c 	bl	8022a6c <_init>
 801fbb4:	1b64      	subs	r4, r4, r5
 801fbb6:	10a4      	asrs	r4, r4, #2
 801fbb8:	2600      	movs	r6, #0
 801fbba:	42a6      	cmp	r6, r4
 801fbbc:	d105      	bne.n	801fbca <__libc_init_array+0x2e>
 801fbbe:	bd70      	pop	{r4, r5, r6, pc}
 801fbc0:	f855 3b04 	ldr.w	r3, [r5], #4
 801fbc4:	4798      	blx	r3
 801fbc6:	3601      	adds	r6, #1
 801fbc8:	e7ee      	b.n	801fba8 <__libc_init_array+0xc>
 801fbca:	f855 3b04 	ldr.w	r3, [r5], #4
 801fbce:	4798      	blx	r3
 801fbd0:	3601      	adds	r6, #1
 801fbd2:	e7f2      	b.n	801fbba <__libc_init_array+0x1e>
 801fbd4:	08023b2c 	.word	0x08023b2c
 801fbd8:	08023b2c 	.word	0x08023b2c
 801fbdc:	08023b2c 	.word	0x08023b2c
 801fbe0:	08023b30 	.word	0x08023b30

0801fbe4 <__retarget_lock_init_recursive>:
 801fbe4:	4770      	bx	lr

0801fbe6 <__retarget_lock_acquire_recursive>:
 801fbe6:	4770      	bx	lr

0801fbe8 <__retarget_lock_release_recursive>:
 801fbe8:	4770      	bx	lr

0801fbea <__swhatbuf_r>:
 801fbea:	b570      	push	{r4, r5, r6, lr}
 801fbec:	460e      	mov	r6, r1
 801fbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fbf2:	2900      	cmp	r1, #0
 801fbf4:	b096      	sub	sp, #88	; 0x58
 801fbf6:	4614      	mov	r4, r2
 801fbf8:	461d      	mov	r5, r3
 801fbfa:	da07      	bge.n	801fc0c <__swhatbuf_r+0x22>
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	602b      	str	r3, [r5, #0]
 801fc00:	89b3      	ldrh	r3, [r6, #12]
 801fc02:	061a      	lsls	r2, r3, #24
 801fc04:	d410      	bmi.n	801fc28 <__swhatbuf_r+0x3e>
 801fc06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fc0a:	e00e      	b.n	801fc2a <__swhatbuf_r+0x40>
 801fc0c:	466a      	mov	r2, sp
 801fc0e:	f001 f995 	bl	8020f3c <_fstat_r>
 801fc12:	2800      	cmp	r0, #0
 801fc14:	dbf2      	blt.n	801fbfc <__swhatbuf_r+0x12>
 801fc16:	9a01      	ldr	r2, [sp, #4]
 801fc18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fc1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fc20:	425a      	negs	r2, r3
 801fc22:	415a      	adcs	r2, r3
 801fc24:	602a      	str	r2, [r5, #0]
 801fc26:	e7ee      	b.n	801fc06 <__swhatbuf_r+0x1c>
 801fc28:	2340      	movs	r3, #64	; 0x40
 801fc2a:	2000      	movs	r0, #0
 801fc2c:	6023      	str	r3, [r4, #0]
 801fc2e:	b016      	add	sp, #88	; 0x58
 801fc30:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fc34 <__smakebuf_r>:
 801fc34:	898b      	ldrh	r3, [r1, #12]
 801fc36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fc38:	079d      	lsls	r5, r3, #30
 801fc3a:	4606      	mov	r6, r0
 801fc3c:	460c      	mov	r4, r1
 801fc3e:	d507      	bpl.n	801fc50 <__smakebuf_r+0x1c>
 801fc40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fc44:	6023      	str	r3, [r4, #0]
 801fc46:	6123      	str	r3, [r4, #16]
 801fc48:	2301      	movs	r3, #1
 801fc4a:	6163      	str	r3, [r4, #20]
 801fc4c:	b002      	add	sp, #8
 801fc4e:	bd70      	pop	{r4, r5, r6, pc}
 801fc50:	ab01      	add	r3, sp, #4
 801fc52:	466a      	mov	r2, sp
 801fc54:	f7ff ffc9 	bl	801fbea <__swhatbuf_r>
 801fc58:	9900      	ldr	r1, [sp, #0]
 801fc5a:	4605      	mov	r5, r0
 801fc5c:	4630      	mov	r0, r6
 801fc5e:	f000 f8c9 	bl	801fdf4 <_malloc_r>
 801fc62:	b948      	cbnz	r0, 801fc78 <__smakebuf_r+0x44>
 801fc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc68:	059a      	lsls	r2, r3, #22
 801fc6a:	d4ef      	bmi.n	801fc4c <__smakebuf_r+0x18>
 801fc6c:	f023 0303 	bic.w	r3, r3, #3
 801fc70:	f043 0302 	orr.w	r3, r3, #2
 801fc74:	81a3      	strh	r3, [r4, #12]
 801fc76:	e7e3      	b.n	801fc40 <__smakebuf_r+0xc>
 801fc78:	4b0d      	ldr	r3, [pc, #52]	; (801fcb0 <__smakebuf_r+0x7c>)
 801fc7a:	62b3      	str	r3, [r6, #40]	; 0x28
 801fc7c:	89a3      	ldrh	r3, [r4, #12]
 801fc7e:	6020      	str	r0, [r4, #0]
 801fc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc84:	81a3      	strh	r3, [r4, #12]
 801fc86:	9b00      	ldr	r3, [sp, #0]
 801fc88:	6163      	str	r3, [r4, #20]
 801fc8a:	9b01      	ldr	r3, [sp, #4]
 801fc8c:	6120      	str	r0, [r4, #16]
 801fc8e:	b15b      	cbz	r3, 801fca8 <__smakebuf_r+0x74>
 801fc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc94:	4630      	mov	r0, r6
 801fc96:	f001 fcd3 	bl	8021640 <_isatty_r>
 801fc9a:	b128      	cbz	r0, 801fca8 <__smakebuf_r+0x74>
 801fc9c:	89a3      	ldrh	r3, [r4, #12]
 801fc9e:	f023 0303 	bic.w	r3, r3, #3
 801fca2:	f043 0301 	orr.w	r3, r3, #1
 801fca6:	81a3      	strh	r3, [r4, #12]
 801fca8:	89a0      	ldrh	r0, [r4, #12]
 801fcaa:	4305      	orrs	r5, r0
 801fcac:	81a5      	strh	r5, [r4, #12]
 801fcae:	e7cd      	b.n	801fc4c <__smakebuf_r+0x18>
 801fcb0:	0801f9f9 	.word	0x0801f9f9

0801fcb4 <malloc>:
 801fcb4:	4b02      	ldr	r3, [pc, #8]	; (801fcc0 <malloc+0xc>)
 801fcb6:	4601      	mov	r1, r0
 801fcb8:	6818      	ldr	r0, [r3, #0]
 801fcba:	f000 b89b 	b.w	801fdf4 <_malloc_r>
 801fcbe:	bf00      	nop
 801fcc0:	200002b8 	.word	0x200002b8

0801fcc4 <free>:
 801fcc4:	4b02      	ldr	r3, [pc, #8]	; (801fcd0 <free+0xc>)
 801fcc6:	4601      	mov	r1, r0
 801fcc8:	6818      	ldr	r0, [r3, #0]
 801fcca:	f000 b843 	b.w	801fd54 <_free_r>
 801fcce:	bf00      	nop
 801fcd0:	200002b8 	.word	0x200002b8

0801fcd4 <memcpy>:
 801fcd4:	440a      	add	r2, r1
 801fcd6:	4291      	cmp	r1, r2
 801fcd8:	f100 33ff 	add.w	r3, r0, #4294967295
 801fcdc:	d100      	bne.n	801fce0 <memcpy+0xc>
 801fcde:	4770      	bx	lr
 801fce0:	b510      	push	{r4, lr}
 801fce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fcea:	4291      	cmp	r1, r2
 801fcec:	d1f9      	bne.n	801fce2 <memcpy+0xe>
 801fcee:	bd10      	pop	{r4, pc}

0801fcf0 <memmove>:
 801fcf0:	4288      	cmp	r0, r1
 801fcf2:	b510      	push	{r4, lr}
 801fcf4:	eb01 0402 	add.w	r4, r1, r2
 801fcf8:	d902      	bls.n	801fd00 <memmove+0x10>
 801fcfa:	4284      	cmp	r4, r0
 801fcfc:	4623      	mov	r3, r4
 801fcfe:	d807      	bhi.n	801fd10 <memmove+0x20>
 801fd00:	1e43      	subs	r3, r0, #1
 801fd02:	42a1      	cmp	r1, r4
 801fd04:	d008      	beq.n	801fd18 <memmove+0x28>
 801fd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fd0e:	e7f8      	b.n	801fd02 <memmove+0x12>
 801fd10:	4402      	add	r2, r0
 801fd12:	4601      	mov	r1, r0
 801fd14:	428a      	cmp	r2, r1
 801fd16:	d100      	bne.n	801fd1a <memmove+0x2a>
 801fd18:	bd10      	pop	{r4, pc}
 801fd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fd22:	e7f7      	b.n	801fd14 <memmove+0x24>

0801fd24 <memset>:
 801fd24:	4402      	add	r2, r0
 801fd26:	4603      	mov	r3, r0
 801fd28:	4293      	cmp	r3, r2
 801fd2a:	d100      	bne.n	801fd2e <memset+0xa>
 801fd2c:	4770      	bx	lr
 801fd2e:	f803 1b01 	strb.w	r1, [r3], #1
 801fd32:	e7f9      	b.n	801fd28 <memset+0x4>

0801fd34 <_calloc_r>:
 801fd34:	b513      	push	{r0, r1, r4, lr}
 801fd36:	434a      	muls	r2, r1
 801fd38:	4611      	mov	r1, r2
 801fd3a:	9201      	str	r2, [sp, #4]
 801fd3c:	f000 f85a 	bl	801fdf4 <_malloc_r>
 801fd40:	4604      	mov	r4, r0
 801fd42:	b118      	cbz	r0, 801fd4c <_calloc_r+0x18>
 801fd44:	9a01      	ldr	r2, [sp, #4]
 801fd46:	2100      	movs	r1, #0
 801fd48:	f7ff ffec 	bl	801fd24 <memset>
 801fd4c:	4620      	mov	r0, r4
 801fd4e:	b002      	add	sp, #8
 801fd50:	bd10      	pop	{r4, pc}
	...

0801fd54 <_free_r>:
 801fd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd56:	2900      	cmp	r1, #0
 801fd58:	d048      	beq.n	801fdec <_free_r+0x98>
 801fd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd5e:	9001      	str	r0, [sp, #4]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	f1a1 0404 	sub.w	r4, r1, #4
 801fd66:	bfb8      	it	lt
 801fd68:	18e4      	addlt	r4, r4, r3
 801fd6a:	f001 fc9d 	bl	80216a8 <__malloc_lock>
 801fd6e:	4a20      	ldr	r2, [pc, #128]	; (801fdf0 <_free_r+0x9c>)
 801fd70:	9801      	ldr	r0, [sp, #4]
 801fd72:	6813      	ldr	r3, [r2, #0]
 801fd74:	4615      	mov	r5, r2
 801fd76:	b933      	cbnz	r3, 801fd86 <_free_r+0x32>
 801fd78:	6063      	str	r3, [r4, #4]
 801fd7a:	6014      	str	r4, [r2, #0]
 801fd7c:	b003      	add	sp, #12
 801fd7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fd82:	f001 bc97 	b.w	80216b4 <__malloc_unlock>
 801fd86:	42a3      	cmp	r3, r4
 801fd88:	d90b      	bls.n	801fda2 <_free_r+0x4e>
 801fd8a:	6821      	ldr	r1, [r4, #0]
 801fd8c:	1862      	adds	r2, r4, r1
 801fd8e:	4293      	cmp	r3, r2
 801fd90:	bf04      	itt	eq
 801fd92:	681a      	ldreq	r2, [r3, #0]
 801fd94:	685b      	ldreq	r3, [r3, #4]
 801fd96:	6063      	str	r3, [r4, #4]
 801fd98:	bf04      	itt	eq
 801fd9a:	1852      	addeq	r2, r2, r1
 801fd9c:	6022      	streq	r2, [r4, #0]
 801fd9e:	602c      	str	r4, [r5, #0]
 801fda0:	e7ec      	b.n	801fd7c <_free_r+0x28>
 801fda2:	461a      	mov	r2, r3
 801fda4:	685b      	ldr	r3, [r3, #4]
 801fda6:	b10b      	cbz	r3, 801fdac <_free_r+0x58>
 801fda8:	42a3      	cmp	r3, r4
 801fdaa:	d9fa      	bls.n	801fda2 <_free_r+0x4e>
 801fdac:	6811      	ldr	r1, [r2, #0]
 801fdae:	1855      	adds	r5, r2, r1
 801fdb0:	42a5      	cmp	r5, r4
 801fdb2:	d10b      	bne.n	801fdcc <_free_r+0x78>
 801fdb4:	6824      	ldr	r4, [r4, #0]
 801fdb6:	4421      	add	r1, r4
 801fdb8:	1854      	adds	r4, r2, r1
 801fdba:	42a3      	cmp	r3, r4
 801fdbc:	6011      	str	r1, [r2, #0]
 801fdbe:	d1dd      	bne.n	801fd7c <_free_r+0x28>
 801fdc0:	681c      	ldr	r4, [r3, #0]
 801fdc2:	685b      	ldr	r3, [r3, #4]
 801fdc4:	6053      	str	r3, [r2, #4]
 801fdc6:	4421      	add	r1, r4
 801fdc8:	6011      	str	r1, [r2, #0]
 801fdca:	e7d7      	b.n	801fd7c <_free_r+0x28>
 801fdcc:	d902      	bls.n	801fdd4 <_free_r+0x80>
 801fdce:	230c      	movs	r3, #12
 801fdd0:	6003      	str	r3, [r0, #0]
 801fdd2:	e7d3      	b.n	801fd7c <_free_r+0x28>
 801fdd4:	6825      	ldr	r5, [r4, #0]
 801fdd6:	1961      	adds	r1, r4, r5
 801fdd8:	428b      	cmp	r3, r1
 801fdda:	bf04      	itt	eq
 801fddc:	6819      	ldreq	r1, [r3, #0]
 801fdde:	685b      	ldreq	r3, [r3, #4]
 801fde0:	6063      	str	r3, [r4, #4]
 801fde2:	bf04      	itt	eq
 801fde4:	1949      	addeq	r1, r1, r5
 801fde6:	6021      	streq	r1, [r4, #0]
 801fde8:	6054      	str	r4, [r2, #4]
 801fdea:	e7c7      	b.n	801fd7c <_free_r+0x28>
 801fdec:	b003      	add	sp, #12
 801fdee:	bd30      	pop	{r4, r5, pc}
 801fdf0:	2001025c 	.word	0x2001025c

0801fdf4 <_malloc_r>:
 801fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdf6:	1ccd      	adds	r5, r1, #3
 801fdf8:	f025 0503 	bic.w	r5, r5, #3
 801fdfc:	3508      	adds	r5, #8
 801fdfe:	2d0c      	cmp	r5, #12
 801fe00:	bf38      	it	cc
 801fe02:	250c      	movcc	r5, #12
 801fe04:	2d00      	cmp	r5, #0
 801fe06:	4606      	mov	r6, r0
 801fe08:	db01      	blt.n	801fe0e <_malloc_r+0x1a>
 801fe0a:	42a9      	cmp	r1, r5
 801fe0c:	d903      	bls.n	801fe16 <_malloc_r+0x22>
 801fe0e:	230c      	movs	r3, #12
 801fe10:	6033      	str	r3, [r6, #0]
 801fe12:	2000      	movs	r0, #0
 801fe14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe16:	f001 fc47 	bl	80216a8 <__malloc_lock>
 801fe1a:	4921      	ldr	r1, [pc, #132]	; (801fea0 <_malloc_r+0xac>)
 801fe1c:	680a      	ldr	r2, [r1, #0]
 801fe1e:	4614      	mov	r4, r2
 801fe20:	b99c      	cbnz	r4, 801fe4a <_malloc_r+0x56>
 801fe22:	4f20      	ldr	r7, [pc, #128]	; (801fea4 <_malloc_r+0xb0>)
 801fe24:	683b      	ldr	r3, [r7, #0]
 801fe26:	b923      	cbnz	r3, 801fe32 <_malloc_r+0x3e>
 801fe28:	4621      	mov	r1, r4
 801fe2a:	4630      	mov	r0, r6
 801fe2c:	f000 f83c 	bl	801fea8 <_sbrk_r>
 801fe30:	6038      	str	r0, [r7, #0]
 801fe32:	4629      	mov	r1, r5
 801fe34:	4630      	mov	r0, r6
 801fe36:	f000 f837 	bl	801fea8 <_sbrk_r>
 801fe3a:	1c43      	adds	r3, r0, #1
 801fe3c:	d123      	bne.n	801fe86 <_malloc_r+0x92>
 801fe3e:	230c      	movs	r3, #12
 801fe40:	6033      	str	r3, [r6, #0]
 801fe42:	4630      	mov	r0, r6
 801fe44:	f001 fc36 	bl	80216b4 <__malloc_unlock>
 801fe48:	e7e3      	b.n	801fe12 <_malloc_r+0x1e>
 801fe4a:	6823      	ldr	r3, [r4, #0]
 801fe4c:	1b5b      	subs	r3, r3, r5
 801fe4e:	d417      	bmi.n	801fe80 <_malloc_r+0x8c>
 801fe50:	2b0b      	cmp	r3, #11
 801fe52:	d903      	bls.n	801fe5c <_malloc_r+0x68>
 801fe54:	6023      	str	r3, [r4, #0]
 801fe56:	441c      	add	r4, r3
 801fe58:	6025      	str	r5, [r4, #0]
 801fe5a:	e004      	b.n	801fe66 <_malloc_r+0x72>
 801fe5c:	6863      	ldr	r3, [r4, #4]
 801fe5e:	42a2      	cmp	r2, r4
 801fe60:	bf0c      	ite	eq
 801fe62:	600b      	streq	r3, [r1, #0]
 801fe64:	6053      	strne	r3, [r2, #4]
 801fe66:	4630      	mov	r0, r6
 801fe68:	f001 fc24 	bl	80216b4 <__malloc_unlock>
 801fe6c:	f104 000b 	add.w	r0, r4, #11
 801fe70:	1d23      	adds	r3, r4, #4
 801fe72:	f020 0007 	bic.w	r0, r0, #7
 801fe76:	1ac2      	subs	r2, r0, r3
 801fe78:	d0cc      	beq.n	801fe14 <_malloc_r+0x20>
 801fe7a:	1a1b      	subs	r3, r3, r0
 801fe7c:	50a3      	str	r3, [r4, r2]
 801fe7e:	e7c9      	b.n	801fe14 <_malloc_r+0x20>
 801fe80:	4622      	mov	r2, r4
 801fe82:	6864      	ldr	r4, [r4, #4]
 801fe84:	e7cc      	b.n	801fe20 <_malloc_r+0x2c>
 801fe86:	1cc4      	adds	r4, r0, #3
 801fe88:	f024 0403 	bic.w	r4, r4, #3
 801fe8c:	42a0      	cmp	r0, r4
 801fe8e:	d0e3      	beq.n	801fe58 <_malloc_r+0x64>
 801fe90:	1a21      	subs	r1, r4, r0
 801fe92:	4630      	mov	r0, r6
 801fe94:	f000 f808 	bl	801fea8 <_sbrk_r>
 801fe98:	3001      	adds	r0, #1
 801fe9a:	d1dd      	bne.n	801fe58 <_malloc_r+0x64>
 801fe9c:	e7cf      	b.n	801fe3e <_malloc_r+0x4a>
 801fe9e:	bf00      	nop
 801fea0:	2001025c 	.word	0x2001025c
 801fea4:	20010260 	.word	0x20010260

0801fea8 <_sbrk_r>:
 801fea8:	b538      	push	{r3, r4, r5, lr}
 801feaa:	4d06      	ldr	r5, [pc, #24]	; (801fec4 <_sbrk_r+0x1c>)
 801feac:	2300      	movs	r3, #0
 801feae:	4604      	mov	r4, r0
 801feb0:	4608      	mov	r0, r1
 801feb2:	602b      	str	r3, [r5, #0]
 801feb4:	f7ff fbf2 	bl	801f69c <_sbrk>
 801feb8:	1c43      	adds	r3, r0, #1
 801feba:	d102      	bne.n	801fec2 <_sbrk_r+0x1a>
 801febc:	682b      	ldr	r3, [r5, #0]
 801febe:	b103      	cbz	r3, 801fec2 <_sbrk_r+0x1a>
 801fec0:	6023      	str	r3, [r4, #0]
 801fec2:	bd38      	pop	{r3, r4, r5, pc}
 801fec4:	2001d474 	.word	0x2001d474

0801fec8 <siprintf>:
 801fec8:	b40e      	push	{r1, r2, r3}
 801feca:	b500      	push	{lr}
 801fecc:	b09c      	sub	sp, #112	; 0x70
 801fece:	ab1d      	add	r3, sp, #116	; 0x74
 801fed0:	9002      	str	r0, [sp, #8]
 801fed2:	9006      	str	r0, [sp, #24]
 801fed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fed8:	4809      	ldr	r0, [pc, #36]	; (801ff00 <siprintf+0x38>)
 801feda:	9107      	str	r1, [sp, #28]
 801fedc:	9104      	str	r1, [sp, #16]
 801fede:	4909      	ldr	r1, [pc, #36]	; (801ff04 <siprintf+0x3c>)
 801fee0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fee4:	9105      	str	r1, [sp, #20]
 801fee6:	6800      	ldr	r0, [r0, #0]
 801fee8:	9301      	str	r3, [sp, #4]
 801feea:	a902      	add	r1, sp, #8
 801feec:	f002 f8fe 	bl	80220ec <_svfiprintf_r>
 801fef0:	9b02      	ldr	r3, [sp, #8]
 801fef2:	2200      	movs	r2, #0
 801fef4:	701a      	strb	r2, [r3, #0]
 801fef6:	b01c      	add	sp, #112	; 0x70
 801fef8:	f85d eb04 	ldr.w	lr, [sp], #4
 801fefc:	b003      	add	sp, #12
 801fefe:	4770      	bx	lr
 801ff00:	200002b8 	.word	0x200002b8
 801ff04:	ffff0208 	.word	0xffff0208

0801ff08 <__sread>:
 801ff08:	b510      	push	{r4, lr}
 801ff0a:	460c      	mov	r4, r1
 801ff0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff10:	f002 fb80 	bl	8022614 <_read_r>
 801ff14:	2800      	cmp	r0, #0
 801ff16:	bfab      	itete	ge
 801ff18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ff1a:	89a3      	ldrhlt	r3, [r4, #12]
 801ff1c:	181b      	addge	r3, r3, r0
 801ff1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ff22:	bfac      	ite	ge
 801ff24:	6563      	strge	r3, [r4, #84]	; 0x54
 801ff26:	81a3      	strhlt	r3, [r4, #12]
 801ff28:	bd10      	pop	{r4, pc}

0801ff2a <__swrite>:
 801ff2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff2e:	461f      	mov	r7, r3
 801ff30:	898b      	ldrh	r3, [r1, #12]
 801ff32:	05db      	lsls	r3, r3, #23
 801ff34:	4605      	mov	r5, r0
 801ff36:	460c      	mov	r4, r1
 801ff38:	4616      	mov	r6, r2
 801ff3a:	d505      	bpl.n	801ff48 <__swrite+0x1e>
 801ff3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff40:	2302      	movs	r3, #2
 801ff42:	2200      	movs	r2, #0
 801ff44:	f001 fb8c 	bl	8021660 <_lseek_r>
 801ff48:	89a3      	ldrh	r3, [r4, #12]
 801ff4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ff52:	81a3      	strh	r3, [r4, #12]
 801ff54:	4632      	mov	r2, r6
 801ff56:	463b      	mov	r3, r7
 801ff58:	4628      	mov	r0, r5
 801ff5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ff5e:	f000 bf5d 	b.w	8020e1c <_write_r>

0801ff62 <__sseek>:
 801ff62:	b510      	push	{r4, lr}
 801ff64:	460c      	mov	r4, r1
 801ff66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff6a:	f001 fb79 	bl	8021660 <_lseek_r>
 801ff6e:	1c43      	adds	r3, r0, #1
 801ff70:	89a3      	ldrh	r3, [r4, #12]
 801ff72:	bf15      	itete	ne
 801ff74:	6560      	strne	r0, [r4, #84]	; 0x54
 801ff76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ff7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ff7e:	81a3      	strheq	r3, [r4, #12]
 801ff80:	bf18      	it	ne
 801ff82:	81a3      	strhne	r3, [r4, #12]
 801ff84:	bd10      	pop	{r4, pc}

0801ff86 <__sclose>:
 801ff86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff8a:	f000 bfc7 	b.w	8020f1c <_close_r>

0801ff8e <strchr>:
 801ff8e:	b2c9      	uxtb	r1, r1
 801ff90:	4603      	mov	r3, r0
 801ff92:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff96:	b11a      	cbz	r2, 801ffa0 <strchr+0x12>
 801ff98:	428a      	cmp	r2, r1
 801ff9a:	d1f9      	bne.n	801ff90 <strchr+0x2>
 801ff9c:	4618      	mov	r0, r3
 801ff9e:	4770      	bx	lr
 801ffa0:	2900      	cmp	r1, #0
 801ffa2:	bf18      	it	ne
 801ffa4:	2300      	movne	r3, #0
 801ffa6:	e7f9      	b.n	801ff9c <strchr+0xe>

0801ffa8 <strncmp>:
 801ffa8:	b510      	push	{r4, lr}
 801ffaa:	b16a      	cbz	r2, 801ffc8 <strncmp+0x20>
 801ffac:	3901      	subs	r1, #1
 801ffae:	1884      	adds	r4, r0, r2
 801ffb0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ffb8:	4293      	cmp	r3, r2
 801ffba:	d103      	bne.n	801ffc4 <strncmp+0x1c>
 801ffbc:	42a0      	cmp	r0, r4
 801ffbe:	d001      	beq.n	801ffc4 <strncmp+0x1c>
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d1f5      	bne.n	801ffb0 <strncmp+0x8>
 801ffc4:	1a98      	subs	r0, r3, r2
 801ffc6:	bd10      	pop	{r4, pc}
 801ffc8:	4610      	mov	r0, r2
 801ffca:	e7fc      	b.n	801ffc6 <strncmp+0x1e>

0801ffcc <strncpy>:
 801ffcc:	b510      	push	{r4, lr}
 801ffce:	3901      	subs	r1, #1
 801ffd0:	4603      	mov	r3, r0
 801ffd2:	b132      	cbz	r2, 801ffe2 <strncpy+0x16>
 801ffd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ffd8:	f803 4b01 	strb.w	r4, [r3], #1
 801ffdc:	3a01      	subs	r2, #1
 801ffde:	2c00      	cmp	r4, #0
 801ffe0:	d1f7      	bne.n	801ffd2 <strncpy+0x6>
 801ffe2:	441a      	add	r2, r3
 801ffe4:	2100      	movs	r1, #0
 801ffe6:	4293      	cmp	r3, r2
 801ffe8:	d100      	bne.n	801ffec <strncpy+0x20>
 801ffea:	bd10      	pop	{r4, pc}
 801ffec:	f803 1b01 	strb.w	r1, [r3], #1
 801fff0:	e7f9      	b.n	801ffe6 <strncpy+0x1a>

0801fff2 <sulp>:
 801fff2:	b570      	push	{r4, r5, r6, lr}
 801fff4:	4604      	mov	r4, r0
 801fff6:	460d      	mov	r5, r1
 801fff8:	ec45 4b10 	vmov	d0, r4, r5
 801fffc:	4616      	mov	r6, r2
 801fffe:	f001 fecb 	bl	8021d98 <__ulp>
 8020002:	ec51 0b10 	vmov	r0, r1, d0
 8020006:	b17e      	cbz	r6, 8020028 <sulp+0x36>
 8020008:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802000c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020010:	2b00      	cmp	r3, #0
 8020012:	dd09      	ble.n	8020028 <sulp+0x36>
 8020014:	051b      	lsls	r3, r3, #20
 8020016:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802001a:	2400      	movs	r4, #0
 802001c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8020020:	4622      	mov	r2, r4
 8020022:	462b      	mov	r3, r5
 8020024:	f7e0 fb10 	bl	8000648 <__aeabi_dmul>
 8020028:	bd70      	pop	{r4, r5, r6, pc}
 802002a:	0000      	movs	r0, r0
 802002c:	0000      	movs	r0, r0
	...

08020030 <_strtod_l>:
 8020030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020034:	b0a3      	sub	sp, #140	; 0x8c
 8020036:	461f      	mov	r7, r3
 8020038:	2300      	movs	r3, #0
 802003a:	931e      	str	r3, [sp, #120]	; 0x78
 802003c:	4ba4      	ldr	r3, [pc, #656]	; (80202d0 <_strtod_l+0x2a0>)
 802003e:	9219      	str	r2, [sp, #100]	; 0x64
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	9307      	str	r3, [sp, #28]
 8020044:	4604      	mov	r4, r0
 8020046:	4618      	mov	r0, r3
 8020048:	4688      	mov	r8, r1
 802004a:	f7e0 f8e3 	bl	8000214 <strlen>
 802004e:	f04f 0a00 	mov.w	sl, #0
 8020052:	4605      	mov	r5, r0
 8020054:	f04f 0b00 	mov.w	fp, #0
 8020058:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 802005c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802005e:	781a      	ldrb	r2, [r3, #0]
 8020060:	2a2b      	cmp	r2, #43	; 0x2b
 8020062:	d04c      	beq.n	80200fe <_strtod_l+0xce>
 8020064:	d839      	bhi.n	80200da <_strtod_l+0xaa>
 8020066:	2a0d      	cmp	r2, #13
 8020068:	d832      	bhi.n	80200d0 <_strtod_l+0xa0>
 802006a:	2a08      	cmp	r2, #8
 802006c:	d832      	bhi.n	80200d4 <_strtod_l+0xa4>
 802006e:	2a00      	cmp	r2, #0
 8020070:	d03c      	beq.n	80200ec <_strtod_l+0xbc>
 8020072:	2300      	movs	r3, #0
 8020074:	930e      	str	r3, [sp, #56]	; 0x38
 8020076:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020078:	7833      	ldrb	r3, [r6, #0]
 802007a:	2b30      	cmp	r3, #48	; 0x30
 802007c:	f040 80b4 	bne.w	80201e8 <_strtod_l+0x1b8>
 8020080:	7873      	ldrb	r3, [r6, #1]
 8020082:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020086:	2b58      	cmp	r3, #88	; 0x58
 8020088:	d16c      	bne.n	8020164 <_strtod_l+0x134>
 802008a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802008c:	9301      	str	r3, [sp, #4]
 802008e:	ab1e      	add	r3, sp, #120	; 0x78
 8020090:	9702      	str	r7, [sp, #8]
 8020092:	9300      	str	r3, [sp, #0]
 8020094:	4a8f      	ldr	r2, [pc, #572]	; (80202d4 <_strtod_l+0x2a4>)
 8020096:	ab1f      	add	r3, sp, #124	; 0x7c
 8020098:	a91d      	add	r1, sp, #116	; 0x74
 802009a:	4620      	mov	r0, r4
 802009c:	f000 ffc8 	bl	8021030 <__gethex>
 80200a0:	f010 0707 	ands.w	r7, r0, #7
 80200a4:	4605      	mov	r5, r0
 80200a6:	d005      	beq.n	80200b4 <_strtod_l+0x84>
 80200a8:	2f06      	cmp	r7, #6
 80200aa:	d12a      	bne.n	8020102 <_strtod_l+0xd2>
 80200ac:	3601      	adds	r6, #1
 80200ae:	2300      	movs	r3, #0
 80200b0:	961d      	str	r6, [sp, #116]	; 0x74
 80200b2:	930e      	str	r3, [sp, #56]	; 0x38
 80200b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	f040 8596 	bne.w	8020be8 <_strtod_l+0xbb8>
 80200bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200be:	b1db      	cbz	r3, 80200f8 <_strtod_l+0xc8>
 80200c0:	4652      	mov	r2, sl
 80200c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80200c6:	ec43 2b10 	vmov	d0, r2, r3
 80200ca:	b023      	add	sp, #140	; 0x8c
 80200cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200d0:	2a20      	cmp	r2, #32
 80200d2:	d1ce      	bne.n	8020072 <_strtod_l+0x42>
 80200d4:	3301      	adds	r3, #1
 80200d6:	931d      	str	r3, [sp, #116]	; 0x74
 80200d8:	e7c0      	b.n	802005c <_strtod_l+0x2c>
 80200da:	2a2d      	cmp	r2, #45	; 0x2d
 80200dc:	d1c9      	bne.n	8020072 <_strtod_l+0x42>
 80200de:	2201      	movs	r2, #1
 80200e0:	920e      	str	r2, [sp, #56]	; 0x38
 80200e2:	1c5a      	adds	r2, r3, #1
 80200e4:	921d      	str	r2, [sp, #116]	; 0x74
 80200e6:	785b      	ldrb	r3, [r3, #1]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d1c4      	bne.n	8020076 <_strtod_l+0x46>
 80200ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80200ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	f040 8576 	bne.w	8020be4 <_strtod_l+0xbb4>
 80200f8:	4652      	mov	r2, sl
 80200fa:	465b      	mov	r3, fp
 80200fc:	e7e3      	b.n	80200c6 <_strtod_l+0x96>
 80200fe:	2200      	movs	r2, #0
 8020100:	e7ee      	b.n	80200e0 <_strtod_l+0xb0>
 8020102:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020104:	b13a      	cbz	r2, 8020116 <_strtod_l+0xe6>
 8020106:	2135      	movs	r1, #53	; 0x35
 8020108:	a820      	add	r0, sp, #128	; 0x80
 802010a:	f001 ff50 	bl	8021fae <__copybits>
 802010e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020110:	4620      	mov	r0, r4
 8020112:	f001 fb15 	bl	8021740 <_Bfree>
 8020116:	3f01      	subs	r7, #1
 8020118:	2f05      	cmp	r7, #5
 802011a:	d807      	bhi.n	802012c <_strtod_l+0xfc>
 802011c:	e8df f007 	tbb	[pc, r7]
 8020120:	1d180b0e 	.word	0x1d180b0e
 8020124:	030e      	.short	0x030e
 8020126:	f04f 0b00 	mov.w	fp, #0
 802012a:	46da      	mov	sl, fp
 802012c:	0728      	lsls	r0, r5, #28
 802012e:	d5c1      	bpl.n	80200b4 <_strtod_l+0x84>
 8020130:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8020134:	e7be      	b.n	80200b4 <_strtod_l+0x84>
 8020136:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 802013a:	e7f7      	b.n	802012c <_strtod_l+0xfc>
 802013c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8020140:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020146:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802014a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802014e:	e7ed      	b.n	802012c <_strtod_l+0xfc>
 8020150:	f8df b184 	ldr.w	fp, [pc, #388]	; 80202d8 <_strtod_l+0x2a8>
 8020154:	f04f 0a00 	mov.w	sl, #0
 8020158:	e7e8      	b.n	802012c <_strtod_l+0xfc>
 802015a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802015e:	f04f 3aff 	mov.w	sl, #4294967295
 8020162:	e7e3      	b.n	802012c <_strtod_l+0xfc>
 8020164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020166:	1c5a      	adds	r2, r3, #1
 8020168:	921d      	str	r2, [sp, #116]	; 0x74
 802016a:	785b      	ldrb	r3, [r3, #1]
 802016c:	2b30      	cmp	r3, #48	; 0x30
 802016e:	d0f9      	beq.n	8020164 <_strtod_l+0x134>
 8020170:	2b00      	cmp	r3, #0
 8020172:	d09f      	beq.n	80200b4 <_strtod_l+0x84>
 8020174:	2301      	movs	r3, #1
 8020176:	f04f 0900 	mov.w	r9, #0
 802017a:	9304      	str	r3, [sp, #16]
 802017c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802017e:	930a      	str	r3, [sp, #40]	; 0x28
 8020180:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020184:	464f      	mov	r7, r9
 8020186:	220a      	movs	r2, #10
 8020188:	981d      	ldr	r0, [sp, #116]	; 0x74
 802018a:	7806      	ldrb	r6, [r0, #0]
 802018c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8020190:	b2d9      	uxtb	r1, r3
 8020192:	2909      	cmp	r1, #9
 8020194:	d92a      	bls.n	80201ec <_strtod_l+0x1bc>
 8020196:	9907      	ldr	r1, [sp, #28]
 8020198:	462a      	mov	r2, r5
 802019a:	f7ff ff05 	bl	801ffa8 <strncmp>
 802019e:	b398      	cbz	r0, 8020208 <_strtod_l+0x1d8>
 80201a0:	2000      	movs	r0, #0
 80201a2:	4633      	mov	r3, r6
 80201a4:	463d      	mov	r5, r7
 80201a6:	9007      	str	r0, [sp, #28]
 80201a8:	4602      	mov	r2, r0
 80201aa:	2b65      	cmp	r3, #101	; 0x65
 80201ac:	d001      	beq.n	80201b2 <_strtod_l+0x182>
 80201ae:	2b45      	cmp	r3, #69	; 0x45
 80201b0:	d118      	bne.n	80201e4 <_strtod_l+0x1b4>
 80201b2:	b91d      	cbnz	r5, 80201bc <_strtod_l+0x18c>
 80201b4:	9b04      	ldr	r3, [sp, #16]
 80201b6:	4303      	orrs	r3, r0
 80201b8:	d098      	beq.n	80200ec <_strtod_l+0xbc>
 80201ba:	2500      	movs	r5, #0
 80201bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80201c0:	f108 0301 	add.w	r3, r8, #1
 80201c4:	931d      	str	r3, [sp, #116]	; 0x74
 80201c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80201ca:	2b2b      	cmp	r3, #43	; 0x2b
 80201cc:	d075      	beq.n	80202ba <_strtod_l+0x28a>
 80201ce:	2b2d      	cmp	r3, #45	; 0x2d
 80201d0:	d07b      	beq.n	80202ca <_strtod_l+0x29a>
 80201d2:	f04f 0c00 	mov.w	ip, #0
 80201d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80201da:	2909      	cmp	r1, #9
 80201dc:	f240 8082 	bls.w	80202e4 <_strtod_l+0x2b4>
 80201e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80201e4:	2600      	movs	r6, #0
 80201e6:	e09d      	b.n	8020324 <_strtod_l+0x2f4>
 80201e8:	2300      	movs	r3, #0
 80201ea:	e7c4      	b.n	8020176 <_strtod_l+0x146>
 80201ec:	2f08      	cmp	r7, #8
 80201ee:	bfd8      	it	le
 80201f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80201f2:	f100 0001 	add.w	r0, r0, #1
 80201f6:	bfda      	itte	le
 80201f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80201fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80201fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8020202:	3701      	adds	r7, #1
 8020204:	901d      	str	r0, [sp, #116]	; 0x74
 8020206:	e7bf      	b.n	8020188 <_strtod_l+0x158>
 8020208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802020a:	195a      	adds	r2, r3, r5
 802020c:	921d      	str	r2, [sp, #116]	; 0x74
 802020e:	5d5b      	ldrb	r3, [r3, r5]
 8020210:	2f00      	cmp	r7, #0
 8020212:	d037      	beq.n	8020284 <_strtod_l+0x254>
 8020214:	9007      	str	r0, [sp, #28]
 8020216:	463d      	mov	r5, r7
 8020218:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802021c:	2a09      	cmp	r2, #9
 802021e:	d912      	bls.n	8020246 <_strtod_l+0x216>
 8020220:	2201      	movs	r2, #1
 8020222:	e7c2      	b.n	80201aa <_strtod_l+0x17a>
 8020224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020226:	1c5a      	adds	r2, r3, #1
 8020228:	921d      	str	r2, [sp, #116]	; 0x74
 802022a:	785b      	ldrb	r3, [r3, #1]
 802022c:	3001      	adds	r0, #1
 802022e:	2b30      	cmp	r3, #48	; 0x30
 8020230:	d0f8      	beq.n	8020224 <_strtod_l+0x1f4>
 8020232:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8020236:	2a08      	cmp	r2, #8
 8020238:	f200 84db 	bhi.w	8020bf2 <_strtod_l+0xbc2>
 802023c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802023e:	9007      	str	r0, [sp, #28]
 8020240:	2000      	movs	r0, #0
 8020242:	920a      	str	r2, [sp, #40]	; 0x28
 8020244:	4605      	mov	r5, r0
 8020246:	3b30      	subs	r3, #48	; 0x30
 8020248:	f100 0201 	add.w	r2, r0, #1
 802024c:	d014      	beq.n	8020278 <_strtod_l+0x248>
 802024e:	9907      	ldr	r1, [sp, #28]
 8020250:	4411      	add	r1, r2
 8020252:	9107      	str	r1, [sp, #28]
 8020254:	462a      	mov	r2, r5
 8020256:	eb00 0e05 	add.w	lr, r0, r5
 802025a:	210a      	movs	r1, #10
 802025c:	4572      	cmp	r2, lr
 802025e:	d113      	bne.n	8020288 <_strtod_l+0x258>
 8020260:	182a      	adds	r2, r5, r0
 8020262:	2a08      	cmp	r2, #8
 8020264:	f105 0501 	add.w	r5, r5, #1
 8020268:	4405      	add	r5, r0
 802026a:	dc1c      	bgt.n	80202a6 <_strtod_l+0x276>
 802026c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802026e:	220a      	movs	r2, #10
 8020270:	fb02 3301 	mla	r3, r2, r1, r3
 8020274:	9309      	str	r3, [sp, #36]	; 0x24
 8020276:	2200      	movs	r2, #0
 8020278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802027a:	1c59      	adds	r1, r3, #1
 802027c:	911d      	str	r1, [sp, #116]	; 0x74
 802027e:	785b      	ldrb	r3, [r3, #1]
 8020280:	4610      	mov	r0, r2
 8020282:	e7c9      	b.n	8020218 <_strtod_l+0x1e8>
 8020284:	4638      	mov	r0, r7
 8020286:	e7d2      	b.n	802022e <_strtod_l+0x1fe>
 8020288:	2a08      	cmp	r2, #8
 802028a:	dc04      	bgt.n	8020296 <_strtod_l+0x266>
 802028c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802028e:	434e      	muls	r6, r1
 8020290:	9609      	str	r6, [sp, #36]	; 0x24
 8020292:	3201      	adds	r2, #1
 8020294:	e7e2      	b.n	802025c <_strtod_l+0x22c>
 8020296:	f102 0c01 	add.w	ip, r2, #1
 802029a:	f1bc 0f10 	cmp.w	ip, #16
 802029e:	bfd8      	it	le
 80202a0:	fb01 f909 	mulle.w	r9, r1, r9
 80202a4:	e7f5      	b.n	8020292 <_strtod_l+0x262>
 80202a6:	2d10      	cmp	r5, #16
 80202a8:	bfdc      	itt	le
 80202aa:	220a      	movle	r2, #10
 80202ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80202b0:	e7e1      	b.n	8020276 <_strtod_l+0x246>
 80202b2:	2300      	movs	r3, #0
 80202b4:	9307      	str	r3, [sp, #28]
 80202b6:	2201      	movs	r2, #1
 80202b8:	e77c      	b.n	80201b4 <_strtod_l+0x184>
 80202ba:	f04f 0c00 	mov.w	ip, #0
 80202be:	f108 0302 	add.w	r3, r8, #2
 80202c2:	931d      	str	r3, [sp, #116]	; 0x74
 80202c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80202c8:	e785      	b.n	80201d6 <_strtod_l+0x1a6>
 80202ca:	f04f 0c01 	mov.w	ip, #1
 80202ce:	e7f6      	b.n	80202be <_strtod_l+0x28e>
 80202d0:	08023934 	.word	0x08023934
 80202d4:	08023868 	.word	0x08023868
 80202d8:	7ff00000 	.word	0x7ff00000
 80202dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202de:	1c59      	adds	r1, r3, #1
 80202e0:	911d      	str	r1, [sp, #116]	; 0x74
 80202e2:	785b      	ldrb	r3, [r3, #1]
 80202e4:	2b30      	cmp	r3, #48	; 0x30
 80202e6:	d0f9      	beq.n	80202dc <_strtod_l+0x2ac>
 80202e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80202ec:	2908      	cmp	r1, #8
 80202ee:	f63f af79 	bhi.w	80201e4 <_strtod_l+0x1b4>
 80202f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80202f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202f8:	9308      	str	r3, [sp, #32]
 80202fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202fc:	1c59      	adds	r1, r3, #1
 80202fe:	911d      	str	r1, [sp, #116]	; 0x74
 8020300:	785b      	ldrb	r3, [r3, #1]
 8020302:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8020306:	2e09      	cmp	r6, #9
 8020308:	d937      	bls.n	802037a <_strtod_l+0x34a>
 802030a:	9e08      	ldr	r6, [sp, #32]
 802030c:	1b89      	subs	r1, r1, r6
 802030e:	2908      	cmp	r1, #8
 8020310:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8020314:	dc02      	bgt.n	802031c <_strtod_l+0x2ec>
 8020316:	4576      	cmp	r6, lr
 8020318:	bfa8      	it	ge
 802031a:	4676      	movge	r6, lr
 802031c:	f1bc 0f00 	cmp.w	ip, #0
 8020320:	d000      	beq.n	8020324 <_strtod_l+0x2f4>
 8020322:	4276      	negs	r6, r6
 8020324:	2d00      	cmp	r5, #0
 8020326:	d14f      	bne.n	80203c8 <_strtod_l+0x398>
 8020328:	9904      	ldr	r1, [sp, #16]
 802032a:	4301      	orrs	r1, r0
 802032c:	f47f aec2 	bne.w	80200b4 <_strtod_l+0x84>
 8020330:	2a00      	cmp	r2, #0
 8020332:	f47f aedb 	bne.w	80200ec <_strtod_l+0xbc>
 8020336:	2b69      	cmp	r3, #105	; 0x69
 8020338:	d027      	beq.n	802038a <_strtod_l+0x35a>
 802033a:	dc24      	bgt.n	8020386 <_strtod_l+0x356>
 802033c:	2b49      	cmp	r3, #73	; 0x49
 802033e:	d024      	beq.n	802038a <_strtod_l+0x35a>
 8020340:	2b4e      	cmp	r3, #78	; 0x4e
 8020342:	f47f aed3 	bne.w	80200ec <_strtod_l+0xbc>
 8020346:	499e      	ldr	r1, [pc, #632]	; (80205c0 <_strtod_l+0x590>)
 8020348:	a81d      	add	r0, sp, #116	; 0x74
 802034a:	f001 f8c9 	bl	80214e0 <__match>
 802034e:	2800      	cmp	r0, #0
 8020350:	f43f aecc 	beq.w	80200ec <_strtod_l+0xbc>
 8020354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020356:	781b      	ldrb	r3, [r3, #0]
 8020358:	2b28      	cmp	r3, #40	; 0x28
 802035a:	d12d      	bne.n	80203b8 <_strtod_l+0x388>
 802035c:	4999      	ldr	r1, [pc, #612]	; (80205c4 <_strtod_l+0x594>)
 802035e:	aa20      	add	r2, sp, #128	; 0x80
 8020360:	a81d      	add	r0, sp, #116	; 0x74
 8020362:	f001 f8d1 	bl	8021508 <__hexnan>
 8020366:	2805      	cmp	r0, #5
 8020368:	d126      	bne.n	80203b8 <_strtod_l+0x388>
 802036a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802036c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020370:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020374:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020378:	e69c      	b.n	80200b4 <_strtod_l+0x84>
 802037a:	210a      	movs	r1, #10
 802037c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020380:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020384:	e7b9      	b.n	80202fa <_strtod_l+0x2ca>
 8020386:	2b6e      	cmp	r3, #110	; 0x6e
 8020388:	e7db      	b.n	8020342 <_strtod_l+0x312>
 802038a:	498f      	ldr	r1, [pc, #572]	; (80205c8 <_strtod_l+0x598>)
 802038c:	a81d      	add	r0, sp, #116	; 0x74
 802038e:	f001 f8a7 	bl	80214e0 <__match>
 8020392:	2800      	cmp	r0, #0
 8020394:	f43f aeaa 	beq.w	80200ec <_strtod_l+0xbc>
 8020398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802039a:	498c      	ldr	r1, [pc, #560]	; (80205cc <_strtod_l+0x59c>)
 802039c:	3b01      	subs	r3, #1
 802039e:	a81d      	add	r0, sp, #116	; 0x74
 80203a0:	931d      	str	r3, [sp, #116]	; 0x74
 80203a2:	f001 f89d 	bl	80214e0 <__match>
 80203a6:	b910      	cbnz	r0, 80203ae <_strtod_l+0x37e>
 80203a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80203aa:	3301      	adds	r3, #1
 80203ac:	931d      	str	r3, [sp, #116]	; 0x74
 80203ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80205dc <_strtod_l+0x5ac>
 80203b2:	f04f 0a00 	mov.w	sl, #0
 80203b6:	e67d      	b.n	80200b4 <_strtod_l+0x84>
 80203b8:	4885      	ldr	r0, [pc, #532]	; (80205d0 <_strtod_l+0x5a0>)
 80203ba:	f002 f93d 	bl	8022638 <nan>
 80203be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80203c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80203c6:	e675      	b.n	80200b4 <_strtod_l+0x84>
 80203c8:	9b07      	ldr	r3, [sp, #28]
 80203ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203cc:	1af3      	subs	r3, r6, r3
 80203ce:	2f00      	cmp	r7, #0
 80203d0:	bf08      	it	eq
 80203d2:	462f      	moveq	r7, r5
 80203d4:	2d10      	cmp	r5, #16
 80203d6:	9308      	str	r3, [sp, #32]
 80203d8:	46a8      	mov	r8, r5
 80203da:	bfa8      	it	ge
 80203dc:	f04f 0810 	movge.w	r8, #16
 80203e0:	f7e0 f8b8 	bl	8000554 <__aeabi_ui2d>
 80203e4:	2d09      	cmp	r5, #9
 80203e6:	4682      	mov	sl, r0
 80203e8:	468b      	mov	fp, r1
 80203ea:	dd13      	ble.n	8020414 <_strtod_l+0x3e4>
 80203ec:	4b79      	ldr	r3, [pc, #484]	; (80205d4 <_strtod_l+0x5a4>)
 80203ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80203f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80203f6:	f7e0 f927 	bl	8000648 <__aeabi_dmul>
 80203fa:	4682      	mov	sl, r0
 80203fc:	4648      	mov	r0, r9
 80203fe:	468b      	mov	fp, r1
 8020400:	f7e0 f8a8 	bl	8000554 <__aeabi_ui2d>
 8020404:	4602      	mov	r2, r0
 8020406:	460b      	mov	r3, r1
 8020408:	4650      	mov	r0, sl
 802040a:	4659      	mov	r1, fp
 802040c:	f7df ff66 	bl	80002dc <__adddf3>
 8020410:	4682      	mov	sl, r0
 8020412:	468b      	mov	fp, r1
 8020414:	2d0f      	cmp	r5, #15
 8020416:	dc38      	bgt.n	802048a <_strtod_l+0x45a>
 8020418:	9b08      	ldr	r3, [sp, #32]
 802041a:	2b00      	cmp	r3, #0
 802041c:	f43f ae4a 	beq.w	80200b4 <_strtod_l+0x84>
 8020420:	dd24      	ble.n	802046c <_strtod_l+0x43c>
 8020422:	2b16      	cmp	r3, #22
 8020424:	dc0b      	bgt.n	802043e <_strtod_l+0x40e>
 8020426:	4d6b      	ldr	r5, [pc, #428]	; (80205d4 <_strtod_l+0x5a4>)
 8020428:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 802042c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8020430:	4652      	mov	r2, sl
 8020432:	465b      	mov	r3, fp
 8020434:	f7e0 f908 	bl	8000648 <__aeabi_dmul>
 8020438:	4682      	mov	sl, r0
 802043a:	468b      	mov	fp, r1
 802043c:	e63a      	b.n	80200b4 <_strtod_l+0x84>
 802043e:	9a08      	ldr	r2, [sp, #32]
 8020440:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020444:	4293      	cmp	r3, r2
 8020446:	db20      	blt.n	802048a <_strtod_l+0x45a>
 8020448:	4c62      	ldr	r4, [pc, #392]	; (80205d4 <_strtod_l+0x5a4>)
 802044a:	f1c5 050f 	rsb	r5, r5, #15
 802044e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020452:	4652      	mov	r2, sl
 8020454:	465b      	mov	r3, fp
 8020456:	e9d1 0100 	ldrd	r0, r1, [r1]
 802045a:	f7e0 f8f5 	bl	8000648 <__aeabi_dmul>
 802045e:	9b08      	ldr	r3, [sp, #32]
 8020460:	1b5d      	subs	r5, r3, r5
 8020462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020466:	e9d4 2300 	ldrd	r2, r3, [r4]
 802046a:	e7e3      	b.n	8020434 <_strtod_l+0x404>
 802046c:	9b08      	ldr	r3, [sp, #32]
 802046e:	3316      	adds	r3, #22
 8020470:	db0b      	blt.n	802048a <_strtod_l+0x45a>
 8020472:	9b07      	ldr	r3, [sp, #28]
 8020474:	4a57      	ldr	r2, [pc, #348]	; (80205d4 <_strtod_l+0x5a4>)
 8020476:	1b9e      	subs	r6, r3, r6
 8020478:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802047c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020480:	4650      	mov	r0, sl
 8020482:	4659      	mov	r1, fp
 8020484:	f7e0 fa0a 	bl	800089c <__aeabi_ddiv>
 8020488:	e7d6      	b.n	8020438 <_strtod_l+0x408>
 802048a:	9b08      	ldr	r3, [sp, #32]
 802048c:	eba5 0808 	sub.w	r8, r5, r8
 8020490:	4498      	add	r8, r3
 8020492:	f1b8 0f00 	cmp.w	r8, #0
 8020496:	dd71      	ble.n	802057c <_strtod_l+0x54c>
 8020498:	f018 030f 	ands.w	r3, r8, #15
 802049c:	d00a      	beq.n	80204b4 <_strtod_l+0x484>
 802049e:	494d      	ldr	r1, [pc, #308]	; (80205d4 <_strtod_l+0x5a4>)
 80204a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80204a4:	4652      	mov	r2, sl
 80204a6:	465b      	mov	r3, fp
 80204a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80204ac:	f7e0 f8cc 	bl	8000648 <__aeabi_dmul>
 80204b0:	4682      	mov	sl, r0
 80204b2:	468b      	mov	fp, r1
 80204b4:	f038 080f 	bics.w	r8, r8, #15
 80204b8:	d04d      	beq.n	8020556 <_strtod_l+0x526>
 80204ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80204be:	dd22      	ble.n	8020506 <_strtod_l+0x4d6>
 80204c0:	2500      	movs	r5, #0
 80204c2:	462e      	mov	r6, r5
 80204c4:	9509      	str	r5, [sp, #36]	; 0x24
 80204c6:	9507      	str	r5, [sp, #28]
 80204c8:	2322      	movs	r3, #34	; 0x22
 80204ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80205dc <_strtod_l+0x5ac>
 80204ce:	6023      	str	r3, [r4, #0]
 80204d0:	f04f 0a00 	mov.w	sl, #0
 80204d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	f43f adec 	beq.w	80200b4 <_strtod_l+0x84>
 80204dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204de:	4620      	mov	r0, r4
 80204e0:	f001 f92e 	bl	8021740 <_Bfree>
 80204e4:	9907      	ldr	r1, [sp, #28]
 80204e6:	4620      	mov	r0, r4
 80204e8:	f001 f92a 	bl	8021740 <_Bfree>
 80204ec:	4631      	mov	r1, r6
 80204ee:	4620      	mov	r0, r4
 80204f0:	f001 f926 	bl	8021740 <_Bfree>
 80204f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80204f6:	4620      	mov	r0, r4
 80204f8:	f001 f922 	bl	8021740 <_Bfree>
 80204fc:	4629      	mov	r1, r5
 80204fe:	4620      	mov	r0, r4
 8020500:	f001 f91e 	bl	8021740 <_Bfree>
 8020504:	e5d6      	b.n	80200b4 <_strtod_l+0x84>
 8020506:	2300      	movs	r3, #0
 8020508:	ea4f 1828 	mov.w	r8, r8, asr #4
 802050c:	4650      	mov	r0, sl
 802050e:	4659      	mov	r1, fp
 8020510:	4699      	mov	r9, r3
 8020512:	f1b8 0f01 	cmp.w	r8, #1
 8020516:	dc21      	bgt.n	802055c <_strtod_l+0x52c>
 8020518:	b10b      	cbz	r3, 802051e <_strtod_l+0x4ee>
 802051a:	4682      	mov	sl, r0
 802051c:	468b      	mov	fp, r1
 802051e:	4b2e      	ldr	r3, [pc, #184]	; (80205d8 <_strtod_l+0x5a8>)
 8020520:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8020524:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8020528:	4652      	mov	r2, sl
 802052a:	465b      	mov	r3, fp
 802052c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020530:	f7e0 f88a 	bl	8000648 <__aeabi_dmul>
 8020534:	4b29      	ldr	r3, [pc, #164]	; (80205dc <_strtod_l+0x5ac>)
 8020536:	460a      	mov	r2, r1
 8020538:	400b      	ands	r3, r1
 802053a:	4929      	ldr	r1, [pc, #164]	; (80205e0 <_strtod_l+0x5b0>)
 802053c:	428b      	cmp	r3, r1
 802053e:	4682      	mov	sl, r0
 8020540:	d8be      	bhi.n	80204c0 <_strtod_l+0x490>
 8020542:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020546:	428b      	cmp	r3, r1
 8020548:	bf86      	itte	hi
 802054a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80205e4 <_strtod_l+0x5b4>
 802054e:	f04f 3aff 	movhi.w	sl, #4294967295
 8020552:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020556:	2300      	movs	r3, #0
 8020558:	9304      	str	r3, [sp, #16]
 802055a:	e081      	b.n	8020660 <_strtod_l+0x630>
 802055c:	f018 0f01 	tst.w	r8, #1
 8020560:	d007      	beq.n	8020572 <_strtod_l+0x542>
 8020562:	4b1d      	ldr	r3, [pc, #116]	; (80205d8 <_strtod_l+0x5a8>)
 8020564:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020568:	e9d3 2300 	ldrd	r2, r3, [r3]
 802056c:	f7e0 f86c 	bl	8000648 <__aeabi_dmul>
 8020570:	2301      	movs	r3, #1
 8020572:	f109 0901 	add.w	r9, r9, #1
 8020576:	ea4f 0868 	mov.w	r8, r8, asr #1
 802057a:	e7ca      	b.n	8020512 <_strtod_l+0x4e2>
 802057c:	d0eb      	beq.n	8020556 <_strtod_l+0x526>
 802057e:	f1c8 0800 	rsb	r8, r8, #0
 8020582:	f018 020f 	ands.w	r2, r8, #15
 8020586:	d00a      	beq.n	802059e <_strtod_l+0x56e>
 8020588:	4b12      	ldr	r3, [pc, #72]	; (80205d4 <_strtod_l+0x5a4>)
 802058a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802058e:	4650      	mov	r0, sl
 8020590:	4659      	mov	r1, fp
 8020592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020596:	f7e0 f981 	bl	800089c <__aeabi_ddiv>
 802059a:	4682      	mov	sl, r0
 802059c:	468b      	mov	fp, r1
 802059e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80205a2:	d0d8      	beq.n	8020556 <_strtod_l+0x526>
 80205a4:	f1b8 0f1f 	cmp.w	r8, #31
 80205a8:	dd1e      	ble.n	80205e8 <_strtod_l+0x5b8>
 80205aa:	2500      	movs	r5, #0
 80205ac:	462e      	mov	r6, r5
 80205ae:	9509      	str	r5, [sp, #36]	; 0x24
 80205b0:	9507      	str	r5, [sp, #28]
 80205b2:	2322      	movs	r3, #34	; 0x22
 80205b4:	f04f 0a00 	mov.w	sl, #0
 80205b8:	f04f 0b00 	mov.w	fp, #0
 80205bc:	6023      	str	r3, [r4, #0]
 80205be:	e789      	b.n	80204d4 <_strtod_l+0x4a4>
 80205c0:	08023865 	.word	0x08023865
 80205c4:	0802387c 	.word	0x0802387c
 80205c8:	0802385c 	.word	0x0802385c
 80205cc:	0802385f 	.word	0x0802385f
 80205d0:	08023b2a 	.word	0x08023b2a
 80205d4:	080239e8 	.word	0x080239e8
 80205d8:	080239c0 	.word	0x080239c0
 80205dc:	7ff00000 	.word	0x7ff00000
 80205e0:	7ca00000 	.word	0x7ca00000
 80205e4:	7fefffff 	.word	0x7fefffff
 80205e8:	f018 0310 	ands.w	r3, r8, #16
 80205ec:	bf18      	it	ne
 80205ee:	236a      	movne	r3, #106	; 0x6a
 80205f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80209a8 <_strtod_l+0x978>
 80205f4:	9304      	str	r3, [sp, #16]
 80205f6:	4650      	mov	r0, sl
 80205f8:	4659      	mov	r1, fp
 80205fa:	2300      	movs	r3, #0
 80205fc:	f018 0f01 	tst.w	r8, #1
 8020600:	d004      	beq.n	802060c <_strtod_l+0x5dc>
 8020602:	e9d9 2300 	ldrd	r2, r3, [r9]
 8020606:	f7e0 f81f 	bl	8000648 <__aeabi_dmul>
 802060a:	2301      	movs	r3, #1
 802060c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020610:	f109 0908 	add.w	r9, r9, #8
 8020614:	d1f2      	bne.n	80205fc <_strtod_l+0x5cc>
 8020616:	b10b      	cbz	r3, 802061c <_strtod_l+0x5ec>
 8020618:	4682      	mov	sl, r0
 802061a:	468b      	mov	fp, r1
 802061c:	9b04      	ldr	r3, [sp, #16]
 802061e:	b1bb      	cbz	r3, 8020650 <_strtod_l+0x620>
 8020620:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8020624:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020628:	2b00      	cmp	r3, #0
 802062a:	4659      	mov	r1, fp
 802062c:	dd10      	ble.n	8020650 <_strtod_l+0x620>
 802062e:	2b1f      	cmp	r3, #31
 8020630:	f340 8128 	ble.w	8020884 <_strtod_l+0x854>
 8020634:	2b34      	cmp	r3, #52	; 0x34
 8020636:	bfde      	ittt	le
 8020638:	3b20      	suble	r3, #32
 802063a:	f04f 32ff 	movle.w	r2, #4294967295
 802063e:	fa02 f303 	lslle.w	r3, r2, r3
 8020642:	f04f 0a00 	mov.w	sl, #0
 8020646:	bfcc      	ite	gt
 8020648:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802064c:	ea03 0b01 	andle.w	fp, r3, r1
 8020650:	2200      	movs	r2, #0
 8020652:	2300      	movs	r3, #0
 8020654:	4650      	mov	r0, sl
 8020656:	4659      	mov	r1, fp
 8020658:	f7e0 fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 802065c:	2800      	cmp	r0, #0
 802065e:	d1a4      	bne.n	80205aa <_strtod_l+0x57a>
 8020660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020662:	9300      	str	r3, [sp, #0]
 8020664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020666:	462b      	mov	r3, r5
 8020668:	463a      	mov	r2, r7
 802066a:	4620      	mov	r0, r4
 802066c:	f001 f8d4 	bl	8021818 <__s2b>
 8020670:	9009      	str	r0, [sp, #36]	; 0x24
 8020672:	2800      	cmp	r0, #0
 8020674:	f43f af24 	beq.w	80204c0 <_strtod_l+0x490>
 8020678:	9b07      	ldr	r3, [sp, #28]
 802067a:	1b9e      	subs	r6, r3, r6
 802067c:	9b08      	ldr	r3, [sp, #32]
 802067e:	2b00      	cmp	r3, #0
 8020680:	bfb4      	ite	lt
 8020682:	4633      	movlt	r3, r6
 8020684:	2300      	movge	r3, #0
 8020686:	9310      	str	r3, [sp, #64]	; 0x40
 8020688:	9b08      	ldr	r3, [sp, #32]
 802068a:	2500      	movs	r5, #0
 802068c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020690:	9318      	str	r3, [sp, #96]	; 0x60
 8020692:	462e      	mov	r6, r5
 8020694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020696:	4620      	mov	r0, r4
 8020698:	6859      	ldr	r1, [r3, #4]
 802069a:	f001 f811 	bl	80216c0 <_Balloc>
 802069e:	9007      	str	r0, [sp, #28]
 80206a0:	2800      	cmp	r0, #0
 80206a2:	f43f af11 	beq.w	80204c8 <_strtod_l+0x498>
 80206a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206a8:	691a      	ldr	r2, [r3, #16]
 80206aa:	3202      	adds	r2, #2
 80206ac:	f103 010c 	add.w	r1, r3, #12
 80206b0:	0092      	lsls	r2, r2, #2
 80206b2:	300c      	adds	r0, #12
 80206b4:	f7ff fb0e 	bl	801fcd4 <memcpy>
 80206b8:	ec4b ab10 	vmov	d0, sl, fp
 80206bc:	aa20      	add	r2, sp, #128	; 0x80
 80206be:	a91f      	add	r1, sp, #124	; 0x7c
 80206c0:	4620      	mov	r0, r4
 80206c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80206c6:	f001 fbe3 	bl	8021e90 <__d2b>
 80206ca:	901e      	str	r0, [sp, #120]	; 0x78
 80206cc:	2800      	cmp	r0, #0
 80206ce:	f43f aefb 	beq.w	80204c8 <_strtod_l+0x498>
 80206d2:	2101      	movs	r1, #1
 80206d4:	4620      	mov	r0, r4
 80206d6:	f001 f939 	bl	802194c <__i2b>
 80206da:	4606      	mov	r6, r0
 80206dc:	2800      	cmp	r0, #0
 80206de:	f43f aef3 	beq.w	80204c8 <_strtod_l+0x498>
 80206e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80206e4:	9904      	ldr	r1, [sp, #16]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	bfab      	itete	ge
 80206ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80206ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80206ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80206f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80206f4:	bfac      	ite	ge
 80206f6:	eb03 0902 	addge.w	r9, r3, r2
 80206fa:	1ad7      	sublt	r7, r2, r3
 80206fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80206fe:	eba3 0801 	sub.w	r8, r3, r1
 8020702:	4490      	add	r8, r2
 8020704:	4ba3      	ldr	r3, [pc, #652]	; (8020994 <_strtod_l+0x964>)
 8020706:	f108 38ff 	add.w	r8, r8, #4294967295
 802070a:	4598      	cmp	r8, r3
 802070c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020710:	f280 80cc 	bge.w	80208ac <_strtod_l+0x87c>
 8020714:	eba3 0308 	sub.w	r3, r3, r8
 8020718:	2b1f      	cmp	r3, #31
 802071a:	eba2 0203 	sub.w	r2, r2, r3
 802071e:	f04f 0101 	mov.w	r1, #1
 8020722:	f300 80b6 	bgt.w	8020892 <_strtod_l+0x862>
 8020726:	fa01 f303 	lsl.w	r3, r1, r3
 802072a:	9311      	str	r3, [sp, #68]	; 0x44
 802072c:	2300      	movs	r3, #0
 802072e:	930c      	str	r3, [sp, #48]	; 0x30
 8020730:	eb09 0802 	add.w	r8, r9, r2
 8020734:	9b04      	ldr	r3, [sp, #16]
 8020736:	45c1      	cmp	r9, r8
 8020738:	4417      	add	r7, r2
 802073a:	441f      	add	r7, r3
 802073c:	464b      	mov	r3, r9
 802073e:	bfa8      	it	ge
 8020740:	4643      	movge	r3, r8
 8020742:	42bb      	cmp	r3, r7
 8020744:	bfa8      	it	ge
 8020746:	463b      	movge	r3, r7
 8020748:	2b00      	cmp	r3, #0
 802074a:	bfc2      	ittt	gt
 802074c:	eba8 0803 	subgt.w	r8, r8, r3
 8020750:	1aff      	subgt	r7, r7, r3
 8020752:	eba9 0903 	subgt.w	r9, r9, r3
 8020756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020758:	2b00      	cmp	r3, #0
 802075a:	dd17      	ble.n	802078c <_strtod_l+0x75c>
 802075c:	4631      	mov	r1, r6
 802075e:	461a      	mov	r2, r3
 8020760:	4620      	mov	r0, r4
 8020762:	f001 f9af 	bl	8021ac4 <__pow5mult>
 8020766:	4606      	mov	r6, r0
 8020768:	2800      	cmp	r0, #0
 802076a:	f43f aead 	beq.w	80204c8 <_strtod_l+0x498>
 802076e:	4601      	mov	r1, r0
 8020770:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020772:	4620      	mov	r0, r4
 8020774:	f001 f900 	bl	8021978 <__multiply>
 8020778:	900f      	str	r0, [sp, #60]	; 0x3c
 802077a:	2800      	cmp	r0, #0
 802077c:	f43f aea4 	beq.w	80204c8 <_strtod_l+0x498>
 8020780:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020782:	4620      	mov	r0, r4
 8020784:	f000 ffdc 	bl	8021740 <_Bfree>
 8020788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802078a:	931e      	str	r3, [sp, #120]	; 0x78
 802078c:	f1b8 0f00 	cmp.w	r8, #0
 8020790:	f300 8091 	bgt.w	80208b6 <_strtod_l+0x886>
 8020794:	9b08      	ldr	r3, [sp, #32]
 8020796:	2b00      	cmp	r3, #0
 8020798:	dd08      	ble.n	80207ac <_strtod_l+0x77c>
 802079a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802079c:	9907      	ldr	r1, [sp, #28]
 802079e:	4620      	mov	r0, r4
 80207a0:	f001 f990 	bl	8021ac4 <__pow5mult>
 80207a4:	9007      	str	r0, [sp, #28]
 80207a6:	2800      	cmp	r0, #0
 80207a8:	f43f ae8e 	beq.w	80204c8 <_strtod_l+0x498>
 80207ac:	2f00      	cmp	r7, #0
 80207ae:	dd08      	ble.n	80207c2 <_strtod_l+0x792>
 80207b0:	9907      	ldr	r1, [sp, #28]
 80207b2:	463a      	mov	r2, r7
 80207b4:	4620      	mov	r0, r4
 80207b6:	f001 f9df 	bl	8021b78 <__lshift>
 80207ba:	9007      	str	r0, [sp, #28]
 80207bc:	2800      	cmp	r0, #0
 80207be:	f43f ae83 	beq.w	80204c8 <_strtod_l+0x498>
 80207c2:	f1b9 0f00 	cmp.w	r9, #0
 80207c6:	dd08      	ble.n	80207da <_strtod_l+0x7aa>
 80207c8:	4631      	mov	r1, r6
 80207ca:	464a      	mov	r2, r9
 80207cc:	4620      	mov	r0, r4
 80207ce:	f001 f9d3 	bl	8021b78 <__lshift>
 80207d2:	4606      	mov	r6, r0
 80207d4:	2800      	cmp	r0, #0
 80207d6:	f43f ae77 	beq.w	80204c8 <_strtod_l+0x498>
 80207da:	9a07      	ldr	r2, [sp, #28]
 80207dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80207de:	4620      	mov	r0, r4
 80207e0:	f001 fa52 	bl	8021c88 <__mdiff>
 80207e4:	4605      	mov	r5, r0
 80207e6:	2800      	cmp	r0, #0
 80207e8:	f43f ae6e 	beq.w	80204c8 <_strtod_l+0x498>
 80207ec:	68c3      	ldr	r3, [r0, #12]
 80207ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80207f0:	2300      	movs	r3, #0
 80207f2:	60c3      	str	r3, [r0, #12]
 80207f4:	4631      	mov	r1, r6
 80207f6:	f001 fa2b 	bl	8021c50 <__mcmp>
 80207fa:	2800      	cmp	r0, #0
 80207fc:	da65      	bge.n	80208ca <_strtod_l+0x89a>
 80207fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020800:	ea53 030a 	orrs.w	r3, r3, sl
 8020804:	f040 8087 	bne.w	8020916 <_strtod_l+0x8e6>
 8020808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802080c:	2b00      	cmp	r3, #0
 802080e:	f040 8082 	bne.w	8020916 <_strtod_l+0x8e6>
 8020812:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020816:	0d1b      	lsrs	r3, r3, #20
 8020818:	051b      	lsls	r3, r3, #20
 802081a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802081e:	d97a      	bls.n	8020916 <_strtod_l+0x8e6>
 8020820:	696b      	ldr	r3, [r5, #20]
 8020822:	b913      	cbnz	r3, 802082a <_strtod_l+0x7fa>
 8020824:	692b      	ldr	r3, [r5, #16]
 8020826:	2b01      	cmp	r3, #1
 8020828:	dd75      	ble.n	8020916 <_strtod_l+0x8e6>
 802082a:	4629      	mov	r1, r5
 802082c:	2201      	movs	r2, #1
 802082e:	4620      	mov	r0, r4
 8020830:	f001 f9a2 	bl	8021b78 <__lshift>
 8020834:	4631      	mov	r1, r6
 8020836:	4605      	mov	r5, r0
 8020838:	f001 fa0a 	bl	8021c50 <__mcmp>
 802083c:	2800      	cmp	r0, #0
 802083e:	dd6a      	ble.n	8020916 <_strtod_l+0x8e6>
 8020840:	9904      	ldr	r1, [sp, #16]
 8020842:	4a55      	ldr	r2, [pc, #340]	; (8020998 <_strtod_l+0x968>)
 8020844:	465b      	mov	r3, fp
 8020846:	2900      	cmp	r1, #0
 8020848:	f000 8085 	beq.w	8020956 <_strtod_l+0x926>
 802084c:	ea02 010b 	and.w	r1, r2, fp
 8020850:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020854:	dc7f      	bgt.n	8020956 <_strtod_l+0x926>
 8020856:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802085a:	f77f aeaa 	ble.w	80205b2 <_strtod_l+0x582>
 802085e:	4a4f      	ldr	r2, [pc, #316]	; (802099c <_strtod_l+0x96c>)
 8020860:	2300      	movs	r3, #0
 8020862:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020866:	4650      	mov	r0, sl
 8020868:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802086c:	4659      	mov	r1, fp
 802086e:	f7df feeb 	bl	8000648 <__aeabi_dmul>
 8020872:	460b      	mov	r3, r1
 8020874:	4303      	orrs	r3, r0
 8020876:	bf08      	it	eq
 8020878:	2322      	moveq	r3, #34	; 0x22
 802087a:	4682      	mov	sl, r0
 802087c:	468b      	mov	fp, r1
 802087e:	bf08      	it	eq
 8020880:	6023      	streq	r3, [r4, #0]
 8020882:	e62b      	b.n	80204dc <_strtod_l+0x4ac>
 8020884:	f04f 32ff 	mov.w	r2, #4294967295
 8020888:	fa02 f303 	lsl.w	r3, r2, r3
 802088c:	ea03 0a0a 	and.w	sl, r3, sl
 8020890:	e6de      	b.n	8020650 <_strtod_l+0x620>
 8020892:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020896:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802089a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802089e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80208a2:	fa01 f308 	lsl.w	r3, r1, r8
 80208a6:	930c      	str	r3, [sp, #48]	; 0x30
 80208a8:	9111      	str	r1, [sp, #68]	; 0x44
 80208aa:	e741      	b.n	8020730 <_strtod_l+0x700>
 80208ac:	2300      	movs	r3, #0
 80208ae:	930c      	str	r3, [sp, #48]	; 0x30
 80208b0:	2301      	movs	r3, #1
 80208b2:	9311      	str	r3, [sp, #68]	; 0x44
 80208b4:	e73c      	b.n	8020730 <_strtod_l+0x700>
 80208b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80208b8:	4642      	mov	r2, r8
 80208ba:	4620      	mov	r0, r4
 80208bc:	f001 f95c 	bl	8021b78 <__lshift>
 80208c0:	901e      	str	r0, [sp, #120]	; 0x78
 80208c2:	2800      	cmp	r0, #0
 80208c4:	f47f af66 	bne.w	8020794 <_strtod_l+0x764>
 80208c8:	e5fe      	b.n	80204c8 <_strtod_l+0x498>
 80208ca:	465f      	mov	r7, fp
 80208cc:	d16e      	bne.n	80209ac <_strtod_l+0x97c>
 80208ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80208d4:	b342      	cbz	r2, 8020928 <_strtod_l+0x8f8>
 80208d6:	4a32      	ldr	r2, [pc, #200]	; (80209a0 <_strtod_l+0x970>)
 80208d8:	4293      	cmp	r3, r2
 80208da:	d128      	bne.n	802092e <_strtod_l+0x8fe>
 80208dc:	9b04      	ldr	r3, [sp, #16]
 80208de:	4650      	mov	r0, sl
 80208e0:	b1eb      	cbz	r3, 802091e <_strtod_l+0x8ee>
 80208e2:	4a2d      	ldr	r2, [pc, #180]	; (8020998 <_strtod_l+0x968>)
 80208e4:	403a      	ands	r2, r7
 80208e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80208ea:	f04f 31ff 	mov.w	r1, #4294967295
 80208ee:	d819      	bhi.n	8020924 <_strtod_l+0x8f4>
 80208f0:	0d12      	lsrs	r2, r2, #20
 80208f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80208f6:	fa01 f303 	lsl.w	r3, r1, r3
 80208fa:	4298      	cmp	r0, r3
 80208fc:	d117      	bne.n	802092e <_strtod_l+0x8fe>
 80208fe:	4b29      	ldr	r3, [pc, #164]	; (80209a4 <_strtod_l+0x974>)
 8020900:	429f      	cmp	r7, r3
 8020902:	d102      	bne.n	802090a <_strtod_l+0x8da>
 8020904:	3001      	adds	r0, #1
 8020906:	f43f addf 	beq.w	80204c8 <_strtod_l+0x498>
 802090a:	4b23      	ldr	r3, [pc, #140]	; (8020998 <_strtod_l+0x968>)
 802090c:	403b      	ands	r3, r7
 802090e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020912:	f04f 0a00 	mov.w	sl, #0
 8020916:	9b04      	ldr	r3, [sp, #16]
 8020918:	2b00      	cmp	r3, #0
 802091a:	d1a0      	bne.n	802085e <_strtod_l+0x82e>
 802091c:	e5de      	b.n	80204dc <_strtod_l+0x4ac>
 802091e:	f04f 33ff 	mov.w	r3, #4294967295
 8020922:	e7ea      	b.n	80208fa <_strtod_l+0x8ca>
 8020924:	460b      	mov	r3, r1
 8020926:	e7e8      	b.n	80208fa <_strtod_l+0x8ca>
 8020928:	ea53 030a 	orrs.w	r3, r3, sl
 802092c:	d088      	beq.n	8020840 <_strtod_l+0x810>
 802092e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020930:	b1db      	cbz	r3, 802096a <_strtod_l+0x93a>
 8020932:	423b      	tst	r3, r7
 8020934:	d0ef      	beq.n	8020916 <_strtod_l+0x8e6>
 8020936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020938:	9a04      	ldr	r2, [sp, #16]
 802093a:	4650      	mov	r0, sl
 802093c:	4659      	mov	r1, fp
 802093e:	b1c3      	cbz	r3, 8020972 <_strtod_l+0x942>
 8020940:	f7ff fb57 	bl	801fff2 <sulp>
 8020944:	4602      	mov	r2, r0
 8020946:	460b      	mov	r3, r1
 8020948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802094c:	f7df fcc6 	bl	80002dc <__adddf3>
 8020950:	4682      	mov	sl, r0
 8020952:	468b      	mov	fp, r1
 8020954:	e7df      	b.n	8020916 <_strtod_l+0x8e6>
 8020956:	4013      	ands	r3, r2
 8020958:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802095c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020960:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020964:	f04f 3aff 	mov.w	sl, #4294967295
 8020968:	e7d5      	b.n	8020916 <_strtod_l+0x8e6>
 802096a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802096c:	ea13 0f0a 	tst.w	r3, sl
 8020970:	e7e0      	b.n	8020934 <_strtod_l+0x904>
 8020972:	f7ff fb3e 	bl	801fff2 <sulp>
 8020976:	4602      	mov	r2, r0
 8020978:	460b      	mov	r3, r1
 802097a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802097e:	f7df fcab 	bl	80002d8 <__aeabi_dsub>
 8020982:	2200      	movs	r2, #0
 8020984:	2300      	movs	r3, #0
 8020986:	4682      	mov	sl, r0
 8020988:	468b      	mov	fp, r1
 802098a:	f7e0 f8c5 	bl	8000b18 <__aeabi_dcmpeq>
 802098e:	2800      	cmp	r0, #0
 8020990:	d0c1      	beq.n	8020916 <_strtod_l+0x8e6>
 8020992:	e60e      	b.n	80205b2 <_strtod_l+0x582>
 8020994:	fffffc02 	.word	0xfffffc02
 8020998:	7ff00000 	.word	0x7ff00000
 802099c:	39500000 	.word	0x39500000
 80209a0:	000fffff 	.word	0x000fffff
 80209a4:	7fefffff 	.word	0x7fefffff
 80209a8:	08023890 	.word	0x08023890
 80209ac:	4631      	mov	r1, r6
 80209ae:	4628      	mov	r0, r5
 80209b0:	f001 faca 	bl	8021f48 <__ratio>
 80209b4:	ec59 8b10 	vmov	r8, r9, d0
 80209b8:	ee10 0a10 	vmov	r0, s0
 80209bc:	2200      	movs	r2, #0
 80209be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80209c2:	4649      	mov	r1, r9
 80209c4:	f7e0 f8bc 	bl	8000b40 <__aeabi_dcmple>
 80209c8:	2800      	cmp	r0, #0
 80209ca:	d07c      	beq.n	8020ac6 <_strtod_l+0xa96>
 80209cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d04c      	beq.n	8020a6c <_strtod_l+0xa3c>
 80209d2:	4b95      	ldr	r3, [pc, #596]	; (8020c28 <_strtod_l+0xbf8>)
 80209d4:	2200      	movs	r2, #0
 80209d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80209da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020c28 <_strtod_l+0xbf8>
 80209de:	f04f 0800 	mov.w	r8, #0
 80209e2:	4b92      	ldr	r3, [pc, #584]	; (8020c2c <_strtod_l+0xbfc>)
 80209e4:	403b      	ands	r3, r7
 80209e6:	9311      	str	r3, [sp, #68]	; 0x44
 80209e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80209ea:	4b91      	ldr	r3, [pc, #580]	; (8020c30 <_strtod_l+0xc00>)
 80209ec:	429a      	cmp	r2, r3
 80209ee:	f040 80b2 	bne.w	8020b56 <_strtod_l+0xb26>
 80209f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80209f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80209fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80209fe:	ec4b ab10 	vmov	d0, sl, fp
 8020a02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020a06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020a0a:	f001 f9c5 	bl	8021d98 <__ulp>
 8020a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020a12:	ec53 2b10 	vmov	r2, r3, d0
 8020a16:	f7df fe17 	bl	8000648 <__aeabi_dmul>
 8020a1a:	4652      	mov	r2, sl
 8020a1c:	465b      	mov	r3, fp
 8020a1e:	f7df fc5d 	bl	80002dc <__adddf3>
 8020a22:	460b      	mov	r3, r1
 8020a24:	4981      	ldr	r1, [pc, #516]	; (8020c2c <_strtod_l+0xbfc>)
 8020a26:	4a83      	ldr	r2, [pc, #524]	; (8020c34 <_strtod_l+0xc04>)
 8020a28:	4019      	ands	r1, r3
 8020a2a:	4291      	cmp	r1, r2
 8020a2c:	4682      	mov	sl, r0
 8020a2e:	d95e      	bls.n	8020aee <_strtod_l+0xabe>
 8020a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020a36:	4293      	cmp	r3, r2
 8020a38:	d103      	bne.n	8020a42 <_strtod_l+0xa12>
 8020a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a3c:	3301      	adds	r3, #1
 8020a3e:	f43f ad43 	beq.w	80204c8 <_strtod_l+0x498>
 8020a42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020c40 <_strtod_l+0xc10>
 8020a46:	f04f 3aff 	mov.w	sl, #4294967295
 8020a4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	f000 fe77 	bl	8021740 <_Bfree>
 8020a52:	9907      	ldr	r1, [sp, #28]
 8020a54:	4620      	mov	r0, r4
 8020a56:	f000 fe73 	bl	8021740 <_Bfree>
 8020a5a:	4631      	mov	r1, r6
 8020a5c:	4620      	mov	r0, r4
 8020a5e:	f000 fe6f 	bl	8021740 <_Bfree>
 8020a62:	4629      	mov	r1, r5
 8020a64:	4620      	mov	r0, r4
 8020a66:	f000 fe6b 	bl	8021740 <_Bfree>
 8020a6a:	e613      	b.n	8020694 <_strtod_l+0x664>
 8020a6c:	f1ba 0f00 	cmp.w	sl, #0
 8020a70:	d11b      	bne.n	8020aaa <_strtod_l+0xa7a>
 8020a72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020a76:	b9f3      	cbnz	r3, 8020ab6 <_strtod_l+0xa86>
 8020a78:	4b6b      	ldr	r3, [pc, #428]	; (8020c28 <_strtod_l+0xbf8>)
 8020a7a:	2200      	movs	r2, #0
 8020a7c:	4640      	mov	r0, r8
 8020a7e:	4649      	mov	r1, r9
 8020a80:	f7e0 f854 	bl	8000b2c <__aeabi_dcmplt>
 8020a84:	b9d0      	cbnz	r0, 8020abc <_strtod_l+0xa8c>
 8020a86:	4640      	mov	r0, r8
 8020a88:	4649      	mov	r1, r9
 8020a8a:	4b6b      	ldr	r3, [pc, #428]	; (8020c38 <_strtod_l+0xc08>)
 8020a8c:	2200      	movs	r2, #0
 8020a8e:	f7df fddb 	bl	8000648 <__aeabi_dmul>
 8020a92:	4680      	mov	r8, r0
 8020a94:	4689      	mov	r9, r1
 8020a96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020a9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8020a9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020aa0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020aa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020aa8:	e79b      	b.n	80209e2 <_strtod_l+0x9b2>
 8020aaa:	f1ba 0f01 	cmp.w	sl, #1
 8020aae:	d102      	bne.n	8020ab6 <_strtod_l+0xa86>
 8020ab0:	2f00      	cmp	r7, #0
 8020ab2:	f43f ad7e 	beq.w	80205b2 <_strtod_l+0x582>
 8020ab6:	4b61      	ldr	r3, [pc, #388]	; (8020c3c <_strtod_l+0xc0c>)
 8020ab8:	2200      	movs	r2, #0
 8020aba:	e78c      	b.n	80209d6 <_strtod_l+0x9a6>
 8020abc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020c38 <_strtod_l+0xc08>
 8020ac0:	f04f 0800 	mov.w	r8, #0
 8020ac4:	e7e7      	b.n	8020a96 <_strtod_l+0xa66>
 8020ac6:	4b5c      	ldr	r3, [pc, #368]	; (8020c38 <_strtod_l+0xc08>)
 8020ac8:	4640      	mov	r0, r8
 8020aca:	4649      	mov	r1, r9
 8020acc:	2200      	movs	r2, #0
 8020ace:	f7df fdbb 	bl	8000648 <__aeabi_dmul>
 8020ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ad4:	4680      	mov	r8, r0
 8020ad6:	4689      	mov	r9, r1
 8020ad8:	b933      	cbnz	r3, 8020ae8 <_strtod_l+0xab8>
 8020ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020ade:	9012      	str	r0, [sp, #72]	; 0x48
 8020ae0:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ae2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020ae6:	e7dd      	b.n	8020aa4 <_strtod_l+0xa74>
 8020ae8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8020aec:	e7f9      	b.n	8020ae2 <_strtod_l+0xab2>
 8020aee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020af2:	9b04      	ldr	r3, [sp, #16]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d1a8      	bne.n	8020a4a <_strtod_l+0xa1a>
 8020af8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020afc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020afe:	0d1b      	lsrs	r3, r3, #20
 8020b00:	051b      	lsls	r3, r3, #20
 8020b02:	429a      	cmp	r2, r3
 8020b04:	d1a1      	bne.n	8020a4a <_strtod_l+0xa1a>
 8020b06:	4640      	mov	r0, r8
 8020b08:	4649      	mov	r1, r9
 8020b0a:	f7e0 f8e5 	bl	8000cd8 <__aeabi_d2lz>
 8020b0e:	f7df fd6d 	bl	80005ec <__aeabi_l2d>
 8020b12:	4602      	mov	r2, r0
 8020b14:	460b      	mov	r3, r1
 8020b16:	4640      	mov	r0, r8
 8020b18:	4649      	mov	r1, r9
 8020b1a:	f7df fbdd 	bl	80002d8 <__aeabi_dsub>
 8020b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020b24:	ea43 030a 	orr.w	r3, r3, sl
 8020b28:	4313      	orrs	r3, r2
 8020b2a:	4680      	mov	r8, r0
 8020b2c:	4689      	mov	r9, r1
 8020b2e:	d053      	beq.n	8020bd8 <_strtod_l+0xba8>
 8020b30:	a335      	add	r3, pc, #212	; (adr r3, 8020c08 <_strtod_l+0xbd8>)
 8020b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b36:	f7df fff9 	bl	8000b2c <__aeabi_dcmplt>
 8020b3a:	2800      	cmp	r0, #0
 8020b3c:	f47f acce 	bne.w	80204dc <_strtod_l+0x4ac>
 8020b40:	a333      	add	r3, pc, #204	; (adr r3, 8020c10 <_strtod_l+0xbe0>)
 8020b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b46:	4640      	mov	r0, r8
 8020b48:	4649      	mov	r1, r9
 8020b4a:	f7e0 f80d 	bl	8000b68 <__aeabi_dcmpgt>
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	f43f af7b 	beq.w	8020a4a <_strtod_l+0xa1a>
 8020b54:	e4c2      	b.n	80204dc <_strtod_l+0x4ac>
 8020b56:	9b04      	ldr	r3, [sp, #16]
 8020b58:	b333      	cbz	r3, 8020ba8 <_strtod_l+0xb78>
 8020b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020b60:	d822      	bhi.n	8020ba8 <_strtod_l+0xb78>
 8020b62:	a32d      	add	r3, pc, #180	; (adr r3, 8020c18 <_strtod_l+0xbe8>)
 8020b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b68:	4640      	mov	r0, r8
 8020b6a:	4649      	mov	r1, r9
 8020b6c:	f7df ffe8 	bl	8000b40 <__aeabi_dcmple>
 8020b70:	b1a0      	cbz	r0, 8020b9c <_strtod_l+0xb6c>
 8020b72:	4649      	mov	r1, r9
 8020b74:	4640      	mov	r0, r8
 8020b76:	f7e0 f83f 	bl	8000bf8 <__aeabi_d2uiz>
 8020b7a:	2801      	cmp	r0, #1
 8020b7c:	bf38      	it	cc
 8020b7e:	2001      	movcc	r0, #1
 8020b80:	f7df fce8 	bl	8000554 <__aeabi_ui2d>
 8020b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b86:	4680      	mov	r8, r0
 8020b88:	4689      	mov	r9, r1
 8020b8a:	bb13      	cbnz	r3, 8020bd2 <_strtod_l+0xba2>
 8020b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020b90:	9014      	str	r0, [sp, #80]	; 0x50
 8020b92:	9315      	str	r3, [sp, #84]	; 0x54
 8020b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020b98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ba0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020ba4:	1a9b      	subs	r3, r3, r2
 8020ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8020ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020bac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020bb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020bb4:	f001 f8f0 	bl	8021d98 <__ulp>
 8020bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020bbc:	ec53 2b10 	vmov	r2, r3, d0
 8020bc0:	f7df fd42 	bl	8000648 <__aeabi_dmul>
 8020bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020bc8:	f7df fb88 	bl	80002dc <__adddf3>
 8020bcc:	4682      	mov	sl, r0
 8020bce:	468b      	mov	fp, r1
 8020bd0:	e78f      	b.n	8020af2 <_strtod_l+0xac2>
 8020bd2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020bd6:	e7dd      	b.n	8020b94 <_strtod_l+0xb64>
 8020bd8:	a311      	add	r3, pc, #68	; (adr r3, 8020c20 <_strtod_l+0xbf0>)
 8020bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bde:	f7df ffa5 	bl	8000b2c <__aeabi_dcmplt>
 8020be2:	e7b4      	b.n	8020b4e <_strtod_l+0xb1e>
 8020be4:	2300      	movs	r3, #0
 8020be6:	930e      	str	r3, [sp, #56]	; 0x38
 8020be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020bea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020bec:	6013      	str	r3, [r2, #0]
 8020bee:	f7ff ba65 	b.w	80200bc <_strtod_l+0x8c>
 8020bf2:	2b65      	cmp	r3, #101	; 0x65
 8020bf4:	f43f ab5d 	beq.w	80202b2 <_strtod_l+0x282>
 8020bf8:	2b45      	cmp	r3, #69	; 0x45
 8020bfa:	f43f ab5a 	beq.w	80202b2 <_strtod_l+0x282>
 8020bfe:	2201      	movs	r2, #1
 8020c00:	f7ff bb92 	b.w	8020328 <_strtod_l+0x2f8>
 8020c04:	f3af 8000 	nop.w
 8020c08:	94a03595 	.word	0x94a03595
 8020c0c:	3fdfffff 	.word	0x3fdfffff
 8020c10:	35afe535 	.word	0x35afe535
 8020c14:	3fe00000 	.word	0x3fe00000
 8020c18:	ffc00000 	.word	0xffc00000
 8020c1c:	41dfffff 	.word	0x41dfffff
 8020c20:	94a03595 	.word	0x94a03595
 8020c24:	3fcfffff 	.word	0x3fcfffff
 8020c28:	3ff00000 	.word	0x3ff00000
 8020c2c:	7ff00000 	.word	0x7ff00000
 8020c30:	7fe00000 	.word	0x7fe00000
 8020c34:	7c9fffff 	.word	0x7c9fffff
 8020c38:	3fe00000 	.word	0x3fe00000
 8020c3c:	bff00000 	.word	0xbff00000
 8020c40:	7fefffff 	.word	0x7fefffff

08020c44 <strtod>:
 8020c44:	460a      	mov	r2, r1
 8020c46:	4601      	mov	r1, r0
 8020c48:	4802      	ldr	r0, [pc, #8]	; (8020c54 <strtod+0x10>)
 8020c4a:	4b03      	ldr	r3, [pc, #12]	; (8020c58 <strtod+0x14>)
 8020c4c:	6800      	ldr	r0, [r0, #0]
 8020c4e:	f7ff b9ef 	b.w	8020030 <_strtod_l>
 8020c52:	bf00      	nop
 8020c54:	200002b8 	.word	0x200002b8
 8020c58:	20000320 	.word	0x20000320

08020c5c <_strtol_l.isra.0>:
 8020c5c:	2b01      	cmp	r3, #1
 8020c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c62:	d001      	beq.n	8020c68 <_strtol_l.isra.0+0xc>
 8020c64:	2b24      	cmp	r3, #36	; 0x24
 8020c66:	d906      	bls.n	8020c76 <_strtol_l.isra.0+0x1a>
 8020c68:	f7fe fdda 	bl	801f820 <__errno>
 8020c6c:	2316      	movs	r3, #22
 8020c6e:	6003      	str	r3, [r0, #0]
 8020c70:	2000      	movs	r0, #0
 8020c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c76:	4f3a      	ldr	r7, [pc, #232]	; (8020d60 <_strtol_l.isra.0+0x104>)
 8020c78:	468e      	mov	lr, r1
 8020c7a:	4676      	mov	r6, lr
 8020c7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020c80:	5de5      	ldrb	r5, [r4, r7]
 8020c82:	f015 0508 	ands.w	r5, r5, #8
 8020c86:	d1f8      	bne.n	8020c7a <_strtol_l.isra.0+0x1e>
 8020c88:	2c2d      	cmp	r4, #45	; 0x2d
 8020c8a:	d134      	bne.n	8020cf6 <_strtol_l.isra.0+0x9a>
 8020c8c:	f89e 4000 	ldrb.w	r4, [lr]
 8020c90:	f04f 0801 	mov.w	r8, #1
 8020c94:	f106 0e02 	add.w	lr, r6, #2
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d05c      	beq.n	8020d56 <_strtol_l.isra.0+0xfa>
 8020c9c:	2b10      	cmp	r3, #16
 8020c9e:	d10c      	bne.n	8020cba <_strtol_l.isra.0+0x5e>
 8020ca0:	2c30      	cmp	r4, #48	; 0x30
 8020ca2:	d10a      	bne.n	8020cba <_strtol_l.isra.0+0x5e>
 8020ca4:	f89e 4000 	ldrb.w	r4, [lr]
 8020ca8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020cac:	2c58      	cmp	r4, #88	; 0x58
 8020cae:	d14d      	bne.n	8020d4c <_strtol_l.isra.0+0xf0>
 8020cb0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020cb4:	2310      	movs	r3, #16
 8020cb6:	f10e 0e02 	add.w	lr, lr, #2
 8020cba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020cbe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020cc2:	2600      	movs	r6, #0
 8020cc4:	fbbc f9f3 	udiv	r9, ip, r3
 8020cc8:	4635      	mov	r5, r6
 8020cca:	fb03 ca19 	mls	sl, r3, r9, ip
 8020cce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020cd2:	2f09      	cmp	r7, #9
 8020cd4:	d818      	bhi.n	8020d08 <_strtol_l.isra.0+0xac>
 8020cd6:	463c      	mov	r4, r7
 8020cd8:	42a3      	cmp	r3, r4
 8020cda:	dd24      	ble.n	8020d26 <_strtol_l.isra.0+0xca>
 8020cdc:	2e00      	cmp	r6, #0
 8020cde:	db1f      	blt.n	8020d20 <_strtol_l.isra.0+0xc4>
 8020ce0:	45a9      	cmp	r9, r5
 8020ce2:	d31d      	bcc.n	8020d20 <_strtol_l.isra.0+0xc4>
 8020ce4:	d101      	bne.n	8020cea <_strtol_l.isra.0+0x8e>
 8020ce6:	45a2      	cmp	sl, r4
 8020ce8:	db1a      	blt.n	8020d20 <_strtol_l.isra.0+0xc4>
 8020cea:	fb05 4503 	mla	r5, r5, r3, r4
 8020cee:	2601      	movs	r6, #1
 8020cf0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020cf4:	e7eb      	b.n	8020cce <_strtol_l.isra.0+0x72>
 8020cf6:	2c2b      	cmp	r4, #43	; 0x2b
 8020cf8:	bf08      	it	eq
 8020cfa:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020cfe:	46a8      	mov	r8, r5
 8020d00:	bf08      	it	eq
 8020d02:	f106 0e02 	addeq.w	lr, r6, #2
 8020d06:	e7c7      	b.n	8020c98 <_strtol_l.isra.0+0x3c>
 8020d08:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020d0c:	2f19      	cmp	r7, #25
 8020d0e:	d801      	bhi.n	8020d14 <_strtol_l.isra.0+0xb8>
 8020d10:	3c37      	subs	r4, #55	; 0x37
 8020d12:	e7e1      	b.n	8020cd8 <_strtol_l.isra.0+0x7c>
 8020d14:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020d18:	2f19      	cmp	r7, #25
 8020d1a:	d804      	bhi.n	8020d26 <_strtol_l.isra.0+0xca>
 8020d1c:	3c57      	subs	r4, #87	; 0x57
 8020d1e:	e7db      	b.n	8020cd8 <_strtol_l.isra.0+0x7c>
 8020d20:	f04f 36ff 	mov.w	r6, #4294967295
 8020d24:	e7e4      	b.n	8020cf0 <_strtol_l.isra.0+0x94>
 8020d26:	2e00      	cmp	r6, #0
 8020d28:	da05      	bge.n	8020d36 <_strtol_l.isra.0+0xda>
 8020d2a:	2322      	movs	r3, #34	; 0x22
 8020d2c:	6003      	str	r3, [r0, #0]
 8020d2e:	4665      	mov	r5, ip
 8020d30:	b942      	cbnz	r2, 8020d44 <_strtol_l.isra.0+0xe8>
 8020d32:	4628      	mov	r0, r5
 8020d34:	e79d      	b.n	8020c72 <_strtol_l.isra.0+0x16>
 8020d36:	f1b8 0f00 	cmp.w	r8, #0
 8020d3a:	d000      	beq.n	8020d3e <_strtol_l.isra.0+0xe2>
 8020d3c:	426d      	negs	r5, r5
 8020d3e:	2a00      	cmp	r2, #0
 8020d40:	d0f7      	beq.n	8020d32 <_strtol_l.isra.0+0xd6>
 8020d42:	b10e      	cbz	r6, 8020d48 <_strtol_l.isra.0+0xec>
 8020d44:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020d48:	6011      	str	r1, [r2, #0]
 8020d4a:	e7f2      	b.n	8020d32 <_strtol_l.isra.0+0xd6>
 8020d4c:	2430      	movs	r4, #48	; 0x30
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d1b3      	bne.n	8020cba <_strtol_l.isra.0+0x5e>
 8020d52:	2308      	movs	r3, #8
 8020d54:	e7b1      	b.n	8020cba <_strtol_l.isra.0+0x5e>
 8020d56:	2c30      	cmp	r4, #48	; 0x30
 8020d58:	d0a4      	beq.n	8020ca4 <_strtol_l.isra.0+0x48>
 8020d5a:	230a      	movs	r3, #10
 8020d5c:	e7ad      	b.n	8020cba <_strtol_l.isra.0+0x5e>
 8020d5e:	bf00      	nop
 8020d60:	080236f5 	.word	0x080236f5

08020d64 <strtol>:
 8020d64:	4613      	mov	r3, r2
 8020d66:	460a      	mov	r2, r1
 8020d68:	4601      	mov	r1, r0
 8020d6a:	4802      	ldr	r0, [pc, #8]	; (8020d74 <strtol+0x10>)
 8020d6c:	6800      	ldr	r0, [r0, #0]
 8020d6e:	f7ff bf75 	b.w	8020c5c <_strtol_l.isra.0>
 8020d72:	bf00      	nop
 8020d74:	200002b8 	.word	0x200002b8

08020d78 <__swbuf_r>:
 8020d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d7a:	460e      	mov	r6, r1
 8020d7c:	4614      	mov	r4, r2
 8020d7e:	4605      	mov	r5, r0
 8020d80:	b118      	cbz	r0, 8020d8a <__swbuf_r+0x12>
 8020d82:	6983      	ldr	r3, [r0, #24]
 8020d84:	b90b      	cbnz	r3, 8020d8a <__swbuf_r+0x12>
 8020d86:	f7fe fe6b 	bl	801fa60 <__sinit>
 8020d8a:	4b21      	ldr	r3, [pc, #132]	; (8020e10 <__swbuf_r+0x98>)
 8020d8c:	429c      	cmp	r4, r3
 8020d8e:	d12b      	bne.n	8020de8 <__swbuf_r+0x70>
 8020d90:	686c      	ldr	r4, [r5, #4]
 8020d92:	69a3      	ldr	r3, [r4, #24]
 8020d94:	60a3      	str	r3, [r4, #8]
 8020d96:	89a3      	ldrh	r3, [r4, #12]
 8020d98:	071a      	lsls	r2, r3, #28
 8020d9a:	d52f      	bpl.n	8020dfc <__swbuf_r+0x84>
 8020d9c:	6923      	ldr	r3, [r4, #16]
 8020d9e:	b36b      	cbz	r3, 8020dfc <__swbuf_r+0x84>
 8020da0:	6923      	ldr	r3, [r4, #16]
 8020da2:	6820      	ldr	r0, [r4, #0]
 8020da4:	1ac0      	subs	r0, r0, r3
 8020da6:	6963      	ldr	r3, [r4, #20]
 8020da8:	b2f6      	uxtb	r6, r6
 8020daa:	4283      	cmp	r3, r0
 8020dac:	4637      	mov	r7, r6
 8020dae:	dc04      	bgt.n	8020dba <__swbuf_r+0x42>
 8020db0:	4621      	mov	r1, r4
 8020db2:	4628      	mov	r0, r5
 8020db4:	f7fe fdc0 	bl	801f938 <_fflush_r>
 8020db8:	bb30      	cbnz	r0, 8020e08 <__swbuf_r+0x90>
 8020dba:	68a3      	ldr	r3, [r4, #8]
 8020dbc:	3b01      	subs	r3, #1
 8020dbe:	60a3      	str	r3, [r4, #8]
 8020dc0:	6823      	ldr	r3, [r4, #0]
 8020dc2:	1c5a      	adds	r2, r3, #1
 8020dc4:	6022      	str	r2, [r4, #0]
 8020dc6:	701e      	strb	r6, [r3, #0]
 8020dc8:	6963      	ldr	r3, [r4, #20]
 8020dca:	3001      	adds	r0, #1
 8020dcc:	4283      	cmp	r3, r0
 8020dce:	d004      	beq.n	8020dda <__swbuf_r+0x62>
 8020dd0:	89a3      	ldrh	r3, [r4, #12]
 8020dd2:	07db      	lsls	r3, r3, #31
 8020dd4:	d506      	bpl.n	8020de4 <__swbuf_r+0x6c>
 8020dd6:	2e0a      	cmp	r6, #10
 8020dd8:	d104      	bne.n	8020de4 <__swbuf_r+0x6c>
 8020dda:	4621      	mov	r1, r4
 8020ddc:	4628      	mov	r0, r5
 8020dde:	f7fe fdab 	bl	801f938 <_fflush_r>
 8020de2:	b988      	cbnz	r0, 8020e08 <__swbuf_r+0x90>
 8020de4:	4638      	mov	r0, r7
 8020de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020de8:	4b0a      	ldr	r3, [pc, #40]	; (8020e14 <__swbuf_r+0x9c>)
 8020dea:	429c      	cmp	r4, r3
 8020dec:	d101      	bne.n	8020df2 <__swbuf_r+0x7a>
 8020dee:	68ac      	ldr	r4, [r5, #8]
 8020df0:	e7cf      	b.n	8020d92 <__swbuf_r+0x1a>
 8020df2:	4b09      	ldr	r3, [pc, #36]	; (8020e18 <__swbuf_r+0xa0>)
 8020df4:	429c      	cmp	r4, r3
 8020df6:	bf08      	it	eq
 8020df8:	68ec      	ldreq	r4, [r5, #12]
 8020dfa:	e7ca      	b.n	8020d92 <__swbuf_r+0x1a>
 8020dfc:	4621      	mov	r1, r4
 8020dfe:	4628      	mov	r0, r5
 8020e00:	f000 f81e 	bl	8020e40 <__swsetup_r>
 8020e04:	2800      	cmp	r0, #0
 8020e06:	d0cb      	beq.n	8020da0 <__swbuf_r+0x28>
 8020e08:	f04f 37ff 	mov.w	r7, #4294967295
 8020e0c:	e7ea      	b.n	8020de4 <__swbuf_r+0x6c>
 8020e0e:	bf00      	nop
 8020e10:	08023818 	.word	0x08023818
 8020e14:	08023838 	.word	0x08023838
 8020e18:	080237f8 	.word	0x080237f8

08020e1c <_write_r>:
 8020e1c:	b538      	push	{r3, r4, r5, lr}
 8020e1e:	4d07      	ldr	r5, [pc, #28]	; (8020e3c <_write_r+0x20>)
 8020e20:	4604      	mov	r4, r0
 8020e22:	4608      	mov	r0, r1
 8020e24:	4611      	mov	r1, r2
 8020e26:	2200      	movs	r2, #0
 8020e28:	602a      	str	r2, [r5, #0]
 8020e2a:	461a      	mov	r2, r3
 8020e2c:	f7fe fc8e 	bl	801f74c <_write>
 8020e30:	1c43      	adds	r3, r0, #1
 8020e32:	d102      	bne.n	8020e3a <_write_r+0x1e>
 8020e34:	682b      	ldr	r3, [r5, #0]
 8020e36:	b103      	cbz	r3, 8020e3a <_write_r+0x1e>
 8020e38:	6023      	str	r3, [r4, #0]
 8020e3a:	bd38      	pop	{r3, r4, r5, pc}
 8020e3c:	2001d474 	.word	0x2001d474

08020e40 <__swsetup_r>:
 8020e40:	4b32      	ldr	r3, [pc, #200]	; (8020f0c <__swsetup_r+0xcc>)
 8020e42:	b570      	push	{r4, r5, r6, lr}
 8020e44:	681d      	ldr	r5, [r3, #0]
 8020e46:	4606      	mov	r6, r0
 8020e48:	460c      	mov	r4, r1
 8020e4a:	b125      	cbz	r5, 8020e56 <__swsetup_r+0x16>
 8020e4c:	69ab      	ldr	r3, [r5, #24]
 8020e4e:	b913      	cbnz	r3, 8020e56 <__swsetup_r+0x16>
 8020e50:	4628      	mov	r0, r5
 8020e52:	f7fe fe05 	bl	801fa60 <__sinit>
 8020e56:	4b2e      	ldr	r3, [pc, #184]	; (8020f10 <__swsetup_r+0xd0>)
 8020e58:	429c      	cmp	r4, r3
 8020e5a:	d10f      	bne.n	8020e7c <__swsetup_r+0x3c>
 8020e5c:	686c      	ldr	r4, [r5, #4]
 8020e5e:	89a3      	ldrh	r3, [r4, #12]
 8020e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e64:	0719      	lsls	r1, r3, #28
 8020e66:	d42c      	bmi.n	8020ec2 <__swsetup_r+0x82>
 8020e68:	06dd      	lsls	r5, r3, #27
 8020e6a:	d411      	bmi.n	8020e90 <__swsetup_r+0x50>
 8020e6c:	2309      	movs	r3, #9
 8020e6e:	6033      	str	r3, [r6, #0]
 8020e70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020e74:	81a3      	strh	r3, [r4, #12]
 8020e76:	f04f 30ff 	mov.w	r0, #4294967295
 8020e7a:	e03e      	b.n	8020efa <__swsetup_r+0xba>
 8020e7c:	4b25      	ldr	r3, [pc, #148]	; (8020f14 <__swsetup_r+0xd4>)
 8020e7e:	429c      	cmp	r4, r3
 8020e80:	d101      	bne.n	8020e86 <__swsetup_r+0x46>
 8020e82:	68ac      	ldr	r4, [r5, #8]
 8020e84:	e7eb      	b.n	8020e5e <__swsetup_r+0x1e>
 8020e86:	4b24      	ldr	r3, [pc, #144]	; (8020f18 <__swsetup_r+0xd8>)
 8020e88:	429c      	cmp	r4, r3
 8020e8a:	bf08      	it	eq
 8020e8c:	68ec      	ldreq	r4, [r5, #12]
 8020e8e:	e7e6      	b.n	8020e5e <__swsetup_r+0x1e>
 8020e90:	0758      	lsls	r0, r3, #29
 8020e92:	d512      	bpl.n	8020eba <__swsetup_r+0x7a>
 8020e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e96:	b141      	cbz	r1, 8020eaa <__swsetup_r+0x6a>
 8020e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e9c:	4299      	cmp	r1, r3
 8020e9e:	d002      	beq.n	8020ea6 <__swsetup_r+0x66>
 8020ea0:	4630      	mov	r0, r6
 8020ea2:	f7fe ff57 	bl	801fd54 <_free_r>
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	6363      	str	r3, [r4, #52]	; 0x34
 8020eaa:	89a3      	ldrh	r3, [r4, #12]
 8020eac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020eb0:	81a3      	strh	r3, [r4, #12]
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	6063      	str	r3, [r4, #4]
 8020eb6:	6923      	ldr	r3, [r4, #16]
 8020eb8:	6023      	str	r3, [r4, #0]
 8020eba:	89a3      	ldrh	r3, [r4, #12]
 8020ebc:	f043 0308 	orr.w	r3, r3, #8
 8020ec0:	81a3      	strh	r3, [r4, #12]
 8020ec2:	6923      	ldr	r3, [r4, #16]
 8020ec4:	b94b      	cbnz	r3, 8020eda <__swsetup_r+0x9a>
 8020ec6:	89a3      	ldrh	r3, [r4, #12]
 8020ec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed0:	d003      	beq.n	8020eda <__swsetup_r+0x9a>
 8020ed2:	4621      	mov	r1, r4
 8020ed4:	4630      	mov	r0, r6
 8020ed6:	f7fe fead 	bl	801fc34 <__smakebuf_r>
 8020eda:	89a0      	ldrh	r0, [r4, #12]
 8020edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ee0:	f010 0301 	ands.w	r3, r0, #1
 8020ee4:	d00a      	beq.n	8020efc <__swsetup_r+0xbc>
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	60a3      	str	r3, [r4, #8]
 8020eea:	6963      	ldr	r3, [r4, #20]
 8020eec:	425b      	negs	r3, r3
 8020eee:	61a3      	str	r3, [r4, #24]
 8020ef0:	6923      	ldr	r3, [r4, #16]
 8020ef2:	b943      	cbnz	r3, 8020f06 <__swsetup_r+0xc6>
 8020ef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020ef8:	d1ba      	bne.n	8020e70 <__swsetup_r+0x30>
 8020efa:	bd70      	pop	{r4, r5, r6, pc}
 8020efc:	0781      	lsls	r1, r0, #30
 8020efe:	bf58      	it	pl
 8020f00:	6963      	ldrpl	r3, [r4, #20]
 8020f02:	60a3      	str	r3, [r4, #8]
 8020f04:	e7f4      	b.n	8020ef0 <__swsetup_r+0xb0>
 8020f06:	2000      	movs	r0, #0
 8020f08:	e7f7      	b.n	8020efa <__swsetup_r+0xba>
 8020f0a:	bf00      	nop
 8020f0c:	200002b8 	.word	0x200002b8
 8020f10:	08023818 	.word	0x08023818
 8020f14:	08023838 	.word	0x08023838
 8020f18:	080237f8 	.word	0x080237f8

08020f1c <_close_r>:
 8020f1c:	b538      	push	{r3, r4, r5, lr}
 8020f1e:	4d06      	ldr	r5, [pc, #24]	; (8020f38 <_close_r+0x1c>)
 8020f20:	2300      	movs	r3, #0
 8020f22:	4604      	mov	r4, r0
 8020f24:	4608      	mov	r0, r1
 8020f26:	602b      	str	r3, [r5, #0]
 8020f28:	f7fe fc2c 	bl	801f784 <_close>
 8020f2c:	1c43      	adds	r3, r0, #1
 8020f2e:	d102      	bne.n	8020f36 <_close_r+0x1a>
 8020f30:	682b      	ldr	r3, [r5, #0]
 8020f32:	b103      	cbz	r3, 8020f36 <_close_r+0x1a>
 8020f34:	6023      	str	r3, [r4, #0]
 8020f36:	bd38      	pop	{r3, r4, r5, pc}
 8020f38:	2001d474 	.word	0x2001d474

08020f3c <_fstat_r>:
 8020f3c:	b538      	push	{r3, r4, r5, lr}
 8020f3e:	4d07      	ldr	r5, [pc, #28]	; (8020f5c <_fstat_r+0x20>)
 8020f40:	2300      	movs	r3, #0
 8020f42:	4604      	mov	r4, r0
 8020f44:	4608      	mov	r0, r1
 8020f46:	4611      	mov	r1, r2
 8020f48:	602b      	str	r3, [r5, #0]
 8020f4a:	f7fe fc27 	bl	801f79c <_fstat>
 8020f4e:	1c43      	adds	r3, r0, #1
 8020f50:	d102      	bne.n	8020f58 <_fstat_r+0x1c>
 8020f52:	682b      	ldr	r3, [r5, #0]
 8020f54:	b103      	cbz	r3, 8020f58 <_fstat_r+0x1c>
 8020f56:	6023      	str	r3, [r4, #0]
 8020f58:	bd38      	pop	{r3, r4, r5, pc}
 8020f5a:	bf00      	nop
 8020f5c:	2001d474 	.word	0x2001d474

08020f60 <rshift>:
 8020f60:	6903      	ldr	r3, [r0, #16]
 8020f62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020f66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020f6e:	f100 0414 	add.w	r4, r0, #20
 8020f72:	dd45      	ble.n	8021000 <rshift+0xa0>
 8020f74:	f011 011f 	ands.w	r1, r1, #31
 8020f78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020f7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020f80:	d10c      	bne.n	8020f9c <rshift+0x3c>
 8020f82:	f100 0710 	add.w	r7, r0, #16
 8020f86:	4629      	mov	r1, r5
 8020f88:	42b1      	cmp	r1, r6
 8020f8a:	d334      	bcc.n	8020ff6 <rshift+0x96>
 8020f8c:	1a9b      	subs	r3, r3, r2
 8020f8e:	009b      	lsls	r3, r3, #2
 8020f90:	1eea      	subs	r2, r5, #3
 8020f92:	4296      	cmp	r6, r2
 8020f94:	bf38      	it	cc
 8020f96:	2300      	movcc	r3, #0
 8020f98:	4423      	add	r3, r4
 8020f9a:	e015      	b.n	8020fc8 <rshift+0x68>
 8020f9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020fa0:	f1c1 0820 	rsb	r8, r1, #32
 8020fa4:	40cf      	lsrs	r7, r1
 8020fa6:	f105 0e04 	add.w	lr, r5, #4
 8020faa:	46a1      	mov	r9, r4
 8020fac:	4576      	cmp	r6, lr
 8020fae:	46f4      	mov	ip, lr
 8020fb0:	d815      	bhi.n	8020fde <rshift+0x7e>
 8020fb2:	1a9b      	subs	r3, r3, r2
 8020fb4:	009a      	lsls	r2, r3, #2
 8020fb6:	3a04      	subs	r2, #4
 8020fb8:	3501      	adds	r5, #1
 8020fba:	42ae      	cmp	r6, r5
 8020fbc:	bf38      	it	cc
 8020fbe:	2200      	movcc	r2, #0
 8020fc0:	18a3      	adds	r3, r4, r2
 8020fc2:	50a7      	str	r7, [r4, r2]
 8020fc4:	b107      	cbz	r7, 8020fc8 <rshift+0x68>
 8020fc6:	3304      	adds	r3, #4
 8020fc8:	1b1a      	subs	r2, r3, r4
 8020fca:	42a3      	cmp	r3, r4
 8020fcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020fd0:	bf08      	it	eq
 8020fd2:	2300      	moveq	r3, #0
 8020fd4:	6102      	str	r2, [r0, #16]
 8020fd6:	bf08      	it	eq
 8020fd8:	6143      	streq	r3, [r0, #20]
 8020fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020fde:	f8dc c000 	ldr.w	ip, [ip]
 8020fe2:	fa0c fc08 	lsl.w	ip, ip, r8
 8020fe6:	ea4c 0707 	orr.w	r7, ip, r7
 8020fea:	f849 7b04 	str.w	r7, [r9], #4
 8020fee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020ff2:	40cf      	lsrs	r7, r1
 8020ff4:	e7da      	b.n	8020fac <rshift+0x4c>
 8020ff6:	f851 cb04 	ldr.w	ip, [r1], #4
 8020ffa:	f847 cf04 	str.w	ip, [r7, #4]!
 8020ffe:	e7c3      	b.n	8020f88 <rshift+0x28>
 8021000:	4623      	mov	r3, r4
 8021002:	e7e1      	b.n	8020fc8 <rshift+0x68>

08021004 <__hexdig_fun>:
 8021004:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021008:	2b09      	cmp	r3, #9
 802100a:	d802      	bhi.n	8021012 <__hexdig_fun+0xe>
 802100c:	3820      	subs	r0, #32
 802100e:	b2c0      	uxtb	r0, r0
 8021010:	4770      	bx	lr
 8021012:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021016:	2b05      	cmp	r3, #5
 8021018:	d801      	bhi.n	802101e <__hexdig_fun+0x1a>
 802101a:	3847      	subs	r0, #71	; 0x47
 802101c:	e7f7      	b.n	802100e <__hexdig_fun+0xa>
 802101e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021022:	2b05      	cmp	r3, #5
 8021024:	d801      	bhi.n	802102a <__hexdig_fun+0x26>
 8021026:	3827      	subs	r0, #39	; 0x27
 8021028:	e7f1      	b.n	802100e <__hexdig_fun+0xa>
 802102a:	2000      	movs	r0, #0
 802102c:	4770      	bx	lr
	...

08021030 <__gethex>:
 8021030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021034:	ed2d 8b02 	vpush	{d8}
 8021038:	b089      	sub	sp, #36	; 0x24
 802103a:	ee08 0a10 	vmov	s16, r0
 802103e:	9304      	str	r3, [sp, #16]
 8021040:	4bbc      	ldr	r3, [pc, #752]	; (8021334 <__gethex+0x304>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	9301      	str	r3, [sp, #4]
 8021046:	4618      	mov	r0, r3
 8021048:	468b      	mov	fp, r1
 802104a:	4690      	mov	r8, r2
 802104c:	f7df f8e2 	bl	8000214 <strlen>
 8021050:	9b01      	ldr	r3, [sp, #4]
 8021052:	f8db 2000 	ldr.w	r2, [fp]
 8021056:	4403      	add	r3, r0
 8021058:	4682      	mov	sl, r0
 802105a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802105e:	9305      	str	r3, [sp, #20]
 8021060:	1c93      	adds	r3, r2, #2
 8021062:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021066:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802106a:	32fe      	adds	r2, #254	; 0xfe
 802106c:	18d1      	adds	r1, r2, r3
 802106e:	461f      	mov	r7, r3
 8021070:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021074:	9100      	str	r1, [sp, #0]
 8021076:	2830      	cmp	r0, #48	; 0x30
 8021078:	d0f8      	beq.n	802106c <__gethex+0x3c>
 802107a:	f7ff ffc3 	bl	8021004 <__hexdig_fun>
 802107e:	4604      	mov	r4, r0
 8021080:	2800      	cmp	r0, #0
 8021082:	d13a      	bne.n	80210fa <__gethex+0xca>
 8021084:	9901      	ldr	r1, [sp, #4]
 8021086:	4652      	mov	r2, sl
 8021088:	4638      	mov	r0, r7
 802108a:	f7fe ff8d 	bl	801ffa8 <strncmp>
 802108e:	4605      	mov	r5, r0
 8021090:	2800      	cmp	r0, #0
 8021092:	d168      	bne.n	8021166 <__gethex+0x136>
 8021094:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021098:	eb07 060a 	add.w	r6, r7, sl
 802109c:	f7ff ffb2 	bl	8021004 <__hexdig_fun>
 80210a0:	2800      	cmp	r0, #0
 80210a2:	d062      	beq.n	802116a <__gethex+0x13a>
 80210a4:	4633      	mov	r3, r6
 80210a6:	7818      	ldrb	r0, [r3, #0]
 80210a8:	2830      	cmp	r0, #48	; 0x30
 80210aa:	461f      	mov	r7, r3
 80210ac:	f103 0301 	add.w	r3, r3, #1
 80210b0:	d0f9      	beq.n	80210a6 <__gethex+0x76>
 80210b2:	f7ff ffa7 	bl	8021004 <__hexdig_fun>
 80210b6:	2301      	movs	r3, #1
 80210b8:	fab0 f480 	clz	r4, r0
 80210bc:	0964      	lsrs	r4, r4, #5
 80210be:	4635      	mov	r5, r6
 80210c0:	9300      	str	r3, [sp, #0]
 80210c2:	463a      	mov	r2, r7
 80210c4:	4616      	mov	r6, r2
 80210c6:	3201      	adds	r2, #1
 80210c8:	7830      	ldrb	r0, [r6, #0]
 80210ca:	f7ff ff9b 	bl	8021004 <__hexdig_fun>
 80210ce:	2800      	cmp	r0, #0
 80210d0:	d1f8      	bne.n	80210c4 <__gethex+0x94>
 80210d2:	9901      	ldr	r1, [sp, #4]
 80210d4:	4652      	mov	r2, sl
 80210d6:	4630      	mov	r0, r6
 80210d8:	f7fe ff66 	bl	801ffa8 <strncmp>
 80210dc:	b980      	cbnz	r0, 8021100 <__gethex+0xd0>
 80210de:	b94d      	cbnz	r5, 80210f4 <__gethex+0xc4>
 80210e0:	eb06 050a 	add.w	r5, r6, sl
 80210e4:	462a      	mov	r2, r5
 80210e6:	4616      	mov	r6, r2
 80210e8:	3201      	adds	r2, #1
 80210ea:	7830      	ldrb	r0, [r6, #0]
 80210ec:	f7ff ff8a 	bl	8021004 <__hexdig_fun>
 80210f0:	2800      	cmp	r0, #0
 80210f2:	d1f8      	bne.n	80210e6 <__gethex+0xb6>
 80210f4:	1bad      	subs	r5, r5, r6
 80210f6:	00ad      	lsls	r5, r5, #2
 80210f8:	e004      	b.n	8021104 <__gethex+0xd4>
 80210fa:	2400      	movs	r4, #0
 80210fc:	4625      	mov	r5, r4
 80210fe:	e7e0      	b.n	80210c2 <__gethex+0x92>
 8021100:	2d00      	cmp	r5, #0
 8021102:	d1f7      	bne.n	80210f4 <__gethex+0xc4>
 8021104:	7833      	ldrb	r3, [r6, #0]
 8021106:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802110a:	2b50      	cmp	r3, #80	; 0x50
 802110c:	d13b      	bne.n	8021186 <__gethex+0x156>
 802110e:	7873      	ldrb	r3, [r6, #1]
 8021110:	2b2b      	cmp	r3, #43	; 0x2b
 8021112:	d02c      	beq.n	802116e <__gethex+0x13e>
 8021114:	2b2d      	cmp	r3, #45	; 0x2d
 8021116:	d02e      	beq.n	8021176 <__gethex+0x146>
 8021118:	1c71      	adds	r1, r6, #1
 802111a:	f04f 0900 	mov.w	r9, #0
 802111e:	7808      	ldrb	r0, [r1, #0]
 8021120:	f7ff ff70 	bl	8021004 <__hexdig_fun>
 8021124:	1e43      	subs	r3, r0, #1
 8021126:	b2db      	uxtb	r3, r3
 8021128:	2b18      	cmp	r3, #24
 802112a:	d82c      	bhi.n	8021186 <__gethex+0x156>
 802112c:	f1a0 0210 	sub.w	r2, r0, #16
 8021130:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021134:	f7ff ff66 	bl	8021004 <__hexdig_fun>
 8021138:	1e43      	subs	r3, r0, #1
 802113a:	b2db      	uxtb	r3, r3
 802113c:	2b18      	cmp	r3, #24
 802113e:	d91d      	bls.n	802117c <__gethex+0x14c>
 8021140:	f1b9 0f00 	cmp.w	r9, #0
 8021144:	d000      	beq.n	8021148 <__gethex+0x118>
 8021146:	4252      	negs	r2, r2
 8021148:	4415      	add	r5, r2
 802114a:	f8cb 1000 	str.w	r1, [fp]
 802114e:	b1e4      	cbz	r4, 802118a <__gethex+0x15a>
 8021150:	9b00      	ldr	r3, [sp, #0]
 8021152:	2b00      	cmp	r3, #0
 8021154:	bf14      	ite	ne
 8021156:	2700      	movne	r7, #0
 8021158:	2706      	moveq	r7, #6
 802115a:	4638      	mov	r0, r7
 802115c:	b009      	add	sp, #36	; 0x24
 802115e:	ecbd 8b02 	vpop	{d8}
 8021162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021166:	463e      	mov	r6, r7
 8021168:	4625      	mov	r5, r4
 802116a:	2401      	movs	r4, #1
 802116c:	e7ca      	b.n	8021104 <__gethex+0xd4>
 802116e:	f04f 0900 	mov.w	r9, #0
 8021172:	1cb1      	adds	r1, r6, #2
 8021174:	e7d3      	b.n	802111e <__gethex+0xee>
 8021176:	f04f 0901 	mov.w	r9, #1
 802117a:	e7fa      	b.n	8021172 <__gethex+0x142>
 802117c:	230a      	movs	r3, #10
 802117e:	fb03 0202 	mla	r2, r3, r2, r0
 8021182:	3a10      	subs	r2, #16
 8021184:	e7d4      	b.n	8021130 <__gethex+0x100>
 8021186:	4631      	mov	r1, r6
 8021188:	e7df      	b.n	802114a <__gethex+0x11a>
 802118a:	1bf3      	subs	r3, r6, r7
 802118c:	3b01      	subs	r3, #1
 802118e:	4621      	mov	r1, r4
 8021190:	2b07      	cmp	r3, #7
 8021192:	dc0b      	bgt.n	80211ac <__gethex+0x17c>
 8021194:	ee18 0a10 	vmov	r0, s16
 8021198:	f000 fa92 	bl	80216c0 <_Balloc>
 802119c:	4604      	mov	r4, r0
 802119e:	b940      	cbnz	r0, 80211b2 <__gethex+0x182>
 80211a0:	4b65      	ldr	r3, [pc, #404]	; (8021338 <__gethex+0x308>)
 80211a2:	4602      	mov	r2, r0
 80211a4:	21de      	movs	r1, #222	; 0xde
 80211a6:	4865      	ldr	r0, [pc, #404]	; (802133c <__gethex+0x30c>)
 80211a8:	f001 fa5c 	bl	8022664 <__assert_func>
 80211ac:	3101      	adds	r1, #1
 80211ae:	105b      	asrs	r3, r3, #1
 80211b0:	e7ee      	b.n	8021190 <__gethex+0x160>
 80211b2:	f100 0914 	add.w	r9, r0, #20
 80211b6:	f04f 0b00 	mov.w	fp, #0
 80211ba:	f1ca 0301 	rsb	r3, sl, #1
 80211be:	f8cd 9008 	str.w	r9, [sp, #8]
 80211c2:	f8cd b000 	str.w	fp, [sp]
 80211c6:	9306      	str	r3, [sp, #24]
 80211c8:	42b7      	cmp	r7, r6
 80211ca:	d340      	bcc.n	802124e <__gethex+0x21e>
 80211cc:	9802      	ldr	r0, [sp, #8]
 80211ce:	9b00      	ldr	r3, [sp, #0]
 80211d0:	f840 3b04 	str.w	r3, [r0], #4
 80211d4:	eba0 0009 	sub.w	r0, r0, r9
 80211d8:	1080      	asrs	r0, r0, #2
 80211da:	0146      	lsls	r6, r0, #5
 80211dc:	6120      	str	r0, [r4, #16]
 80211de:	4618      	mov	r0, r3
 80211e0:	f000 fb64 	bl	80218ac <__hi0bits>
 80211e4:	1a30      	subs	r0, r6, r0
 80211e6:	f8d8 6000 	ldr.w	r6, [r8]
 80211ea:	42b0      	cmp	r0, r6
 80211ec:	dd63      	ble.n	80212b6 <__gethex+0x286>
 80211ee:	1b87      	subs	r7, r0, r6
 80211f0:	4639      	mov	r1, r7
 80211f2:	4620      	mov	r0, r4
 80211f4:	f000 fefe 	bl	8021ff4 <__any_on>
 80211f8:	4682      	mov	sl, r0
 80211fa:	b1a8      	cbz	r0, 8021228 <__gethex+0x1f8>
 80211fc:	1e7b      	subs	r3, r7, #1
 80211fe:	1159      	asrs	r1, r3, #5
 8021200:	f003 021f 	and.w	r2, r3, #31
 8021204:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021208:	f04f 0a01 	mov.w	sl, #1
 802120c:	fa0a f202 	lsl.w	r2, sl, r2
 8021210:	420a      	tst	r2, r1
 8021212:	d009      	beq.n	8021228 <__gethex+0x1f8>
 8021214:	4553      	cmp	r3, sl
 8021216:	dd05      	ble.n	8021224 <__gethex+0x1f4>
 8021218:	1eb9      	subs	r1, r7, #2
 802121a:	4620      	mov	r0, r4
 802121c:	f000 feea 	bl	8021ff4 <__any_on>
 8021220:	2800      	cmp	r0, #0
 8021222:	d145      	bne.n	80212b0 <__gethex+0x280>
 8021224:	f04f 0a02 	mov.w	sl, #2
 8021228:	4639      	mov	r1, r7
 802122a:	4620      	mov	r0, r4
 802122c:	f7ff fe98 	bl	8020f60 <rshift>
 8021230:	443d      	add	r5, r7
 8021232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021236:	42ab      	cmp	r3, r5
 8021238:	da4c      	bge.n	80212d4 <__gethex+0x2a4>
 802123a:	ee18 0a10 	vmov	r0, s16
 802123e:	4621      	mov	r1, r4
 8021240:	f000 fa7e 	bl	8021740 <_Bfree>
 8021244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021246:	2300      	movs	r3, #0
 8021248:	6013      	str	r3, [r2, #0]
 802124a:	27a3      	movs	r7, #163	; 0xa3
 802124c:	e785      	b.n	802115a <__gethex+0x12a>
 802124e:	1e73      	subs	r3, r6, #1
 8021250:	9a05      	ldr	r2, [sp, #20]
 8021252:	9303      	str	r3, [sp, #12]
 8021254:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021258:	4293      	cmp	r3, r2
 802125a:	d019      	beq.n	8021290 <__gethex+0x260>
 802125c:	f1bb 0f20 	cmp.w	fp, #32
 8021260:	d107      	bne.n	8021272 <__gethex+0x242>
 8021262:	9b02      	ldr	r3, [sp, #8]
 8021264:	9a00      	ldr	r2, [sp, #0]
 8021266:	f843 2b04 	str.w	r2, [r3], #4
 802126a:	9302      	str	r3, [sp, #8]
 802126c:	2300      	movs	r3, #0
 802126e:	9300      	str	r3, [sp, #0]
 8021270:	469b      	mov	fp, r3
 8021272:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8021276:	f7ff fec5 	bl	8021004 <__hexdig_fun>
 802127a:	9b00      	ldr	r3, [sp, #0]
 802127c:	f000 000f 	and.w	r0, r0, #15
 8021280:	fa00 f00b 	lsl.w	r0, r0, fp
 8021284:	4303      	orrs	r3, r0
 8021286:	9300      	str	r3, [sp, #0]
 8021288:	f10b 0b04 	add.w	fp, fp, #4
 802128c:	9b03      	ldr	r3, [sp, #12]
 802128e:	e00d      	b.n	80212ac <__gethex+0x27c>
 8021290:	9b03      	ldr	r3, [sp, #12]
 8021292:	9a06      	ldr	r2, [sp, #24]
 8021294:	4413      	add	r3, r2
 8021296:	42bb      	cmp	r3, r7
 8021298:	d3e0      	bcc.n	802125c <__gethex+0x22c>
 802129a:	4618      	mov	r0, r3
 802129c:	9901      	ldr	r1, [sp, #4]
 802129e:	9307      	str	r3, [sp, #28]
 80212a0:	4652      	mov	r2, sl
 80212a2:	f7fe fe81 	bl	801ffa8 <strncmp>
 80212a6:	9b07      	ldr	r3, [sp, #28]
 80212a8:	2800      	cmp	r0, #0
 80212aa:	d1d7      	bne.n	802125c <__gethex+0x22c>
 80212ac:	461e      	mov	r6, r3
 80212ae:	e78b      	b.n	80211c8 <__gethex+0x198>
 80212b0:	f04f 0a03 	mov.w	sl, #3
 80212b4:	e7b8      	b.n	8021228 <__gethex+0x1f8>
 80212b6:	da0a      	bge.n	80212ce <__gethex+0x29e>
 80212b8:	1a37      	subs	r7, r6, r0
 80212ba:	4621      	mov	r1, r4
 80212bc:	ee18 0a10 	vmov	r0, s16
 80212c0:	463a      	mov	r2, r7
 80212c2:	f000 fc59 	bl	8021b78 <__lshift>
 80212c6:	1bed      	subs	r5, r5, r7
 80212c8:	4604      	mov	r4, r0
 80212ca:	f100 0914 	add.w	r9, r0, #20
 80212ce:	f04f 0a00 	mov.w	sl, #0
 80212d2:	e7ae      	b.n	8021232 <__gethex+0x202>
 80212d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80212d8:	42a8      	cmp	r0, r5
 80212da:	dd72      	ble.n	80213c2 <__gethex+0x392>
 80212dc:	1b45      	subs	r5, r0, r5
 80212de:	42ae      	cmp	r6, r5
 80212e0:	dc36      	bgt.n	8021350 <__gethex+0x320>
 80212e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80212e6:	2b02      	cmp	r3, #2
 80212e8:	d02a      	beq.n	8021340 <__gethex+0x310>
 80212ea:	2b03      	cmp	r3, #3
 80212ec:	d02c      	beq.n	8021348 <__gethex+0x318>
 80212ee:	2b01      	cmp	r3, #1
 80212f0:	d115      	bne.n	802131e <__gethex+0x2ee>
 80212f2:	42ae      	cmp	r6, r5
 80212f4:	d113      	bne.n	802131e <__gethex+0x2ee>
 80212f6:	2e01      	cmp	r6, #1
 80212f8:	d10b      	bne.n	8021312 <__gethex+0x2e2>
 80212fa:	9a04      	ldr	r2, [sp, #16]
 80212fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021300:	6013      	str	r3, [r2, #0]
 8021302:	2301      	movs	r3, #1
 8021304:	6123      	str	r3, [r4, #16]
 8021306:	f8c9 3000 	str.w	r3, [r9]
 802130a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802130c:	2762      	movs	r7, #98	; 0x62
 802130e:	601c      	str	r4, [r3, #0]
 8021310:	e723      	b.n	802115a <__gethex+0x12a>
 8021312:	1e71      	subs	r1, r6, #1
 8021314:	4620      	mov	r0, r4
 8021316:	f000 fe6d 	bl	8021ff4 <__any_on>
 802131a:	2800      	cmp	r0, #0
 802131c:	d1ed      	bne.n	80212fa <__gethex+0x2ca>
 802131e:	ee18 0a10 	vmov	r0, s16
 8021322:	4621      	mov	r1, r4
 8021324:	f000 fa0c 	bl	8021740 <_Bfree>
 8021328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802132a:	2300      	movs	r3, #0
 802132c:	6013      	str	r3, [r2, #0]
 802132e:	2750      	movs	r7, #80	; 0x50
 8021330:	e713      	b.n	802115a <__gethex+0x12a>
 8021332:	bf00      	nop
 8021334:	08023934 	.word	0x08023934
 8021338:	080238b8 	.word	0x080238b8
 802133c:	080238c9 	.word	0x080238c9
 8021340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021342:	2b00      	cmp	r3, #0
 8021344:	d1eb      	bne.n	802131e <__gethex+0x2ee>
 8021346:	e7d8      	b.n	80212fa <__gethex+0x2ca>
 8021348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802134a:	2b00      	cmp	r3, #0
 802134c:	d1d5      	bne.n	80212fa <__gethex+0x2ca>
 802134e:	e7e6      	b.n	802131e <__gethex+0x2ee>
 8021350:	1e6f      	subs	r7, r5, #1
 8021352:	f1ba 0f00 	cmp.w	sl, #0
 8021356:	d131      	bne.n	80213bc <__gethex+0x38c>
 8021358:	b127      	cbz	r7, 8021364 <__gethex+0x334>
 802135a:	4639      	mov	r1, r7
 802135c:	4620      	mov	r0, r4
 802135e:	f000 fe49 	bl	8021ff4 <__any_on>
 8021362:	4682      	mov	sl, r0
 8021364:	117b      	asrs	r3, r7, #5
 8021366:	2101      	movs	r1, #1
 8021368:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802136c:	f007 071f 	and.w	r7, r7, #31
 8021370:	fa01 f707 	lsl.w	r7, r1, r7
 8021374:	421f      	tst	r7, r3
 8021376:	4629      	mov	r1, r5
 8021378:	4620      	mov	r0, r4
 802137a:	bf18      	it	ne
 802137c:	f04a 0a02 	orrne.w	sl, sl, #2
 8021380:	1b76      	subs	r6, r6, r5
 8021382:	f7ff fded 	bl	8020f60 <rshift>
 8021386:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802138a:	2702      	movs	r7, #2
 802138c:	f1ba 0f00 	cmp.w	sl, #0
 8021390:	d048      	beq.n	8021424 <__gethex+0x3f4>
 8021392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021396:	2b02      	cmp	r3, #2
 8021398:	d015      	beq.n	80213c6 <__gethex+0x396>
 802139a:	2b03      	cmp	r3, #3
 802139c:	d017      	beq.n	80213ce <__gethex+0x39e>
 802139e:	2b01      	cmp	r3, #1
 80213a0:	d109      	bne.n	80213b6 <__gethex+0x386>
 80213a2:	f01a 0f02 	tst.w	sl, #2
 80213a6:	d006      	beq.n	80213b6 <__gethex+0x386>
 80213a8:	f8d9 0000 	ldr.w	r0, [r9]
 80213ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80213b0:	f01a 0f01 	tst.w	sl, #1
 80213b4:	d10e      	bne.n	80213d4 <__gethex+0x3a4>
 80213b6:	f047 0710 	orr.w	r7, r7, #16
 80213ba:	e033      	b.n	8021424 <__gethex+0x3f4>
 80213bc:	f04f 0a01 	mov.w	sl, #1
 80213c0:	e7d0      	b.n	8021364 <__gethex+0x334>
 80213c2:	2701      	movs	r7, #1
 80213c4:	e7e2      	b.n	802138c <__gethex+0x35c>
 80213c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80213c8:	f1c3 0301 	rsb	r3, r3, #1
 80213cc:	9315      	str	r3, [sp, #84]	; 0x54
 80213ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d0f0      	beq.n	80213b6 <__gethex+0x386>
 80213d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80213d8:	f104 0314 	add.w	r3, r4, #20
 80213dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80213e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80213e4:	f04f 0c00 	mov.w	ip, #0
 80213e8:	4618      	mov	r0, r3
 80213ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80213ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 80213f2:	d01c      	beq.n	802142e <__gethex+0x3fe>
 80213f4:	3201      	adds	r2, #1
 80213f6:	6002      	str	r2, [r0, #0]
 80213f8:	2f02      	cmp	r7, #2
 80213fa:	f104 0314 	add.w	r3, r4, #20
 80213fe:	d13f      	bne.n	8021480 <__gethex+0x450>
 8021400:	f8d8 2000 	ldr.w	r2, [r8]
 8021404:	3a01      	subs	r2, #1
 8021406:	42b2      	cmp	r2, r6
 8021408:	d10a      	bne.n	8021420 <__gethex+0x3f0>
 802140a:	1171      	asrs	r1, r6, #5
 802140c:	2201      	movs	r2, #1
 802140e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021412:	f006 061f 	and.w	r6, r6, #31
 8021416:	fa02 f606 	lsl.w	r6, r2, r6
 802141a:	421e      	tst	r6, r3
 802141c:	bf18      	it	ne
 802141e:	4617      	movne	r7, r2
 8021420:	f047 0720 	orr.w	r7, r7, #32
 8021424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021426:	601c      	str	r4, [r3, #0]
 8021428:	9b04      	ldr	r3, [sp, #16]
 802142a:	601d      	str	r5, [r3, #0]
 802142c:	e695      	b.n	802115a <__gethex+0x12a>
 802142e:	4299      	cmp	r1, r3
 8021430:	f843 cc04 	str.w	ip, [r3, #-4]
 8021434:	d8d8      	bhi.n	80213e8 <__gethex+0x3b8>
 8021436:	68a3      	ldr	r3, [r4, #8]
 8021438:	459b      	cmp	fp, r3
 802143a:	db19      	blt.n	8021470 <__gethex+0x440>
 802143c:	6861      	ldr	r1, [r4, #4]
 802143e:	ee18 0a10 	vmov	r0, s16
 8021442:	3101      	adds	r1, #1
 8021444:	f000 f93c 	bl	80216c0 <_Balloc>
 8021448:	4681      	mov	r9, r0
 802144a:	b918      	cbnz	r0, 8021454 <__gethex+0x424>
 802144c:	4b1a      	ldr	r3, [pc, #104]	; (80214b8 <__gethex+0x488>)
 802144e:	4602      	mov	r2, r0
 8021450:	2184      	movs	r1, #132	; 0x84
 8021452:	e6a8      	b.n	80211a6 <__gethex+0x176>
 8021454:	6922      	ldr	r2, [r4, #16]
 8021456:	3202      	adds	r2, #2
 8021458:	f104 010c 	add.w	r1, r4, #12
 802145c:	0092      	lsls	r2, r2, #2
 802145e:	300c      	adds	r0, #12
 8021460:	f7fe fc38 	bl	801fcd4 <memcpy>
 8021464:	4621      	mov	r1, r4
 8021466:	ee18 0a10 	vmov	r0, s16
 802146a:	f000 f969 	bl	8021740 <_Bfree>
 802146e:	464c      	mov	r4, r9
 8021470:	6923      	ldr	r3, [r4, #16]
 8021472:	1c5a      	adds	r2, r3, #1
 8021474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021478:	6122      	str	r2, [r4, #16]
 802147a:	2201      	movs	r2, #1
 802147c:	615a      	str	r2, [r3, #20]
 802147e:	e7bb      	b.n	80213f8 <__gethex+0x3c8>
 8021480:	6922      	ldr	r2, [r4, #16]
 8021482:	455a      	cmp	r2, fp
 8021484:	dd0b      	ble.n	802149e <__gethex+0x46e>
 8021486:	2101      	movs	r1, #1
 8021488:	4620      	mov	r0, r4
 802148a:	f7ff fd69 	bl	8020f60 <rshift>
 802148e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021492:	3501      	adds	r5, #1
 8021494:	42ab      	cmp	r3, r5
 8021496:	f6ff aed0 	blt.w	802123a <__gethex+0x20a>
 802149a:	2701      	movs	r7, #1
 802149c:	e7c0      	b.n	8021420 <__gethex+0x3f0>
 802149e:	f016 061f 	ands.w	r6, r6, #31
 80214a2:	d0fa      	beq.n	802149a <__gethex+0x46a>
 80214a4:	449a      	add	sl, r3
 80214a6:	f1c6 0620 	rsb	r6, r6, #32
 80214aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80214ae:	f000 f9fd 	bl	80218ac <__hi0bits>
 80214b2:	42b0      	cmp	r0, r6
 80214b4:	dbe7      	blt.n	8021486 <__gethex+0x456>
 80214b6:	e7f0      	b.n	802149a <__gethex+0x46a>
 80214b8:	080238b8 	.word	0x080238b8

080214bc <L_shift>:
 80214bc:	f1c2 0208 	rsb	r2, r2, #8
 80214c0:	0092      	lsls	r2, r2, #2
 80214c2:	b570      	push	{r4, r5, r6, lr}
 80214c4:	f1c2 0620 	rsb	r6, r2, #32
 80214c8:	6843      	ldr	r3, [r0, #4]
 80214ca:	6804      	ldr	r4, [r0, #0]
 80214cc:	fa03 f506 	lsl.w	r5, r3, r6
 80214d0:	432c      	orrs	r4, r5
 80214d2:	40d3      	lsrs	r3, r2
 80214d4:	6004      	str	r4, [r0, #0]
 80214d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80214da:	4288      	cmp	r0, r1
 80214dc:	d3f4      	bcc.n	80214c8 <L_shift+0xc>
 80214de:	bd70      	pop	{r4, r5, r6, pc}

080214e0 <__match>:
 80214e0:	b530      	push	{r4, r5, lr}
 80214e2:	6803      	ldr	r3, [r0, #0]
 80214e4:	3301      	adds	r3, #1
 80214e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80214ea:	b914      	cbnz	r4, 80214f2 <__match+0x12>
 80214ec:	6003      	str	r3, [r0, #0]
 80214ee:	2001      	movs	r0, #1
 80214f0:	bd30      	pop	{r4, r5, pc}
 80214f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80214f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80214fa:	2d19      	cmp	r5, #25
 80214fc:	bf98      	it	ls
 80214fe:	3220      	addls	r2, #32
 8021500:	42a2      	cmp	r2, r4
 8021502:	d0f0      	beq.n	80214e6 <__match+0x6>
 8021504:	2000      	movs	r0, #0
 8021506:	e7f3      	b.n	80214f0 <__match+0x10>

08021508 <__hexnan>:
 8021508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802150c:	680b      	ldr	r3, [r1, #0]
 802150e:	6801      	ldr	r1, [r0, #0]
 8021510:	115e      	asrs	r6, r3, #5
 8021512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021516:	f013 031f 	ands.w	r3, r3, #31
 802151a:	b087      	sub	sp, #28
 802151c:	bf18      	it	ne
 802151e:	3604      	addne	r6, #4
 8021520:	2500      	movs	r5, #0
 8021522:	1f37      	subs	r7, r6, #4
 8021524:	4682      	mov	sl, r0
 8021526:	4690      	mov	r8, r2
 8021528:	9301      	str	r3, [sp, #4]
 802152a:	f846 5c04 	str.w	r5, [r6, #-4]
 802152e:	46b9      	mov	r9, r7
 8021530:	463c      	mov	r4, r7
 8021532:	9502      	str	r5, [sp, #8]
 8021534:	46ab      	mov	fp, r5
 8021536:	784a      	ldrb	r2, [r1, #1]
 8021538:	1c4b      	adds	r3, r1, #1
 802153a:	9303      	str	r3, [sp, #12]
 802153c:	b342      	cbz	r2, 8021590 <__hexnan+0x88>
 802153e:	4610      	mov	r0, r2
 8021540:	9105      	str	r1, [sp, #20]
 8021542:	9204      	str	r2, [sp, #16]
 8021544:	f7ff fd5e 	bl	8021004 <__hexdig_fun>
 8021548:	2800      	cmp	r0, #0
 802154a:	d14f      	bne.n	80215ec <__hexnan+0xe4>
 802154c:	9a04      	ldr	r2, [sp, #16]
 802154e:	9905      	ldr	r1, [sp, #20]
 8021550:	2a20      	cmp	r2, #32
 8021552:	d818      	bhi.n	8021586 <__hexnan+0x7e>
 8021554:	9b02      	ldr	r3, [sp, #8]
 8021556:	459b      	cmp	fp, r3
 8021558:	dd13      	ble.n	8021582 <__hexnan+0x7a>
 802155a:	454c      	cmp	r4, r9
 802155c:	d206      	bcs.n	802156c <__hexnan+0x64>
 802155e:	2d07      	cmp	r5, #7
 8021560:	dc04      	bgt.n	802156c <__hexnan+0x64>
 8021562:	462a      	mov	r2, r5
 8021564:	4649      	mov	r1, r9
 8021566:	4620      	mov	r0, r4
 8021568:	f7ff ffa8 	bl	80214bc <L_shift>
 802156c:	4544      	cmp	r4, r8
 802156e:	d950      	bls.n	8021612 <__hexnan+0x10a>
 8021570:	2300      	movs	r3, #0
 8021572:	f1a4 0904 	sub.w	r9, r4, #4
 8021576:	f844 3c04 	str.w	r3, [r4, #-4]
 802157a:	f8cd b008 	str.w	fp, [sp, #8]
 802157e:	464c      	mov	r4, r9
 8021580:	461d      	mov	r5, r3
 8021582:	9903      	ldr	r1, [sp, #12]
 8021584:	e7d7      	b.n	8021536 <__hexnan+0x2e>
 8021586:	2a29      	cmp	r2, #41	; 0x29
 8021588:	d156      	bne.n	8021638 <__hexnan+0x130>
 802158a:	3102      	adds	r1, #2
 802158c:	f8ca 1000 	str.w	r1, [sl]
 8021590:	f1bb 0f00 	cmp.w	fp, #0
 8021594:	d050      	beq.n	8021638 <__hexnan+0x130>
 8021596:	454c      	cmp	r4, r9
 8021598:	d206      	bcs.n	80215a8 <__hexnan+0xa0>
 802159a:	2d07      	cmp	r5, #7
 802159c:	dc04      	bgt.n	80215a8 <__hexnan+0xa0>
 802159e:	462a      	mov	r2, r5
 80215a0:	4649      	mov	r1, r9
 80215a2:	4620      	mov	r0, r4
 80215a4:	f7ff ff8a 	bl	80214bc <L_shift>
 80215a8:	4544      	cmp	r4, r8
 80215aa:	d934      	bls.n	8021616 <__hexnan+0x10e>
 80215ac:	f1a8 0204 	sub.w	r2, r8, #4
 80215b0:	4623      	mov	r3, r4
 80215b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80215b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80215ba:	429f      	cmp	r7, r3
 80215bc:	d2f9      	bcs.n	80215b2 <__hexnan+0xaa>
 80215be:	1b3b      	subs	r3, r7, r4
 80215c0:	f023 0303 	bic.w	r3, r3, #3
 80215c4:	3304      	adds	r3, #4
 80215c6:	3401      	adds	r4, #1
 80215c8:	3e03      	subs	r6, #3
 80215ca:	42b4      	cmp	r4, r6
 80215cc:	bf88      	it	hi
 80215ce:	2304      	movhi	r3, #4
 80215d0:	4443      	add	r3, r8
 80215d2:	2200      	movs	r2, #0
 80215d4:	f843 2b04 	str.w	r2, [r3], #4
 80215d8:	429f      	cmp	r7, r3
 80215da:	d2fb      	bcs.n	80215d4 <__hexnan+0xcc>
 80215dc:	683b      	ldr	r3, [r7, #0]
 80215de:	b91b      	cbnz	r3, 80215e8 <__hexnan+0xe0>
 80215e0:	4547      	cmp	r7, r8
 80215e2:	d127      	bne.n	8021634 <__hexnan+0x12c>
 80215e4:	2301      	movs	r3, #1
 80215e6:	603b      	str	r3, [r7, #0]
 80215e8:	2005      	movs	r0, #5
 80215ea:	e026      	b.n	802163a <__hexnan+0x132>
 80215ec:	3501      	adds	r5, #1
 80215ee:	2d08      	cmp	r5, #8
 80215f0:	f10b 0b01 	add.w	fp, fp, #1
 80215f4:	dd06      	ble.n	8021604 <__hexnan+0xfc>
 80215f6:	4544      	cmp	r4, r8
 80215f8:	d9c3      	bls.n	8021582 <__hexnan+0x7a>
 80215fa:	2300      	movs	r3, #0
 80215fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8021600:	2501      	movs	r5, #1
 8021602:	3c04      	subs	r4, #4
 8021604:	6822      	ldr	r2, [r4, #0]
 8021606:	f000 000f 	and.w	r0, r0, #15
 802160a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802160e:	6022      	str	r2, [r4, #0]
 8021610:	e7b7      	b.n	8021582 <__hexnan+0x7a>
 8021612:	2508      	movs	r5, #8
 8021614:	e7b5      	b.n	8021582 <__hexnan+0x7a>
 8021616:	9b01      	ldr	r3, [sp, #4]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d0df      	beq.n	80215dc <__hexnan+0xd4>
 802161c:	f04f 32ff 	mov.w	r2, #4294967295
 8021620:	f1c3 0320 	rsb	r3, r3, #32
 8021624:	fa22 f303 	lsr.w	r3, r2, r3
 8021628:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802162c:	401a      	ands	r2, r3
 802162e:	f846 2c04 	str.w	r2, [r6, #-4]
 8021632:	e7d3      	b.n	80215dc <__hexnan+0xd4>
 8021634:	3f04      	subs	r7, #4
 8021636:	e7d1      	b.n	80215dc <__hexnan+0xd4>
 8021638:	2004      	movs	r0, #4
 802163a:	b007      	add	sp, #28
 802163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021640 <_isatty_r>:
 8021640:	b538      	push	{r3, r4, r5, lr}
 8021642:	4d06      	ldr	r5, [pc, #24]	; (802165c <_isatty_r+0x1c>)
 8021644:	2300      	movs	r3, #0
 8021646:	4604      	mov	r4, r0
 8021648:	4608      	mov	r0, r1
 802164a:	602b      	str	r3, [r5, #0]
 802164c:	f7fe f8b6 	bl	801f7bc <_isatty>
 8021650:	1c43      	adds	r3, r0, #1
 8021652:	d102      	bne.n	802165a <_isatty_r+0x1a>
 8021654:	682b      	ldr	r3, [r5, #0]
 8021656:	b103      	cbz	r3, 802165a <_isatty_r+0x1a>
 8021658:	6023      	str	r3, [r4, #0]
 802165a:	bd38      	pop	{r3, r4, r5, pc}
 802165c:	2001d474 	.word	0x2001d474

08021660 <_lseek_r>:
 8021660:	b538      	push	{r3, r4, r5, lr}
 8021662:	4d07      	ldr	r5, [pc, #28]	; (8021680 <_lseek_r+0x20>)
 8021664:	4604      	mov	r4, r0
 8021666:	4608      	mov	r0, r1
 8021668:	4611      	mov	r1, r2
 802166a:	2200      	movs	r2, #0
 802166c:	602a      	str	r2, [r5, #0]
 802166e:	461a      	mov	r2, r3
 8021670:	f7fe f8af 	bl	801f7d2 <_lseek>
 8021674:	1c43      	adds	r3, r0, #1
 8021676:	d102      	bne.n	802167e <_lseek_r+0x1e>
 8021678:	682b      	ldr	r3, [r5, #0]
 802167a:	b103      	cbz	r3, 802167e <_lseek_r+0x1e>
 802167c:	6023      	str	r3, [r4, #0]
 802167e:	bd38      	pop	{r3, r4, r5, pc}
 8021680:	2001d474 	.word	0x2001d474

08021684 <__ascii_mbtowc>:
 8021684:	b082      	sub	sp, #8
 8021686:	b901      	cbnz	r1, 802168a <__ascii_mbtowc+0x6>
 8021688:	a901      	add	r1, sp, #4
 802168a:	b142      	cbz	r2, 802169e <__ascii_mbtowc+0x1a>
 802168c:	b14b      	cbz	r3, 80216a2 <__ascii_mbtowc+0x1e>
 802168e:	7813      	ldrb	r3, [r2, #0]
 8021690:	600b      	str	r3, [r1, #0]
 8021692:	7812      	ldrb	r2, [r2, #0]
 8021694:	1e10      	subs	r0, r2, #0
 8021696:	bf18      	it	ne
 8021698:	2001      	movne	r0, #1
 802169a:	b002      	add	sp, #8
 802169c:	4770      	bx	lr
 802169e:	4610      	mov	r0, r2
 80216a0:	e7fb      	b.n	802169a <__ascii_mbtowc+0x16>
 80216a2:	f06f 0001 	mvn.w	r0, #1
 80216a6:	e7f8      	b.n	802169a <__ascii_mbtowc+0x16>

080216a8 <__malloc_lock>:
 80216a8:	4801      	ldr	r0, [pc, #4]	; (80216b0 <__malloc_lock+0x8>)
 80216aa:	f7fe ba9c 	b.w	801fbe6 <__retarget_lock_acquire_recursive>
 80216ae:	bf00      	nop
 80216b0:	2001d468 	.word	0x2001d468

080216b4 <__malloc_unlock>:
 80216b4:	4801      	ldr	r0, [pc, #4]	; (80216bc <__malloc_unlock+0x8>)
 80216b6:	f7fe ba97 	b.w	801fbe8 <__retarget_lock_release_recursive>
 80216ba:	bf00      	nop
 80216bc:	2001d468 	.word	0x2001d468

080216c0 <_Balloc>:
 80216c0:	b570      	push	{r4, r5, r6, lr}
 80216c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80216c4:	4604      	mov	r4, r0
 80216c6:	460d      	mov	r5, r1
 80216c8:	b976      	cbnz	r6, 80216e8 <_Balloc+0x28>
 80216ca:	2010      	movs	r0, #16
 80216cc:	f7fe faf2 	bl	801fcb4 <malloc>
 80216d0:	4602      	mov	r2, r0
 80216d2:	6260      	str	r0, [r4, #36]	; 0x24
 80216d4:	b920      	cbnz	r0, 80216e0 <_Balloc+0x20>
 80216d6:	4b18      	ldr	r3, [pc, #96]	; (8021738 <_Balloc+0x78>)
 80216d8:	4818      	ldr	r0, [pc, #96]	; (802173c <_Balloc+0x7c>)
 80216da:	2166      	movs	r1, #102	; 0x66
 80216dc:	f000 ffc2 	bl	8022664 <__assert_func>
 80216e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80216e4:	6006      	str	r6, [r0, #0]
 80216e6:	60c6      	str	r6, [r0, #12]
 80216e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80216ea:	68f3      	ldr	r3, [r6, #12]
 80216ec:	b183      	cbz	r3, 8021710 <_Balloc+0x50>
 80216ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80216f0:	68db      	ldr	r3, [r3, #12]
 80216f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80216f6:	b9b8      	cbnz	r0, 8021728 <_Balloc+0x68>
 80216f8:	2101      	movs	r1, #1
 80216fa:	fa01 f605 	lsl.w	r6, r1, r5
 80216fe:	1d72      	adds	r2, r6, #5
 8021700:	0092      	lsls	r2, r2, #2
 8021702:	4620      	mov	r0, r4
 8021704:	f7fe fb16 	bl	801fd34 <_calloc_r>
 8021708:	b160      	cbz	r0, 8021724 <_Balloc+0x64>
 802170a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802170e:	e00e      	b.n	802172e <_Balloc+0x6e>
 8021710:	2221      	movs	r2, #33	; 0x21
 8021712:	2104      	movs	r1, #4
 8021714:	4620      	mov	r0, r4
 8021716:	f7fe fb0d 	bl	801fd34 <_calloc_r>
 802171a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802171c:	60f0      	str	r0, [r6, #12]
 802171e:	68db      	ldr	r3, [r3, #12]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d1e4      	bne.n	80216ee <_Balloc+0x2e>
 8021724:	2000      	movs	r0, #0
 8021726:	bd70      	pop	{r4, r5, r6, pc}
 8021728:	6802      	ldr	r2, [r0, #0]
 802172a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802172e:	2300      	movs	r3, #0
 8021730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021734:	e7f7      	b.n	8021726 <_Balloc+0x66>
 8021736:	bf00      	nop
 8021738:	08023948 	.word	0x08023948
 802173c:	0802395f 	.word	0x0802395f

08021740 <_Bfree>:
 8021740:	b570      	push	{r4, r5, r6, lr}
 8021742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021744:	4605      	mov	r5, r0
 8021746:	460c      	mov	r4, r1
 8021748:	b976      	cbnz	r6, 8021768 <_Bfree+0x28>
 802174a:	2010      	movs	r0, #16
 802174c:	f7fe fab2 	bl	801fcb4 <malloc>
 8021750:	4602      	mov	r2, r0
 8021752:	6268      	str	r0, [r5, #36]	; 0x24
 8021754:	b920      	cbnz	r0, 8021760 <_Bfree+0x20>
 8021756:	4b09      	ldr	r3, [pc, #36]	; (802177c <_Bfree+0x3c>)
 8021758:	4809      	ldr	r0, [pc, #36]	; (8021780 <_Bfree+0x40>)
 802175a:	218a      	movs	r1, #138	; 0x8a
 802175c:	f000 ff82 	bl	8022664 <__assert_func>
 8021760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021764:	6006      	str	r6, [r0, #0]
 8021766:	60c6      	str	r6, [r0, #12]
 8021768:	b13c      	cbz	r4, 802177a <_Bfree+0x3a>
 802176a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802176c:	6862      	ldr	r2, [r4, #4]
 802176e:	68db      	ldr	r3, [r3, #12]
 8021770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021774:	6021      	str	r1, [r4, #0]
 8021776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802177a:	bd70      	pop	{r4, r5, r6, pc}
 802177c:	08023948 	.word	0x08023948
 8021780:	0802395f 	.word	0x0802395f

08021784 <__multadd>:
 8021784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021788:	690e      	ldr	r6, [r1, #16]
 802178a:	4607      	mov	r7, r0
 802178c:	4698      	mov	r8, r3
 802178e:	460c      	mov	r4, r1
 8021790:	f101 0014 	add.w	r0, r1, #20
 8021794:	2300      	movs	r3, #0
 8021796:	6805      	ldr	r5, [r0, #0]
 8021798:	b2a9      	uxth	r1, r5
 802179a:	fb02 8101 	mla	r1, r2, r1, r8
 802179e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80217a2:	0c2d      	lsrs	r5, r5, #16
 80217a4:	fb02 c505 	mla	r5, r2, r5, ip
 80217a8:	b289      	uxth	r1, r1
 80217aa:	3301      	adds	r3, #1
 80217ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80217b0:	429e      	cmp	r6, r3
 80217b2:	f840 1b04 	str.w	r1, [r0], #4
 80217b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80217ba:	dcec      	bgt.n	8021796 <__multadd+0x12>
 80217bc:	f1b8 0f00 	cmp.w	r8, #0
 80217c0:	d022      	beq.n	8021808 <__multadd+0x84>
 80217c2:	68a3      	ldr	r3, [r4, #8]
 80217c4:	42b3      	cmp	r3, r6
 80217c6:	dc19      	bgt.n	80217fc <__multadd+0x78>
 80217c8:	6861      	ldr	r1, [r4, #4]
 80217ca:	4638      	mov	r0, r7
 80217cc:	3101      	adds	r1, #1
 80217ce:	f7ff ff77 	bl	80216c0 <_Balloc>
 80217d2:	4605      	mov	r5, r0
 80217d4:	b928      	cbnz	r0, 80217e2 <__multadd+0x5e>
 80217d6:	4602      	mov	r2, r0
 80217d8:	4b0d      	ldr	r3, [pc, #52]	; (8021810 <__multadd+0x8c>)
 80217da:	480e      	ldr	r0, [pc, #56]	; (8021814 <__multadd+0x90>)
 80217dc:	21b5      	movs	r1, #181	; 0xb5
 80217de:	f000 ff41 	bl	8022664 <__assert_func>
 80217e2:	6922      	ldr	r2, [r4, #16]
 80217e4:	3202      	adds	r2, #2
 80217e6:	f104 010c 	add.w	r1, r4, #12
 80217ea:	0092      	lsls	r2, r2, #2
 80217ec:	300c      	adds	r0, #12
 80217ee:	f7fe fa71 	bl	801fcd4 <memcpy>
 80217f2:	4621      	mov	r1, r4
 80217f4:	4638      	mov	r0, r7
 80217f6:	f7ff ffa3 	bl	8021740 <_Bfree>
 80217fa:	462c      	mov	r4, r5
 80217fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8021800:	3601      	adds	r6, #1
 8021802:	f8c3 8014 	str.w	r8, [r3, #20]
 8021806:	6126      	str	r6, [r4, #16]
 8021808:	4620      	mov	r0, r4
 802180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802180e:	bf00      	nop
 8021810:	080238b8 	.word	0x080238b8
 8021814:	0802395f 	.word	0x0802395f

08021818 <__s2b>:
 8021818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802181c:	460c      	mov	r4, r1
 802181e:	4615      	mov	r5, r2
 8021820:	461f      	mov	r7, r3
 8021822:	2209      	movs	r2, #9
 8021824:	3308      	adds	r3, #8
 8021826:	4606      	mov	r6, r0
 8021828:	fb93 f3f2 	sdiv	r3, r3, r2
 802182c:	2100      	movs	r1, #0
 802182e:	2201      	movs	r2, #1
 8021830:	429a      	cmp	r2, r3
 8021832:	db09      	blt.n	8021848 <__s2b+0x30>
 8021834:	4630      	mov	r0, r6
 8021836:	f7ff ff43 	bl	80216c0 <_Balloc>
 802183a:	b940      	cbnz	r0, 802184e <__s2b+0x36>
 802183c:	4602      	mov	r2, r0
 802183e:	4b19      	ldr	r3, [pc, #100]	; (80218a4 <__s2b+0x8c>)
 8021840:	4819      	ldr	r0, [pc, #100]	; (80218a8 <__s2b+0x90>)
 8021842:	21ce      	movs	r1, #206	; 0xce
 8021844:	f000 ff0e 	bl	8022664 <__assert_func>
 8021848:	0052      	lsls	r2, r2, #1
 802184a:	3101      	adds	r1, #1
 802184c:	e7f0      	b.n	8021830 <__s2b+0x18>
 802184e:	9b08      	ldr	r3, [sp, #32]
 8021850:	6143      	str	r3, [r0, #20]
 8021852:	2d09      	cmp	r5, #9
 8021854:	f04f 0301 	mov.w	r3, #1
 8021858:	6103      	str	r3, [r0, #16]
 802185a:	dd16      	ble.n	802188a <__s2b+0x72>
 802185c:	f104 0909 	add.w	r9, r4, #9
 8021860:	46c8      	mov	r8, r9
 8021862:	442c      	add	r4, r5
 8021864:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021868:	4601      	mov	r1, r0
 802186a:	3b30      	subs	r3, #48	; 0x30
 802186c:	220a      	movs	r2, #10
 802186e:	4630      	mov	r0, r6
 8021870:	f7ff ff88 	bl	8021784 <__multadd>
 8021874:	45a0      	cmp	r8, r4
 8021876:	d1f5      	bne.n	8021864 <__s2b+0x4c>
 8021878:	f1a5 0408 	sub.w	r4, r5, #8
 802187c:	444c      	add	r4, r9
 802187e:	1b2d      	subs	r5, r5, r4
 8021880:	1963      	adds	r3, r4, r5
 8021882:	42bb      	cmp	r3, r7
 8021884:	db04      	blt.n	8021890 <__s2b+0x78>
 8021886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802188a:	340a      	adds	r4, #10
 802188c:	2509      	movs	r5, #9
 802188e:	e7f6      	b.n	802187e <__s2b+0x66>
 8021890:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021894:	4601      	mov	r1, r0
 8021896:	3b30      	subs	r3, #48	; 0x30
 8021898:	220a      	movs	r2, #10
 802189a:	4630      	mov	r0, r6
 802189c:	f7ff ff72 	bl	8021784 <__multadd>
 80218a0:	e7ee      	b.n	8021880 <__s2b+0x68>
 80218a2:	bf00      	nop
 80218a4:	080238b8 	.word	0x080238b8
 80218a8:	0802395f 	.word	0x0802395f

080218ac <__hi0bits>:
 80218ac:	0c03      	lsrs	r3, r0, #16
 80218ae:	041b      	lsls	r3, r3, #16
 80218b0:	b9d3      	cbnz	r3, 80218e8 <__hi0bits+0x3c>
 80218b2:	0400      	lsls	r0, r0, #16
 80218b4:	2310      	movs	r3, #16
 80218b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80218ba:	bf04      	itt	eq
 80218bc:	0200      	lsleq	r0, r0, #8
 80218be:	3308      	addeq	r3, #8
 80218c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80218c4:	bf04      	itt	eq
 80218c6:	0100      	lsleq	r0, r0, #4
 80218c8:	3304      	addeq	r3, #4
 80218ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80218ce:	bf04      	itt	eq
 80218d0:	0080      	lsleq	r0, r0, #2
 80218d2:	3302      	addeq	r3, #2
 80218d4:	2800      	cmp	r0, #0
 80218d6:	db05      	blt.n	80218e4 <__hi0bits+0x38>
 80218d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80218dc:	f103 0301 	add.w	r3, r3, #1
 80218e0:	bf08      	it	eq
 80218e2:	2320      	moveq	r3, #32
 80218e4:	4618      	mov	r0, r3
 80218e6:	4770      	bx	lr
 80218e8:	2300      	movs	r3, #0
 80218ea:	e7e4      	b.n	80218b6 <__hi0bits+0xa>

080218ec <__lo0bits>:
 80218ec:	6803      	ldr	r3, [r0, #0]
 80218ee:	f013 0207 	ands.w	r2, r3, #7
 80218f2:	4601      	mov	r1, r0
 80218f4:	d00b      	beq.n	802190e <__lo0bits+0x22>
 80218f6:	07da      	lsls	r2, r3, #31
 80218f8:	d424      	bmi.n	8021944 <__lo0bits+0x58>
 80218fa:	0798      	lsls	r0, r3, #30
 80218fc:	bf49      	itett	mi
 80218fe:	085b      	lsrmi	r3, r3, #1
 8021900:	089b      	lsrpl	r3, r3, #2
 8021902:	2001      	movmi	r0, #1
 8021904:	600b      	strmi	r3, [r1, #0]
 8021906:	bf5c      	itt	pl
 8021908:	600b      	strpl	r3, [r1, #0]
 802190a:	2002      	movpl	r0, #2
 802190c:	4770      	bx	lr
 802190e:	b298      	uxth	r0, r3
 8021910:	b9b0      	cbnz	r0, 8021940 <__lo0bits+0x54>
 8021912:	0c1b      	lsrs	r3, r3, #16
 8021914:	2010      	movs	r0, #16
 8021916:	f013 0fff 	tst.w	r3, #255	; 0xff
 802191a:	bf04      	itt	eq
 802191c:	0a1b      	lsreq	r3, r3, #8
 802191e:	3008      	addeq	r0, #8
 8021920:	071a      	lsls	r2, r3, #28
 8021922:	bf04      	itt	eq
 8021924:	091b      	lsreq	r3, r3, #4
 8021926:	3004      	addeq	r0, #4
 8021928:	079a      	lsls	r2, r3, #30
 802192a:	bf04      	itt	eq
 802192c:	089b      	lsreq	r3, r3, #2
 802192e:	3002      	addeq	r0, #2
 8021930:	07da      	lsls	r2, r3, #31
 8021932:	d403      	bmi.n	802193c <__lo0bits+0x50>
 8021934:	085b      	lsrs	r3, r3, #1
 8021936:	f100 0001 	add.w	r0, r0, #1
 802193a:	d005      	beq.n	8021948 <__lo0bits+0x5c>
 802193c:	600b      	str	r3, [r1, #0]
 802193e:	4770      	bx	lr
 8021940:	4610      	mov	r0, r2
 8021942:	e7e8      	b.n	8021916 <__lo0bits+0x2a>
 8021944:	2000      	movs	r0, #0
 8021946:	4770      	bx	lr
 8021948:	2020      	movs	r0, #32
 802194a:	4770      	bx	lr

0802194c <__i2b>:
 802194c:	b510      	push	{r4, lr}
 802194e:	460c      	mov	r4, r1
 8021950:	2101      	movs	r1, #1
 8021952:	f7ff feb5 	bl	80216c0 <_Balloc>
 8021956:	4602      	mov	r2, r0
 8021958:	b928      	cbnz	r0, 8021966 <__i2b+0x1a>
 802195a:	4b05      	ldr	r3, [pc, #20]	; (8021970 <__i2b+0x24>)
 802195c:	4805      	ldr	r0, [pc, #20]	; (8021974 <__i2b+0x28>)
 802195e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021962:	f000 fe7f 	bl	8022664 <__assert_func>
 8021966:	2301      	movs	r3, #1
 8021968:	6144      	str	r4, [r0, #20]
 802196a:	6103      	str	r3, [r0, #16]
 802196c:	bd10      	pop	{r4, pc}
 802196e:	bf00      	nop
 8021970:	080238b8 	.word	0x080238b8
 8021974:	0802395f 	.word	0x0802395f

08021978 <__multiply>:
 8021978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802197c:	4614      	mov	r4, r2
 802197e:	690a      	ldr	r2, [r1, #16]
 8021980:	6923      	ldr	r3, [r4, #16]
 8021982:	429a      	cmp	r2, r3
 8021984:	bfb8      	it	lt
 8021986:	460b      	movlt	r3, r1
 8021988:	460d      	mov	r5, r1
 802198a:	bfbc      	itt	lt
 802198c:	4625      	movlt	r5, r4
 802198e:	461c      	movlt	r4, r3
 8021990:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021994:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021998:	68ab      	ldr	r3, [r5, #8]
 802199a:	6869      	ldr	r1, [r5, #4]
 802199c:	eb0a 0709 	add.w	r7, sl, r9
 80219a0:	42bb      	cmp	r3, r7
 80219a2:	b085      	sub	sp, #20
 80219a4:	bfb8      	it	lt
 80219a6:	3101      	addlt	r1, #1
 80219a8:	f7ff fe8a 	bl	80216c0 <_Balloc>
 80219ac:	b930      	cbnz	r0, 80219bc <__multiply+0x44>
 80219ae:	4602      	mov	r2, r0
 80219b0:	4b42      	ldr	r3, [pc, #264]	; (8021abc <__multiply+0x144>)
 80219b2:	4843      	ldr	r0, [pc, #268]	; (8021ac0 <__multiply+0x148>)
 80219b4:	f240 115d 	movw	r1, #349	; 0x15d
 80219b8:	f000 fe54 	bl	8022664 <__assert_func>
 80219bc:	f100 0614 	add.w	r6, r0, #20
 80219c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80219c4:	4633      	mov	r3, r6
 80219c6:	2200      	movs	r2, #0
 80219c8:	4543      	cmp	r3, r8
 80219ca:	d31e      	bcc.n	8021a0a <__multiply+0x92>
 80219cc:	f105 0c14 	add.w	ip, r5, #20
 80219d0:	f104 0314 	add.w	r3, r4, #20
 80219d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80219d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80219dc:	9202      	str	r2, [sp, #8]
 80219de:	ebac 0205 	sub.w	r2, ip, r5
 80219e2:	3a15      	subs	r2, #21
 80219e4:	f022 0203 	bic.w	r2, r2, #3
 80219e8:	3204      	adds	r2, #4
 80219ea:	f105 0115 	add.w	r1, r5, #21
 80219ee:	458c      	cmp	ip, r1
 80219f0:	bf38      	it	cc
 80219f2:	2204      	movcc	r2, #4
 80219f4:	9201      	str	r2, [sp, #4]
 80219f6:	9a02      	ldr	r2, [sp, #8]
 80219f8:	9303      	str	r3, [sp, #12]
 80219fa:	429a      	cmp	r2, r3
 80219fc:	d808      	bhi.n	8021a10 <__multiply+0x98>
 80219fe:	2f00      	cmp	r7, #0
 8021a00:	dc55      	bgt.n	8021aae <__multiply+0x136>
 8021a02:	6107      	str	r7, [r0, #16]
 8021a04:	b005      	add	sp, #20
 8021a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a0a:	f843 2b04 	str.w	r2, [r3], #4
 8021a0e:	e7db      	b.n	80219c8 <__multiply+0x50>
 8021a10:	f8b3 a000 	ldrh.w	sl, [r3]
 8021a14:	f1ba 0f00 	cmp.w	sl, #0
 8021a18:	d020      	beq.n	8021a5c <__multiply+0xe4>
 8021a1a:	f105 0e14 	add.w	lr, r5, #20
 8021a1e:	46b1      	mov	r9, r6
 8021a20:	2200      	movs	r2, #0
 8021a22:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021a26:	f8d9 b000 	ldr.w	fp, [r9]
 8021a2a:	b2a1      	uxth	r1, r4
 8021a2c:	fa1f fb8b 	uxth.w	fp, fp
 8021a30:	fb0a b101 	mla	r1, sl, r1, fp
 8021a34:	4411      	add	r1, r2
 8021a36:	f8d9 2000 	ldr.w	r2, [r9]
 8021a3a:	0c24      	lsrs	r4, r4, #16
 8021a3c:	0c12      	lsrs	r2, r2, #16
 8021a3e:	fb0a 2404 	mla	r4, sl, r4, r2
 8021a42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021a46:	b289      	uxth	r1, r1
 8021a48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021a4c:	45f4      	cmp	ip, lr
 8021a4e:	f849 1b04 	str.w	r1, [r9], #4
 8021a52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021a56:	d8e4      	bhi.n	8021a22 <__multiply+0xaa>
 8021a58:	9901      	ldr	r1, [sp, #4]
 8021a5a:	5072      	str	r2, [r6, r1]
 8021a5c:	9a03      	ldr	r2, [sp, #12]
 8021a5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021a62:	3304      	adds	r3, #4
 8021a64:	f1b9 0f00 	cmp.w	r9, #0
 8021a68:	d01f      	beq.n	8021aaa <__multiply+0x132>
 8021a6a:	6834      	ldr	r4, [r6, #0]
 8021a6c:	f105 0114 	add.w	r1, r5, #20
 8021a70:	46b6      	mov	lr, r6
 8021a72:	f04f 0a00 	mov.w	sl, #0
 8021a76:	880a      	ldrh	r2, [r1, #0]
 8021a78:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021a7c:	fb09 b202 	mla	r2, r9, r2, fp
 8021a80:	4492      	add	sl, r2
 8021a82:	b2a4      	uxth	r4, r4
 8021a84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021a88:	f84e 4b04 	str.w	r4, [lr], #4
 8021a8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8021a90:	f8be 2000 	ldrh.w	r2, [lr]
 8021a94:	0c24      	lsrs	r4, r4, #16
 8021a96:	fb09 2404 	mla	r4, r9, r4, r2
 8021a9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021a9e:	458c      	cmp	ip, r1
 8021aa0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021aa4:	d8e7      	bhi.n	8021a76 <__multiply+0xfe>
 8021aa6:	9a01      	ldr	r2, [sp, #4]
 8021aa8:	50b4      	str	r4, [r6, r2]
 8021aaa:	3604      	adds	r6, #4
 8021aac:	e7a3      	b.n	80219f6 <__multiply+0x7e>
 8021aae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d1a5      	bne.n	8021a02 <__multiply+0x8a>
 8021ab6:	3f01      	subs	r7, #1
 8021ab8:	e7a1      	b.n	80219fe <__multiply+0x86>
 8021aba:	bf00      	nop
 8021abc:	080238b8 	.word	0x080238b8
 8021ac0:	0802395f 	.word	0x0802395f

08021ac4 <__pow5mult>:
 8021ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ac8:	4615      	mov	r5, r2
 8021aca:	f012 0203 	ands.w	r2, r2, #3
 8021ace:	4606      	mov	r6, r0
 8021ad0:	460f      	mov	r7, r1
 8021ad2:	d007      	beq.n	8021ae4 <__pow5mult+0x20>
 8021ad4:	4c25      	ldr	r4, [pc, #148]	; (8021b6c <__pow5mult+0xa8>)
 8021ad6:	3a01      	subs	r2, #1
 8021ad8:	2300      	movs	r3, #0
 8021ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021ade:	f7ff fe51 	bl	8021784 <__multadd>
 8021ae2:	4607      	mov	r7, r0
 8021ae4:	10ad      	asrs	r5, r5, #2
 8021ae6:	d03d      	beq.n	8021b64 <__pow5mult+0xa0>
 8021ae8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021aea:	b97c      	cbnz	r4, 8021b0c <__pow5mult+0x48>
 8021aec:	2010      	movs	r0, #16
 8021aee:	f7fe f8e1 	bl	801fcb4 <malloc>
 8021af2:	4602      	mov	r2, r0
 8021af4:	6270      	str	r0, [r6, #36]	; 0x24
 8021af6:	b928      	cbnz	r0, 8021b04 <__pow5mult+0x40>
 8021af8:	4b1d      	ldr	r3, [pc, #116]	; (8021b70 <__pow5mult+0xac>)
 8021afa:	481e      	ldr	r0, [pc, #120]	; (8021b74 <__pow5mult+0xb0>)
 8021afc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021b00:	f000 fdb0 	bl	8022664 <__assert_func>
 8021b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021b08:	6004      	str	r4, [r0, #0]
 8021b0a:	60c4      	str	r4, [r0, #12]
 8021b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021b14:	b94c      	cbnz	r4, 8021b2a <__pow5mult+0x66>
 8021b16:	f240 2171 	movw	r1, #625	; 0x271
 8021b1a:	4630      	mov	r0, r6
 8021b1c:	f7ff ff16 	bl	802194c <__i2b>
 8021b20:	2300      	movs	r3, #0
 8021b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8021b26:	4604      	mov	r4, r0
 8021b28:	6003      	str	r3, [r0, #0]
 8021b2a:	f04f 0900 	mov.w	r9, #0
 8021b2e:	07eb      	lsls	r3, r5, #31
 8021b30:	d50a      	bpl.n	8021b48 <__pow5mult+0x84>
 8021b32:	4639      	mov	r1, r7
 8021b34:	4622      	mov	r2, r4
 8021b36:	4630      	mov	r0, r6
 8021b38:	f7ff ff1e 	bl	8021978 <__multiply>
 8021b3c:	4639      	mov	r1, r7
 8021b3e:	4680      	mov	r8, r0
 8021b40:	4630      	mov	r0, r6
 8021b42:	f7ff fdfd 	bl	8021740 <_Bfree>
 8021b46:	4647      	mov	r7, r8
 8021b48:	106d      	asrs	r5, r5, #1
 8021b4a:	d00b      	beq.n	8021b64 <__pow5mult+0xa0>
 8021b4c:	6820      	ldr	r0, [r4, #0]
 8021b4e:	b938      	cbnz	r0, 8021b60 <__pow5mult+0x9c>
 8021b50:	4622      	mov	r2, r4
 8021b52:	4621      	mov	r1, r4
 8021b54:	4630      	mov	r0, r6
 8021b56:	f7ff ff0f 	bl	8021978 <__multiply>
 8021b5a:	6020      	str	r0, [r4, #0]
 8021b5c:	f8c0 9000 	str.w	r9, [r0]
 8021b60:	4604      	mov	r4, r0
 8021b62:	e7e4      	b.n	8021b2e <__pow5mult+0x6a>
 8021b64:	4638      	mov	r0, r7
 8021b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b6a:	bf00      	nop
 8021b6c:	08023ab0 	.word	0x08023ab0
 8021b70:	08023948 	.word	0x08023948
 8021b74:	0802395f 	.word	0x0802395f

08021b78 <__lshift>:
 8021b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b7c:	460c      	mov	r4, r1
 8021b7e:	6849      	ldr	r1, [r1, #4]
 8021b80:	6923      	ldr	r3, [r4, #16]
 8021b82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021b86:	68a3      	ldr	r3, [r4, #8]
 8021b88:	4607      	mov	r7, r0
 8021b8a:	4691      	mov	r9, r2
 8021b8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021b90:	f108 0601 	add.w	r6, r8, #1
 8021b94:	42b3      	cmp	r3, r6
 8021b96:	db0b      	blt.n	8021bb0 <__lshift+0x38>
 8021b98:	4638      	mov	r0, r7
 8021b9a:	f7ff fd91 	bl	80216c0 <_Balloc>
 8021b9e:	4605      	mov	r5, r0
 8021ba0:	b948      	cbnz	r0, 8021bb6 <__lshift+0x3e>
 8021ba2:	4602      	mov	r2, r0
 8021ba4:	4b28      	ldr	r3, [pc, #160]	; (8021c48 <__lshift+0xd0>)
 8021ba6:	4829      	ldr	r0, [pc, #164]	; (8021c4c <__lshift+0xd4>)
 8021ba8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021bac:	f000 fd5a 	bl	8022664 <__assert_func>
 8021bb0:	3101      	adds	r1, #1
 8021bb2:	005b      	lsls	r3, r3, #1
 8021bb4:	e7ee      	b.n	8021b94 <__lshift+0x1c>
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	f100 0114 	add.w	r1, r0, #20
 8021bbc:	f100 0210 	add.w	r2, r0, #16
 8021bc0:	4618      	mov	r0, r3
 8021bc2:	4553      	cmp	r3, sl
 8021bc4:	db33      	blt.n	8021c2e <__lshift+0xb6>
 8021bc6:	6920      	ldr	r0, [r4, #16]
 8021bc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021bcc:	f104 0314 	add.w	r3, r4, #20
 8021bd0:	f019 091f 	ands.w	r9, r9, #31
 8021bd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021bd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021bdc:	d02b      	beq.n	8021c36 <__lshift+0xbe>
 8021bde:	f1c9 0e20 	rsb	lr, r9, #32
 8021be2:	468a      	mov	sl, r1
 8021be4:	2200      	movs	r2, #0
 8021be6:	6818      	ldr	r0, [r3, #0]
 8021be8:	fa00 f009 	lsl.w	r0, r0, r9
 8021bec:	4302      	orrs	r2, r0
 8021bee:	f84a 2b04 	str.w	r2, [sl], #4
 8021bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8021bf6:	459c      	cmp	ip, r3
 8021bf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8021bfc:	d8f3      	bhi.n	8021be6 <__lshift+0x6e>
 8021bfe:	ebac 0304 	sub.w	r3, ip, r4
 8021c02:	3b15      	subs	r3, #21
 8021c04:	f023 0303 	bic.w	r3, r3, #3
 8021c08:	3304      	adds	r3, #4
 8021c0a:	f104 0015 	add.w	r0, r4, #21
 8021c0e:	4584      	cmp	ip, r0
 8021c10:	bf38      	it	cc
 8021c12:	2304      	movcc	r3, #4
 8021c14:	50ca      	str	r2, [r1, r3]
 8021c16:	b10a      	cbz	r2, 8021c1c <__lshift+0xa4>
 8021c18:	f108 0602 	add.w	r6, r8, #2
 8021c1c:	3e01      	subs	r6, #1
 8021c1e:	4638      	mov	r0, r7
 8021c20:	612e      	str	r6, [r5, #16]
 8021c22:	4621      	mov	r1, r4
 8021c24:	f7ff fd8c 	bl	8021740 <_Bfree>
 8021c28:	4628      	mov	r0, r5
 8021c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021c32:	3301      	adds	r3, #1
 8021c34:	e7c5      	b.n	8021bc2 <__lshift+0x4a>
 8021c36:	3904      	subs	r1, #4
 8021c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021c40:	459c      	cmp	ip, r3
 8021c42:	d8f9      	bhi.n	8021c38 <__lshift+0xc0>
 8021c44:	e7ea      	b.n	8021c1c <__lshift+0xa4>
 8021c46:	bf00      	nop
 8021c48:	080238b8 	.word	0x080238b8
 8021c4c:	0802395f 	.word	0x0802395f

08021c50 <__mcmp>:
 8021c50:	b530      	push	{r4, r5, lr}
 8021c52:	6902      	ldr	r2, [r0, #16]
 8021c54:	690c      	ldr	r4, [r1, #16]
 8021c56:	1b12      	subs	r2, r2, r4
 8021c58:	d10e      	bne.n	8021c78 <__mcmp+0x28>
 8021c5a:	f100 0314 	add.w	r3, r0, #20
 8021c5e:	3114      	adds	r1, #20
 8021c60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021c64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021c68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021c6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021c70:	42a5      	cmp	r5, r4
 8021c72:	d003      	beq.n	8021c7c <__mcmp+0x2c>
 8021c74:	d305      	bcc.n	8021c82 <__mcmp+0x32>
 8021c76:	2201      	movs	r2, #1
 8021c78:	4610      	mov	r0, r2
 8021c7a:	bd30      	pop	{r4, r5, pc}
 8021c7c:	4283      	cmp	r3, r0
 8021c7e:	d3f3      	bcc.n	8021c68 <__mcmp+0x18>
 8021c80:	e7fa      	b.n	8021c78 <__mcmp+0x28>
 8021c82:	f04f 32ff 	mov.w	r2, #4294967295
 8021c86:	e7f7      	b.n	8021c78 <__mcmp+0x28>

08021c88 <__mdiff>:
 8021c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c8c:	460c      	mov	r4, r1
 8021c8e:	4606      	mov	r6, r0
 8021c90:	4611      	mov	r1, r2
 8021c92:	4620      	mov	r0, r4
 8021c94:	4617      	mov	r7, r2
 8021c96:	f7ff ffdb 	bl	8021c50 <__mcmp>
 8021c9a:	1e05      	subs	r5, r0, #0
 8021c9c:	d110      	bne.n	8021cc0 <__mdiff+0x38>
 8021c9e:	4629      	mov	r1, r5
 8021ca0:	4630      	mov	r0, r6
 8021ca2:	f7ff fd0d 	bl	80216c0 <_Balloc>
 8021ca6:	b930      	cbnz	r0, 8021cb6 <__mdiff+0x2e>
 8021ca8:	4b39      	ldr	r3, [pc, #228]	; (8021d90 <__mdiff+0x108>)
 8021caa:	4602      	mov	r2, r0
 8021cac:	f240 2132 	movw	r1, #562	; 0x232
 8021cb0:	4838      	ldr	r0, [pc, #224]	; (8021d94 <__mdiff+0x10c>)
 8021cb2:	f000 fcd7 	bl	8022664 <__assert_func>
 8021cb6:	2301      	movs	r3, #1
 8021cb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cc0:	bfa4      	itt	ge
 8021cc2:	463b      	movge	r3, r7
 8021cc4:	4627      	movge	r7, r4
 8021cc6:	4630      	mov	r0, r6
 8021cc8:	6879      	ldr	r1, [r7, #4]
 8021cca:	bfa6      	itte	ge
 8021ccc:	461c      	movge	r4, r3
 8021cce:	2500      	movge	r5, #0
 8021cd0:	2501      	movlt	r5, #1
 8021cd2:	f7ff fcf5 	bl	80216c0 <_Balloc>
 8021cd6:	b920      	cbnz	r0, 8021ce2 <__mdiff+0x5a>
 8021cd8:	4b2d      	ldr	r3, [pc, #180]	; (8021d90 <__mdiff+0x108>)
 8021cda:	4602      	mov	r2, r0
 8021cdc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021ce0:	e7e6      	b.n	8021cb0 <__mdiff+0x28>
 8021ce2:	693e      	ldr	r6, [r7, #16]
 8021ce4:	60c5      	str	r5, [r0, #12]
 8021ce6:	6925      	ldr	r5, [r4, #16]
 8021ce8:	f107 0114 	add.w	r1, r7, #20
 8021cec:	f104 0914 	add.w	r9, r4, #20
 8021cf0:	f100 0e14 	add.w	lr, r0, #20
 8021cf4:	f107 0210 	add.w	r2, r7, #16
 8021cf8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021cfc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021d00:	46f2      	mov	sl, lr
 8021d02:	2700      	movs	r7, #0
 8021d04:	f859 3b04 	ldr.w	r3, [r9], #4
 8021d08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021d0c:	fa1f f883 	uxth.w	r8, r3
 8021d10:	fa17 f78b 	uxtah	r7, r7, fp
 8021d14:	0c1b      	lsrs	r3, r3, #16
 8021d16:	eba7 0808 	sub.w	r8, r7, r8
 8021d1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021d1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021d22:	fa1f f888 	uxth.w	r8, r8
 8021d26:	141f      	asrs	r7, r3, #16
 8021d28:	454d      	cmp	r5, r9
 8021d2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021d2e:	f84a 3b04 	str.w	r3, [sl], #4
 8021d32:	d8e7      	bhi.n	8021d04 <__mdiff+0x7c>
 8021d34:	1b2b      	subs	r3, r5, r4
 8021d36:	3b15      	subs	r3, #21
 8021d38:	f023 0303 	bic.w	r3, r3, #3
 8021d3c:	3304      	adds	r3, #4
 8021d3e:	3415      	adds	r4, #21
 8021d40:	42a5      	cmp	r5, r4
 8021d42:	bf38      	it	cc
 8021d44:	2304      	movcc	r3, #4
 8021d46:	4419      	add	r1, r3
 8021d48:	4473      	add	r3, lr
 8021d4a:	469e      	mov	lr, r3
 8021d4c:	460d      	mov	r5, r1
 8021d4e:	4565      	cmp	r5, ip
 8021d50:	d30e      	bcc.n	8021d70 <__mdiff+0xe8>
 8021d52:	f10c 0203 	add.w	r2, ip, #3
 8021d56:	1a52      	subs	r2, r2, r1
 8021d58:	f022 0203 	bic.w	r2, r2, #3
 8021d5c:	3903      	subs	r1, #3
 8021d5e:	458c      	cmp	ip, r1
 8021d60:	bf38      	it	cc
 8021d62:	2200      	movcc	r2, #0
 8021d64:	441a      	add	r2, r3
 8021d66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021d6a:	b17b      	cbz	r3, 8021d8c <__mdiff+0x104>
 8021d6c:	6106      	str	r6, [r0, #16]
 8021d6e:	e7a5      	b.n	8021cbc <__mdiff+0x34>
 8021d70:	f855 8b04 	ldr.w	r8, [r5], #4
 8021d74:	fa17 f488 	uxtah	r4, r7, r8
 8021d78:	1422      	asrs	r2, r4, #16
 8021d7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021d7e:	b2a4      	uxth	r4, r4
 8021d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021d84:	f84e 4b04 	str.w	r4, [lr], #4
 8021d88:	1417      	asrs	r7, r2, #16
 8021d8a:	e7e0      	b.n	8021d4e <__mdiff+0xc6>
 8021d8c:	3e01      	subs	r6, #1
 8021d8e:	e7ea      	b.n	8021d66 <__mdiff+0xde>
 8021d90:	080238b8 	.word	0x080238b8
 8021d94:	0802395f 	.word	0x0802395f

08021d98 <__ulp>:
 8021d98:	b082      	sub	sp, #8
 8021d9a:	ed8d 0b00 	vstr	d0, [sp]
 8021d9e:	9b01      	ldr	r3, [sp, #4]
 8021da0:	4912      	ldr	r1, [pc, #72]	; (8021dec <__ulp+0x54>)
 8021da2:	4019      	ands	r1, r3
 8021da4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021da8:	2900      	cmp	r1, #0
 8021daa:	dd05      	ble.n	8021db8 <__ulp+0x20>
 8021dac:	2200      	movs	r2, #0
 8021dae:	460b      	mov	r3, r1
 8021db0:	ec43 2b10 	vmov	d0, r2, r3
 8021db4:	b002      	add	sp, #8
 8021db6:	4770      	bx	lr
 8021db8:	4249      	negs	r1, r1
 8021dba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8021dbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8021dc2:	f04f 0200 	mov.w	r2, #0
 8021dc6:	f04f 0300 	mov.w	r3, #0
 8021dca:	da04      	bge.n	8021dd6 <__ulp+0x3e>
 8021dcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8021dd0:	fa41 f300 	asr.w	r3, r1, r0
 8021dd4:	e7ec      	b.n	8021db0 <__ulp+0x18>
 8021dd6:	f1a0 0114 	sub.w	r1, r0, #20
 8021dda:	291e      	cmp	r1, #30
 8021ddc:	bfda      	itte	le
 8021dde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8021de2:	fa20 f101 	lsrle.w	r1, r0, r1
 8021de6:	2101      	movgt	r1, #1
 8021de8:	460a      	mov	r2, r1
 8021dea:	e7e1      	b.n	8021db0 <__ulp+0x18>
 8021dec:	7ff00000 	.word	0x7ff00000

08021df0 <__b2d>:
 8021df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021df2:	6905      	ldr	r5, [r0, #16]
 8021df4:	f100 0714 	add.w	r7, r0, #20
 8021df8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021dfc:	1f2e      	subs	r6, r5, #4
 8021dfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021e02:	4620      	mov	r0, r4
 8021e04:	f7ff fd52 	bl	80218ac <__hi0bits>
 8021e08:	f1c0 0320 	rsb	r3, r0, #32
 8021e0c:	280a      	cmp	r0, #10
 8021e0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8021e8c <__b2d+0x9c>
 8021e12:	600b      	str	r3, [r1, #0]
 8021e14:	dc14      	bgt.n	8021e40 <__b2d+0x50>
 8021e16:	f1c0 0e0b 	rsb	lr, r0, #11
 8021e1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8021e1e:	42b7      	cmp	r7, r6
 8021e20:	ea41 030c 	orr.w	r3, r1, ip
 8021e24:	bf34      	ite	cc
 8021e26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021e2a:	2100      	movcs	r1, #0
 8021e2c:	3015      	adds	r0, #21
 8021e2e:	fa04 f000 	lsl.w	r0, r4, r0
 8021e32:	fa21 f10e 	lsr.w	r1, r1, lr
 8021e36:	ea40 0201 	orr.w	r2, r0, r1
 8021e3a:	ec43 2b10 	vmov	d0, r2, r3
 8021e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e40:	42b7      	cmp	r7, r6
 8021e42:	bf3a      	itte	cc
 8021e44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021e48:	f1a5 0608 	subcc.w	r6, r5, #8
 8021e4c:	2100      	movcs	r1, #0
 8021e4e:	380b      	subs	r0, #11
 8021e50:	d017      	beq.n	8021e82 <__b2d+0x92>
 8021e52:	f1c0 0c20 	rsb	ip, r0, #32
 8021e56:	fa04 f500 	lsl.w	r5, r4, r0
 8021e5a:	42be      	cmp	r6, r7
 8021e5c:	fa21 f40c 	lsr.w	r4, r1, ip
 8021e60:	ea45 0504 	orr.w	r5, r5, r4
 8021e64:	bf8c      	ite	hi
 8021e66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021e6a:	2400      	movls	r4, #0
 8021e6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8021e70:	fa01 f000 	lsl.w	r0, r1, r0
 8021e74:	fa24 f40c 	lsr.w	r4, r4, ip
 8021e78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021e7c:	ea40 0204 	orr.w	r2, r0, r4
 8021e80:	e7db      	b.n	8021e3a <__b2d+0x4a>
 8021e82:	ea44 030c 	orr.w	r3, r4, ip
 8021e86:	460a      	mov	r2, r1
 8021e88:	e7d7      	b.n	8021e3a <__b2d+0x4a>
 8021e8a:	bf00      	nop
 8021e8c:	3ff00000 	.word	0x3ff00000

08021e90 <__d2b>:
 8021e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021e94:	4689      	mov	r9, r1
 8021e96:	2101      	movs	r1, #1
 8021e98:	ec57 6b10 	vmov	r6, r7, d0
 8021e9c:	4690      	mov	r8, r2
 8021e9e:	f7ff fc0f 	bl	80216c0 <_Balloc>
 8021ea2:	4604      	mov	r4, r0
 8021ea4:	b930      	cbnz	r0, 8021eb4 <__d2b+0x24>
 8021ea6:	4602      	mov	r2, r0
 8021ea8:	4b25      	ldr	r3, [pc, #148]	; (8021f40 <__d2b+0xb0>)
 8021eaa:	4826      	ldr	r0, [pc, #152]	; (8021f44 <__d2b+0xb4>)
 8021eac:	f240 310a 	movw	r1, #778	; 0x30a
 8021eb0:	f000 fbd8 	bl	8022664 <__assert_func>
 8021eb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021ebc:	bb35      	cbnz	r5, 8021f0c <__d2b+0x7c>
 8021ebe:	2e00      	cmp	r6, #0
 8021ec0:	9301      	str	r3, [sp, #4]
 8021ec2:	d028      	beq.n	8021f16 <__d2b+0x86>
 8021ec4:	4668      	mov	r0, sp
 8021ec6:	9600      	str	r6, [sp, #0]
 8021ec8:	f7ff fd10 	bl	80218ec <__lo0bits>
 8021ecc:	9900      	ldr	r1, [sp, #0]
 8021ece:	b300      	cbz	r0, 8021f12 <__d2b+0x82>
 8021ed0:	9a01      	ldr	r2, [sp, #4]
 8021ed2:	f1c0 0320 	rsb	r3, r0, #32
 8021ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8021eda:	430b      	orrs	r3, r1
 8021edc:	40c2      	lsrs	r2, r0
 8021ede:	6163      	str	r3, [r4, #20]
 8021ee0:	9201      	str	r2, [sp, #4]
 8021ee2:	9b01      	ldr	r3, [sp, #4]
 8021ee4:	61a3      	str	r3, [r4, #24]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	bf14      	ite	ne
 8021eea:	2202      	movne	r2, #2
 8021eec:	2201      	moveq	r2, #1
 8021eee:	6122      	str	r2, [r4, #16]
 8021ef0:	b1d5      	cbz	r5, 8021f28 <__d2b+0x98>
 8021ef2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021ef6:	4405      	add	r5, r0
 8021ef8:	f8c9 5000 	str.w	r5, [r9]
 8021efc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021f00:	f8c8 0000 	str.w	r0, [r8]
 8021f04:	4620      	mov	r0, r4
 8021f06:	b003      	add	sp, #12
 8021f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021f10:	e7d5      	b.n	8021ebe <__d2b+0x2e>
 8021f12:	6161      	str	r1, [r4, #20]
 8021f14:	e7e5      	b.n	8021ee2 <__d2b+0x52>
 8021f16:	a801      	add	r0, sp, #4
 8021f18:	f7ff fce8 	bl	80218ec <__lo0bits>
 8021f1c:	9b01      	ldr	r3, [sp, #4]
 8021f1e:	6163      	str	r3, [r4, #20]
 8021f20:	2201      	movs	r2, #1
 8021f22:	6122      	str	r2, [r4, #16]
 8021f24:	3020      	adds	r0, #32
 8021f26:	e7e3      	b.n	8021ef0 <__d2b+0x60>
 8021f28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021f2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021f30:	f8c9 0000 	str.w	r0, [r9]
 8021f34:	6918      	ldr	r0, [r3, #16]
 8021f36:	f7ff fcb9 	bl	80218ac <__hi0bits>
 8021f3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021f3e:	e7df      	b.n	8021f00 <__d2b+0x70>
 8021f40:	080238b8 	.word	0x080238b8
 8021f44:	0802395f 	.word	0x0802395f

08021f48 <__ratio>:
 8021f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f4c:	4688      	mov	r8, r1
 8021f4e:	4669      	mov	r1, sp
 8021f50:	4681      	mov	r9, r0
 8021f52:	f7ff ff4d 	bl	8021df0 <__b2d>
 8021f56:	a901      	add	r1, sp, #4
 8021f58:	4640      	mov	r0, r8
 8021f5a:	ec55 4b10 	vmov	r4, r5, d0
 8021f5e:	f7ff ff47 	bl	8021df0 <__b2d>
 8021f62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021f66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021f6a:	eba3 0c02 	sub.w	ip, r3, r2
 8021f6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021f72:	1a9b      	subs	r3, r3, r2
 8021f74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021f78:	ec51 0b10 	vmov	r0, r1, d0
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	bfd6      	itet	le
 8021f80:	460a      	movle	r2, r1
 8021f82:	462a      	movgt	r2, r5
 8021f84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021f88:	468b      	mov	fp, r1
 8021f8a:	462f      	mov	r7, r5
 8021f8c:	bfd4      	ite	le
 8021f8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8021f92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021f96:	4620      	mov	r0, r4
 8021f98:	ee10 2a10 	vmov	r2, s0
 8021f9c:	465b      	mov	r3, fp
 8021f9e:	4639      	mov	r1, r7
 8021fa0:	f7de fc7c 	bl	800089c <__aeabi_ddiv>
 8021fa4:	ec41 0b10 	vmov	d0, r0, r1
 8021fa8:	b003      	add	sp, #12
 8021faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021fae <__copybits>:
 8021fae:	3901      	subs	r1, #1
 8021fb0:	b570      	push	{r4, r5, r6, lr}
 8021fb2:	1149      	asrs	r1, r1, #5
 8021fb4:	6914      	ldr	r4, [r2, #16]
 8021fb6:	3101      	adds	r1, #1
 8021fb8:	f102 0314 	add.w	r3, r2, #20
 8021fbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8021fc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021fc4:	1f05      	subs	r5, r0, #4
 8021fc6:	42a3      	cmp	r3, r4
 8021fc8:	d30c      	bcc.n	8021fe4 <__copybits+0x36>
 8021fca:	1aa3      	subs	r3, r4, r2
 8021fcc:	3b11      	subs	r3, #17
 8021fce:	f023 0303 	bic.w	r3, r3, #3
 8021fd2:	3211      	adds	r2, #17
 8021fd4:	42a2      	cmp	r2, r4
 8021fd6:	bf88      	it	hi
 8021fd8:	2300      	movhi	r3, #0
 8021fda:	4418      	add	r0, r3
 8021fdc:	2300      	movs	r3, #0
 8021fde:	4288      	cmp	r0, r1
 8021fe0:	d305      	bcc.n	8021fee <__copybits+0x40>
 8021fe2:	bd70      	pop	{r4, r5, r6, pc}
 8021fe4:	f853 6b04 	ldr.w	r6, [r3], #4
 8021fe8:	f845 6f04 	str.w	r6, [r5, #4]!
 8021fec:	e7eb      	b.n	8021fc6 <__copybits+0x18>
 8021fee:	f840 3b04 	str.w	r3, [r0], #4
 8021ff2:	e7f4      	b.n	8021fde <__copybits+0x30>

08021ff4 <__any_on>:
 8021ff4:	f100 0214 	add.w	r2, r0, #20
 8021ff8:	6900      	ldr	r0, [r0, #16]
 8021ffa:	114b      	asrs	r3, r1, #5
 8021ffc:	4298      	cmp	r0, r3
 8021ffe:	b510      	push	{r4, lr}
 8022000:	db11      	blt.n	8022026 <__any_on+0x32>
 8022002:	dd0a      	ble.n	802201a <__any_on+0x26>
 8022004:	f011 011f 	ands.w	r1, r1, #31
 8022008:	d007      	beq.n	802201a <__any_on+0x26>
 802200a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802200e:	fa24 f001 	lsr.w	r0, r4, r1
 8022012:	fa00 f101 	lsl.w	r1, r0, r1
 8022016:	428c      	cmp	r4, r1
 8022018:	d10b      	bne.n	8022032 <__any_on+0x3e>
 802201a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802201e:	4293      	cmp	r3, r2
 8022020:	d803      	bhi.n	802202a <__any_on+0x36>
 8022022:	2000      	movs	r0, #0
 8022024:	bd10      	pop	{r4, pc}
 8022026:	4603      	mov	r3, r0
 8022028:	e7f7      	b.n	802201a <__any_on+0x26>
 802202a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802202e:	2900      	cmp	r1, #0
 8022030:	d0f5      	beq.n	802201e <__any_on+0x2a>
 8022032:	2001      	movs	r0, #1
 8022034:	e7f6      	b.n	8022024 <__any_on+0x30>

08022036 <__ssputs_r>:
 8022036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802203a:	688e      	ldr	r6, [r1, #8]
 802203c:	429e      	cmp	r6, r3
 802203e:	4682      	mov	sl, r0
 8022040:	460c      	mov	r4, r1
 8022042:	4690      	mov	r8, r2
 8022044:	461f      	mov	r7, r3
 8022046:	d838      	bhi.n	80220ba <__ssputs_r+0x84>
 8022048:	898a      	ldrh	r2, [r1, #12]
 802204a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802204e:	d032      	beq.n	80220b6 <__ssputs_r+0x80>
 8022050:	6825      	ldr	r5, [r4, #0]
 8022052:	6909      	ldr	r1, [r1, #16]
 8022054:	eba5 0901 	sub.w	r9, r5, r1
 8022058:	6965      	ldr	r5, [r4, #20]
 802205a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802205e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022062:	3301      	adds	r3, #1
 8022064:	444b      	add	r3, r9
 8022066:	106d      	asrs	r5, r5, #1
 8022068:	429d      	cmp	r5, r3
 802206a:	bf38      	it	cc
 802206c:	461d      	movcc	r5, r3
 802206e:	0553      	lsls	r3, r2, #21
 8022070:	d531      	bpl.n	80220d6 <__ssputs_r+0xa0>
 8022072:	4629      	mov	r1, r5
 8022074:	f7fd febe 	bl	801fdf4 <_malloc_r>
 8022078:	4606      	mov	r6, r0
 802207a:	b950      	cbnz	r0, 8022092 <__ssputs_r+0x5c>
 802207c:	230c      	movs	r3, #12
 802207e:	f8ca 3000 	str.w	r3, [sl]
 8022082:	89a3      	ldrh	r3, [r4, #12]
 8022084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022088:	81a3      	strh	r3, [r4, #12]
 802208a:	f04f 30ff 	mov.w	r0, #4294967295
 802208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022092:	6921      	ldr	r1, [r4, #16]
 8022094:	464a      	mov	r2, r9
 8022096:	f7fd fe1d 	bl	801fcd4 <memcpy>
 802209a:	89a3      	ldrh	r3, [r4, #12]
 802209c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80220a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80220a4:	81a3      	strh	r3, [r4, #12]
 80220a6:	6126      	str	r6, [r4, #16]
 80220a8:	6165      	str	r5, [r4, #20]
 80220aa:	444e      	add	r6, r9
 80220ac:	eba5 0509 	sub.w	r5, r5, r9
 80220b0:	6026      	str	r6, [r4, #0]
 80220b2:	60a5      	str	r5, [r4, #8]
 80220b4:	463e      	mov	r6, r7
 80220b6:	42be      	cmp	r6, r7
 80220b8:	d900      	bls.n	80220bc <__ssputs_r+0x86>
 80220ba:	463e      	mov	r6, r7
 80220bc:	4632      	mov	r2, r6
 80220be:	6820      	ldr	r0, [r4, #0]
 80220c0:	4641      	mov	r1, r8
 80220c2:	f7fd fe15 	bl	801fcf0 <memmove>
 80220c6:	68a3      	ldr	r3, [r4, #8]
 80220c8:	6822      	ldr	r2, [r4, #0]
 80220ca:	1b9b      	subs	r3, r3, r6
 80220cc:	4432      	add	r2, r6
 80220ce:	60a3      	str	r3, [r4, #8]
 80220d0:	6022      	str	r2, [r4, #0]
 80220d2:	2000      	movs	r0, #0
 80220d4:	e7db      	b.n	802208e <__ssputs_r+0x58>
 80220d6:	462a      	mov	r2, r5
 80220d8:	f000 faf4 	bl	80226c4 <_realloc_r>
 80220dc:	4606      	mov	r6, r0
 80220de:	2800      	cmp	r0, #0
 80220e0:	d1e1      	bne.n	80220a6 <__ssputs_r+0x70>
 80220e2:	6921      	ldr	r1, [r4, #16]
 80220e4:	4650      	mov	r0, sl
 80220e6:	f7fd fe35 	bl	801fd54 <_free_r>
 80220ea:	e7c7      	b.n	802207c <__ssputs_r+0x46>

080220ec <_svfiprintf_r>:
 80220ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220f0:	4698      	mov	r8, r3
 80220f2:	898b      	ldrh	r3, [r1, #12]
 80220f4:	061b      	lsls	r3, r3, #24
 80220f6:	b09d      	sub	sp, #116	; 0x74
 80220f8:	4607      	mov	r7, r0
 80220fa:	460d      	mov	r5, r1
 80220fc:	4614      	mov	r4, r2
 80220fe:	d50e      	bpl.n	802211e <_svfiprintf_r+0x32>
 8022100:	690b      	ldr	r3, [r1, #16]
 8022102:	b963      	cbnz	r3, 802211e <_svfiprintf_r+0x32>
 8022104:	2140      	movs	r1, #64	; 0x40
 8022106:	f7fd fe75 	bl	801fdf4 <_malloc_r>
 802210a:	6028      	str	r0, [r5, #0]
 802210c:	6128      	str	r0, [r5, #16]
 802210e:	b920      	cbnz	r0, 802211a <_svfiprintf_r+0x2e>
 8022110:	230c      	movs	r3, #12
 8022112:	603b      	str	r3, [r7, #0]
 8022114:	f04f 30ff 	mov.w	r0, #4294967295
 8022118:	e0d1      	b.n	80222be <_svfiprintf_r+0x1d2>
 802211a:	2340      	movs	r3, #64	; 0x40
 802211c:	616b      	str	r3, [r5, #20]
 802211e:	2300      	movs	r3, #0
 8022120:	9309      	str	r3, [sp, #36]	; 0x24
 8022122:	2320      	movs	r3, #32
 8022124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022128:	f8cd 800c 	str.w	r8, [sp, #12]
 802212c:	2330      	movs	r3, #48	; 0x30
 802212e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80222d8 <_svfiprintf_r+0x1ec>
 8022132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022136:	f04f 0901 	mov.w	r9, #1
 802213a:	4623      	mov	r3, r4
 802213c:	469a      	mov	sl, r3
 802213e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022142:	b10a      	cbz	r2, 8022148 <_svfiprintf_r+0x5c>
 8022144:	2a25      	cmp	r2, #37	; 0x25
 8022146:	d1f9      	bne.n	802213c <_svfiprintf_r+0x50>
 8022148:	ebba 0b04 	subs.w	fp, sl, r4
 802214c:	d00b      	beq.n	8022166 <_svfiprintf_r+0x7a>
 802214e:	465b      	mov	r3, fp
 8022150:	4622      	mov	r2, r4
 8022152:	4629      	mov	r1, r5
 8022154:	4638      	mov	r0, r7
 8022156:	f7ff ff6e 	bl	8022036 <__ssputs_r>
 802215a:	3001      	adds	r0, #1
 802215c:	f000 80aa 	beq.w	80222b4 <_svfiprintf_r+0x1c8>
 8022160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022162:	445a      	add	r2, fp
 8022164:	9209      	str	r2, [sp, #36]	; 0x24
 8022166:	f89a 3000 	ldrb.w	r3, [sl]
 802216a:	2b00      	cmp	r3, #0
 802216c:	f000 80a2 	beq.w	80222b4 <_svfiprintf_r+0x1c8>
 8022170:	2300      	movs	r3, #0
 8022172:	f04f 32ff 	mov.w	r2, #4294967295
 8022176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802217a:	f10a 0a01 	add.w	sl, sl, #1
 802217e:	9304      	str	r3, [sp, #16]
 8022180:	9307      	str	r3, [sp, #28]
 8022182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022186:	931a      	str	r3, [sp, #104]	; 0x68
 8022188:	4654      	mov	r4, sl
 802218a:	2205      	movs	r2, #5
 802218c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022190:	4851      	ldr	r0, [pc, #324]	; (80222d8 <_svfiprintf_r+0x1ec>)
 8022192:	f7de f84d 	bl	8000230 <memchr>
 8022196:	9a04      	ldr	r2, [sp, #16]
 8022198:	b9d8      	cbnz	r0, 80221d2 <_svfiprintf_r+0xe6>
 802219a:	06d0      	lsls	r0, r2, #27
 802219c:	bf44      	itt	mi
 802219e:	2320      	movmi	r3, #32
 80221a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221a4:	0711      	lsls	r1, r2, #28
 80221a6:	bf44      	itt	mi
 80221a8:	232b      	movmi	r3, #43	; 0x2b
 80221aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221ae:	f89a 3000 	ldrb.w	r3, [sl]
 80221b2:	2b2a      	cmp	r3, #42	; 0x2a
 80221b4:	d015      	beq.n	80221e2 <_svfiprintf_r+0xf6>
 80221b6:	9a07      	ldr	r2, [sp, #28]
 80221b8:	4654      	mov	r4, sl
 80221ba:	2000      	movs	r0, #0
 80221bc:	f04f 0c0a 	mov.w	ip, #10
 80221c0:	4621      	mov	r1, r4
 80221c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80221c6:	3b30      	subs	r3, #48	; 0x30
 80221c8:	2b09      	cmp	r3, #9
 80221ca:	d94e      	bls.n	802226a <_svfiprintf_r+0x17e>
 80221cc:	b1b0      	cbz	r0, 80221fc <_svfiprintf_r+0x110>
 80221ce:	9207      	str	r2, [sp, #28]
 80221d0:	e014      	b.n	80221fc <_svfiprintf_r+0x110>
 80221d2:	eba0 0308 	sub.w	r3, r0, r8
 80221d6:	fa09 f303 	lsl.w	r3, r9, r3
 80221da:	4313      	orrs	r3, r2
 80221dc:	9304      	str	r3, [sp, #16]
 80221de:	46a2      	mov	sl, r4
 80221e0:	e7d2      	b.n	8022188 <_svfiprintf_r+0x9c>
 80221e2:	9b03      	ldr	r3, [sp, #12]
 80221e4:	1d19      	adds	r1, r3, #4
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	9103      	str	r1, [sp, #12]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	bfbb      	ittet	lt
 80221ee:	425b      	neglt	r3, r3
 80221f0:	f042 0202 	orrlt.w	r2, r2, #2
 80221f4:	9307      	strge	r3, [sp, #28]
 80221f6:	9307      	strlt	r3, [sp, #28]
 80221f8:	bfb8      	it	lt
 80221fa:	9204      	strlt	r2, [sp, #16]
 80221fc:	7823      	ldrb	r3, [r4, #0]
 80221fe:	2b2e      	cmp	r3, #46	; 0x2e
 8022200:	d10c      	bne.n	802221c <_svfiprintf_r+0x130>
 8022202:	7863      	ldrb	r3, [r4, #1]
 8022204:	2b2a      	cmp	r3, #42	; 0x2a
 8022206:	d135      	bne.n	8022274 <_svfiprintf_r+0x188>
 8022208:	9b03      	ldr	r3, [sp, #12]
 802220a:	1d1a      	adds	r2, r3, #4
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	9203      	str	r2, [sp, #12]
 8022210:	2b00      	cmp	r3, #0
 8022212:	bfb8      	it	lt
 8022214:	f04f 33ff 	movlt.w	r3, #4294967295
 8022218:	3402      	adds	r4, #2
 802221a:	9305      	str	r3, [sp, #20]
 802221c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80222e8 <_svfiprintf_r+0x1fc>
 8022220:	7821      	ldrb	r1, [r4, #0]
 8022222:	2203      	movs	r2, #3
 8022224:	4650      	mov	r0, sl
 8022226:	f7de f803 	bl	8000230 <memchr>
 802222a:	b140      	cbz	r0, 802223e <_svfiprintf_r+0x152>
 802222c:	2340      	movs	r3, #64	; 0x40
 802222e:	eba0 000a 	sub.w	r0, r0, sl
 8022232:	fa03 f000 	lsl.w	r0, r3, r0
 8022236:	9b04      	ldr	r3, [sp, #16]
 8022238:	4303      	orrs	r3, r0
 802223a:	3401      	adds	r4, #1
 802223c:	9304      	str	r3, [sp, #16]
 802223e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022242:	4826      	ldr	r0, [pc, #152]	; (80222dc <_svfiprintf_r+0x1f0>)
 8022244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022248:	2206      	movs	r2, #6
 802224a:	f7dd fff1 	bl	8000230 <memchr>
 802224e:	2800      	cmp	r0, #0
 8022250:	d038      	beq.n	80222c4 <_svfiprintf_r+0x1d8>
 8022252:	4b23      	ldr	r3, [pc, #140]	; (80222e0 <_svfiprintf_r+0x1f4>)
 8022254:	bb1b      	cbnz	r3, 802229e <_svfiprintf_r+0x1b2>
 8022256:	9b03      	ldr	r3, [sp, #12]
 8022258:	3307      	adds	r3, #7
 802225a:	f023 0307 	bic.w	r3, r3, #7
 802225e:	3308      	adds	r3, #8
 8022260:	9303      	str	r3, [sp, #12]
 8022262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022264:	4433      	add	r3, r6
 8022266:	9309      	str	r3, [sp, #36]	; 0x24
 8022268:	e767      	b.n	802213a <_svfiprintf_r+0x4e>
 802226a:	fb0c 3202 	mla	r2, ip, r2, r3
 802226e:	460c      	mov	r4, r1
 8022270:	2001      	movs	r0, #1
 8022272:	e7a5      	b.n	80221c0 <_svfiprintf_r+0xd4>
 8022274:	2300      	movs	r3, #0
 8022276:	3401      	adds	r4, #1
 8022278:	9305      	str	r3, [sp, #20]
 802227a:	4619      	mov	r1, r3
 802227c:	f04f 0c0a 	mov.w	ip, #10
 8022280:	4620      	mov	r0, r4
 8022282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022286:	3a30      	subs	r2, #48	; 0x30
 8022288:	2a09      	cmp	r2, #9
 802228a:	d903      	bls.n	8022294 <_svfiprintf_r+0x1a8>
 802228c:	2b00      	cmp	r3, #0
 802228e:	d0c5      	beq.n	802221c <_svfiprintf_r+0x130>
 8022290:	9105      	str	r1, [sp, #20]
 8022292:	e7c3      	b.n	802221c <_svfiprintf_r+0x130>
 8022294:	fb0c 2101 	mla	r1, ip, r1, r2
 8022298:	4604      	mov	r4, r0
 802229a:	2301      	movs	r3, #1
 802229c:	e7f0      	b.n	8022280 <_svfiprintf_r+0x194>
 802229e:	ab03      	add	r3, sp, #12
 80222a0:	9300      	str	r3, [sp, #0]
 80222a2:	462a      	mov	r2, r5
 80222a4:	4b0f      	ldr	r3, [pc, #60]	; (80222e4 <_svfiprintf_r+0x1f8>)
 80222a6:	a904      	add	r1, sp, #16
 80222a8:	4638      	mov	r0, r7
 80222aa:	f3af 8000 	nop.w
 80222ae:	1c42      	adds	r2, r0, #1
 80222b0:	4606      	mov	r6, r0
 80222b2:	d1d6      	bne.n	8022262 <_svfiprintf_r+0x176>
 80222b4:	89ab      	ldrh	r3, [r5, #12]
 80222b6:	065b      	lsls	r3, r3, #25
 80222b8:	f53f af2c 	bmi.w	8022114 <_svfiprintf_r+0x28>
 80222bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222be:	b01d      	add	sp, #116	; 0x74
 80222c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c4:	ab03      	add	r3, sp, #12
 80222c6:	9300      	str	r3, [sp, #0]
 80222c8:	462a      	mov	r2, r5
 80222ca:	4b06      	ldr	r3, [pc, #24]	; (80222e4 <_svfiprintf_r+0x1f8>)
 80222cc:	a904      	add	r1, sp, #16
 80222ce:	4638      	mov	r0, r7
 80222d0:	f000 f87a 	bl	80223c8 <_printf_i>
 80222d4:	e7eb      	b.n	80222ae <_svfiprintf_r+0x1c2>
 80222d6:	bf00      	nop
 80222d8:	08023abc 	.word	0x08023abc
 80222dc:	08023ac6 	.word	0x08023ac6
 80222e0:	00000000 	.word	0x00000000
 80222e4:	08022037 	.word	0x08022037
 80222e8:	08023ac2 	.word	0x08023ac2

080222ec <_printf_common>:
 80222ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222f0:	4616      	mov	r6, r2
 80222f2:	4699      	mov	r9, r3
 80222f4:	688a      	ldr	r2, [r1, #8]
 80222f6:	690b      	ldr	r3, [r1, #16]
 80222f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80222fc:	4293      	cmp	r3, r2
 80222fe:	bfb8      	it	lt
 8022300:	4613      	movlt	r3, r2
 8022302:	6033      	str	r3, [r6, #0]
 8022304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022308:	4607      	mov	r7, r0
 802230a:	460c      	mov	r4, r1
 802230c:	b10a      	cbz	r2, 8022312 <_printf_common+0x26>
 802230e:	3301      	adds	r3, #1
 8022310:	6033      	str	r3, [r6, #0]
 8022312:	6823      	ldr	r3, [r4, #0]
 8022314:	0699      	lsls	r1, r3, #26
 8022316:	bf42      	ittt	mi
 8022318:	6833      	ldrmi	r3, [r6, #0]
 802231a:	3302      	addmi	r3, #2
 802231c:	6033      	strmi	r3, [r6, #0]
 802231e:	6825      	ldr	r5, [r4, #0]
 8022320:	f015 0506 	ands.w	r5, r5, #6
 8022324:	d106      	bne.n	8022334 <_printf_common+0x48>
 8022326:	f104 0a19 	add.w	sl, r4, #25
 802232a:	68e3      	ldr	r3, [r4, #12]
 802232c:	6832      	ldr	r2, [r6, #0]
 802232e:	1a9b      	subs	r3, r3, r2
 8022330:	42ab      	cmp	r3, r5
 8022332:	dc26      	bgt.n	8022382 <_printf_common+0x96>
 8022334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022338:	1e13      	subs	r3, r2, #0
 802233a:	6822      	ldr	r2, [r4, #0]
 802233c:	bf18      	it	ne
 802233e:	2301      	movne	r3, #1
 8022340:	0692      	lsls	r2, r2, #26
 8022342:	d42b      	bmi.n	802239c <_printf_common+0xb0>
 8022344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022348:	4649      	mov	r1, r9
 802234a:	4638      	mov	r0, r7
 802234c:	47c0      	blx	r8
 802234e:	3001      	adds	r0, #1
 8022350:	d01e      	beq.n	8022390 <_printf_common+0xa4>
 8022352:	6823      	ldr	r3, [r4, #0]
 8022354:	68e5      	ldr	r5, [r4, #12]
 8022356:	6832      	ldr	r2, [r6, #0]
 8022358:	f003 0306 	and.w	r3, r3, #6
 802235c:	2b04      	cmp	r3, #4
 802235e:	bf08      	it	eq
 8022360:	1aad      	subeq	r5, r5, r2
 8022362:	68a3      	ldr	r3, [r4, #8]
 8022364:	6922      	ldr	r2, [r4, #16]
 8022366:	bf0c      	ite	eq
 8022368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802236c:	2500      	movne	r5, #0
 802236e:	4293      	cmp	r3, r2
 8022370:	bfc4      	itt	gt
 8022372:	1a9b      	subgt	r3, r3, r2
 8022374:	18ed      	addgt	r5, r5, r3
 8022376:	2600      	movs	r6, #0
 8022378:	341a      	adds	r4, #26
 802237a:	42b5      	cmp	r5, r6
 802237c:	d11a      	bne.n	80223b4 <_printf_common+0xc8>
 802237e:	2000      	movs	r0, #0
 8022380:	e008      	b.n	8022394 <_printf_common+0xa8>
 8022382:	2301      	movs	r3, #1
 8022384:	4652      	mov	r2, sl
 8022386:	4649      	mov	r1, r9
 8022388:	4638      	mov	r0, r7
 802238a:	47c0      	blx	r8
 802238c:	3001      	adds	r0, #1
 802238e:	d103      	bne.n	8022398 <_printf_common+0xac>
 8022390:	f04f 30ff 	mov.w	r0, #4294967295
 8022394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022398:	3501      	adds	r5, #1
 802239a:	e7c6      	b.n	802232a <_printf_common+0x3e>
 802239c:	18e1      	adds	r1, r4, r3
 802239e:	1c5a      	adds	r2, r3, #1
 80223a0:	2030      	movs	r0, #48	; 0x30
 80223a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80223a6:	4422      	add	r2, r4
 80223a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80223ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80223b0:	3302      	adds	r3, #2
 80223b2:	e7c7      	b.n	8022344 <_printf_common+0x58>
 80223b4:	2301      	movs	r3, #1
 80223b6:	4622      	mov	r2, r4
 80223b8:	4649      	mov	r1, r9
 80223ba:	4638      	mov	r0, r7
 80223bc:	47c0      	blx	r8
 80223be:	3001      	adds	r0, #1
 80223c0:	d0e6      	beq.n	8022390 <_printf_common+0xa4>
 80223c2:	3601      	adds	r6, #1
 80223c4:	e7d9      	b.n	802237a <_printf_common+0x8e>
	...

080223c8 <_printf_i>:
 80223c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80223cc:	460c      	mov	r4, r1
 80223ce:	4691      	mov	r9, r2
 80223d0:	7e27      	ldrb	r7, [r4, #24]
 80223d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80223d4:	2f78      	cmp	r7, #120	; 0x78
 80223d6:	4680      	mov	r8, r0
 80223d8:	469a      	mov	sl, r3
 80223da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80223de:	d807      	bhi.n	80223f0 <_printf_i+0x28>
 80223e0:	2f62      	cmp	r7, #98	; 0x62
 80223e2:	d80a      	bhi.n	80223fa <_printf_i+0x32>
 80223e4:	2f00      	cmp	r7, #0
 80223e6:	f000 80d8 	beq.w	802259a <_printf_i+0x1d2>
 80223ea:	2f58      	cmp	r7, #88	; 0x58
 80223ec:	f000 80a3 	beq.w	8022536 <_printf_i+0x16e>
 80223f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80223f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80223f8:	e03a      	b.n	8022470 <_printf_i+0xa8>
 80223fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80223fe:	2b15      	cmp	r3, #21
 8022400:	d8f6      	bhi.n	80223f0 <_printf_i+0x28>
 8022402:	a001      	add	r0, pc, #4	; (adr r0, 8022408 <_printf_i+0x40>)
 8022404:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022408:	08022461 	.word	0x08022461
 802240c:	08022475 	.word	0x08022475
 8022410:	080223f1 	.word	0x080223f1
 8022414:	080223f1 	.word	0x080223f1
 8022418:	080223f1 	.word	0x080223f1
 802241c:	080223f1 	.word	0x080223f1
 8022420:	08022475 	.word	0x08022475
 8022424:	080223f1 	.word	0x080223f1
 8022428:	080223f1 	.word	0x080223f1
 802242c:	080223f1 	.word	0x080223f1
 8022430:	080223f1 	.word	0x080223f1
 8022434:	08022581 	.word	0x08022581
 8022438:	080224a5 	.word	0x080224a5
 802243c:	08022563 	.word	0x08022563
 8022440:	080223f1 	.word	0x080223f1
 8022444:	080223f1 	.word	0x080223f1
 8022448:	080225a3 	.word	0x080225a3
 802244c:	080223f1 	.word	0x080223f1
 8022450:	080224a5 	.word	0x080224a5
 8022454:	080223f1 	.word	0x080223f1
 8022458:	080223f1 	.word	0x080223f1
 802245c:	0802256b 	.word	0x0802256b
 8022460:	680b      	ldr	r3, [r1, #0]
 8022462:	1d1a      	adds	r2, r3, #4
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	600a      	str	r2, [r1, #0]
 8022468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802246c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022470:	2301      	movs	r3, #1
 8022472:	e0a3      	b.n	80225bc <_printf_i+0x1f4>
 8022474:	6825      	ldr	r5, [r4, #0]
 8022476:	6808      	ldr	r0, [r1, #0]
 8022478:	062e      	lsls	r6, r5, #24
 802247a:	f100 0304 	add.w	r3, r0, #4
 802247e:	d50a      	bpl.n	8022496 <_printf_i+0xce>
 8022480:	6805      	ldr	r5, [r0, #0]
 8022482:	600b      	str	r3, [r1, #0]
 8022484:	2d00      	cmp	r5, #0
 8022486:	da03      	bge.n	8022490 <_printf_i+0xc8>
 8022488:	232d      	movs	r3, #45	; 0x2d
 802248a:	426d      	negs	r5, r5
 802248c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022490:	485e      	ldr	r0, [pc, #376]	; (802260c <_printf_i+0x244>)
 8022492:	230a      	movs	r3, #10
 8022494:	e019      	b.n	80224ca <_printf_i+0x102>
 8022496:	f015 0f40 	tst.w	r5, #64	; 0x40
 802249a:	6805      	ldr	r5, [r0, #0]
 802249c:	600b      	str	r3, [r1, #0]
 802249e:	bf18      	it	ne
 80224a0:	b22d      	sxthne	r5, r5
 80224a2:	e7ef      	b.n	8022484 <_printf_i+0xbc>
 80224a4:	680b      	ldr	r3, [r1, #0]
 80224a6:	6825      	ldr	r5, [r4, #0]
 80224a8:	1d18      	adds	r0, r3, #4
 80224aa:	6008      	str	r0, [r1, #0]
 80224ac:	0628      	lsls	r0, r5, #24
 80224ae:	d501      	bpl.n	80224b4 <_printf_i+0xec>
 80224b0:	681d      	ldr	r5, [r3, #0]
 80224b2:	e002      	b.n	80224ba <_printf_i+0xf2>
 80224b4:	0669      	lsls	r1, r5, #25
 80224b6:	d5fb      	bpl.n	80224b0 <_printf_i+0xe8>
 80224b8:	881d      	ldrh	r5, [r3, #0]
 80224ba:	4854      	ldr	r0, [pc, #336]	; (802260c <_printf_i+0x244>)
 80224bc:	2f6f      	cmp	r7, #111	; 0x6f
 80224be:	bf0c      	ite	eq
 80224c0:	2308      	moveq	r3, #8
 80224c2:	230a      	movne	r3, #10
 80224c4:	2100      	movs	r1, #0
 80224c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80224ca:	6866      	ldr	r6, [r4, #4]
 80224cc:	60a6      	str	r6, [r4, #8]
 80224ce:	2e00      	cmp	r6, #0
 80224d0:	bfa2      	ittt	ge
 80224d2:	6821      	ldrge	r1, [r4, #0]
 80224d4:	f021 0104 	bicge.w	r1, r1, #4
 80224d8:	6021      	strge	r1, [r4, #0]
 80224da:	b90d      	cbnz	r5, 80224e0 <_printf_i+0x118>
 80224dc:	2e00      	cmp	r6, #0
 80224de:	d04d      	beq.n	802257c <_printf_i+0x1b4>
 80224e0:	4616      	mov	r6, r2
 80224e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80224e6:	fb03 5711 	mls	r7, r3, r1, r5
 80224ea:	5dc7      	ldrb	r7, [r0, r7]
 80224ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80224f0:	462f      	mov	r7, r5
 80224f2:	42bb      	cmp	r3, r7
 80224f4:	460d      	mov	r5, r1
 80224f6:	d9f4      	bls.n	80224e2 <_printf_i+0x11a>
 80224f8:	2b08      	cmp	r3, #8
 80224fa:	d10b      	bne.n	8022514 <_printf_i+0x14c>
 80224fc:	6823      	ldr	r3, [r4, #0]
 80224fe:	07df      	lsls	r7, r3, #31
 8022500:	d508      	bpl.n	8022514 <_printf_i+0x14c>
 8022502:	6923      	ldr	r3, [r4, #16]
 8022504:	6861      	ldr	r1, [r4, #4]
 8022506:	4299      	cmp	r1, r3
 8022508:	bfde      	ittt	le
 802250a:	2330      	movle	r3, #48	; 0x30
 802250c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022514:	1b92      	subs	r2, r2, r6
 8022516:	6122      	str	r2, [r4, #16]
 8022518:	f8cd a000 	str.w	sl, [sp]
 802251c:	464b      	mov	r3, r9
 802251e:	aa03      	add	r2, sp, #12
 8022520:	4621      	mov	r1, r4
 8022522:	4640      	mov	r0, r8
 8022524:	f7ff fee2 	bl	80222ec <_printf_common>
 8022528:	3001      	adds	r0, #1
 802252a:	d14c      	bne.n	80225c6 <_printf_i+0x1fe>
 802252c:	f04f 30ff 	mov.w	r0, #4294967295
 8022530:	b004      	add	sp, #16
 8022532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022536:	4835      	ldr	r0, [pc, #212]	; (802260c <_printf_i+0x244>)
 8022538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802253c:	6823      	ldr	r3, [r4, #0]
 802253e:	680e      	ldr	r6, [r1, #0]
 8022540:	061f      	lsls	r7, r3, #24
 8022542:	f856 5b04 	ldr.w	r5, [r6], #4
 8022546:	600e      	str	r6, [r1, #0]
 8022548:	d514      	bpl.n	8022574 <_printf_i+0x1ac>
 802254a:	07d9      	lsls	r1, r3, #31
 802254c:	bf44      	itt	mi
 802254e:	f043 0320 	orrmi.w	r3, r3, #32
 8022552:	6023      	strmi	r3, [r4, #0]
 8022554:	b91d      	cbnz	r5, 802255e <_printf_i+0x196>
 8022556:	6823      	ldr	r3, [r4, #0]
 8022558:	f023 0320 	bic.w	r3, r3, #32
 802255c:	6023      	str	r3, [r4, #0]
 802255e:	2310      	movs	r3, #16
 8022560:	e7b0      	b.n	80224c4 <_printf_i+0xfc>
 8022562:	6823      	ldr	r3, [r4, #0]
 8022564:	f043 0320 	orr.w	r3, r3, #32
 8022568:	6023      	str	r3, [r4, #0]
 802256a:	2378      	movs	r3, #120	; 0x78
 802256c:	4828      	ldr	r0, [pc, #160]	; (8022610 <_printf_i+0x248>)
 802256e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022572:	e7e3      	b.n	802253c <_printf_i+0x174>
 8022574:	065e      	lsls	r6, r3, #25
 8022576:	bf48      	it	mi
 8022578:	b2ad      	uxthmi	r5, r5
 802257a:	e7e6      	b.n	802254a <_printf_i+0x182>
 802257c:	4616      	mov	r6, r2
 802257e:	e7bb      	b.n	80224f8 <_printf_i+0x130>
 8022580:	680b      	ldr	r3, [r1, #0]
 8022582:	6826      	ldr	r6, [r4, #0]
 8022584:	6960      	ldr	r0, [r4, #20]
 8022586:	1d1d      	adds	r5, r3, #4
 8022588:	600d      	str	r5, [r1, #0]
 802258a:	0635      	lsls	r5, r6, #24
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	d501      	bpl.n	8022594 <_printf_i+0x1cc>
 8022590:	6018      	str	r0, [r3, #0]
 8022592:	e002      	b.n	802259a <_printf_i+0x1d2>
 8022594:	0671      	lsls	r1, r6, #25
 8022596:	d5fb      	bpl.n	8022590 <_printf_i+0x1c8>
 8022598:	8018      	strh	r0, [r3, #0]
 802259a:	2300      	movs	r3, #0
 802259c:	6123      	str	r3, [r4, #16]
 802259e:	4616      	mov	r6, r2
 80225a0:	e7ba      	b.n	8022518 <_printf_i+0x150>
 80225a2:	680b      	ldr	r3, [r1, #0]
 80225a4:	1d1a      	adds	r2, r3, #4
 80225a6:	600a      	str	r2, [r1, #0]
 80225a8:	681e      	ldr	r6, [r3, #0]
 80225aa:	6862      	ldr	r2, [r4, #4]
 80225ac:	2100      	movs	r1, #0
 80225ae:	4630      	mov	r0, r6
 80225b0:	f7dd fe3e 	bl	8000230 <memchr>
 80225b4:	b108      	cbz	r0, 80225ba <_printf_i+0x1f2>
 80225b6:	1b80      	subs	r0, r0, r6
 80225b8:	6060      	str	r0, [r4, #4]
 80225ba:	6863      	ldr	r3, [r4, #4]
 80225bc:	6123      	str	r3, [r4, #16]
 80225be:	2300      	movs	r3, #0
 80225c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225c4:	e7a8      	b.n	8022518 <_printf_i+0x150>
 80225c6:	6923      	ldr	r3, [r4, #16]
 80225c8:	4632      	mov	r2, r6
 80225ca:	4649      	mov	r1, r9
 80225cc:	4640      	mov	r0, r8
 80225ce:	47d0      	blx	sl
 80225d0:	3001      	adds	r0, #1
 80225d2:	d0ab      	beq.n	802252c <_printf_i+0x164>
 80225d4:	6823      	ldr	r3, [r4, #0]
 80225d6:	079b      	lsls	r3, r3, #30
 80225d8:	d413      	bmi.n	8022602 <_printf_i+0x23a>
 80225da:	68e0      	ldr	r0, [r4, #12]
 80225dc:	9b03      	ldr	r3, [sp, #12]
 80225de:	4298      	cmp	r0, r3
 80225e0:	bfb8      	it	lt
 80225e2:	4618      	movlt	r0, r3
 80225e4:	e7a4      	b.n	8022530 <_printf_i+0x168>
 80225e6:	2301      	movs	r3, #1
 80225e8:	4632      	mov	r2, r6
 80225ea:	4649      	mov	r1, r9
 80225ec:	4640      	mov	r0, r8
 80225ee:	47d0      	blx	sl
 80225f0:	3001      	adds	r0, #1
 80225f2:	d09b      	beq.n	802252c <_printf_i+0x164>
 80225f4:	3501      	adds	r5, #1
 80225f6:	68e3      	ldr	r3, [r4, #12]
 80225f8:	9903      	ldr	r1, [sp, #12]
 80225fa:	1a5b      	subs	r3, r3, r1
 80225fc:	42ab      	cmp	r3, r5
 80225fe:	dcf2      	bgt.n	80225e6 <_printf_i+0x21e>
 8022600:	e7eb      	b.n	80225da <_printf_i+0x212>
 8022602:	2500      	movs	r5, #0
 8022604:	f104 0619 	add.w	r6, r4, #25
 8022608:	e7f5      	b.n	80225f6 <_printf_i+0x22e>
 802260a:	bf00      	nop
 802260c:	08023acd 	.word	0x08023acd
 8022610:	08023ade 	.word	0x08023ade

08022614 <_read_r>:
 8022614:	b538      	push	{r3, r4, r5, lr}
 8022616:	4d07      	ldr	r5, [pc, #28]	; (8022634 <_read_r+0x20>)
 8022618:	4604      	mov	r4, r0
 802261a:	4608      	mov	r0, r1
 802261c:	4611      	mov	r1, r2
 802261e:	2200      	movs	r2, #0
 8022620:	602a      	str	r2, [r5, #0]
 8022622:	461a      	mov	r2, r3
 8022624:	f7fd f8e2 	bl	801f7ec <_read>
 8022628:	1c43      	adds	r3, r0, #1
 802262a:	d102      	bne.n	8022632 <_read_r+0x1e>
 802262c:	682b      	ldr	r3, [r5, #0]
 802262e:	b103      	cbz	r3, 8022632 <_read_r+0x1e>
 8022630:	6023      	str	r3, [r4, #0]
 8022632:	bd38      	pop	{r3, r4, r5, pc}
 8022634:	2001d474 	.word	0x2001d474

08022638 <nan>:
 8022638:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022640 <nan+0x8>
 802263c:	4770      	bx	lr
 802263e:	bf00      	nop
 8022640:	00000000 	.word	0x00000000
 8022644:	7ff80000 	.word	0x7ff80000

08022648 <__ascii_wctomb>:
 8022648:	b149      	cbz	r1, 802265e <__ascii_wctomb+0x16>
 802264a:	2aff      	cmp	r2, #255	; 0xff
 802264c:	bf85      	ittet	hi
 802264e:	238a      	movhi	r3, #138	; 0x8a
 8022650:	6003      	strhi	r3, [r0, #0]
 8022652:	700a      	strbls	r2, [r1, #0]
 8022654:	f04f 30ff 	movhi.w	r0, #4294967295
 8022658:	bf98      	it	ls
 802265a:	2001      	movls	r0, #1
 802265c:	4770      	bx	lr
 802265e:	4608      	mov	r0, r1
 8022660:	4770      	bx	lr
	...

08022664 <__assert_func>:
 8022664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022666:	4614      	mov	r4, r2
 8022668:	461a      	mov	r2, r3
 802266a:	4b09      	ldr	r3, [pc, #36]	; (8022690 <__assert_func+0x2c>)
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	4605      	mov	r5, r0
 8022670:	68d8      	ldr	r0, [r3, #12]
 8022672:	b14c      	cbz	r4, 8022688 <__assert_func+0x24>
 8022674:	4b07      	ldr	r3, [pc, #28]	; (8022694 <__assert_func+0x30>)
 8022676:	9100      	str	r1, [sp, #0]
 8022678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802267c:	4906      	ldr	r1, [pc, #24]	; (8022698 <__assert_func+0x34>)
 802267e:	462b      	mov	r3, r5
 8022680:	f000 f80e 	bl	80226a0 <fiprintf>
 8022684:	f000 f99e 	bl	80229c4 <abort>
 8022688:	4b04      	ldr	r3, [pc, #16]	; (802269c <__assert_func+0x38>)
 802268a:	461c      	mov	r4, r3
 802268c:	e7f3      	b.n	8022676 <__assert_func+0x12>
 802268e:	bf00      	nop
 8022690:	200002b8 	.word	0x200002b8
 8022694:	08023aef 	.word	0x08023aef
 8022698:	08023afc 	.word	0x08023afc
 802269c:	08023b2a 	.word	0x08023b2a

080226a0 <fiprintf>:
 80226a0:	b40e      	push	{r1, r2, r3}
 80226a2:	b503      	push	{r0, r1, lr}
 80226a4:	4601      	mov	r1, r0
 80226a6:	ab03      	add	r3, sp, #12
 80226a8:	4805      	ldr	r0, [pc, #20]	; (80226c0 <fiprintf+0x20>)
 80226aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80226ae:	6800      	ldr	r0, [r0, #0]
 80226b0:	9301      	str	r3, [sp, #4]
 80226b2:	f000 f857 	bl	8022764 <_vfiprintf_r>
 80226b6:	b002      	add	sp, #8
 80226b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80226bc:	b003      	add	sp, #12
 80226be:	4770      	bx	lr
 80226c0:	200002b8 	.word	0x200002b8

080226c4 <_realloc_r>:
 80226c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226c6:	4607      	mov	r7, r0
 80226c8:	4614      	mov	r4, r2
 80226ca:	460e      	mov	r6, r1
 80226cc:	b921      	cbnz	r1, 80226d8 <_realloc_r+0x14>
 80226ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80226d2:	4611      	mov	r1, r2
 80226d4:	f7fd bb8e 	b.w	801fdf4 <_malloc_r>
 80226d8:	b922      	cbnz	r2, 80226e4 <_realloc_r+0x20>
 80226da:	f7fd fb3b 	bl	801fd54 <_free_r>
 80226de:	4625      	mov	r5, r4
 80226e0:	4628      	mov	r0, r5
 80226e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226e4:	f000 f975 	bl	80229d2 <_malloc_usable_size_r>
 80226e8:	42a0      	cmp	r0, r4
 80226ea:	d20f      	bcs.n	802270c <_realloc_r+0x48>
 80226ec:	4621      	mov	r1, r4
 80226ee:	4638      	mov	r0, r7
 80226f0:	f7fd fb80 	bl	801fdf4 <_malloc_r>
 80226f4:	4605      	mov	r5, r0
 80226f6:	2800      	cmp	r0, #0
 80226f8:	d0f2      	beq.n	80226e0 <_realloc_r+0x1c>
 80226fa:	4631      	mov	r1, r6
 80226fc:	4622      	mov	r2, r4
 80226fe:	f7fd fae9 	bl	801fcd4 <memcpy>
 8022702:	4631      	mov	r1, r6
 8022704:	4638      	mov	r0, r7
 8022706:	f7fd fb25 	bl	801fd54 <_free_r>
 802270a:	e7e9      	b.n	80226e0 <_realloc_r+0x1c>
 802270c:	4635      	mov	r5, r6
 802270e:	e7e7      	b.n	80226e0 <_realloc_r+0x1c>

08022710 <__sfputc_r>:
 8022710:	6893      	ldr	r3, [r2, #8]
 8022712:	3b01      	subs	r3, #1
 8022714:	2b00      	cmp	r3, #0
 8022716:	b410      	push	{r4}
 8022718:	6093      	str	r3, [r2, #8]
 802271a:	da08      	bge.n	802272e <__sfputc_r+0x1e>
 802271c:	6994      	ldr	r4, [r2, #24]
 802271e:	42a3      	cmp	r3, r4
 8022720:	db01      	blt.n	8022726 <__sfputc_r+0x16>
 8022722:	290a      	cmp	r1, #10
 8022724:	d103      	bne.n	802272e <__sfputc_r+0x1e>
 8022726:	f85d 4b04 	ldr.w	r4, [sp], #4
 802272a:	f7fe bb25 	b.w	8020d78 <__swbuf_r>
 802272e:	6813      	ldr	r3, [r2, #0]
 8022730:	1c58      	adds	r0, r3, #1
 8022732:	6010      	str	r0, [r2, #0]
 8022734:	7019      	strb	r1, [r3, #0]
 8022736:	4608      	mov	r0, r1
 8022738:	f85d 4b04 	ldr.w	r4, [sp], #4
 802273c:	4770      	bx	lr

0802273e <__sfputs_r>:
 802273e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022740:	4606      	mov	r6, r0
 8022742:	460f      	mov	r7, r1
 8022744:	4614      	mov	r4, r2
 8022746:	18d5      	adds	r5, r2, r3
 8022748:	42ac      	cmp	r4, r5
 802274a:	d101      	bne.n	8022750 <__sfputs_r+0x12>
 802274c:	2000      	movs	r0, #0
 802274e:	e007      	b.n	8022760 <__sfputs_r+0x22>
 8022750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022754:	463a      	mov	r2, r7
 8022756:	4630      	mov	r0, r6
 8022758:	f7ff ffda 	bl	8022710 <__sfputc_r>
 802275c:	1c43      	adds	r3, r0, #1
 802275e:	d1f3      	bne.n	8022748 <__sfputs_r+0xa>
 8022760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022764 <_vfiprintf_r>:
 8022764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022768:	460d      	mov	r5, r1
 802276a:	b09d      	sub	sp, #116	; 0x74
 802276c:	4614      	mov	r4, r2
 802276e:	4698      	mov	r8, r3
 8022770:	4606      	mov	r6, r0
 8022772:	b118      	cbz	r0, 802277c <_vfiprintf_r+0x18>
 8022774:	6983      	ldr	r3, [r0, #24]
 8022776:	b90b      	cbnz	r3, 802277c <_vfiprintf_r+0x18>
 8022778:	f7fd f972 	bl	801fa60 <__sinit>
 802277c:	4b89      	ldr	r3, [pc, #548]	; (80229a4 <_vfiprintf_r+0x240>)
 802277e:	429d      	cmp	r5, r3
 8022780:	d11b      	bne.n	80227ba <_vfiprintf_r+0x56>
 8022782:	6875      	ldr	r5, [r6, #4]
 8022784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022786:	07d9      	lsls	r1, r3, #31
 8022788:	d405      	bmi.n	8022796 <_vfiprintf_r+0x32>
 802278a:	89ab      	ldrh	r3, [r5, #12]
 802278c:	059a      	lsls	r2, r3, #22
 802278e:	d402      	bmi.n	8022796 <_vfiprintf_r+0x32>
 8022790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022792:	f7fd fa28 	bl	801fbe6 <__retarget_lock_acquire_recursive>
 8022796:	89ab      	ldrh	r3, [r5, #12]
 8022798:	071b      	lsls	r3, r3, #28
 802279a:	d501      	bpl.n	80227a0 <_vfiprintf_r+0x3c>
 802279c:	692b      	ldr	r3, [r5, #16]
 802279e:	b9eb      	cbnz	r3, 80227dc <_vfiprintf_r+0x78>
 80227a0:	4629      	mov	r1, r5
 80227a2:	4630      	mov	r0, r6
 80227a4:	f7fe fb4c 	bl	8020e40 <__swsetup_r>
 80227a8:	b1c0      	cbz	r0, 80227dc <_vfiprintf_r+0x78>
 80227aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227ac:	07dc      	lsls	r4, r3, #31
 80227ae:	d50e      	bpl.n	80227ce <_vfiprintf_r+0x6a>
 80227b0:	f04f 30ff 	mov.w	r0, #4294967295
 80227b4:	b01d      	add	sp, #116	; 0x74
 80227b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ba:	4b7b      	ldr	r3, [pc, #492]	; (80229a8 <_vfiprintf_r+0x244>)
 80227bc:	429d      	cmp	r5, r3
 80227be:	d101      	bne.n	80227c4 <_vfiprintf_r+0x60>
 80227c0:	68b5      	ldr	r5, [r6, #8]
 80227c2:	e7df      	b.n	8022784 <_vfiprintf_r+0x20>
 80227c4:	4b79      	ldr	r3, [pc, #484]	; (80229ac <_vfiprintf_r+0x248>)
 80227c6:	429d      	cmp	r5, r3
 80227c8:	bf08      	it	eq
 80227ca:	68f5      	ldreq	r5, [r6, #12]
 80227cc:	e7da      	b.n	8022784 <_vfiprintf_r+0x20>
 80227ce:	89ab      	ldrh	r3, [r5, #12]
 80227d0:	0598      	lsls	r0, r3, #22
 80227d2:	d4ed      	bmi.n	80227b0 <_vfiprintf_r+0x4c>
 80227d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227d6:	f7fd fa07 	bl	801fbe8 <__retarget_lock_release_recursive>
 80227da:	e7e9      	b.n	80227b0 <_vfiprintf_r+0x4c>
 80227dc:	2300      	movs	r3, #0
 80227de:	9309      	str	r3, [sp, #36]	; 0x24
 80227e0:	2320      	movs	r3, #32
 80227e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80227e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80227ea:	2330      	movs	r3, #48	; 0x30
 80227ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80229b0 <_vfiprintf_r+0x24c>
 80227f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80227f4:	f04f 0901 	mov.w	r9, #1
 80227f8:	4623      	mov	r3, r4
 80227fa:	469a      	mov	sl, r3
 80227fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022800:	b10a      	cbz	r2, 8022806 <_vfiprintf_r+0xa2>
 8022802:	2a25      	cmp	r2, #37	; 0x25
 8022804:	d1f9      	bne.n	80227fa <_vfiprintf_r+0x96>
 8022806:	ebba 0b04 	subs.w	fp, sl, r4
 802280a:	d00b      	beq.n	8022824 <_vfiprintf_r+0xc0>
 802280c:	465b      	mov	r3, fp
 802280e:	4622      	mov	r2, r4
 8022810:	4629      	mov	r1, r5
 8022812:	4630      	mov	r0, r6
 8022814:	f7ff ff93 	bl	802273e <__sfputs_r>
 8022818:	3001      	adds	r0, #1
 802281a:	f000 80aa 	beq.w	8022972 <_vfiprintf_r+0x20e>
 802281e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022820:	445a      	add	r2, fp
 8022822:	9209      	str	r2, [sp, #36]	; 0x24
 8022824:	f89a 3000 	ldrb.w	r3, [sl]
 8022828:	2b00      	cmp	r3, #0
 802282a:	f000 80a2 	beq.w	8022972 <_vfiprintf_r+0x20e>
 802282e:	2300      	movs	r3, #0
 8022830:	f04f 32ff 	mov.w	r2, #4294967295
 8022834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022838:	f10a 0a01 	add.w	sl, sl, #1
 802283c:	9304      	str	r3, [sp, #16]
 802283e:	9307      	str	r3, [sp, #28]
 8022840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022844:	931a      	str	r3, [sp, #104]	; 0x68
 8022846:	4654      	mov	r4, sl
 8022848:	2205      	movs	r2, #5
 802284a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802284e:	4858      	ldr	r0, [pc, #352]	; (80229b0 <_vfiprintf_r+0x24c>)
 8022850:	f7dd fcee 	bl	8000230 <memchr>
 8022854:	9a04      	ldr	r2, [sp, #16]
 8022856:	b9d8      	cbnz	r0, 8022890 <_vfiprintf_r+0x12c>
 8022858:	06d1      	lsls	r1, r2, #27
 802285a:	bf44      	itt	mi
 802285c:	2320      	movmi	r3, #32
 802285e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022862:	0713      	lsls	r3, r2, #28
 8022864:	bf44      	itt	mi
 8022866:	232b      	movmi	r3, #43	; 0x2b
 8022868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802286c:	f89a 3000 	ldrb.w	r3, [sl]
 8022870:	2b2a      	cmp	r3, #42	; 0x2a
 8022872:	d015      	beq.n	80228a0 <_vfiprintf_r+0x13c>
 8022874:	9a07      	ldr	r2, [sp, #28]
 8022876:	4654      	mov	r4, sl
 8022878:	2000      	movs	r0, #0
 802287a:	f04f 0c0a 	mov.w	ip, #10
 802287e:	4621      	mov	r1, r4
 8022880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022884:	3b30      	subs	r3, #48	; 0x30
 8022886:	2b09      	cmp	r3, #9
 8022888:	d94e      	bls.n	8022928 <_vfiprintf_r+0x1c4>
 802288a:	b1b0      	cbz	r0, 80228ba <_vfiprintf_r+0x156>
 802288c:	9207      	str	r2, [sp, #28]
 802288e:	e014      	b.n	80228ba <_vfiprintf_r+0x156>
 8022890:	eba0 0308 	sub.w	r3, r0, r8
 8022894:	fa09 f303 	lsl.w	r3, r9, r3
 8022898:	4313      	orrs	r3, r2
 802289a:	9304      	str	r3, [sp, #16]
 802289c:	46a2      	mov	sl, r4
 802289e:	e7d2      	b.n	8022846 <_vfiprintf_r+0xe2>
 80228a0:	9b03      	ldr	r3, [sp, #12]
 80228a2:	1d19      	adds	r1, r3, #4
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	9103      	str	r1, [sp, #12]
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	bfbb      	ittet	lt
 80228ac:	425b      	neglt	r3, r3
 80228ae:	f042 0202 	orrlt.w	r2, r2, #2
 80228b2:	9307      	strge	r3, [sp, #28]
 80228b4:	9307      	strlt	r3, [sp, #28]
 80228b6:	bfb8      	it	lt
 80228b8:	9204      	strlt	r2, [sp, #16]
 80228ba:	7823      	ldrb	r3, [r4, #0]
 80228bc:	2b2e      	cmp	r3, #46	; 0x2e
 80228be:	d10c      	bne.n	80228da <_vfiprintf_r+0x176>
 80228c0:	7863      	ldrb	r3, [r4, #1]
 80228c2:	2b2a      	cmp	r3, #42	; 0x2a
 80228c4:	d135      	bne.n	8022932 <_vfiprintf_r+0x1ce>
 80228c6:	9b03      	ldr	r3, [sp, #12]
 80228c8:	1d1a      	adds	r2, r3, #4
 80228ca:	681b      	ldr	r3, [r3, #0]
 80228cc:	9203      	str	r2, [sp, #12]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	bfb8      	it	lt
 80228d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80228d6:	3402      	adds	r4, #2
 80228d8:	9305      	str	r3, [sp, #20]
 80228da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80229c0 <_vfiprintf_r+0x25c>
 80228de:	7821      	ldrb	r1, [r4, #0]
 80228e0:	2203      	movs	r2, #3
 80228e2:	4650      	mov	r0, sl
 80228e4:	f7dd fca4 	bl	8000230 <memchr>
 80228e8:	b140      	cbz	r0, 80228fc <_vfiprintf_r+0x198>
 80228ea:	2340      	movs	r3, #64	; 0x40
 80228ec:	eba0 000a 	sub.w	r0, r0, sl
 80228f0:	fa03 f000 	lsl.w	r0, r3, r0
 80228f4:	9b04      	ldr	r3, [sp, #16]
 80228f6:	4303      	orrs	r3, r0
 80228f8:	3401      	adds	r4, #1
 80228fa:	9304      	str	r3, [sp, #16]
 80228fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022900:	482c      	ldr	r0, [pc, #176]	; (80229b4 <_vfiprintf_r+0x250>)
 8022902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022906:	2206      	movs	r2, #6
 8022908:	f7dd fc92 	bl	8000230 <memchr>
 802290c:	2800      	cmp	r0, #0
 802290e:	d03f      	beq.n	8022990 <_vfiprintf_r+0x22c>
 8022910:	4b29      	ldr	r3, [pc, #164]	; (80229b8 <_vfiprintf_r+0x254>)
 8022912:	bb1b      	cbnz	r3, 802295c <_vfiprintf_r+0x1f8>
 8022914:	9b03      	ldr	r3, [sp, #12]
 8022916:	3307      	adds	r3, #7
 8022918:	f023 0307 	bic.w	r3, r3, #7
 802291c:	3308      	adds	r3, #8
 802291e:	9303      	str	r3, [sp, #12]
 8022920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022922:	443b      	add	r3, r7
 8022924:	9309      	str	r3, [sp, #36]	; 0x24
 8022926:	e767      	b.n	80227f8 <_vfiprintf_r+0x94>
 8022928:	fb0c 3202 	mla	r2, ip, r2, r3
 802292c:	460c      	mov	r4, r1
 802292e:	2001      	movs	r0, #1
 8022930:	e7a5      	b.n	802287e <_vfiprintf_r+0x11a>
 8022932:	2300      	movs	r3, #0
 8022934:	3401      	adds	r4, #1
 8022936:	9305      	str	r3, [sp, #20]
 8022938:	4619      	mov	r1, r3
 802293a:	f04f 0c0a 	mov.w	ip, #10
 802293e:	4620      	mov	r0, r4
 8022940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022944:	3a30      	subs	r2, #48	; 0x30
 8022946:	2a09      	cmp	r2, #9
 8022948:	d903      	bls.n	8022952 <_vfiprintf_r+0x1ee>
 802294a:	2b00      	cmp	r3, #0
 802294c:	d0c5      	beq.n	80228da <_vfiprintf_r+0x176>
 802294e:	9105      	str	r1, [sp, #20]
 8022950:	e7c3      	b.n	80228da <_vfiprintf_r+0x176>
 8022952:	fb0c 2101 	mla	r1, ip, r1, r2
 8022956:	4604      	mov	r4, r0
 8022958:	2301      	movs	r3, #1
 802295a:	e7f0      	b.n	802293e <_vfiprintf_r+0x1da>
 802295c:	ab03      	add	r3, sp, #12
 802295e:	9300      	str	r3, [sp, #0]
 8022960:	462a      	mov	r2, r5
 8022962:	4b16      	ldr	r3, [pc, #88]	; (80229bc <_vfiprintf_r+0x258>)
 8022964:	a904      	add	r1, sp, #16
 8022966:	4630      	mov	r0, r6
 8022968:	f3af 8000 	nop.w
 802296c:	4607      	mov	r7, r0
 802296e:	1c78      	adds	r0, r7, #1
 8022970:	d1d6      	bne.n	8022920 <_vfiprintf_r+0x1bc>
 8022972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022974:	07d9      	lsls	r1, r3, #31
 8022976:	d405      	bmi.n	8022984 <_vfiprintf_r+0x220>
 8022978:	89ab      	ldrh	r3, [r5, #12]
 802297a:	059a      	lsls	r2, r3, #22
 802297c:	d402      	bmi.n	8022984 <_vfiprintf_r+0x220>
 802297e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022980:	f7fd f932 	bl	801fbe8 <__retarget_lock_release_recursive>
 8022984:	89ab      	ldrh	r3, [r5, #12]
 8022986:	065b      	lsls	r3, r3, #25
 8022988:	f53f af12 	bmi.w	80227b0 <_vfiprintf_r+0x4c>
 802298c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802298e:	e711      	b.n	80227b4 <_vfiprintf_r+0x50>
 8022990:	ab03      	add	r3, sp, #12
 8022992:	9300      	str	r3, [sp, #0]
 8022994:	462a      	mov	r2, r5
 8022996:	4b09      	ldr	r3, [pc, #36]	; (80229bc <_vfiprintf_r+0x258>)
 8022998:	a904      	add	r1, sp, #16
 802299a:	4630      	mov	r0, r6
 802299c:	f7ff fd14 	bl	80223c8 <_printf_i>
 80229a0:	e7e4      	b.n	802296c <_vfiprintf_r+0x208>
 80229a2:	bf00      	nop
 80229a4:	08023818 	.word	0x08023818
 80229a8:	08023838 	.word	0x08023838
 80229ac:	080237f8 	.word	0x080237f8
 80229b0:	08023abc 	.word	0x08023abc
 80229b4:	08023ac6 	.word	0x08023ac6
 80229b8:	00000000 	.word	0x00000000
 80229bc:	0802273f 	.word	0x0802273f
 80229c0:	08023ac2 	.word	0x08023ac2

080229c4 <abort>:
 80229c4:	b508      	push	{r3, lr}
 80229c6:	2006      	movs	r0, #6
 80229c8:	f000 f834 	bl	8022a34 <raise>
 80229cc:	2001      	movs	r0, #1
 80229ce:	f7fc feb3 	bl	801f738 <_exit>

080229d2 <_malloc_usable_size_r>:
 80229d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229d6:	1f18      	subs	r0, r3, #4
 80229d8:	2b00      	cmp	r3, #0
 80229da:	bfbc      	itt	lt
 80229dc:	580b      	ldrlt	r3, [r1, r0]
 80229de:	18c0      	addlt	r0, r0, r3
 80229e0:	4770      	bx	lr

080229e2 <_raise_r>:
 80229e2:	291f      	cmp	r1, #31
 80229e4:	b538      	push	{r3, r4, r5, lr}
 80229e6:	4604      	mov	r4, r0
 80229e8:	460d      	mov	r5, r1
 80229ea:	d904      	bls.n	80229f6 <_raise_r+0x14>
 80229ec:	2316      	movs	r3, #22
 80229ee:	6003      	str	r3, [r0, #0]
 80229f0:	f04f 30ff 	mov.w	r0, #4294967295
 80229f4:	bd38      	pop	{r3, r4, r5, pc}
 80229f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80229f8:	b112      	cbz	r2, 8022a00 <_raise_r+0x1e>
 80229fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80229fe:	b94b      	cbnz	r3, 8022a14 <_raise_r+0x32>
 8022a00:	4620      	mov	r0, r4
 8022a02:	f000 f831 	bl	8022a68 <_getpid_r>
 8022a06:	462a      	mov	r2, r5
 8022a08:	4601      	mov	r1, r0
 8022a0a:	4620      	mov	r0, r4
 8022a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022a10:	f000 b818 	b.w	8022a44 <_kill_r>
 8022a14:	2b01      	cmp	r3, #1
 8022a16:	d00a      	beq.n	8022a2e <_raise_r+0x4c>
 8022a18:	1c59      	adds	r1, r3, #1
 8022a1a:	d103      	bne.n	8022a24 <_raise_r+0x42>
 8022a1c:	2316      	movs	r3, #22
 8022a1e:	6003      	str	r3, [r0, #0]
 8022a20:	2001      	movs	r0, #1
 8022a22:	e7e7      	b.n	80229f4 <_raise_r+0x12>
 8022a24:	2400      	movs	r4, #0
 8022a26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022a2a:	4628      	mov	r0, r5
 8022a2c:	4798      	blx	r3
 8022a2e:	2000      	movs	r0, #0
 8022a30:	e7e0      	b.n	80229f4 <_raise_r+0x12>
	...

08022a34 <raise>:
 8022a34:	4b02      	ldr	r3, [pc, #8]	; (8022a40 <raise+0xc>)
 8022a36:	4601      	mov	r1, r0
 8022a38:	6818      	ldr	r0, [r3, #0]
 8022a3a:	f7ff bfd2 	b.w	80229e2 <_raise_r>
 8022a3e:	bf00      	nop
 8022a40:	200002b8 	.word	0x200002b8

08022a44 <_kill_r>:
 8022a44:	b538      	push	{r3, r4, r5, lr}
 8022a46:	4d07      	ldr	r5, [pc, #28]	; (8022a64 <_kill_r+0x20>)
 8022a48:	2300      	movs	r3, #0
 8022a4a:	4604      	mov	r4, r0
 8022a4c:	4608      	mov	r0, r1
 8022a4e:	4611      	mov	r1, r2
 8022a50:	602b      	str	r3, [r5, #0]
 8022a52:	f7fc fe61 	bl	801f718 <_kill>
 8022a56:	1c43      	adds	r3, r0, #1
 8022a58:	d102      	bne.n	8022a60 <_kill_r+0x1c>
 8022a5a:	682b      	ldr	r3, [r5, #0]
 8022a5c:	b103      	cbz	r3, 8022a60 <_kill_r+0x1c>
 8022a5e:	6023      	str	r3, [r4, #0]
 8022a60:	bd38      	pop	{r3, r4, r5, pc}
 8022a62:	bf00      	nop
 8022a64:	2001d474 	.word	0x2001d474

08022a68 <_getpid_r>:
 8022a68:	f7fc be4e 	b.w	801f708 <_getpid>

08022a6c <_init>:
 8022a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a6e:	bf00      	nop
 8022a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022a72:	bc08      	pop	{r3}
 8022a74:	469e      	mov	lr, r3
 8022a76:	4770      	bx	lr

08022a78 <_fini>:
 8022a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a7a:	bf00      	nop
 8022a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022a7e:	bc08      	pop	{r3}
 8022a80:	469e      	mov	lr, r3
 8022a82:	4770      	bx	lr
